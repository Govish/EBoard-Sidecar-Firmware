
Bargraph Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08006038  08006038  00016038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060b0  080060b0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080060b0  080060b0  000160b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060b8  080060b8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060b8  080060b8  000160b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060bc  080060bc  000160bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080060c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049c8  20000010  080060d0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  200049d8  080060d0  000249d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166ba  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d68  00000000  00000000  000366fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001168  00000000  00000000  00039468  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001020  00000000  00000000  0003a5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017cee  00000000  00000000  0003b5f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e0cf  00000000  00000000  000532de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000930bb  00000000  00000000  000613ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f4468  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048d8  00000000  00000000  000f44e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006020 	.word	0x08006020

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006020 	.word	0x08006020

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_d2f>:
 8000558:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800055c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000560:	bf24      	itt	cs
 8000562:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000566:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800056a:	d90d      	bls.n	8000588 <__aeabi_d2f+0x30>
 800056c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000570:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000574:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000578:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800057c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000580:	bf08      	it	eq
 8000582:	f020 0001 	biceq.w	r0, r0, #1
 8000586:	4770      	bx	lr
 8000588:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800058c:	d121      	bne.n	80005d2 <__aeabi_d2f+0x7a>
 800058e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000592:	bfbc      	itt	lt
 8000594:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000598:	4770      	bxlt	lr
 800059a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005a2:	f1c2 0218 	rsb	r2, r2, #24
 80005a6:	f1c2 0c20 	rsb	ip, r2, #32
 80005aa:	fa10 f30c 	lsls.w	r3, r0, ip
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	bf18      	it	ne
 80005b4:	f040 0001 	orrne.w	r0, r0, #1
 80005b8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005bc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005c0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005c4:	ea40 000c 	orr.w	r0, r0, ip
 80005c8:	fa23 f302 	lsr.w	r3, r3, r2
 80005cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005d0:	e7cc      	b.n	800056c <__aeabi_d2f+0x14>
 80005d2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005d6:	d107      	bne.n	80005e8 <__aeabi_d2f+0x90>
 80005d8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005dc:	bf1e      	ittt	ne
 80005de:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005e2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005e6:	4770      	bxne	lr
 80005e8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop

080005f8 <__aeabi_uldivmod>:
 80005f8:	b953      	cbnz	r3, 8000610 <__aeabi_uldivmod+0x18>
 80005fa:	b94a      	cbnz	r2, 8000610 <__aeabi_uldivmod+0x18>
 80005fc:	2900      	cmp	r1, #0
 80005fe:	bf08      	it	eq
 8000600:	2800      	cmpeq	r0, #0
 8000602:	bf1c      	itt	ne
 8000604:	f04f 31ff 	movne.w	r1, #4294967295
 8000608:	f04f 30ff 	movne.w	r0, #4294967295
 800060c:	f000 b972 	b.w	80008f4 <__aeabi_idiv0>
 8000610:	f1ad 0c08 	sub.w	ip, sp, #8
 8000614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000618:	f000 f806 	bl	8000628 <__udivmoddi4>
 800061c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <__udivmoddi4>:
 8000628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800062c:	9e08      	ldr	r6, [sp, #32]
 800062e:	4604      	mov	r4, r0
 8000630:	4688      	mov	r8, r1
 8000632:	2b00      	cmp	r3, #0
 8000634:	d14b      	bne.n	80006ce <__udivmoddi4+0xa6>
 8000636:	428a      	cmp	r2, r1
 8000638:	4615      	mov	r5, r2
 800063a:	d967      	bls.n	800070c <__udivmoddi4+0xe4>
 800063c:	fab2 f282 	clz	r2, r2
 8000640:	b14a      	cbz	r2, 8000656 <__udivmoddi4+0x2e>
 8000642:	f1c2 0720 	rsb	r7, r2, #32
 8000646:	fa01 f302 	lsl.w	r3, r1, r2
 800064a:	fa20 f707 	lsr.w	r7, r0, r7
 800064e:	4095      	lsls	r5, r2
 8000650:	ea47 0803 	orr.w	r8, r7, r3
 8000654:	4094      	lsls	r4, r2
 8000656:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800065a:	0c23      	lsrs	r3, r4, #16
 800065c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000660:	fa1f fc85 	uxth.w	ip, r5
 8000664:	fb0e 8817 	mls	r8, lr, r7, r8
 8000668:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800066c:	fb07 f10c 	mul.w	r1, r7, ip
 8000670:	4299      	cmp	r1, r3
 8000672:	d909      	bls.n	8000688 <__udivmoddi4+0x60>
 8000674:	18eb      	adds	r3, r5, r3
 8000676:	f107 30ff 	add.w	r0, r7, #4294967295
 800067a:	f080 811b 	bcs.w	80008b4 <__udivmoddi4+0x28c>
 800067e:	4299      	cmp	r1, r3
 8000680:	f240 8118 	bls.w	80008b4 <__udivmoddi4+0x28c>
 8000684:	3f02      	subs	r7, #2
 8000686:	442b      	add	r3, r5
 8000688:	1a5b      	subs	r3, r3, r1
 800068a:	b2a4      	uxth	r4, r4
 800068c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000690:	fb0e 3310 	mls	r3, lr, r0, r3
 8000694:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000698:	fb00 fc0c 	mul.w	ip, r0, ip
 800069c:	45a4      	cmp	ip, r4
 800069e:	d909      	bls.n	80006b4 <__udivmoddi4+0x8c>
 80006a0:	192c      	adds	r4, r5, r4
 80006a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006a6:	f080 8107 	bcs.w	80008b8 <__udivmoddi4+0x290>
 80006aa:	45a4      	cmp	ip, r4
 80006ac:	f240 8104 	bls.w	80008b8 <__udivmoddi4+0x290>
 80006b0:	3802      	subs	r0, #2
 80006b2:	442c      	add	r4, r5
 80006b4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006b8:	eba4 040c 	sub.w	r4, r4, ip
 80006bc:	2700      	movs	r7, #0
 80006be:	b11e      	cbz	r6, 80006c8 <__udivmoddi4+0xa0>
 80006c0:	40d4      	lsrs	r4, r2
 80006c2:	2300      	movs	r3, #0
 80006c4:	e9c6 4300 	strd	r4, r3, [r6]
 80006c8:	4639      	mov	r1, r7
 80006ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d909      	bls.n	80006e6 <__udivmoddi4+0xbe>
 80006d2:	2e00      	cmp	r6, #0
 80006d4:	f000 80eb 	beq.w	80008ae <__udivmoddi4+0x286>
 80006d8:	2700      	movs	r7, #0
 80006da:	e9c6 0100 	strd	r0, r1, [r6]
 80006de:	4638      	mov	r0, r7
 80006e0:	4639      	mov	r1, r7
 80006e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006e6:	fab3 f783 	clz	r7, r3
 80006ea:	2f00      	cmp	r7, #0
 80006ec:	d147      	bne.n	800077e <__udivmoddi4+0x156>
 80006ee:	428b      	cmp	r3, r1
 80006f0:	d302      	bcc.n	80006f8 <__udivmoddi4+0xd0>
 80006f2:	4282      	cmp	r2, r0
 80006f4:	f200 80fa 	bhi.w	80008ec <__udivmoddi4+0x2c4>
 80006f8:	1a84      	subs	r4, r0, r2
 80006fa:	eb61 0303 	sbc.w	r3, r1, r3
 80006fe:	2001      	movs	r0, #1
 8000700:	4698      	mov	r8, r3
 8000702:	2e00      	cmp	r6, #0
 8000704:	d0e0      	beq.n	80006c8 <__udivmoddi4+0xa0>
 8000706:	e9c6 4800 	strd	r4, r8, [r6]
 800070a:	e7dd      	b.n	80006c8 <__udivmoddi4+0xa0>
 800070c:	b902      	cbnz	r2, 8000710 <__udivmoddi4+0xe8>
 800070e:	deff      	udf	#255	; 0xff
 8000710:	fab2 f282 	clz	r2, r2
 8000714:	2a00      	cmp	r2, #0
 8000716:	f040 808f 	bne.w	8000838 <__udivmoddi4+0x210>
 800071a:	1b49      	subs	r1, r1, r5
 800071c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000720:	fa1f f885 	uxth.w	r8, r5
 8000724:	2701      	movs	r7, #1
 8000726:	fbb1 fcfe 	udiv	ip, r1, lr
 800072a:	0c23      	lsrs	r3, r4, #16
 800072c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000730:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000734:	fb08 f10c 	mul.w	r1, r8, ip
 8000738:	4299      	cmp	r1, r3
 800073a:	d907      	bls.n	800074c <__udivmoddi4+0x124>
 800073c:	18eb      	adds	r3, r5, r3
 800073e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000742:	d202      	bcs.n	800074a <__udivmoddi4+0x122>
 8000744:	4299      	cmp	r1, r3
 8000746:	f200 80cd 	bhi.w	80008e4 <__udivmoddi4+0x2bc>
 800074a:	4684      	mov	ip, r0
 800074c:	1a59      	subs	r1, r3, r1
 800074e:	b2a3      	uxth	r3, r4
 8000750:	fbb1 f0fe 	udiv	r0, r1, lr
 8000754:	fb0e 1410 	mls	r4, lr, r0, r1
 8000758:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800075c:	fb08 f800 	mul.w	r8, r8, r0
 8000760:	45a0      	cmp	r8, r4
 8000762:	d907      	bls.n	8000774 <__udivmoddi4+0x14c>
 8000764:	192c      	adds	r4, r5, r4
 8000766:	f100 33ff 	add.w	r3, r0, #4294967295
 800076a:	d202      	bcs.n	8000772 <__udivmoddi4+0x14a>
 800076c:	45a0      	cmp	r8, r4
 800076e:	f200 80b6 	bhi.w	80008de <__udivmoddi4+0x2b6>
 8000772:	4618      	mov	r0, r3
 8000774:	eba4 0408 	sub.w	r4, r4, r8
 8000778:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800077c:	e79f      	b.n	80006be <__udivmoddi4+0x96>
 800077e:	f1c7 0c20 	rsb	ip, r7, #32
 8000782:	40bb      	lsls	r3, r7
 8000784:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000788:	ea4e 0e03 	orr.w	lr, lr, r3
 800078c:	fa01 f407 	lsl.w	r4, r1, r7
 8000790:	fa20 f50c 	lsr.w	r5, r0, ip
 8000794:	fa21 f30c 	lsr.w	r3, r1, ip
 8000798:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800079c:	4325      	orrs	r5, r4
 800079e:	fbb3 f9f8 	udiv	r9, r3, r8
 80007a2:	0c2c      	lsrs	r4, r5, #16
 80007a4:	fb08 3319 	mls	r3, r8, r9, r3
 80007a8:	fa1f fa8e 	uxth.w	sl, lr
 80007ac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007b0:	fb09 f40a 	mul.w	r4, r9, sl
 80007b4:	429c      	cmp	r4, r3
 80007b6:	fa02 f207 	lsl.w	r2, r2, r7
 80007ba:	fa00 f107 	lsl.w	r1, r0, r7
 80007be:	d90b      	bls.n	80007d8 <__udivmoddi4+0x1b0>
 80007c0:	eb1e 0303 	adds.w	r3, lr, r3
 80007c4:	f109 30ff 	add.w	r0, r9, #4294967295
 80007c8:	f080 8087 	bcs.w	80008da <__udivmoddi4+0x2b2>
 80007cc:	429c      	cmp	r4, r3
 80007ce:	f240 8084 	bls.w	80008da <__udivmoddi4+0x2b2>
 80007d2:	f1a9 0902 	sub.w	r9, r9, #2
 80007d6:	4473      	add	r3, lr
 80007d8:	1b1b      	subs	r3, r3, r4
 80007da:	b2ad      	uxth	r5, r5
 80007dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80007e0:	fb08 3310 	mls	r3, r8, r0, r3
 80007e4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007e8:	fb00 fa0a 	mul.w	sl, r0, sl
 80007ec:	45a2      	cmp	sl, r4
 80007ee:	d908      	bls.n	8000802 <__udivmoddi4+0x1da>
 80007f0:	eb1e 0404 	adds.w	r4, lr, r4
 80007f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80007f8:	d26b      	bcs.n	80008d2 <__udivmoddi4+0x2aa>
 80007fa:	45a2      	cmp	sl, r4
 80007fc:	d969      	bls.n	80008d2 <__udivmoddi4+0x2aa>
 80007fe:	3802      	subs	r0, #2
 8000800:	4474      	add	r4, lr
 8000802:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000806:	fba0 8902 	umull	r8, r9, r0, r2
 800080a:	eba4 040a 	sub.w	r4, r4, sl
 800080e:	454c      	cmp	r4, r9
 8000810:	46c2      	mov	sl, r8
 8000812:	464b      	mov	r3, r9
 8000814:	d354      	bcc.n	80008c0 <__udivmoddi4+0x298>
 8000816:	d051      	beq.n	80008bc <__udivmoddi4+0x294>
 8000818:	2e00      	cmp	r6, #0
 800081a:	d069      	beq.n	80008f0 <__udivmoddi4+0x2c8>
 800081c:	ebb1 050a 	subs.w	r5, r1, sl
 8000820:	eb64 0403 	sbc.w	r4, r4, r3
 8000824:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000828:	40fd      	lsrs	r5, r7
 800082a:	40fc      	lsrs	r4, r7
 800082c:	ea4c 0505 	orr.w	r5, ip, r5
 8000830:	e9c6 5400 	strd	r5, r4, [r6]
 8000834:	2700      	movs	r7, #0
 8000836:	e747      	b.n	80006c8 <__udivmoddi4+0xa0>
 8000838:	f1c2 0320 	rsb	r3, r2, #32
 800083c:	fa20 f703 	lsr.w	r7, r0, r3
 8000840:	4095      	lsls	r5, r2
 8000842:	fa01 f002 	lsl.w	r0, r1, r2
 8000846:	fa21 f303 	lsr.w	r3, r1, r3
 800084a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800084e:	4338      	orrs	r0, r7
 8000850:	0c01      	lsrs	r1, r0, #16
 8000852:	fbb3 f7fe 	udiv	r7, r3, lr
 8000856:	fa1f f885 	uxth.w	r8, r5
 800085a:	fb0e 3317 	mls	r3, lr, r7, r3
 800085e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000862:	fb07 f308 	mul.w	r3, r7, r8
 8000866:	428b      	cmp	r3, r1
 8000868:	fa04 f402 	lsl.w	r4, r4, r2
 800086c:	d907      	bls.n	800087e <__udivmoddi4+0x256>
 800086e:	1869      	adds	r1, r5, r1
 8000870:	f107 3cff 	add.w	ip, r7, #4294967295
 8000874:	d22f      	bcs.n	80008d6 <__udivmoddi4+0x2ae>
 8000876:	428b      	cmp	r3, r1
 8000878:	d92d      	bls.n	80008d6 <__udivmoddi4+0x2ae>
 800087a:	3f02      	subs	r7, #2
 800087c:	4429      	add	r1, r5
 800087e:	1acb      	subs	r3, r1, r3
 8000880:	b281      	uxth	r1, r0
 8000882:	fbb3 f0fe 	udiv	r0, r3, lr
 8000886:	fb0e 3310 	mls	r3, lr, r0, r3
 800088a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800088e:	fb00 f308 	mul.w	r3, r0, r8
 8000892:	428b      	cmp	r3, r1
 8000894:	d907      	bls.n	80008a6 <__udivmoddi4+0x27e>
 8000896:	1869      	adds	r1, r5, r1
 8000898:	f100 3cff 	add.w	ip, r0, #4294967295
 800089c:	d217      	bcs.n	80008ce <__udivmoddi4+0x2a6>
 800089e:	428b      	cmp	r3, r1
 80008a0:	d915      	bls.n	80008ce <__udivmoddi4+0x2a6>
 80008a2:	3802      	subs	r0, #2
 80008a4:	4429      	add	r1, r5
 80008a6:	1ac9      	subs	r1, r1, r3
 80008a8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008ac:	e73b      	b.n	8000726 <__udivmoddi4+0xfe>
 80008ae:	4637      	mov	r7, r6
 80008b0:	4630      	mov	r0, r6
 80008b2:	e709      	b.n	80006c8 <__udivmoddi4+0xa0>
 80008b4:	4607      	mov	r7, r0
 80008b6:	e6e7      	b.n	8000688 <__udivmoddi4+0x60>
 80008b8:	4618      	mov	r0, r3
 80008ba:	e6fb      	b.n	80006b4 <__udivmoddi4+0x8c>
 80008bc:	4541      	cmp	r1, r8
 80008be:	d2ab      	bcs.n	8000818 <__udivmoddi4+0x1f0>
 80008c0:	ebb8 0a02 	subs.w	sl, r8, r2
 80008c4:	eb69 020e 	sbc.w	r2, r9, lr
 80008c8:	3801      	subs	r0, #1
 80008ca:	4613      	mov	r3, r2
 80008cc:	e7a4      	b.n	8000818 <__udivmoddi4+0x1f0>
 80008ce:	4660      	mov	r0, ip
 80008d0:	e7e9      	b.n	80008a6 <__udivmoddi4+0x27e>
 80008d2:	4618      	mov	r0, r3
 80008d4:	e795      	b.n	8000802 <__udivmoddi4+0x1da>
 80008d6:	4667      	mov	r7, ip
 80008d8:	e7d1      	b.n	800087e <__udivmoddi4+0x256>
 80008da:	4681      	mov	r9, r0
 80008dc:	e77c      	b.n	80007d8 <__udivmoddi4+0x1b0>
 80008de:	3802      	subs	r0, #2
 80008e0:	442c      	add	r4, r5
 80008e2:	e747      	b.n	8000774 <__udivmoddi4+0x14c>
 80008e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80008e8:	442b      	add	r3, r5
 80008ea:	e72f      	b.n	800074c <__udivmoddi4+0x124>
 80008ec:	4638      	mov	r0, r7
 80008ee:	e708      	b.n	8000702 <__udivmoddi4+0xda>
 80008f0:	4637      	mov	r7, r6
 80008f2:	e6e9      	b.n	80006c8 <__udivmoddi4+0xa0>

080008f4 <__aeabi_idiv0>:
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop

080008f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <HAL_Init+0x40>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <HAL_Init+0x40>)
 8000902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <HAL_Init+0x40>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <HAL_Init+0x40>)
 800090e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_Init+0x40>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a07      	ldr	r2, [pc, #28]	; (8000938 <HAL_Init+0x40>)
 800091a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800091e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000920:	2003      	movs	r0, #3
 8000922:	f000 f8d8 	bl	8000ad6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000926:	2000      	movs	r0, #0
 8000928:	f005 fa86 	bl	8005e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800092c:	f005 fa58 	bl	8005de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023c00 	.word	0x40023c00

0800093c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_IncTick+0x20>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_IncTick+0x24>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4413      	add	r3, r2
 800094c:	4a04      	ldr	r2, [pc, #16]	; (8000960 <HAL_IncTick+0x24>)
 800094e:	6013      	str	r3, [r2, #0]
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000004 	.word	0x20000004
 8000960:	20004950 	.word	0x20004950

08000964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  return uwTick;
 8000968:	4b03      	ldr	r3, [pc, #12]	; (8000978 <HAL_GetTick+0x14>)
 800096a:	681b      	ldr	r3, [r3, #0]
}
 800096c:	4618      	mov	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20004950 	.word	0x20004950

0800097c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <__NVIC_SetPriorityGrouping+0x44>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000998:	4013      	ands	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ae:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <__NVIC_SetPriorityGrouping+0x44>)
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	60d3      	str	r3, [r2, #12]
}
 80009b4:	bf00      	nop
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <__NVIC_GetPriorityGrouping+0x18>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	0a1b      	lsrs	r3, r3, #8
 80009ce:	f003 0307 	and.w	r3, r3, #7
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	db0b      	blt.n	8000a0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	f003 021f 	and.w	r2, r3, #31
 80009f8:	4907      	ldr	r1, [pc, #28]	; (8000a18 <__NVIC_EnableIRQ+0x38>)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	095b      	lsrs	r3, r3, #5
 8000a00:	2001      	movs	r0, #1
 8000a02:	fa00 f202 	lsl.w	r2, r0, r2
 8000a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000e100 	.word	0xe000e100

08000a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	6039      	str	r1, [r7, #0]
 8000a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	db0a      	blt.n	8000a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	490c      	ldr	r1, [pc, #48]	; (8000a68 <__NVIC_SetPriority+0x4c>)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	0112      	lsls	r2, r2, #4
 8000a3c:	b2d2      	uxtb	r2, r2
 8000a3e:	440b      	add	r3, r1
 8000a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a44:	e00a      	b.n	8000a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4908      	ldr	r1, [pc, #32]	; (8000a6c <__NVIC_SetPriority+0x50>)
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	f003 030f 	and.w	r3, r3, #15
 8000a52:	3b04      	subs	r3, #4
 8000a54:	0112      	lsls	r2, r2, #4
 8000a56:	b2d2      	uxtb	r2, r2
 8000a58:	440b      	add	r3, r1
 8000a5a:	761a      	strb	r2, [r3, #24]
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000e100 	.word	0xe000e100
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b089      	sub	sp, #36	; 0x24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	f1c3 0307 	rsb	r3, r3, #7
 8000a8a:	2b04      	cmp	r3, #4
 8000a8c:	bf28      	it	cs
 8000a8e:	2304      	movcs	r3, #4
 8000a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3304      	adds	r3, #4
 8000a96:	2b06      	cmp	r3, #6
 8000a98:	d902      	bls.n	8000aa0 <NVIC_EncodePriority+0x30>
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3b03      	subs	r3, #3
 8000a9e:	e000      	b.n	8000aa2 <NVIC_EncodePriority+0x32>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43da      	mvns	r2, r3
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac2:	43d9      	mvns	r1, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	4313      	orrs	r3, r2
         );
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3724      	adds	r7, #36	; 0x24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ff4c 	bl	800097c <__NVIC_SetPriorityGrouping>
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
 8000af8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000afe:	f7ff ff61 	bl	80009c4 <__NVIC_GetPriorityGrouping>
 8000b02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	68b9      	ldr	r1, [r7, #8]
 8000b08:	6978      	ldr	r0, [r7, #20]
 8000b0a:	f7ff ffb1 	bl	8000a70 <NVIC_EncodePriority>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b14:	4611      	mov	r1, r2
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ff80 	bl	8000a1c <__NVIC_SetPriority>
}
 8000b1c:	bf00      	nop
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ff54 	bl	80009e0 <__NVIC_EnableIRQ>
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
 8000b5a:	e159      	b.n	8000e10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	f040 8148 	bne.w	8000e0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d00b      	beq.n	8000b9a <HAL_GPIO_Init+0x5a>
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d007      	beq.n	8000b9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b8e:	2b11      	cmp	r3, #17
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	2b12      	cmp	r3, #18
 8000b98:	d130      	bne.n	8000bfc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43db      	mvns	r3, r3
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	68da      	ldr	r2, [r3, #12]
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	69ba      	ldr	r2, [r7, #24]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	091b      	lsrs	r3, r3, #4
 8000be6:	f003 0201 	and.w	r2, r3, #1
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	2203      	movs	r2, #3
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	4013      	ands	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	689a      	ldr	r2, [r3, #8]
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d003      	beq.n	8000c3c <HAL_GPIO_Init+0xfc>
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	2b12      	cmp	r3, #18
 8000c3a:	d123      	bne.n	8000c84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	08da      	lsrs	r2, r3, #3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3208      	adds	r2, #8
 8000c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	f003 0307 	and.w	r3, r3, #7
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	220f      	movs	r2, #15
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	691a      	ldr	r2, [r3, #16]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	08da      	lsrs	r2, r3, #3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3208      	adds	r2, #8
 8000c7e:	69b9      	ldr	r1, [r7, #24]
 8000c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	2203      	movs	r2, #3
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 0203 	and.w	r2, r3, #3
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	f000 80a2 	beq.w	8000e0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b56      	ldr	r3, [pc, #344]	; (8000e24 <HAL_GPIO_Init+0x2e4>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	4a55      	ldr	r2, [pc, #340]	; (8000e24 <HAL_GPIO_Init+0x2e4>)
 8000cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd6:	4b53      	ldr	r3, [pc, #332]	; (8000e24 <HAL_GPIO_Init+0x2e4>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ce2:	4a51      	ldr	r2, [pc, #324]	; (8000e28 <HAL_GPIO_Init+0x2e8>)
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	089b      	lsrs	r3, r3, #2
 8000ce8:	3302      	adds	r3, #2
 8000cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	220f      	movs	r2, #15
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4013      	ands	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a48      	ldr	r2, [pc, #288]	; (8000e2c <HAL_GPIO_Init+0x2ec>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d019      	beq.n	8000d42 <HAL_GPIO_Init+0x202>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a47      	ldr	r2, [pc, #284]	; (8000e30 <HAL_GPIO_Init+0x2f0>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d013      	beq.n	8000d3e <HAL_GPIO_Init+0x1fe>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a46      	ldr	r2, [pc, #280]	; (8000e34 <HAL_GPIO_Init+0x2f4>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d00d      	beq.n	8000d3a <HAL_GPIO_Init+0x1fa>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a45      	ldr	r2, [pc, #276]	; (8000e38 <HAL_GPIO_Init+0x2f8>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d007      	beq.n	8000d36 <HAL_GPIO_Init+0x1f6>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a44      	ldr	r2, [pc, #272]	; (8000e3c <HAL_GPIO_Init+0x2fc>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d101      	bne.n	8000d32 <HAL_GPIO_Init+0x1f2>
 8000d2e:	2304      	movs	r3, #4
 8000d30:	e008      	b.n	8000d44 <HAL_GPIO_Init+0x204>
 8000d32:	2307      	movs	r3, #7
 8000d34:	e006      	b.n	8000d44 <HAL_GPIO_Init+0x204>
 8000d36:	2303      	movs	r3, #3
 8000d38:	e004      	b.n	8000d44 <HAL_GPIO_Init+0x204>
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	e002      	b.n	8000d44 <HAL_GPIO_Init+0x204>
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e000      	b.n	8000d44 <HAL_GPIO_Init+0x204>
 8000d42:	2300      	movs	r3, #0
 8000d44:	69fa      	ldr	r2, [r7, #28]
 8000d46:	f002 0203 	and.w	r2, r2, #3
 8000d4a:	0092      	lsls	r2, r2, #2
 8000d4c:	4093      	lsls	r3, r2
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d54:	4934      	ldr	r1, [pc, #208]	; (8000e28 <HAL_GPIO_Init+0x2e8>)
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	089b      	lsrs	r3, r3, #2
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d62:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <HAL_GPIO_Init+0x300>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d86:	4a2e      	ldr	r2, [pc, #184]	; (8000e40 <HAL_GPIO_Init+0x300>)
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d8c:	4b2c      	ldr	r3, [pc, #176]	; (8000e40 <HAL_GPIO_Init+0x300>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d003      	beq.n	8000db0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000db0:	4a23      	ldr	r2, [pc, #140]	; (8000e40 <HAL_GPIO_Init+0x300>)
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000db6:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <HAL_GPIO_Init+0x300>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dda:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <HAL_GPIO_Init+0x300>)
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000de0:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <HAL_GPIO_Init+0x300>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d003      	beq.n	8000e04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e04:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <HAL_GPIO_Init+0x300>)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	61fb      	str	r3, [r7, #28]
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	2b0f      	cmp	r3, #15
 8000e14:	f67f aea2 	bls.w	8000b5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e18:	bf00      	nop
 8000e1a:	3724      	adds	r7, #36	; 0x24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40013800 	.word	0x40013800
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	40020400 	.word	0x40020400
 8000e34:	40020800 	.word	0x40020800
 8000e38:	40020c00 	.word	0x40020c00
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40013c00 	.word	0x40013c00

08000e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	807b      	strh	r3, [r7, #2]
 8000e50:	4613      	mov	r3, r2
 8000e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e54:	787b      	ldrb	r3, [r7, #1]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e5a:	887a      	ldrh	r2, [r7, #2]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e60:	e003      	b.n	8000e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e62:	887b      	ldrh	r3, [r7, #2]
 8000e64:	041a      	lsls	r2, r3, #16
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	619a      	str	r2, [r3, #24]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e25b      	b.n	8001342 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d075      	beq.n	8000f82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e96:	4ba3      	ldr	r3, [pc, #652]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f003 030c 	and.w	r3, r3, #12
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	d00c      	beq.n	8000ebc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ea2:	4ba0      	ldr	r3, [pc, #640]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000eaa:	2b08      	cmp	r3, #8
 8000eac:	d112      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eae:	4b9d      	ldr	r3, [pc, #628]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000eba:	d10b      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ebc:	4b99      	ldr	r3, [pc, #612]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d05b      	beq.n	8000f80 <HAL_RCC_OscConfig+0x108>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d157      	bne.n	8000f80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e236      	b.n	8001342 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000edc:	d106      	bne.n	8000eec <HAL_RCC_OscConfig+0x74>
 8000ede:	4b91      	ldr	r3, [pc, #580]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a90      	ldr	r2, [pc, #576]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 8000ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	e01d      	b.n	8000f28 <HAL_RCC_OscConfig+0xb0>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ef4:	d10c      	bne.n	8000f10 <HAL_RCC_OscConfig+0x98>
 8000ef6:	4b8b      	ldr	r3, [pc, #556]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a8a      	ldr	r2, [pc, #552]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 8000efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	4b88      	ldr	r3, [pc, #544]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a87      	ldr	r2, [pc, #540]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 8000f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	e00b      	b.n	8000f28 <HAL_RCC_OscConfig+0xb0>
 8000f10:	4b84      	ldr	r3, [pc, #528]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a83      	ldr	r2, [pc, #524]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 8000f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	4b81      	ldr	r3, [pc, #516]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a80      	ldr	r2, [pc, #512]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 8000f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d013      	beq.n	8000f58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f30:	f7ff fd18 	bl	8000964 <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f38:	f7ff fd14 	bl	8000964 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b64      	cmp	r3, #100	; 0x64
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e1fb      	b.n	8001342 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4a:	4b76      	ldr	r3, [pc, #472]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f0      	beq.n	8000f38 <HAL_RCC_OscConfig+0xc0>
 8000f56:	e014      	b.n	8000f82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f58:	f7ff fd04 	bl	8000964 <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f60:	f7ff fd00 	bl	8000964 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b64      	cmp	r3, #100	; 0x64
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e1e7      	b.n	8001342 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f72:	4b6c      	ldr	r3, [pc, #432]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f0      	bne.n	8000f60 <HAL_RCC_OscConfig+0xe8>
 8000f7e:	e000      	b.n	8000f82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d063      	beq.n	8001056 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f8e:	4b65      	ldr	r3, [pc, #404]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f003 030c 	and.w	r3, r3, #12
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00b      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f9a:	4b62      	ldr	r3, [pc, #392]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fa2:	2b08      	cmp	r3, #8
 8000fa4:	d11c      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fa6:	4b5f      	ldr	r3, [pc, #380]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d116      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fb2:	4b5c      	ldr	r3, [pc, #368]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d005      	beq.n	8000fca <HAL_RCC_OscConfig+0x152>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d001      	beq.n	8000fca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e1bb      	b.n	8001342 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fca:	4b56      	ldr	r3, [pc, #344]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	4952      	ldr	r1, [pc, #328]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fde:	e03a      	b.n	8001056 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d020      	beq.n	800102a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fe8:	4b4f      	ldr	r3, [pc, #316]	; (8001128 <HAL_RCC_OscConfig+0x2b0>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fee:	f7ff fcb9 	bl	8000964 <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ff6:	f7ff fcb5 	bl	8000964 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e19c      	b.n	8001342 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001008:	4b46      	ldr	r3, [pc, #280]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0f0      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001014:	4b43      	ldr	r3, [pc, #268]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	4940      	ldr	r1, [pc, #256]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 8001024:	4313      	orrs	r3, r2
 8001026:	600b      	str	r3, [r1, #0]
 8001028:	e015      	b.n	8001056 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800102a:	4b3f      	ldr	r3, [pc, #252]	; (8001128 <HAL_RCC_OscConfig+0x2b0>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001030:	f7ff fc98 	bl	8000964 <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001038:	f7ff fc94 	bl	8000964 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b02      	cmp	r3, #2
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e17b      	b.n	8001342 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800104a:	4b36      	ldr	r3, [pc, #216]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1f0      	bne.n	8001038 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0308 	and.w	r3, r3, #8
 800105e:	2b00      	cmp	r3, #0
 8001060:	d030      	beq.n	80010c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d016      	beq.n	8001098 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800106a:	4b30      	ldr	r3, [pc, #192]	; (800112c <HAL_RCC_OscConfig+0x2b4>)
 800106c:	2201      	movs	r2, #1
 800106e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001070:	f7ff fc78 	bl	8000964 <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001078:	f7ff fc74 	bl	8000964 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e15b      	b.n	8001342 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800108a:	4b26      	ldr	r3, [pc, #152]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 800108c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f0      	beq.n	8001078 <HAL_RCC_OscConfig+0x200>
 8001096:	e015      	b.n	80010c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001098:	4b24      	ldr	r3, [pc, #144]	; (800112c <HAL_RCC_OscConfig+0x2b4>)
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800109e:	f7ff fc61 	bl	8000964 <HAL_GetTick>
 80010a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010a4:	e008      	b.n	80010b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010a6:	f7ff fc5d 	bl	8000964 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e144      	b.n	8001342 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010b8:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 80010ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1f0      	bne.n	80010a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 80a0 	beq.w	8001212 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10f      	bne.n	8001102 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 80010ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f0:	6413      	str	r3, [r2, #64]	; 0x40
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <HAL_RCC_OscConfig+0x2ac>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010fe:	2301      	movs	r3, #1
 8001100:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <HAL_RCC_OscConfig+0x2b8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110a:	2b00      	cmp	r3, #0
 800110c:	d121      	bne.n	8001152 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <HAL_RCC_OscConfig+0x2b8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a07      	ldr	r2, [pc, #28]	; (8001130 <HAL_RCC_OscConfig+0x2b8>)
 8001114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800111a:	f7ff fc23 	bl	8000964 <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001120:	e011      	b.n	8001146 <HAL_RCC_OscConfig+0x2ce>
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	42470000 	.word	0x42470000
 800112c:	42470e80 	.word	0x42470e80
 8001130:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001134:	f7ff fc16 	bl	8000964 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e0fd      	b.n	8001342 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001146:	4b81      	ldr	r3, [pc, #516]	; (800134c <HAL_RCC_OscConfig+0x4d4>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0f0      	beq.n	8001134 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d106      	bne.n	8001168 <HAL_RCC_OscConfig+0x2f0>
 800115a:	4b7d      	ldr	r3, [pc, #500]	; (8001350 <HAL_RCC_OscConfig+0x4d8>)
 800115c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800115e:	4a7c      	ldr	r2, [pc, #496]	; (8001350 <HAL_RCC_OscConfig+0x4d8>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6713      	str	r3, [r2, #112]	; 0x70
 8001166:	e01c      	b.n	80011a2 <HAL_RCC_OscConfig+0x32a>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	2b05      	cmp	r3, #5
 800116e:	d10c      	bne.n	800118a <HAL_RCC_OscConfig+0x312>
 8001170:	4b77      	ldr	r3, [pc, #476]	; (8001350 <HAL_RCC_OscConfig+0x4d8>)
 8001172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001174:	4a76      	ldr	r2, [pc, #472]	; (8001350 <HAL_RCC_OscConfig+0x4d8>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6713      	str	r3, [r2, #112]	; 0x70
 800117c:	4b74      	ldr	r3, [pc, #464]	; (8001350 <HAL_RCC_OscConfig+0x4d8>)
 800117e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001180:	4a73      	ldr	r2, [pc, #460]	; (8001350 <HAL_RCC_OscConfig+0x4d8>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6713      	str	r3, [r2, #112]	; 0x70
 8001188:	e00b      	b.n	80011a2 <HAL_RCC_OscConfig+0x32a>
 800118a:	4b71      	ldr	r3, [pc, #452]	; (8001350 <HAL_RCC_OscConfig+0x4d8>)
 800118c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800118e:	4a70      	ldr	r2, [pc, #448]	; (8001350 <HAL_RCC_OscConfig+0x4d8>)
 8001190:	f023 0301 	bic.w	r3, r3, #1
 8001194:	6713      	str	r3, [r2, #112]	; 0x70
 8001196:	4b6e      	ldr	r3, [pc, #440]	; (8001350 <HAL_RCC_OscConfig+0x4d8>)
 8001198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800119a:	4a6d      	ldr	r2, [pc, #436]	; (8001350 <HAL_RCC_OscConfig+0x4d8>)
 800119c:	f023 0304 	bic.w	r3, r3, #4
 80011a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d015      	beq.n	80011d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011aa:	f7ff fbdb 	bl	8000964 <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b0:	e00a      	b.n	80011c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011b2:	f7ff fbd7 	bl	8000964 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e0bc      	b.n	8001342 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011c8:	4b61      	ldr	r3, [pc, #388]	; (8001350 <HAL_RCC_OscConfig+0x4d8>)
 80011ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0ee      	beq.n	80011b2 <HAL_RCC_OscConfig+0x33a>
 80011d4:	e014      	b.n	8001200 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d6:	f7ff fbc5 	bl	8000964 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011dc:	e00a      	b.n	80011f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011de:	f7ff fbc1 	bl	8000964 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e0a6      	b.n	8001342 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011f4:	4b56      	ldr	r3, [pc, #344]	; (8001350 <HAL_RCC_OscConfig+0x4d8>)
 80011f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1ee      	bne.n	80011de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001200:	7dfb      	ldrb	r3, [r7, #23]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d105      	bne.n	8001212 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001206:	4b52      	ldr	r3, [pc, #328]	; (8001350 <HAL_RCC_OscConfig+0x4d8>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	4a51      	ldr	r2, [pc, #324]	; (8001350 <HAL_RCC_OscConfig+0x4d8>)
 800120c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001210:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 8092 	beq.w	8001340 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800121c:	4b4c      	ldr	r3, [pc, #304]	; (8001350 <HAL_RCC_OscConfig+0x4d8>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 030c 	and.w	r3, r3, #12
 8001224:	2b08      	cmp	r3, #8
 8001226:	d05c      	beq.n	80012e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d141      	bne.n	80012b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001230:	4b48      	ldr	r3, [pc, #288]	; (8001354 <HAL_RCC_OscConfig+0x4dc>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001236:	f7ff fb95 	bl	8000964 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800123e:	f7ff fb91 	bl	8000964 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e078      	b.n	8001342 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001250:	4b3f      	ldr	r3, [pc, #252]	; (8001350 <HAL_RCC_OscConfig+0x4d8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1f0      	bne.n	800123e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	69da      	ldr	r2, [r3, #28]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	431a      	orrs	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126a:	019b      	lsls	r3, r3, #6
 800126c:	431a      	orrs	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001272:	085b      	lsrs	r3, r3, #1
 8001274:	3b01      	subs	r3, #1
 8001276:	041b      	lsls	r3, r3, #16
 8001278:	431a      	orrs	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127e:	061b      	lsls	r3, r3, #24
 8001280:	4933      	ldr	r1, [pc, #204]	; (8001350 <HAL_RCC_OscConfig+0x4d8>)
 8001282:	4313      	orrs	r3, r2
 8001284:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001286:	4b33      	ldr	r3, [pc, #204]	; (8001354 <HAL_RCC_OscConfig+0x4dc>)
 8001288:	2201      	movs	r2, #1
 800128a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128c:	f7ff fb6a 	bl	8000964 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001294:	f7ff fb66 	bl	8000964 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e04d      	b.n	8001342 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012a6:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <HAL_RCC_OscConfig+0x4d8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f0      	beq.n	8001294 <HAL_RCC_OscConfig+0x41c>
 80012b2:	e045      	b.n	8001340 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012b4:	4b27      	ldr	r3, [pc, #156]	; (8001354 <HAL_RCC_OscConfig+0x4dc>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ba:	f7ff fb53 	bl	8000964 <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012c2:	f7ff fb4f 	bl	8000964 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e036      	b.n	8001342 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012d4:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <HAL_RCC_OscConfig+0x4d8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1f0      	bne.n	80012c2 <HAL_RCC_OscConfig+0x44a>
 80012e0:	e02e      	b.n	8001340 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d101      	bne.n	80012ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e029      	b.n	8001342 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <HAL_RCC_OscConfig+0x4d8>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d11c      	bne.n	800133c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800130c:	429a      	cmp	r2, r3
 800130e:	d115      	bne.n	800133c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001316:	4013      	ands	r3, r2
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800131c:	4293      	cmp	r3, r2
 800131e:	d10d      	bne.n	800133c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800132a:	429a      	cmp	r2, r3
 800132c:	d106      	bne.n	800133c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001338:	429a      	cmp	r2, r3
 800133a:	d001      	beq.n	8001340 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e000      	b.n	8001342 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40007000 	.word	0x40007000
 8001350:	40023800 	.word	0x40023800
 8001354:	42470060 	.word	0x42470060

08001358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e0cc      	b.n	8001506 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800136c:	4b68      	ldr	r3, [pc, #416]	; (8001510 <HAL_RCC_ClockConfig+0x1b8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 030f 	and.w	r3, r3, #15
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	d90c      	bls.n	8001394 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137a:	4b65      	ldr	r3, [pc, #404]	; (8001510 <HAL_RCC_ClockConfig+0x1b8>)
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001382:	4b63      	ldr	r3, [pc, #396]	; (8001510 <HAL_RCC_ClockConfig+0x1b8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	429a      	cmp	r2, r3
 800138e:	d001      	beq.n	8001394 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e0b8      	b.n	8001506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d020      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d005      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013ac:	4b59      	ldr	r3, [pc, #356]	; (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	4a58      	ldr	r2, [pc, #352]	; (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 80013b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0308 	and.w	r3, r3, #8
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013c4:	4b53      	ldr	r3, [pc, #332]	; (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	4a52      	ldr	r2, [pc, #328]	; (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 80013ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013d0:	4b50      	ldr	r3, [pc, #320]	; (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	494d      	ldr	r1, [pc, #308]	; (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d044      	beq.n	8001478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d107      	bne.n	8001406 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f6:	4b47      	ldr	r3, [pc, #284]	; (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d119      	bne.n	8001436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e07f      	b.n	8001506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d003      	beq.n	8001416 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001412:	2b03      	cmp	r3, #3
 8001414:	d107      	bne.n	8001426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001416:	4b3f      	ldr	r3, [pc, #252]	; (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d109      	bne.n	8001436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e06f      	b.n	8001506 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001426:	4b3b      	ldr	r3, [pc, #236]	; (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e067      	b.n	8001506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001436:	4b37      	ldr	r3, [pc, #220]	; (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f023 0203 	bic.w	r2, r3, #3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	4934      	ldr	r1, [pc, #208]	; (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 8001444:	4313      	orrs	r3, r2
 8001446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001448:	f7ff fa8c 	bl	8000964 <HAL_GetTick>
 800144c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800144e:	e00a      	b.n	8001466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001450:	f7ff fa88 	bl	8000964 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	f241 3288 	movw	r2, #5000	; 0x1388
 800145e:	4293      	cmp	r3, r2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e04f      	b.n	8001506 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001466:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 020c 	and.w	r2, r3, #12
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	429a      	cmp	r2, r3
 8001476:	d1eb      	bne.n	8001450 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <HAL_RCC_ClockConfig+0x1b8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 030f 	and.w	r3, r3, #15
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	429a      	cmp	r2, r3
 8001484:	d20c      	bcs.n	80014a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001486:	4b22      	ldr	r3, [pc, #136]	; (8001510 <HAL_RCC_ClockConfig+0x1b8>)
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800148e:	4b20      	ldr	r3, [pc, #128]	; (8001510 <HAL_RCC_ClockConfig+0x1b8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d001      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e032      	b.n	8001506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d008      	beq.n	80014be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014ac:	4b19      	ldr	r3, [pc, #100]	; (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	4916      	ldr	r1, [pc, #88]	; (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d009      	beq.n	80014de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	490e      	ldr	r1, [pc, #56]	; (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014de:	f000 f821 	bl	8001524 <HAL_RCC_GetSysClockFreq>
 80014e2:	4601      	mov	r1, r0
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	091b      	lsrs	r3, r3, #4
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <HAL_RCC_ClockConfig+0x1c0>)
 80014f0:	5cd3      	ldrb	r3, [r2, r3]
 80014f2:	fa21 f303 	lsr.w	r3, r1, r3
 80014f6:	4a09      	ldr	r2, [pc, #36]	; (800151c <HAL_RCC_ClockConfig+0x1c4>)
 80014f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_RCC_ClockConfig+0x1c8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f004 fc9a 	bl	8005e38 <HAL_InitTick>

  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40023c00 	.word	0x40023c00
 8001514:	40023800 	.word	0x40023800
 8001518:	08006098 	.word	0x08006098
 800151c:	2000000c 	.word	0x2000000c
 8001520:	20000000 	.word	0x20000000

08001524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	2300      	movs	r3, #0
 8001534:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800153a:	4b63      	ldr	r3, [pc, #396]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	2b04      	cmp	r3, #4
 8001544:	d007      	beq.n	8001556 <HAL_RCC_GetSysClockFreq+0x32>
 8001546:	2b08      	cmp	r3, #8
 8001548:	d008      	beq.n	800155c <HAL_RCC_GetSysClockFreq+0x38>
 800154a:	2b00      	cmp	r3, #0
 800154c:	f040 80b4 	bne.w	80016b8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001550:	4b5e      	ldr	r3, [pc, #376]	; (80016cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001552:	60bb      	str	r3, [r7, #8]
       break;
 8001554:	e0b3      	b.n	80016be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001556:	4b5e      	ldr	r3, [pc, #376]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001558:	60bb      	str	r3, [r7, #8]
      break;
 800155a:	e0b0      	b.n	80016be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800155c:	4b5a      	ldr	r3, [pc, #360]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001564:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001566:	4b58      	ldr	r3, [pc, #352]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d04a      	beq.n	8001608 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001572:	4b55      	ldr	r3, [pc, #340]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	099b      	lsrs	r3, r3, #6
 8001578:	f04f 0400 	mov.w	r4, #0
 800157c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	ea03 0501 	and.w	r5, r3, r1
 8001588:	ea04 0602 	and.w	r6, r4, r2
 800158c:	4629      	mov	r1, r5
 800158e:	4632      	mov	r2, r6
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	f04f 0400 	mov.w	r4, #0
 8001598:	0154      	lsls	r4, r2, #5
 800159a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800159e:	014b      	lsls	r3, r1, #5
 80015a0:	4619      	mov	r1, r3
 80015a2:	4622      	mov	r2, r4
 80015a4:	1b49      	subs	r1, r1, r5
 80015a6:	eb62 0206 	sbc.w	r2, r2, r6
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	f04f 0400 	mov.w	r4, #0
 80015b2:	0194      	lsls	r4, r2, #6
 80015b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015b8:	018b      	lsls	r3, r1, #6
 80015ba:	1a5b      	subs	r3, r3, r1
 80015bc:	eb64 0402 	sbc.w	r4, r4, r2
 80015c0:	f04f 0100 	mov.w	r1, #0
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	00e2      	lsls	r2, r4, #3
 80015ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80015ce:	00d9      	lsls	r1, r3, #3
 80015d0:	460b      	mov	r3, r1
 80015d2:	4614      	mov	r4, r2
 80015d4:	195b      	adds	r3, r3, r5
 80015d6:	eb44 0406 	adc.w	r4, r4, r6
 80015da:	f04f 0100 	mov.w	r1, #0
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	0262      	lsls	r2, r4, #9
 80015e4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80015e8:	0259      	lsls	r1, r3, #9
 80015ea:	460b      	mov	r3, r1
 80015ec:	4614      	mov	r4, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	4621      	mov	r1, r4
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f04f 0400 	mov.w	r4, #0
 80015f8:	461a      	mov	r2, r3
 80015fa:	4623      	mov	r3, r4
 80015fc:	f7fe fffc 	bl	80005f8 <__aeabi_uldivmod>
 8001600:	4603      	mov	r3, r0
 8001602:	460c      	mov	r4, r1
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	e049      	b.n	800169c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001608:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	099b      	lsrs	r3, r3, #6
 800160e:	f04f 0400 	mov.w	r4, #0
 8001612:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	ea03 0501 	and.w	r5, r3, r1
 800161e:	ea04 0602 	and.w	r6, r4, r2
 8001622:	4629      	mov	r1, r5
 8001624:	4632      	mov	r2, r6
 8001626:	f04f 0300 	mov.w	r3, #0
 800162a:	f04f 0400 	mov.w	r4, #0
 800162e:	0154      	lsls	r4, r2, #5
 8001630:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001634:	014b      	lsls	r3, r1, #5
 8001636:	4619      	mov	r1, r3
 8001638:	4622      	mov	r2, r4
 800163a:	1b49      	subs	r1, r1, r5
 800163c:	eb62 0206 	sbc.w	r2, r2, r6
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	f04f 0400 	mov.w	r4, #0
 8001648:	0194      	lsls	r4, r2, #6
 800164a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800164e:	018b      	lsls	r3, r1, #6
 8001650:	1a5b      	subs	r3, r3, r1
 8001652:	eb64 0402 	sbc.w	r4, r4, r2
 8001656:	f04f 0100 	mov.w	r1, #0
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	00e2      	lsls	r2, r4, #3
 8001660:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001664:	00d9      	lsls	r1, r3, #3
 8001666:	460b      	mov	r3, r1
 8001668:	4614      	mov	r4, r2
 800166a:	195b      	adds	r3, r3, r5
 800166c:	eb44 0406 	adc.w	r4, r4, r6
 8001670:	f04f 0100 	mov.w	r1, #0
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	02a2      	lsls	r2, r4, #10
 800167a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800167e:	0299      	lsls	r1, r3, #10
 8001680:	460b      	mov	r3, r1
 8001682:	4614      	mov	r4, r2
 8001684:	4618      	mov	r0, r3
 8001686:	4621      	mov	r1, r4
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f04f 0400 	mov.w	r4, #0
 800168e:	461a      	mov	r2, r3
 8001690:	4623      	mov	r3, r4
 8001692:	f7fe ffb1 	bl	80005f8 <__aeabi_uldivmod>
 8001696:	4603      	mov	r3, r0
 8001698:	460c      	mov	r4, r1
 800169a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	0c1b      	lsrs	r3, r3, #16
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	3301      	adds	r3, #1
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b4:	60bb      	str	r3, [r7, #8]
      break;
 80016b6:	e002      	b.n	80016be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80016ba:	60bb      	str	r3, [r7, #8]
      break;
 80016bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016be:	68bb      	ldr	r3, [r7, #8]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c8:	40023800 	.word	0x40023800
 80016cc:	00f42400 	.word	0x00f42400
 80016d0:	007a1200 	.word	0x007a1200

080016d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016d8:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	2000000c 	.word	0x2000000c

080016ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016f0:	f7ff fff0 	bl	80016d4 <HAL_RCC_GetHCLKFreq>
 80016f4:	4601      	mov	r1, r0
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <HAL_RCC_GetPCLK1Freq+0x20>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	0a9b      	lsrs	r3, r3, #10
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	4a03      	ldr	r2, [pc, #12]	; (8001710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001702:	5cd3      	ldrb	r3, [r2, r3]
 8001704:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001708:	4618      	mov	r0, r3
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40023800 	.word	0x40023800
 8001710:	080060a8 	.word	0x080060a8

08001714 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	220f      	movs	r2, #15
 8001722:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_RCC_GetClockConfig+0x5c>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f003 0203 	and.w	r2, r3, #3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001730:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <HAL_RCC_GetClockConfig+0x5c>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <HAL_RCC_GetClockConfig+0x5c>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_RCC_GetClockConfig+0x5c>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	08db      	lsrs	r3, r3, #3
 800174e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001756:	4b07      	ldr	r3, [pc, #28]	; (8001774 <HAL_RCC_GetClockConfig+0x60>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 020f 	and.w	r2, r3, #15
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	601a      	str	r2, [r3, #0]
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800
 8001774:	40023c00 	.word	0x40023c00

08001778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e01d      	b.n	80017c6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d106      	bne.n	80017a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f815 	bl	80017ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2202      	movs	r2, #2
 80017a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3304      	adds	r3, #4
 80017b4:	4619      	mov	r1, r3
 80017b6:	4610      	mov	r0, r2
 80017b8:	f000 f968 	bl	8001a8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b085      	sub	sp, #20
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f042 0201 	orr.w	r2, r2, #1
 80017f8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2b06      	cmp	r3, #6
 800180a:	d007      	beq.n	800181c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0201 	orr.w	r2, r2, #1
 800181a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b02      	cmp	r3, #2
 800183e:	d122      	bne.n	8001886 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b02      	cmp	r3, #2
 800184c:	d11b      	bne.n	8001886 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f06f 0202 	mvn.w	r2, #2
 8001856:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 f8ee 	bl	8001a4e <HAL_TIM_IC_CaptureCallback>
 8001872:	e005      	b.n	8001880 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 f8e0 	bl	8001a3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f8f1 	bl	8001a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b04      	cmp	r3, #4
 8001892:	d122      	bne.n	80018da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d11b      	bne.n	80018da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f06f 0204 	mvn.w	r2, #4
 80018aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2202      	movs	r2, #2
 80018b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f8c4 	bl	8001a4e <HAL_TIM_IC_CaptureCallback>
 80018c6:	e005      	b.n	80018d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 f8b6 	bl	8001a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f8c7 	bl	8001a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d122      	bne.n	800192e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d11b      	bne.n	800192e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f06f 0208 	mvn.w	r2, #8
 80018fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2204      	movs	r2, #4
 8001904:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f89a 	bl	8001a4e <HAL_TIM_IC_CaptureCallback>
 800191a:	e005      	b.n	8001928 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f88c 	bl	8001a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f89d 	bl	8001a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	f003 0310 	and.w	r3, r3, #16
 8001938:	2b10      	cmp	r3, #16
 800193a:	d122      	bne.n	8001982 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	f003 0310 	and.w	r3, r3, #16
 8001946:	2b10      	cmp	r3, #16
 8001948:	d11b      	bne.n	8001982 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f06f 0210 	mvn.w	r2, #16
 8001952:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2208      	movs	r2, #8
 8001958:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f870 	bl	8001a4e <HAL_TIM_IC_CaptureCallback>
 800196e:	e005      	b.n	800197c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f862 	bl	8001a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f873 	bl	8001a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b01      	cmp	r3, #1
 800198e:	d10e      	bne.n	80019ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b01      	cmp	r3, #1
 800199c:	d107      	bne.n	80019ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f06f 0201 	mvn.w	r2, #1
 80019a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f004 f9ff 	bl	8005dac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b8:	2b80      	cmp	r3, #128	; 0x80
 80019ba:	d10e      	bne.n	80019da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c6:	2b80      	cmp	r3, #128	; 0x80
 80019c8:	d107      	bne.n	80019da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 f8e3 	bl	8001ba0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e4:	2b40      	cmp	r3, #64	; 0x40
 80019e6:	d10e      	bne.n	8001a06 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f2:	2b40      	cmp	r3, #64	; 0x40
 80019f4:	d107      	bne.n	8001a06 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 f838 	bl	8001a76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	f003 0320 	and.w	r3, r3, #32
 8001a10:	2b20      	cmp	r3, #32
 8001a12:	d10e      	bne.n	8001a32 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	f003 0320 	and.w	r3, r3, #32
 8001a1e:	2b20      	cmp	r3, #32
 8001a20:	d107      	bne.n	8001a32 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f06f 0220 	mvn.w	r2, #32
 8001a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f8ad 	bl	8001b8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a34      	ldr	r2, [pc, #208]	; (8001b70 <TIM_Base_SetConfig+0xe4>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d00f      	beq.n	8001ac4 <TIM_Base_SetConfig+0x38>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aaa:	d00b      	beq.n	8001ac4 <TIM_Base_SetConfig+0x38>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a31      	ldr	r2, [pc, #196]	; (8001b74 <TIM_Base_SetConfig+0xe8>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d007      	beq.n	8001ac4 <TIM_Base_SetConfig+0x38>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a30      	ldr	r2, [pc, #192]	; (8001b78 <TIM_Base_SetConfig+0xec>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d003      	beq.n	8001ac4 <TIM_Base_SetConfig+0x38>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a2f      	ldr	r2, [pc, #188]	; (8001b7c <TIM_Base_SetConfig+0xf0>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d108      	bne.n	8001ad6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a25      	ldr	r2, [pc, #148]	; (8001b70 <TIM_Base_SetConfig+0xe4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d01b      	beq.n	8001b16 <TIM_Base_SetConfig+0x8a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae4:	d017      	beq.n	8001b16 <TIM_Base_SetConfig+0x8a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a22      	ldr	r2, [pc, #136]	; (8001b74 <TIM_Base_SetConfig+0xe8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d013      	beq.n	8001b16 <TIM_Base_SetConfig+0x8a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a21      	ldr	r2, [pc, #132]	; (8001b78 <TIM_Base_SetConfig+0xec>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d00f      	beq.n	8001b16 <TIM_Base_SetConfig+0x8a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a20      	ldr	r2, [pc, #128]	; (8001b7c <TIM_Base_SetConfig+0xf0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d00b      	beq.n	8001b16 <TIM_Base_SetConfig+0x8a>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a1f      	ldr	r2, [pc, #124]	; (8001b80 <TIM_Base_SetConfig+0xf4>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d007      	beq.n	8001b16 <TIM_Base_SetConfig+0x8a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a1e      	ldr	r2, [pc, #120]	; (8001b84 <TIM_Base_SetConfig+0xf8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d003      	beq.n	8001b16 <TIM_Base_SetConfig+0x8a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a1d      	ldr	r2, [pc, #116]	; (8001b88 <TIM_Base_SetConfig+0xfc>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d108      	bne.n	8001b28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a08      	ldr	r2, [pc, #32]	; (8001b70 <TIM_Base_SetConfig+0xe4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d103      	bne.n	8001b5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	615a      	str	r2, [r3, #20]
}
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40010000 	.word	0x40010000
 8001b74:	40000400 	.word	0x40000400
 8001b78:	40000800 	.word	0x40000800
 8001b7c:	40000c00 	.word	0x40000c00
 8001b80:	40014000 	.word	0x40014000
 8001b84:	40014400 	.word	0x40014400
 8001b88:	40014800 	.word	0x40014800

08001b8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001bca:	f3ef 8305 	mrs	r3, IPSR
 8001bce:	60bb      	str	r3, [r7, #8]
  return(result);
 8001bd0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10f      	bne.n	8001bf6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8001bda:	607b      	str	r3, [r7, #4]
  return(result);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d105      	bne.n	8001bee <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001be2:	f3ef 8311 	mrs	r3, BASEPRI
 8001be6:	603b      	str	r3, [r7, #0]
  return(result);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d007      	beq.n	8001bfe <osKernelInitialize+0x3a>
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <osKernelInitialize+0x64>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d103      	bne.n	8001bfe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001bf6:	f06f 0305 	mvn.w	r3, #5
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	e00c      	b.n	8001c18 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <osKernelInitialize+0x64>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d105      	bne.n	8001c12 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <osKernelInitialize+0x64>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	e002      	b.n	8001c18 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
 8001c16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001c18:	68fb      	ldr	r3, [r7, #12]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	2000002c 	.word	0x2000002c

08001c2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c32:	f3ef 8305 	mrs	r3, IPSR
 8001c36:	60bb      	str	r3, [r7, #8]
  return(result);
 8001c38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10f      	bne.n	8001c5e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8001c42:	607b      	str	r3, [r7, #4]
  return(result);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d105      	bne.n	8001c56 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c4a:	f3ef 8311 	mrs	r3, BASEPRI
 8001c4e:	603b      	str	r3, [r7, #0]
  return(result);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d007      	beq.n	8001c66 <osKernelStart+0x3a>
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <osKernelStart+0x68>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d103      	bne.n	8001c66 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001c5e:	f06f 0305 	mvn.w	r3, #5
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	e010      	b.n	8001c88 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <osKernelStart+0x68>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d109      	bne.n	8001c82 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001c6e:	f7ff ffa1 	bl	8001bb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <osKernelStart+0x68>)
 8001c74:	2202      	movs	r2, #2
 8001c76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001c78:	f001 ff6a 	bl	8003b50 <vTaskStartScheduler>
      stat = osOK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	e002      	b.n	8001c88 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295
 8001c86:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001c88:	68fb      	ldr	r3, [r7, #12]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	2000002c 	.word	0x2000002c

08001c98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b090      	sub	sp, #64	; 0x40
 8001c9c:	af04      	add	r7, sp, #16
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ca8:	f3ef 8305 	mrs	r3, IPSR
 8001cac:	61fb      	str	r3, [r7, #28]
  return(result);
 8001cae:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f040 808f 	bne.w	8001dd4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8001cba:	61bb      	str	r3, [r7, #24]
  return(result);
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d105      	bne.n	8001cce <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001cc2:	f3ef 8311 	mrs	r3, BASEPRI
 8001cc6:	617b      	str	r3, [r7, #20]
  return(result);
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <osThreadNew+0x3e>
 8001cce:	4b44      	ldr	r3, [pc, #272]	; (8001de0 <osThreadNew+0x148>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d07e      	beq.n	8001dd4 <osThreadNew+0x13c>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d07b      	beq.n	8001dd4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8001ce0:	2318      	movs	r3, #24
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8001ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d045      	beq.n	8001d80 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d002      	beq.n	8001d02 <osThreadNew+0x6a>
        name = attr->name;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d008      	beq.n	8001d28 <osThreadNew+0x90>
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	2b38      	cmp	r3, #56	; 0x38
 8001d1a:	d805      	bhi.n	8001d28 <osThreadNew+0x90>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <osThreadNew+0x94>
        return (NULL);
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e054      	b.n	8001dd6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	089b      	lsrs	r3, r3, #2
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00e      	beq.n	8001d62 <osThreadNew+0xca>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b5f      	cmp	r3, #95	; 0x5f
 8001d4a:	d90a      	bls.n	8001d62 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d006      	beq.n	8001d62 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d002      	beq.n	8001d62 <osThreadNew+0xca>
        mem = 1;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	623b      	str	r3, [r7, #32]
 8001d60:	e010      	b.n	8001d84 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10c      	bne.n	8001d84 <osThreadNew+0xec>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d108      	bne.n	8001d84 <osThreadNew+0xec>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d104      	bne.n	8001d84 <osThreadNew+0xec>
          mem = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	623b      	str	r3, [r7, #32]
 8001d7e:	e001      	b.n	8001d84 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001d84:	6a3b      	ldr	r3, [r7, #32]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d110      	bne.n	8001dac <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d92:	9202      	str	r2, [sp, #8]
 8001d94:	9301      	str	r3, [sp, #4]
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f001 fbff 	bl	80035a4 <xTaskCreateStatic>
 8001da6:	4603      	mov	r3, r0
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	e013      	b.n	8001dd4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d110      	bne.n	8001dd4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	f107 0310 	add.w	r3, r7, #16
 8001dba:	9301      	str	r3, [sp, #4]
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f001 fc47 	bl	8003658 <xTaskCreate>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d001      	beq.n	8001dd4 <osThreadNew+0x13c>
          hTask = NULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001dd4:	693b      	ldr	r3, [r7, #16]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3730      	adds	r7, #48	; 0x30
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	2000002c 	.word	0x2000002c

08001de4 <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001df0:	f3ef 8305 	mrs	r3, IPSR
 8001df4:	617b      	str	r3, [r7, #20]
  return(result);
 8001df6:	697b      	ldr	r3, [r7, #20]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d112      	bne.n	8001e22 <osThreadGetStackSpace+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8001e00:	613b      	str	r3, [r7, #16]
  return(result);
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d105      	bne.n	8001e14 <osThreadGetStackSpace+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e08:	f3ef 8311 	mrs	r3, BASEPRI
 8001e0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <osThreadGetStackSpace+0x38>
 8001e14:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <osThreadGetStackSpace+0x58>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d002      	beq.n	8001e22 <osThreadGetStackSpace+0x3e>
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d102      	bne.n	8001e28 <osThreadGetStackSpace+0x44>
    sz = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	e003      	b.n	8001e30 <osThreadGetStackSpace+0x4c>
  } else {
    sz = (uint32_t)uxTaskGetStackHighWaterMark (hTask);
 8001e28:	69b8      	ldr	r0, [r7, #24]
 8001e2a:	f002 faf5 	bl	8004418 <uxTaskGetStackHighWaterMark>
 8001e2e:	61f8      	str	r0, [r7, #28]
  }

  return (sz);
 8001e30:	69fb      	ldr	r3, [r7, #28]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3720      	adds	r7, #32
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	2000002c 	.word	0x2000002c

08001e40 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e4c:	f3ef 8305 	mrs	r3, IPSR
 8001e50:	617b      	str	r3, [r7, #20]
  return(result);
 8001e52:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10f      	bne.n	8001e78 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e58:	f3ef 8310 	mrs	r3, PRIMASK
 8001e5c:	613b      	str	r3, [r7, #16]
  return(result);
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d105      	bne.n	8001e70 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e64:	f3ef 8311 	mrs	r3, BASEPRI
 8001e68:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d007      	beq.n	8001e80 <osThreadSuspend+0x40>
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <osThreadSuspend+0x64>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d103      	bne.n	8001e80 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8001e78:	f06f 0305 	mvn.w	r3, #5
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	e00b      	b.n	8001e98 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d103      	bne.n	8001e8e <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8001e86:	f06f 0303 	mvn.w	r3, #3
 8001e8a:	61fb      	str	r3, [r7, #28]
 8001e8c:	e004      	b.n	8001e98 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8001e92:	69b8      	ldr	r0, [r7, #24]
 8001e94:	f001 fd5a 	bl	800394c <vTaskSuspend>
  }

  return (stat);
 8001e98:	69fb      	ldr	r3, [r7, #28]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3720      	adds	r7, #32
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	2000002c 	.word	0x2000002c

08001ea8 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001eb4:	f3ef 8305 	mrs	r3, IPSR
 8001eb8:	617b      	str	r3, [r7, #20]
  return(result);
 8001eba:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10f      	bne.n	8001ee0 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ec0:	f3ef 8310 	mrs	r3, PRIMASK
 8001ec4:	613b      	str	r3, [r7, #16]
  return(result);
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d105      	bne.n	8001ed8 <osThreadResume+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ecc:	f3ef 8311 	mrs	r3, BASEPRI
 8001ed0:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d007      	beq.n	8001ee8 <osThreadResume+0x40>
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <osThreadResume+0x64>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d103      	bne.n	8001ee8 <osThreadResume+0x40>
    stat = osErrorISR;
 8001ee0:	f06f 0305 	mvn.w	r3, #5
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	e00b      	b.n	8001f00 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d103      	bne.n	8001ef6 <osThreadResume+0x4e>
    stat = osErrorParameter;
 8001eee:	f06f 0303 	mvn.w	r3, #3
 8001ef2:	61fb      	str	r3, [r7, #28]
 8001ef4:	e004      	b.n	8001f00 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8001efa:	69b8      	ldr	r0, [r7, #24]
 8001efc:	f001 fdca 	bl	8003a94 <vTaskResume>
  }

  return (stat);
 8001f00:	69fb      	ldr	r3, [r7, #28]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3720      	adds	r7, #32
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	2000002c 	.word	0x2000002c

08001f10 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f18:	f3ef 8305 	mrs	r3, IPSR
 8001f1c:	613b      	str	r3, [r7, #16]
  return(result);
 8001f1e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10f      	bne.n	8001f44 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f24:	f3ef 8310 	mrs	r3, PRIMASK
 8001f28:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d105      	bne.n	8001f3c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001f30:	f3ef 8311 	mrs	r3, BASEPRI
 8001f34:	60bb      	str	r3, [r7, #8]
  return(result);
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d007      	beq.n	8001f4c <osDelay+0x3c>
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <osDelay+0x58>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d103      	bne.n	8001f4c <osDelay+0x3c>
    stat = osErrorISR;
 8001f44:	f06f 0305 	mvn.w	r3, #5
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	e007      	b.n	8001f5c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d002      	beq.n	8001f5c <osDelay+0x4c>
      vTaskDelay(ticks);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f001 fcc4 	bl	80038e4 <vTaskDelay>
    }
  }

  return (stat);
 8001f5c:	697b      	ldr	r3, [r7, #20]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	2000002c 	.word	0x2000002c

08001f6c <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f78:	f3ef 8305 	mrs	r3, IPSR
 8001f7c:	617b      	str	r3, [r7, #20]
  return(result);
 8001f7e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d13d      	bne.n	8002000 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f84:	f3ef 8310 	mrs	r3, PRIMASK
 8001f88:	613b      	str	r3, [r7, #16]
  return(result);
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d105      	bne.n	8001f9c <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001f90:	f3ef 8311 	mrs	r3, BASEPRI
 8001f94:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <osEventFlagsNew+0x38>
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	; (800200c <osEventFlagsNew+0xa0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d02d      	beq.n	8002000 <osEventFlagsNew+0x94>
    mem = -1;
 8001fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d015      	beq.n	8001fdc <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d006      	beq.n	8001fc6 <osEventFlagsNew+0x5a>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b1f      	cmp	r3, #31
 8001fbe:	d902      	bls.n	8001fc6 <osEventFlagsNew+0x5a>
        mem = 1;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	61bb      	str	r3, [r7, #24]
 8001fc4:	e00c      	b.n	8001fe0 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d108      	bne.n	8001fe0 <osEventFlagsNew+0x74>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d104      	bne.n	8001fe0 <osEventFlagsNew+0x74>
          mem = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
 8001fda:	e001      	b.n	8001fe0 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d106      	bne.n	8001ff4 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 fae6 	bl	80025bc <xEventGroupCreateStatic>
 8001ff0:	61f8      	str	r0, [r7, #28]
 8001ff2:	e005      	b.n	8002000 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d102      	bne.n	8002000 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8001ffa:	f000 fb14 	bl	8002626 <xEventGroupCreate>
 8001ffe:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8002000:	69fb      	ldr	r3, [r7, #28]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3720      	adds	r7, #32
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	2000002c 	.word	0x2000002c

08002010 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d004      	beq.n	800202e <osEventFlagsSet+0x1e>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800202e:	f06f 0303 	mvn.w	r3, #3
 8002032:	61fb      	str	r3, [r7, #28]
 8002034:	e03a      	b.n	80020ac <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002036:	f3ef 8305 	mrs	r3, IPSR
 800203a:	617b      	str	r3, [r7, #20]
  return(result);
 800203c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10f      	bne.n	8002062 <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002042:	f3ef 8310 	mrs	r3, PRIMASK
 8002046:	613b      	str	r3, [r7, #16]
  return(result);
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d105      	bne.n	800205a <osEventFlagsSet+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800204e:	f3ef 8311 	mrs	r3, BASEPRI
 8002052:	60fb      	str	r3, [r7, #12]
  return(result);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d021      	beq.n	800209e <osEventFlagsSet+0x8e>
 800205a:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <osEventFlagsSet+0xa8>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d11d      	bne.n	800209e <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8002066:	f107 0308 	add.w	r3, r7, #8
 800206a:	461a      	mov	r2, r3
 800206c:	6839      	ldr	r1, [r7, #0]
 800206e:	69b8      	ldr	r0, [r7, #24]
 8002070:	f000 fc04 	bl	800287c <xEventGroupSetBitsFromISR>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d103      	bne.n	8002082 <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 800207a:	f06f 0302 	mvn.w	r3, #2
 800207e:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8002080:	e013      	b.n	80020aa <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00e      	beq.n	80020aa <osEventFlagsSet+0x9a>
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <osEventFlagsSet+0xac>)
 800208e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	f3bf 8f4f 	dsb	sy
 8002098:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800209c:	e005      	b.n	80020aa <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800209e:	6839      	ldr	r1, [r7, #0]
 80020a0:	69b8      	ldr	r0, [r7, #24]
 80020a2:	f000 fb48 	bl	8002736 <xEventGroupSetBits>
 80020a6:	61f8      	str	r0, [r7, #28]
 80020a8:	e000      	b.n	80020ac <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80020aa:	bf00      	nop
  }

  return (rflags);
 80020ac:	69fb      	ldr	r3, [r7, #28]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3720      	adds	r7, #32
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2000002c 	.word	0x2000002c
 80020bc:	e000ed04 	.word	0xe000ed04

080020c0 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d004      	beq.n	80020de <osEventFlagsClear+0x1e>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80020de:	f06f 0303 	mvn.w	r3, #3
 80020e2:	61fb      	str	r3, [r7, #28]
 80020e4:	e029      	b.n	800213a <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020e6:	f3ef 8305 	mrs	r3, IPSR
 80020ea:	617b      	str	r3, [r7, #20]
  return(result);
 80020ec:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10f      	bne.n	8002112 <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020f2:	f3ef 8310 	mrs	r3, PRIMASK
 80020f6:	613b      	str	r3, [r7, #16]
  return(result);
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d105      	bne.n	800210a <osEventFlagsClear+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80020fe:	f3ef 8311 	mrs	r3, BASEPRI
 8002102:	60fb      	str	r3, [r7, #12]
  return(result);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d012      	beq.n	8002130 <osEventFlagsClear+0x70>
 800210a:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <osEventFlagsClear+0x84>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d10e      	bne.n	8002130 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8002112:	69b8      	ldr	r0, [r7, #24]
 8002114:	f000 faec 	bl	80026f0 <xEventGroupGetBitsFromISR>
 8002118:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800211a:	6839      	ldr	r1, [r7, #0]
 800211c:	69b8      	ldr	r0, [r7, #24]
 800211e:	f000 fad3 	bl	80026c8 <xEventGroupClearBitsFromISR>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d108      	bne.n	800213a <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 8002128:	f06f 0302 	mvn.w	r3, #2
 800212c:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800212e:	e004      	b.n	800213a <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8002130:	6839      	ldr	r1, [r7, #0]
 8002132:	69b8      	ldr	r0, [r7, #24]
 8002134:	f000 fa91 	bl	800265a <xEventGroupClearBits>
 8002138:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 800213a:	69fb      	ldr	r3, [r7, #28]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3720      	adds	r7, #32
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	2000002c 	.word	0x2000002c

08002148 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if (ef_id == NULL) {
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d102      	bne.n	8002160 <osEventFlagsGet+0x18>
    rflags = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	e01f      	b.n	80021a0 <osEventFlagsGet+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002160:	f3ef 8305 	mrs	r3, IPSR
 8002164:	617b      	str	r3, [r7, #20]
  return(result);
 8002166:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10f      	bne.n	800218c <osEventFlagsGet+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800216c:	f3ef 8310 	mrs	r3, PRIMASK
 8002170:	613b      	str	r3, [r7, #16]
  return(result);
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d105      	bne.n	8002184 <osEventFlagsGet+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002178:	f3ef 8311 	mrs	r3, BASEPRI
 800217c:	60fb      	str	r3, [r7, #12]
  return(result);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <osEventFlagsGet+0x4e>
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <osEventFlagsGet+0x64>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d104      	bne.n	8002196 <osEventFlagsGet+0x4e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800218c:	69b8      	ldr	r0, [r7, #24]
 800218e:	f000 faaf 	bl	80026f0 <xEventGroupGetBitsFromISR>
 8002192:	61f8      	str	r0, [r7, #28]
 8002194:	e004      	b.n	80021a0 <osEventFlagsGet+0x58>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8002196:	2100      	movs	r1, #0
 8002198:	69b8      	ldr	r0, [r7, #24]
 800219a:	f000 fa5e 	bl	800265a <xEventGroupClearBits>
 800219e:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 80021a0:	69fb      	ldr	r3, [r7, #28]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3720      	adds	r7, #32
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	2000002c 	.word	0x2000002c

080021b0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08c      	sub	sp, #48	; 0x30
 80021b4:	af02      	add	r7, sp, #8
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021c0:	f3ef 8305 	mrs	r3, IPSR
 80021c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80021c6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d170      	bne.n	80022ae <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021cc:	f3ef 8310 	mrs	r3, PRIMASK
 80021d0:	617b      	str	r3, [r7, #20]
  return(result);
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d105      	bne.n	80021e4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80021d8:	f3ef 8311 	mrs	r3, BASEPRI
 80021dc:	613b      	str	r3, [r7, #16]
  return(result);
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <osMessageQueueNew+0x3c>
 80021e4:	4b34      	ldr	r3, [pc, #208]	; (80022b8 <osMessageQueueNew+0x108>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d060      	beq.n	80022ae <osMessageQueueNew+0xfe>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d05d      	beq.n	80022ae <osMessageQueueNew+0xfe>
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d05a      	beq.n	80022ae <osMessageQueueNew+0xfe>
    mem = -1;
 80021f8:	f04f 33ff 	mov.w	r3, #4294967295
 80021fc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d029      	beq.n	8002258 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d012      	beq.n	8002232 <osMessageQueueNew+0x82>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	2b4f      	cmp	r3, #79	; 0x4f
 8002212:	d90e      	bls.n	8002232 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00a      	beq.n	8002232 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695a      	ldr	r2, [r3, #20]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	68b9      	ldr	r1, [r7, #8]
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	429a      	cmp	r2, r3
 800222a:	d302      	bcc.n	8002232 <osMessageQueueNew+0x82>
        mem = 1;
 800222c:	2301      	movs	r3, #1
 800222e:	623b      	str	r3, [r7, #32]
 8002230:	e014      	b.n	800225c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d110      	bne.n	800225c <osMessageQueueNew+0xac>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10c      	bne.n	800225c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002246:	2b00      	cmp	r3, #0
 8002248:	d108      	bne.n	800225c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d104      	bne.n	800225c <osMessageQueueNew+0xac>
          mem = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	623b      	str	r3, [r7, #32]
 8002256:	e001      	b.n	800225c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d10c      	bne.n	800227c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691a      	ldr	r2, [r3, #16]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6899      	ldr	r1, [r3, #8]
 800226a:	2300      	movs	r3, #0
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	460b      	mov	r3, r1
 8002270:	68b9      	ldr	r1, [r7, #8]
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 fc32 	bl	8002adc <xQueueGenericCreateStatic>
 8002278:	6278      	str	r0, [r7, #36]	; 0x24
 800227a:	e008      	b.n	800228e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d105      	bne.n	800228e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8002282:	2200      	movs	r2, #0
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 fc9b 	bl	8002bc2 <xQueueGenericCreate>
 800228c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00c      	beq.n	80022ae <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <osMessageQueueNew+0xf2>
        name = attr->name;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	61fb      	str	r3, [r7, #28]
 80022a0:	e001      	b.n	80022a6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80022a6:	69f9      	ldr	r1, [r7, #28]
 80022a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022aa:	f001 f91f 	bl	80034ec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3728      	adds	r7, #40	; 0x28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	2000002c 	.word	0x2000002c

080022bc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	; 0x28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	4613      	mov	r3, r2
 80022ca:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022d4:	f3ef 8305 	mrs	r3, IPSR
 80022d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80022da:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10f      	bne.n	8002300 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022e0:	f3ef 8310 	mrs	r3, PRIMASK
 80022e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d105      	bne.n	80022f8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80022ec:	f3ef 8311 	mrs	r3, BASEPRI
 80022f0:	617b      	str	r3, [r7, #20]
  return(result);
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d02c      	beq.n	8002352 <osMessageQueuePut+0x96>
 80022f8:	4b28      	ldr	r3, [pc, #160]	; (800239c <osMessageQueuePut+0xe0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d128      	bne.n	8002352 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <osMessageQueuePut+0x56>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d002      	beq.n	8002312 <osMessageQueuePut+0x56>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8002312:	f06f 0303 	mvn.w	r3, #3
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002318:	e039      	b.n	800238e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800231e:	f107 0210 	add.w	r2, r7, #16
 8002322:	2300      	movs	r3, #0
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	6a38      	ldr	r0, [r7, #32]
 8002328:	f000 fda8 	bl	8002e7c <xQueueGenericSendFromISR>
 800232c:	4603      	mov	r3, r0
 800232e:	2b01      	cmp	r3, #1
 8002330:	d003      	beq.n	800233a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8002332:	f06f 0302 	mvn.w	r3, #2
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002338:	e029      	b.n	800238e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d026      	beq.n	800238e <osMessageQueuePut+0xd2>
 8002340:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <osMessageQueuePut+0xe4>)
 8002342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	f3bf 8f4f 	dsb	sy
 800234c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002350:	e01d      	b.n	800238e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <osMessageQueuePut+0xa2>
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d103      	bne.n	8002366 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800235e:	f06f 0303 	mvn.w	r3, #3
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
 8002364:	e014      	b.n	8002390 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002366:	2300      	movs	r3, #0
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	68b9      	ldr	r1, [r7, #8]
 800236c:	6a38      	ldr	r0, [r7, #32]
 800236e:	f000 fc8b 	bl	8002c88 <xQueueGenericSend>
 8002372:	4603      	mov	r3, r0
 8002374:	2b01      	cmp	r3, #1
 8002376:	d00b      	beq.n	8002390 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800237e:	f06f 0301 	mvn.w	r3, #1
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
 8002384:	e004      	b.n	8002390 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8002386:	f06f 0302 	mvn.w	r3, #2
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
 800238c:	e000      	b.n	8002390 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800238e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002392:	4618      	mov	r0, r3
 8002394:	3728      	adds	r7, #40	; 0x28
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	2000002c 	.word	0x2000002c
 80023a0:	e000ed04 	.word	0xe000ed04

080023a4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	; 0x28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023ba:	f3ef 8305 	mrs	r3, IPSR
 80023be:	61fb      	str	r3, [r7, #28]
  return(result);
 80023c0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10f      	bne.n	80023e6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023c6:	f3ef 8310 	mrs	r3, PRIMASK
 80023ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d105      	bne.n	80023de <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023d2:	f3ef 8311 	mrs	r3, BASEPRI
 80023d6:	617b      	str	r3, [r7, #20]
  return(result);
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d02c      	beq.n	8002438 <osMessageQueueGet+0x94>
 80023de:	4b28      	ldr	r3, [pc, #160]	; (8002480 <osMessageQueueGet+0xdc>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d128      	bne.n	8002438 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <osMessageQueueGet+0x54>
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <osMessageQueueGet+0x54>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80023f8:	f06f 0303 	mvn.w	r3, #3
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80023fe:	e038      	b.n	8002472 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8002400:	2300      	movs	r3, #0
 8002402:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002404:	f107 0310 	add.w	r3, r7, #16
 8002408:	461a      	mov	r2, r3
 800240a:	68b9      	ldr	r1, [r7, #8]
 800240c:	6a38      	ldr	r0, [r7, #32]
 800240e:	f000 fea5 	bl	800315c <xQueueReceiveFromISR>
 8002412:	4603      	mov	r3, r0
 8002414:	2b01      	cmp	r3, #1
 8002416:	d003      	beq.n	8002420 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8002418:	f06f 0302 	mvn.w	r3, #2
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800241e:	e028      	b.n	8002472 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d025      	beq.n	8002472 <osMessageQueueGet+0xce>
 8002426:	4b17      	ldr	r3, [pc, #92]	; (8002484 <osMessageQueueGet+0xe0>)
 8002428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	f3bf 8f4f 	dsb	sy
 8002432:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002436:	e01c      	b.n	8002472 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <osMessageQueueGet+0xa0>
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d103      	bne.n	800244c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8002444:	f06f 0303 	mvn.w	r3, #3
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
 800244a:	e013      	b.n	8002474 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	6a38      	ldr	r0, [r7, #32]
 8002452:	f000 fda7 	bl	8002fa4 <xQueueReceive>
 8002456:	4603      	mov	r3, r0
 8002458:	2b01      	cmp	r3, #1
 800245a:	d00b      	beq.n	8002474 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8002462:	f06f 0301 	mvn.w	r3, #1
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
 8002468:	e004      	b.n	8002474 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800246a:	f06f 0302 	mvn.w	r3, #2
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
 8002470:	e000      	b.n	8002474 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002472:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002476:	4618      	mov	r0, r3
 8002478:	3728      	adds	r7, #40	; 0x28
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	2000002c 	.word	0x2000002c
 8002484:	e000ed04 	.word	0xe000ed04

08002488 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d102      	bne.n	80024a0 <osMessageQueueGetCount+0x18>
    count = 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	e01e      	b.n	80024de <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024a0:	f3ef 8305 	mrs	r3, IPSR
 80024a4:	617b      	str	r3, [r7, #20]
  return(result);
 80024a6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10f      	bne.n	80024cc <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024ac:	f3ef 8310 	mrs	r3, PRIMASK
 80024b0:	613b      	str	r3, [r7, #16]
  return(result);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d105      	bne.n	80024c4 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80024b8:	f3ef 8311 	mrs	r3, BASEPRI
 80024bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <osMessageQueueGetCount+0x4e>
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <osMessageQueueGetCount+0x60>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d104      	bne.n	80024d6 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80024cc:	69b8      	ldr	r0, [r7, #24]
 80024ce:	f000 fedf 	bl	8003290 <uxQueueMessagesWaitingFromISR>
 80024d2:	61f8      	str	r0, [r7, #28]
 80024d4:	e003      	b.n	80024de <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80024d6:	69b8      	ldr	r0, [r7, #24]
 80024d8:	f000 febd 	bl	8003256 <uxQueueMessagesWaiting>
 80024dc:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 80024de:	69fb      	ldr	r3, [r7, #28]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3720      	adds	r7, #32
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	2000002c 	.word	0x2000002c

080024ec <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024f8:	f3ef 8305 	mrs	r3, IPSR
 80024fc:	617b      	str	r3, [r7, #20]
  return(result);
 80024fe:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10f      	bne.n	8002524 <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002504:	f3ef 8310 	mrs	r3, PRIMASK
 8002508:	613b      	str	r3, [r7, #16]
  return(result);
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d105      	bne.n	800251c <osMessageQueueReset+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002510:	f3ef 8311 	mrs	r3, BASEPRI
 8002514:	60fb      	str	r3, [r7, #12]
  return(result);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d007      	beq.n	800252c <osMessageQueueReset+0x40>
 800251c:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <osMessageQueueReset+0x64>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d103      	bne.n	800252c <osMessageQueueReset+0x40>
    stat = osErrorISR;
 8002524:	f06f 0305 	mvn.w	r3, #5
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	e00c      	b.n	8002546 <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d103      	bne.n	800253a <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 8002532:	f06f 0303 	mvn.w	r3, #3
 8002536:	61fb      	str	r3, [r7, #28]
 8002538:	e005      	b.n	8002546 <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 800253e:	2100      	movs	r1, #0
 8002540:	69b8      	ldr	r0, [r7, #24]
 8002542:	f000 fa63 	bl	8002a0c <xQueueGenericReset>
  }

  return (stat);
 8002546:	69fb      	ldr	r3, [r7, #28]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3720      	adds	r7, #32
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	2000002c 	.word	0x2000002c

08002554 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4a07      	ldr	r2, [pc, #28]	; (8002580 <vApplicationGetIdleTaskMemory+0x2c>)
 8002564:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	4a06      	ldr	r2, [pc, #24]	; (8002584 <vApplicationGetIdleTaskMemory+0x30>)
 800256a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2280      	movs	r2, #128	; 0x80
 8002570:	601a      	str	r2, [r3, #0]
}
 8002572:	bf00      	nop
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000030 	.word	0x20000030
 8002584:	20000090 	.word	0x20000090

08002588 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8002598:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	4a06      	ldr	r2, [pc, #24]	; (80025b8 <vApplicationGetTimerTaskMemory+0x30>)
 800259e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025a6:	601a      	str	r2, [r3, #0]
}
 80025a8:	bf00      	nop
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	20000290 	.word	0x20000290
 80025b8:	200002f0 	.word	0x200002f0

080025bc <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d109      	bne.n	80025de <xEventGroupCreateStatic+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80025ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ce:	f383 8811 	msr	BASEPRI, r3
 80025d2:	f3bf 8f6f 	isb	sy
 80025d6:	f3bf 8f4f 	dsb	sy
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	e7fe      	b.n	80025dc <xEventGroupCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80025de:	2320      	movs	r3, #32
 80025e0:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b20      	cmp	r3, #32
 80025e6:	d009      	beq.n	80025fc <xEventGroupCreateStatic+0x40>
 80025e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ec:	f383 8811 	msr	BASEPRI, r3
 80025f0:	f3bf 8f6f 	isb	sy
 80025f4:	f3bf 8f4f 	dsb	sy
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	e7fe      	b.n	80025fa <xEventGroupCreateStatic+0x3e>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <xEventGroupCreateStatic+0x60>
		{
			pxEventBits->uxEventBits = 0;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	3304      	adds	r3, #4
 8002610:	4618      	mov	r0, r3
 8002612:	f000 f947 	bl	80028a4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2201      	movs	r2, #1
 800261a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800261c:	697b      	ldr	r3, [r7, #20]
	}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800262c:	2020      	movs	r0, #32
 800262e:	f002 fddf 	bl	80051f0 <pvPortMalloc>
 8002632:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00a      	beq.n	8002650 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3304      	adds	r3, #4
 8002644:	4618      	mov	r0, r3
 8002646:	f000 f92d 	bl	80028a4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8002650:	687b      	ldr	r3, [r7, #4]
	}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <xEventGroupClearBits+0x28>
 800266e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002672:	f383 8811 	msr	BASEPRI, r3
 8002676:	f3bf 8f6f 	isb	sy
 800267a:	f3bf 8f4f 	dsb	sy
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	e7fe      	b.n	8002680 <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d009      	beq.n	80026a0 <xEventGroupClearBits+0x46>
 800268c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002690:	f383 8811 	msr	BASEPRI, r3
 8002694:	f3bf 8f6f 	isb	sy
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	e7fe      	b.n	800269e <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 80026a0:	f002 fc8c 	bl	8004fbc <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	401a      	ands	r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80026b8:	f002 fcae 	bl	8005018 <vPortExitCritical>

	return uxReturn;
 80026bc:	693b      	ldr	r3, [r7, #16]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80026d2:	2300      	movs	r3, #0
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4804      	ldr	r0, [pc, #16]	; (80026ec <xEventGroupClearBitsFromISR+0x24>)
 80026da:	f002 fb2b 	bl	8004d34 <xTimerPendFunctionCallFromISR>
 80026de:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80026e0:	68fb      	ldr	r3, [r7, #12]
	}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	08002863 	.word	0x08002863

080026f0 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80026f0:	b480      	push	{r7}
 80026f2:	b089      	sub	sp, #36	; 0x24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80026fc:	f3ef 8211 	mrs	r2, BASEPRI
 8002700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002704:	f383 8811 	msr	BASEPRI, r3
 8002708:	f3bf 8f6f 	isb	sy
 800270c:	f3bf 8f4f 	dsb	sy
 8002710:	60fa      	str	r2, [r7, #12]
 8002712:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002714:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002716:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f383 8811 	msr	BASEPRI, r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8002728:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 800272a:	4618      	mov	r0, r3
 800272c:	3724      	adds	r7, #36	; 0x24
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b08e      	sub	sp, #56	; 0x38
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002740:	2300      	movs	r3, #0
 8002742:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8002748:	2300      	movs	r3, #0
 800274a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <xEventGroupSetBits+0x30>
	__asm volatile
 8002752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002756:	f383 8811 	msr	BASEPRI, r3
 800275a:	f3bf 8f6f 	isb	sy
 800275e:	f3bf 8f4f 	dsb	sy
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	e7fe      	b.n	8002764 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d009      	beq.n	8002784 <xEventGroupSetBits+0x4e>
 8002770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002774:	f383 8811 	msr	BASEPRI, r3
 8002778:	f3bf 8f6f 	isb	sy
 800277c:	f3bf 8f4f 	dsb	sy
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	e7fe      	b.n	8002782 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8002784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002786:	3304      	adds	r3, #4
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	3308      	adds	r3, #8
 800278e:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8002790:	f001 fa42 	bl	8003c18 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800279a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	431a      	orrs	r2, r3
 80027a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a4:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80027a6:	e03c      	b.n	8002822 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 80027a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80027ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80027b4:	2300      	movs	r3, #0
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80027be:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80027c6:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d108      	bne.n	80027e4 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80027d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00b      	beq.n	80027f6 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 80027de:	2301      	movs	r3, #1
 80027e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027e2:	e008      	b.n	80027f6 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80027e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d101      	bne.n	80027f6 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80027f2:	2301      	movs	r3, #1
 80027f4:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80027f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d010      	beq.n	800281e <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8002806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002816:	4619      	mov	r1, r3
 8002818:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800281a:	f001 fc7b 	bl	8004114 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8002822:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	429a      	cmp	r2, r3
 8002828:	d1be      	bne.n	80027a8 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800282a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002830:	43db      	mvns	r3, r3
 8002832:	401a      	ands	r2, r3
 8002834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002836:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8002838:	f001 f9fc 	bl	8003c34 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800283c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283e:	681b      	ldr	r3, [r3, #0]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3738      	adds	r7, #56	; 0x38
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8002852:	6839      	ldr	r1, [r7, #0]
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7ff ff6e 	bl	8002736 <xEventGroupSetBits>
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800286c:	6839      	ldr	r1, [r7, #0]
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff fef3 	bl	800265a <xEventGroupClearBits>
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	68f9      	ldr	r1, [r7, #12]
 800288e:	4804      	ldr	r0, [pc, #16]	; (80028a0 <xEventGroupSetBitsFromISR+0x24>)
 8002890:	f002 fa50 	bl	8004d34 <xTimerPendFunctionCallFromISR>
 8002894:	6178      	str	r0, [r7, #20]

		return xReturn;
 8002896:	697b      	ldr	r3, [r7, #20]
	}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	08002849 	.word	0x08002849

080028a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f103 0208 	add.w	r2, r3, #8
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f04f 32ff 	mov.w	r2, #4294967295
 80028bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f103 0208 	add.w	r2, r3, #8
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f103 0208 	add.w	r2, r3, #8
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028fe:	b480      	push	{r7}
 8002900:	b085      	sub	sp, #20
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	601a      	str	r2, [r3, #0]
}
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002946:	b480      	push	{r7}
 8002948:	b085      	sub	sp, #20
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295c:	d103      	bne.n	8002966 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	e00c      	b.n	8002980 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3308      	adds	r3, #8
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	e002      	b.n	8002974 <vListInsert+0x2e>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	429a      	cmp	r2, r3
 800297e:	d2f6      	bcs.n	800296e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	601a      	str	r2, [r3, #0]
}
 80029ac:	bf00      	nop
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6892      	ldr	r2, [r2, #8]
 80029ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6852      	ldr	r2, [r2, #4]
 80029d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d103      	bne.n	80029ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	1e5a      	subs	r2, r3, #1
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d109      	bne.n	8002a34 <xQueueGenericReset+0x28>
 8002a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	e7fe      	b.n	8002a32 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002a34:	f002 fac2 	bl	8004fbc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a40:	68f9      	ldr	r1, [r7, #12]
 8002a42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a44:	fb01 f303 	mul.w	r3, r1, r3
 8002a48:	441a      	add	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a64:	3b01      	subs	r3, #1
 8002a66:	68f9      	ldr	r1, [r7, #12]
 8002a68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a6a:	fb01 f303 	mul.w	r3, r1, r3
 8002a6e:	441a      	add	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	22ff      	movs	r2, #255	; 0xff
 8002a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	22ff      	movs	r2, #255	; 0xff
 8002a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d114      	bne.n	8002ab4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d01a      	beq.n	8002ac8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3310      	adds	r3, #16
 8002a96:	4618      	mov	r0, r3
 8002a98:	f001 fada 	bl	8004050 <xTaskRemoveFromEventList>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d012      	beq.n	8002ac8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <xQueueGenericReset+0xcc>)
 8002aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	f3bf 8f6f 	isb	sy
 8002ab2:	e009      	b.n	8002ac8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	3310      	adds	r3, #16
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fef3 	bl	80028a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	3324      	adds	r3, #36	; 0x24
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff feee 	bl	80028a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ac8:	f002 faa6 	bl	8005018 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002acc:	2301      	movs	r3, #1
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	e000ed04 	.word	0xe000ed04

08002adc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08e      	sub	sp, #56	; 0x38
 8002ae0:	af02      	add	r7, sp, #8
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d109      	bne.n	8002b04 <xQueueGenericCreateStatic+0x28>
 8002af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b02:	e7fe      	b.n	8002b02 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d109      	bne.n	8002b1e <xQueueGenericCreateStatic+0x42>
 8002b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0e:	f383 8811 	msr	BASEPRI, r3
 8002b12:	f3bf 8f6f 	isb	sy
 8002b16:	f3bf 8f4f 	dsb	sy
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1c:	e7fe      	b.n	8002b1c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <xQueueGenericCreateStatic+0x4e>
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <xQueueGenericCreateStatic+0x52>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <xQueueGenericCreateStatic+0x54>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d109      	bne.n	8002b48 <xQueueGenericCreateStatic+0x6c>
 8002b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b38:	f383 8811 	msr	BASEPRI, r3
 8002b3c:	f3bf 8f6f 	isb	sy
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	623b      	str	r3, [r7, #32]
 8002b46:	e7fe      	b.n	8002b46 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d102      	bne.n	8002b54 <xQueueGenericCreateStatic+0x78>
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <xQueueGenericCreateStatic+0x7c>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <xQueueGenericCreateStatic+0x7e>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d109      	bne.n	8002b72 <xQueueGenericCreateStatic+0x96>
 8002b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b62:	f383 8811 	msr	BASEPRI, r3
 8002b66:	f3bf 8f6f 	isb	sy
 8002b6a:	f3bf 8f4f 	dsb	sy
 8002b6e:	61fb      	str	r3, [r7, #28]
 8002b70:	e7fe      	b.n	8002b70 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b72:	2350      	movs	r3, #80	; 0x50
 8002b74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	2b50      	cmp	r3, #80	; 0x50
 8002b7a:	d009      	beq.n	8002b90 <xQueueGenericCreateStatic+0xb4>
 8002b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b80:	f383 8811 	msr	BASEPRI, r3
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	61bb      	str	r3, [r7, #24]
 8002b8e:	e7fe      	b.n	8002b8e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002b90:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00d      	beq.n	8002bb8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ba4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	4613      	mov	r3, r2
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 f844 	bl	8002c40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3730      	adds	r7, #48	; 0x30
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b08a      	sub	sp, #40	; 0x28
 8002bc6:	af02      	add	r7, sp, #8
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <xQueueGenericCreate+0x28>
 8002bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bda:	f383 8811 	msr	BASEPRI, r3
 8002bde:	f3bf 8f6f 	isb	sy
 8002be2:	f3bf 8f4f 	dsb	sy
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	e7fe      	b.n	8002be8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d102      	bne.n	8002bf6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61fb      	str	r3, [r7, #28]
 8002bf4:	e004      	b.n	8002c00 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	fb02 f303 	mul.w	r3, r2, r3
 8002bfe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	3350      	adds	r3, #80	; 0x50
 8002c04:	4618      	mov	r0, r3
 8002c06:	f002 faf3 	bl	80051f0 <pvPortMalloc>
 8002c0a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d011      	beq.n	8002c36 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	3350      	adds	r3, #80	; 0x50
 8002c1a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c24:	79fa      	ldrb	r2, [r7, #7]
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	68b9      	ldr	r1, [r7, #8]
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 f805 	bl	8002c40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c36:	69bb      	ldr	r3, [r7, #24]
	}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3720      	adds	r7, #32
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
 8002c4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d103      	bne.n	8002c5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	e002      	b.n	8002c62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c6e:	2101      	movs	r1, #1
 8002c70:	69b8      	ldr	r0, [r7, #24]
 8002c72:	f7ff fecb 	bl	8002a0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	78fa      	ldrb	r2, [r7, #3]
 8002c7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c7e:	bf00      	nop
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08e      	sub	sp, #56	; 0x38
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c96:	2300      	movs	r3, #0
 8002c98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d109      	bne.n	8002cb8 <xQueueGenericSend+0x30>
 8002ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca8:	f383 8811 	msr	BASEPRI, r3
 8002cac:	f3bf 8f6f 	isb	sy
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb6:	e7fe      	b.n	8002cb6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d103      	bne.n	8002cc6 <xQueueGenericSend+0x3e>
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <xQueueGenericSend+0x42>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <xQueueGenericSend+0x44>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d109      	bne.n	8002ce4 <xQueueGenericSend+0x5c>
 8002cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce2:	e7fe      	b.n	8002ce2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d103      	bne.n	8002cf2 <xQueueGenericSend+0x6a>
 8002cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <xQueueGenericSend+0x6e>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <xQueueGenericSend+0x70>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d109      	bne.n	8002d10 <xQueueGenericSend+0x88>
 8002cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d00:	f383 8811 	msr	BASEPRI, r3
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	623b      	str	r3, [r7, #32]
 8002d0e:	e7fe      	b.n	8002d0e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d10:	f001 fbec 	bl	80044ec <xTaskGetSchedulerState>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d102      	bne.n	8002d20 <xQueueGenericSend+0x98>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <xQueueGenericSend+0x9c>
 8002d20:	2301      	movs	r3, #1
 8002d22:	e000      	b.n	8002d26 <xQueueGenericSend+0x9e>
 8002d24:	2300      	movs	r3, #0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <xQueueGenericSend+0xb6>
 8002d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2e:	f383 8811 	msr	BASEPRI, r3
 8002d32:	f3bf 8f6f 	isb	sy
 8002d36:	f3bf 8f4f 	dsb	sy
 8002d3a:	61fb      	str	r3, [r7, #28]
 8002d3c:	e7fe      	b.n	8002d3c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d3e:	f002 f93d 	bl	8004fbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d302      	bcc.n	8002d54 <xQueueGenericSend+0xcc>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d129      	bne.n	8002da8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d5a:	f000 fab6 	bl	80032ca <prvCopyDataToQueue>
 8002d5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d010      	beq.n	8002d8a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6a:	3324      	adds	r3, #36	; 0x24
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f001 f96f 	bl	8004050 <xTaskRemoveFromEventList>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d013      	beq.n	8002da0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d78:	4b3f      	ldr	r3, [pc, #252]	; (8002e78 <xQueueGenericSend+0x1f0>)
 8002d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	e00a      	b.n	8002da0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d007      	beq.n	8002da0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d90:	4b39      	ldr	r3, [pc, #228]	; (8002e78 <xQueueGenericSend+0x1f0>)
 8002d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002da0:	f002 f93a 	bl	8005018 <vPortExitCritical>
				return pdPASS;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e063      	b.n	8002e70 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d103      	bne.n	8002db6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002dae:	f002 f933 	bl	8005018 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	e05c      	b.n	8002e70 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d106      	bne.n	8002dca <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002dbc:	f107 0314 	add.w	r3, r7, #20
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f001 fa07 	bl	80041d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002dca:	f002 f925 	bl	8005018 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002dce:	f000 ff23 	bl	8003c18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002dd2:	f002 f8f3 	bl	8004fbc <vPortEnterCritical>
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ddc:	b25b      	sxtb	r3, r3
 8002dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de2:	d103      	bne.n	8002dec <xQueueGenericSend+0x164>
 8002de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002df2:	b25b      	sxtb	r3, r3
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df8:	d103      	bne.n	8002e02 <xQueueGenericSend+0x17a>
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e02:	f002 f909 	bl	8005018 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e06:	1d3a      	adds	r2, r7, #4
 8002e08:	f107 0314 	add.w	r3, r7, #20
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f001 f9f6 	bl	8004200 <xTaskCheckForTimeOut>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d124      	bne.n	8002e64 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e1c:	f000 fb4d 	bl	80034ba <prvIsQueueFull>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d018      	beq.n	8002e58 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e28:	3310      	adds	r3, #16
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f001 f8c0 	bl	8003fb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e36:	f000 fad8 	bl	80033ea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e3a:	f000 fefb 	bl	8003c34 <xTaskResumeAll>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f47f af7c 	bne.w	8002d3e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002e46:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <xQueueGenericSend+0x1f0>)
 8002e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	e772      	b.n	8002d3e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e5a:	f000 fac6 	bl	80033ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e5e:	f000 fee9 	bl	8003c34 <xTaskResumeAll>
 8002e62:	e76c      	b.n	8002d3e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e66:	f000 fac0 	bl	80033ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e6a:	f000 fee3 	bl	8003c34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3738      	adds	r7, #56	; 0x38
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	e000ed04 	.word	0xe000ed04

08002e7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08e      	sub	sp, #56	; 0x38
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d109      	bne.n	8002ea8 <xQueueGenericSendFromISR+0x2c>
 8002e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea6:	e7fe      	b.n	8002ea6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d103      	bne.n	8002eb6 <xQueueGenericSendFromISR+0x3a>
 8002eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <xQueueGenericSendFromISR+0x3e>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <xQueueGenericSendFromISR+0x40>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d109      	bne.n	8002ed4 <xQueueGenericSendFromISR+0x58>
 8002ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec4:	f383 8811 	msr	BASEPRI, r3
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	623b      	str	r3, [r7, #32]
 8002ed2:	e7fe      	b.n	8002ed2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d103      	bne.n	8002ee2 <xQueueGenericSendFromISR+0x66>
 8002eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d101      	bne.n	8002ee6 <xQueueGenericSendFromISR+0x6a>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <xQueueGenericSendFromISR+0x6c>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d109      	bne.n	8002f00 <xQueueGenericSendFromISR+0x84>
 8002eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef0:	f383 8811 	msr	BASEPRI, r3
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	e7fe      	b.n	8002efe <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f00:	f002 f938 	bl	8005174 <vPortValidateInterruptPriority>
	__asm volatile
 8002f04:	f3ef 8211 	mrs	r2, BASEPRI
 8002f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0c:	f383 8811 	msr	BASEPRI, r3
 8002f10:	f3bf 8f6f 	isb	sy
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	61ba      	str	r2, [r7, #24]
 8002f1a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002f1c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d302      	bcc.n	8002f32 <xQueueGenericSendFromISR+0xb6>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d12c      	bne.n	8002f8c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	68b9      	ldr	r1, [r7, #8]
 8002f40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f42:	f000 f9c2 	bl	80032ca <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f46:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4e:	d112      	bne.n	8002f76 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d016      	beq.n	8002f86 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5a:	3324      	adds	r3, #36	; 0x24
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f001 f877 	bl	8004050 <xTaskRemoveFromEventList>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00e      	beq.n	8002f86 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00b      	beq.n	8002f86 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	e007      	b.n	8002f86 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	b25a      	sxtb	r2, r3
 8002f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002f86:	2301      	movs	r3, #1
 8002f88:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002f8a:	e001      	b.n	8002f90 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f92:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3738      	adds	r7, #56	; 0x38
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08c      	sub	sp, #48	; 0x30
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <xQueueReceive+0x2e>
	__asm volatile
 8002fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	623b      	str	r3, [r7, #32]
 8002fd0:	e7fe      	b.n	8002fd0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d103      	bne.n	8002fe0 <xQueueReceive+0x3c>
 8002fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <xQueueReceive+0x40>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <xQueueReceive+0x42>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d109      	bne.n	8002ffe <xQueueReceive+0x5a>
 8002fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	61fb      	str	r3, [r7, #28]
 8002ffc:	e7fe      	b.n	8002ffc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ffe:	f001 fa75 	bl	80044ec <xTaskGetSchedulerState>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d102      	bne.n	800300e <xQueueReceive+0x6a>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <xQueueReceive+0x6e>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <xQueueReceive+0x70>
 8003012:	2300      	movs	r3, #0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d109      	bne.n	800302c <xQueueReceive+0x88>
 8003018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301c:	f383 8811 	msr	BASEPRI, r3
 8003020:	f3bf 8f6f 	isb	sy
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	61bb      	str	r3, [r7, #24]
 800302a:	e7fe      	b.n	800302a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800302c:	f001 ffc6 	bl	8004fbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003034:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	2b00      	cmp	r3, #0
 800303a:	d01f      	beq.n	800307c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003040:	f000 f9ad 	bl	800339e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	1e5a      	subs	r2, r3, #1
 8003048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800304c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00f      	beq.n	8003074 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003056:	3310      	adds	r3, #16
 8003058:	4618      	mov	r0, r3
 800305a:	f000 fff9 	bl	8004050 <xTaskRemoveFromEventList>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d007      	beq.n	8003074 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003064:	4b3c      	ldr	r3, [pc, #240]	; (8003158 <xQueueReceive+0x1b4>)
 8003066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	f3bf 8f4f 	dsb	sy
 8003070:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003074:	f001 ffd0 	bl	8005018 <vPortExitCritical>
				return pdPASS;
 8003078:	2301      	movs	r3, #1
 800307a:	e069      	b.n	8003150 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d103      	bne.n	800308a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003082:	f001 ffc9 	bl	8005018 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003086:	2300      	movs	r3, #0
 8003088:	e062      	b.n	8003150 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800308a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308c:	2b00      	cmp	r3, #0
 800308e:	d106      	bne.n	800309e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003090:	f107 0310 	add.w	r3, r7, #16
 8003094:	4618      	mov	r0, r3
 8003096:	f001 f89d 	bl	80041d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800309a:	2301      	movs	r3, #1
 800309c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800309e:	f001 ffbb 	bl	8005018 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030a2:	f000 fdb9 	bl	8003c18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030a6:	f001 ff89 	bl	8004fbc <vPortEnterCritical>
 80030aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030b0:	b25b      	sxtb	r3, r3
 80030b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b6:	d103      	bne.n	80030c0 <xQueueReceive+0x11c>
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030c6:	b25b      	sxtb	r3, r3
 80030c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030cc:	d103      	bne.n	80030d6 <xQueueReceive+0x132>
 80030ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030d6:	f001 ff9f 	bl	8005018 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030da:	1d3a      	adds	r2, r7, #4
 80030dc:	f107 0310 	add.w	r3, r7, #16
 80030e0:	4611      	mov	r1, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f001 f88c 	bl	8004200 <xTaskCheckForTimeOut>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d123      	bne.n	8003136 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030f0:	f000 f9cd 	bl	800348e <prvIsQueueEmpty>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d017      	beq.n	800312a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fc:	3324      	adds	r3, #36	; 0x24
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	4611      	mov	r1, r2
 8003102:	4618      	mov	r0, r3
 8003104:	f000 ff56 	bl	8003fb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800310a:	f000 f96e 	bl	80033ea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800310e:	f000 fd91 	bl	8003c34 <xTaskResumeAll>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d189      	bne.n	800302c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003118:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <xQueueReceive+0x1b4>)
 800311a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	f3bf 8f4f 	dsb	sy
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	e780      	b.n	800302c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800312a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800312c:	f000 f95d 	bl	80033ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003130:	f000 fd80 	bl	8003c34 <xTaskResumeAll>
 8003134:	e77a      	b.n	800302c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003138:	f000 f957 	bl	80033ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800313c:	f000 fd7a 	bl	8003c34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003142:	f000 f9a4 	bl	800348e <prvIsQueueEmpty>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	f43f af6f 	beq.w	800302c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800314e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003150:	4618      	mov	r0, r3
 8003152:	3730      	adds	r7, #48	; 0x30
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	e000ed04 	.word	0xe000ed04

0800315c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08e      	sub	sp, #56	; 0x38
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	2b00      	cmp	r3, #0
 8003170:	d109      	bne.n	8003186 <xQueueReceiveFromISR+0x2a>
 8003172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003176:	f383 8811 	msr	BASEPRI, r3
 800317a:	f3bf 8f6f 	isb	sy
 800317e:	f3bf 8f4f 	dsb	sy
 8003182:	623b      	str	r3, [r7, #32]
 8003184:	e7fe      	b.n	8003184 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d103      	bne.n	8003194 <xQueueReceiveFromISR+0x38>
 800318c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <xQueueReceiveFromISR+0x3c>
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <xQueueReceiveFromISR+0x3e>
 8003198:	2300      	movs	r3, #0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <xQueueReceiveFromISR+0x56>
 800319e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a2:	f383 8811 	msr	BASEPRI, r3
 80031a6:	f3bf 8f6f 	isb	sy
 80031aa:	f3bf 8f4f 	dsb	sy
 80031ae:	61fb      	str	r3, [r7, #28]
 80031b0:	e7fe      	b.n	80031b0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031b2:	f001 ffdf 	bl	8005174 <vPortValidateInterruptPriority>
	__asm volatile
 80031b6:	f3ef 8211 	mrs	r2, BASEPRI
 80031ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031be:	f383 8811 	msr	BASEPRI, r3
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	61ba      	str	r2, [r7, #24]
 80031cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80031ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d02f      	beq.n	800323e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80031de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031ec:	f000 f8d7 	bl	800339e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80031f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f2:	1e5a      	subs	r2, r3, #1
 80031f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80031f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80031fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003200:	d112      	bne.n	8003228 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d016      	beq.n	8003238 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320c:	3310      	adds	r3, #16
 800320e:	4618      	mov	r0, r3
 8003210:	f000 ff1e 	bl	8004050 <xTaskRemoveFromEventList>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00e      	beq.n	8003238 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00b      	beq.n	8003238 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	e007      	b.n	8003238 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003228:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800322c:	3301      	adds	r3, #1
 800322e:	b2db      	uxtb	r3, r3
 8003230:	b25a      	sxtb	r2, r3
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003238:	2301      	movs	r3, #1
 800323a:	637b      	str	r3, [r7, #52]	; 0x34
 800323c:	e001      	b.n	8003242 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800323e:	2300      	movs	r3, #0
 8003240:	637b      	str	r3, [r7, #52]	; 0x34
 8003242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003244:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800324c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800324e:	4618      	mov	r0, r3
 8003250:	3738      	adds	r7, #56	; 0x38
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b084      	sub	sp, #16
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d109      	bne.n	8003278 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8003264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	e7fe      	b.n	8003276 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8003278:	f001 fea0 	bl	8004fbc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003280:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8003282:	f001 fec9 	bl	8005018 <vPortExitCritical>

	return uxReturn;
 8003286:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <uxQueueMessagesWaitingFromISR+0x26>
 80032a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a6:	f383 8811 	msr	BASEPRI, r3
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	e7fe      	b.n	80032b4 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ba:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80032bc:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80032be:	4618      	mov	r0, r3
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b086      	sub	sp, #24
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032de:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10d      	bne.n	8003304 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d14d      	bne.n	800338c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f001 f917 	bl	8004528 <xTaskPriorityDisinherit>
 80032fa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	609a      	str	r2, [r3, #8]
 8003302:	e043      	b.n	800338c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d119      	bne.n	800333e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6858      	ldr	r0, [r3, #4]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	461a      	mov	r2, r3
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	f002 fe6f 	bl	8005ff8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	441a      	add	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	429a      	cmp	r2, r3
 8003332:	d32b      	bcc.n	800338c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	605a      	str	r2, [r3, #4]
 800333c:	e026      	b.n	800338c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	68d8      	ldr	r0, [r3, #12]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	461a      	mov	r2, r3
 8003348:	68b9      	ldr	r1, [r7, #8]
 800334a:	f002 fe55 	bl	8005ff8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	425b      	negs	r3, r3
 8003358:	441a      	add	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d207      	bcs.n	800337a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	425b      	negs	r3, r3
 8003374:	441a      	add	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b02      	cmp	r3, #2
 800337e:	d105      	bne.n	800338c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	3b01      	subs	r3, #1
 800338a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003394:	697b      	ldr	r3, [r7, #20]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d018      	beq.n	80033e2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	441a      	add	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d303      	bcc.n	80033d2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68d9      	ldr	r1, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	461a      	mov	r2, r3
 80033dc:	6838      	ldr	r0, [r7, #0]
 80033de:	f002 fe0b 	bl	8005ff8 <memcpy>
	}
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b084      	sub	sp, #16
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80033f2:	f001 fde3 	bl	8004fbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033fc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033fe:	e011      	b.n	8003424 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	2b00      	cmp	r3, #0
 8003406:	d012      	beq.n	800342e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3324      	adds	r3, #36	; 0x24
 800340c:	4618      	mov	r0, r3
 800340e:	f000 fe1f 	bl	8004050 <xTaskRemoveFromEventList>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003418:	f000 ff52 	bl	80042c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	3b01      	subs	r3, #1
 8003420:	b2db      	uxtb	r3, r3
 8003422:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003428:	2b00      	cmp	r3, #0
 800342a:	dce9      	bgt.n	8003400 <prvUnlockQueue+0x16>
 800342c:	e000      	b.n	8003430 <prvUnlockQueue+0x46>
					break;
 800342e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	22ff      	movs	r2, #255	; 0xff
 8003434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003438:	f001 fdee 	bl	8005018 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800343c:	f001 fdbe 	bl	8004fbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003446:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003448:	e011      	b.n	800346e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d012      	beq.n	8003478 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3310      	adds	r3, #16
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fdfa 	bl	8004050 <xTaskRemoveFromEventList>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003462:	f000 ff2d 	bl	80042c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003466:	7bbb      	ldrb	r3, [r7, #14]
 8003468:	3b01      	subs	r3, #1
 800346a:	b2db      	uxtb	r3, r3
 800346c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800346e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003472:	2b00      	cmp	r3, #0
 8003474:	dce9      	bgt.n	800344a <prvUnlockQueue+0x60>
 8003476:	e000      	b.n	800347a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003478:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	22ff      	movs	r2, #255	; 0xff
 800347e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003482:	f001 fdc9 	bl	8005018 <vPortExitCritical>
}
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b084      	sub	sp, #16
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003496:	f001 fd91 	bl	8004fbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d102      	bne.n	80034a8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80034a2:	2301      	movs	r3, #1
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	e001      	b.n	80034ac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034ac:	f001 fdb4 	bl	8005018 <vPortExitCritical>

	return xReturn;
 80034b0:	68fb      	ldr	r3, [r7, #12]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b084      	sub	sp, #16
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034c2:	f001 fd7b 	bl	8004fbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d102      	bne.n	80034d8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80034d2:	2301      	movs	r3, #1
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	e001      	b.n	80034dc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034dc:	f001 fd9c 	bl	8005018 <vPortExitCritical>

	return xReturn;
 80034e0:	68fb      	ldr	r3, [r7, #12]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
	...

080034ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	e014      	b.n	8003526 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80034fc:	4a0e      	ldr	r2, [pc, #56]	; (8003538 <vQueueAddToRegistry+0x4c>)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10b      	bne.n	8003520 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003508:	490b      	ldr	r1, [pc, #44]	; (8003538 <vQueueAddToRegistry+0x4c>)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003512:	4a09      	ldr	r2, [pc, #36]	; (8003538 <vQueueAddToRegistry+0x4c>)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4413      	add	r3, r2
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800351e:	e005      	b.n	800352c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	3301      	adds	r3, #1
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2b07      	cmp	r3, #7
 800352a:	d9e7      	bls.n	80034fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800352c:	bf00      	nop
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	20004954 	.word	0x20004954

0800353c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800354c:	f001 fd36 	bl	8004fbc <vPortEnterCritical>
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003556:	b25b      	sxtb	r3, r3
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355c:	d103      	bne.n	8003566 <vQueueWaitForMessageRestricted+0x2a>
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800356c:	b25b      	sxtb	r3, r3
 800356e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003572:	d103      	bne.n	800357c <vQueueWaitForMessageRestricted+0x40>
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800357c:	f001 fd4c 	bl	8005018 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	2b00      	cmp	r3, #0
 8003586:	d106      	bne.n	8003596 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	3324      	adds	r3, #36	; 0x24
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	68b9      	ldr	r1, [r7, #8]
 8003590:	4618      	mov	r0, r3
 8003592:	f000 fd33 	bl	8003ffc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003596:	6978      	ldr	r0, [r7, #20]
 8003598:	f7ff ff27 	bl	80033ea <prvUnlockQueue>
	}
 800359c:	bf00      	nop
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08e      	sub	sp, #56	; 0x38
 80035a8:	af04      	add	r7, sp, #16
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d109      	bne.n	80035cc <xTaskCreateStatic+0x28>
 80035b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	623b      	str	r3, [r7, #32]
 80035ca:	e7fe      	b.n	80035ca <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80035cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <xTaskCreateStatic+0x42>
 80035d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d6:	f383 8811 	msr	BASEPRI, r3
 80035da:	f3bf 8f6f 	isb	sy
 80035de:	f3bf 8f4f 	dsb	sy
 80035e2:	61fb      	str	r3, [r7, #28]
 80035e4:	e7fe      	b.n	80035e4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80035e6:	2360      	movs	r3, #96	; 0x60
 80035e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	2b60      	cmp	r3, #96	; 0x60
 80035ee:	d009      	beq.n	8003604 <xTaskCreateStatic+0x60>
 80035f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	e7fe      	b.n	8003602 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003604:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01e      	beq.n	800364a <xTaskCreateStatic+0xa6>
 800360c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800360e:	2b00      	cmp	r3, #0
 8003610:	d01b      	beq.n	800364a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800361a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	2202      	movs	r2, #2
 8003620:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003624:	2300      	movs	r3, #0
 8003626:	9303      	str	r3, [sp, #12]
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	9302      	str	r3, [sp, #8]
 800362c:	f107 0314 	add.w	r3, r7, #20
 8003630:	9301      	str	r3, [sp, #4]
 8003632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f850 	bl	80036e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003642:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003644:	f000 f8de 	bl	8003804 <prvAddNewTaskToReadyList>
 8003648:	e001      	b.n	800364e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800364e:	697b      	ldr	r3, [r7, #20]
	}
 8003650:	4618      	mov	r0, r3
 8003652:	3728      	adds	r7, #40	; 0x28
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08c      	sub	sp, #48	; 0x30
 800365c:	af04      	add	r7, sp, #16
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	603b      	str	r3, [r7, #0]
 8003664:	4613      	mov	r3, r2
 8003666:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003668:	88fb      	ldrh	r3, [r7, #6]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4618      	mov	r0, r3
 800366e:	f001 fdbf 	bl	80051f0 <pvPortMalloc>
 8003672:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00e      	beq.n	8003698 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800367a:	2060      	movs	r0, #96	; 0x60
 800367c:	f001 fdb8 	bl	80051f0 <pvPortMalloc>
 8003680:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	631a      	str	r2, [r3, #48]	; 0x30
 800368e:	e005      	b.n	800369c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003690:	6978      	ldr	r0, [r7, #20]
 8003692:	f001 fe6f 	bl	8005374 <vPortFree>
 8003696:	e001      	b.n	800369c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003698:	2300      	movs	r3, #0
 800369a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d017      	beq.n	80036d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036aa:	88fa      	ldrh	r2, [r7, #6]
 80036ac:	2300      	movs	r3, #0
 80036ae:	9303      	str	r3, [sp, #12]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	9302      	str	r3, [sp, #8]
 80036b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b6:	9301      	str	r3, [sp, #4]
 80036b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	68b9      	ldr	r1, [r7, #8]
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f80e 	bl	80036e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036c6:	69f8      	ldr	r0, [r7, #28]
 80036c8:	f000 f89c 	bl	8003804 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036cc:	2301      	movs	r3, #1
 80036ce:	61bb      	str	r3, [r7, #24]
 80036d0:	e002      	b.n	80036d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036d2:	f04f 33ff 	mov.w	r3, #4294967295
 80036d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80036d8:	69bb      	ldr	r3, [r7, #24]
	}
 80036da:	4618      	mov	r0, r3
 80036dc:	3720      	adds	r7, #32
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b088      	sub	sp, #32
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80036f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	461a      	mov	r2, r3
 80036fa:	21a5      	movs	r1, #165	; 0xa5
 80036fc:	f002 fc87 	bl	800600e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800370a:	3b01      	subs	r3, #1
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	f023 0307 	bic.w	r3, r3, #7
 8003718:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	2b00      	cmp	r3, #0
 8003722:	d009      	beq.n	8003738 <prvInitialiseNewTask+0x56>
 8003724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003728:	f383 8811 	msr	BASEPRI, r3
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	e7fe      	b.n	8003736 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8003738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d01f      	beq.n	8003784 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003744:	2300      	movs	r3, #0
 8003746:	61fb      	str	r3, [r7, #28]
 8003748:	e012      	b.n	8003770 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	4413      	add	r3, r2
 8003750:	7819      	ldrb	r1, [r3, #0]
 8003752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	4413      	add	r3, r2
 8003758:	3334      	adds	r3, #52	; 0x34
 800375a:	460a      	mov	r2, r1
 800375c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	4413      	add	r3, r2
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d006      	beq.n	8003778 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	3301      	adds	r3, #1
 800376e:	61fb      	str	r3, [r7, #28]
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	2b0f      	cmp	r3, #15
 8003774:	d9e9      	bls.n	800374a <prvInitialiseNewTask+0x68>
 8003776:	e000      	b.n	800377a <prvInitialiseNewTask+0x98>
			{
				break;
 8003778:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800377a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003782:	e003      	b.n	800378c <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378e:	2b37      	cmp	r3, #55	; 0x37
 8003790:	d901      	bls.n	8003796 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003792:	2337      	movs	r3, #55	; 0x37
 8003794:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800379a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800379c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037a0:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80037a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a4:	2200      	movs	r2, #0
 80037a6:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037aa:	3304      	adds	r3, #4
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff f899 	bl	80028e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b4:	3318      	adds	r3, #24
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff f894 	bl	80028e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80037c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	2200      	movs	r2, #0
 80037d6:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	68f9      	ldr	r1, [r7, #12]
 80037e4:	69b8      	ldr	r0, [r7, #24]
 80037e6:	f001 fac5 	bl	8004d74 <pxPortInitialiseStack>
 80037ea:	4602      	mov	r2, r0
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80037f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037fc:	bf00      	nop
 80037fe:	3720      	adds	r7, #32
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800380c:	f001 fbd6 	bl	8004fbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003810:	4b2d      	ldr	r3, [pc, #180]	; (80038c8 <prvAddNewTaskToReadyList+0xc4>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3301      	adds	r3, #1
 8003816:	4a2c      	ldr	r2, [pc, #176]	; (80038c8 <prvAddNewTaskToReadyList+0xc4>)
 8003818:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800381a:	4b2c      	ldr	r3, [pc, #176]	; (80038cc <prvAddNewTaskToReadyList+0xc8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d109      	bne.n	8003836 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003822:	4a2a      	ldr	r2, [pc, #168]	; (80038cc <prvAddNewTaskToReadyList+0xc8>)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003828:	4b27      	ldr	r3, [pc, #156]	; (80038c8 <prvAddNewTaskToReadyList+0xc4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d110      	bne.n	8003852 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003830:	f000 fd6a 	bl	8004308 <prvInitialiseTaskLists>
 8003834:	e00d      	b.n	8003852 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003836:	4b26      	ldr	r3, [pc, #152]	; (80038d0 <prvAddNewTaskToReadyList+0xcc>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800383e:	4b23      	ldr	r3, [pc, #140]	; (80038cc <prvAddNewTaskToReadyList+0xc8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	429a      	cmp	r2, r3
 800384a:	d802      	bhi.n	8003852 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800384c:	4a1f      	ldr	r2, [pc, #124]	; (80038cc <prvAddNewTaskToReadyList+0xc8>)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003852:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <prvAddNewTaskToReadyList+0xd0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3301      	adds	r3, #1
 8003858:	4a1e      	ldr	r2, [pc, #120]	; (80038d4 <prvAddNewTaskToReadyList+0xd0>)
 800385a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800385c:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <prvAddNewTaskToReadyList+0xd0>)
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003868:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <prvAddNewTaskToReadyList+0xd4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d903      	bls.n	8003878 <prvAddNewTaskToReadyList+0x74>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	4a18      	ldr	r2, [pc, #96]	; (80038d8 <prvAddNewTaskToReadyList+0xd4>)
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4a15      	ldr	r2, [pc, #84]	; (80038dc <prvAddNewTaskToReadyList+0xd8>)
 8003886:	441a      	add	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3304      	adds	r3, #4
 800388c:	4619      	mov	r1, r3
 800388e:	4610      	mov	r0, r2
 8003890:	f7ff f835 	bl	80028fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003894:	f001 fbc0 	bl	8005018 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003898:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <prvAddNewTaskToReadyList+0xcc>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00e      	beq.n	80038be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038a0:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <prvAddNewTaskToReadyList+0xc8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d207      	bcs.n	80038be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038ae:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <prvAddNewTaskToReadyList+0xdc>)
 80038b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000bc4 	.word	0x20000bc4
 80038cc:	200006f0 	.word	0x200006f0
 80038d0:	20000bd0 	.word	0x20000bd0
 80038d4:	20000be0 	.word	0x20000be0
 80038d8:	20000bcc 	.word	0x20000bcc
 80038dc:	200006f4 	.word	0x200006f4
 80038e0:	e000ed04 	.word	0xe000ed04

080038e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d016      	beq.n	8003924 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80038f6:	4b13      	ldr	r3, [pc, #76]	; (8003944 <vTaskDelay+0x60>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d009      	beq.n	8003912 <vTaskDelay+0x2e>
 80038fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	60bb      	str	r3, [r7, #8]
 8003910:	e7fe      	b.n	8003910 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003912:	f000 f981 	bl	8003c18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003916:	2100      	movs	r1, #0
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 fe71 	bl	8004600 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800391e:	f000 f989 	bl	8003c34 <xTaskResumeAll>
 8003922:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d107      	bne.n	800393a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800392a:	4b07      	ldr	r3, [pc, #28]	; (8003948 <vTaskDelay+0x64>)
 800392c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800393a:	bf00      	nop
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20000bec 	.word	0x20000bec
 8003948:	e000ed04 	.word	0xe000ed04

0800394c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003954:	f001 fb32 	bl	8004fbc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d102      	bne.n	8003964 <vTaskSuspend+0x18>
 800395e:	4b2f      	ldr	r3, [pc, #188]	; (8003a1c <vTaskSuspend+0xd0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	e000      	b.n	8003966 <vTaskSuspend+0x1a>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	3304      	adds	r3, #4
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff f823 	bl	80029b8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003976:	2b00      	cmp	r3, #0
 8003978:	d004      	beq.n	8003984 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	3318      	adds	r3, #24
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff f81a 	bl	80029b8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3304      	adds	r3, #4
 8003988:	4619      	mov	r1, r3
 800398a:	4825      	ldr	r0, [pc, #148]	; (8003a20 <vTaskSuspend+0xd4>)
 800398c:	f7fe ffb7 	bl	80028fe <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b01      	cmp	r3, #1
 800399a:	d103      	bne.n	80039a4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80039a4:	f001 fb38 	bl	8005018 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80039a8:	4b1e      	ldr	r3, [pc, #120]	; (8003a24 <vTaskSuspend+0xd8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80039b0:	f001 fb04 	bl	8004fbc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80039b4:	f000 fd7a 	bl	80044ac <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80039b8:	f001 fb2e 	bl	8005018 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80039bc:	4b17      	ldr	r3, [pc, #92]	; (8003a1c <vTaskSuspend+0xd0>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d126      	bne.n	8003a14 <vTaskSuspend+0xc8>
		{
			if( xSchedulerRunning != pdFALSE )
 80039c6:	4b17      	ldr	r3, [pc, #92]	; (8003a24 <vTaskSuspend+0xd8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d016      	beq.n	80039fc <vTaskSuspend+0xb0>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80039ce:	4b16      	ldr	r3, [pc, #88]	; (8003a28 <vTaskSuspend+0xdc>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d009      	beq.n	80039ea <vTaskSuspend+0x9e>
 80039d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	60bb      	str	r3, [r7, #8]
 80039e8:	e7fe      	b.n	80039e8 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 80039ea:	4b10      	ldr	r3, [pc, #64]	; (8003a2c <vTaskSuspend+0xe0>)
 80039ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039fa:	e00b      	b.n	8003a14 <vTaskSuspend+0xc8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80039fc:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <vTaskSuspend+0xd4>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <vTaskSuspend+0xe4>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d103      	bne.n	8003a10 <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 8003a08:	4b04      	ldr	r3, [pc, #16]	; (8003a1c <vTaskSuspend+0xd0>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
	}
 8003a0e:	e001      	b.n	8003a14 <vTaskSuspend+0xc8>
					vTaskSwitchContext();
 8003a10:	f000 fa74 	bl	8003efc <vTaskSwitchContext>
	}
 8003a14:	bf00      	nop
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	200006f0 	.word	0x200006f0
 8003a20:	20000bb0 	.word	0x20000bb0
 8003a24:	20000bd0 	.word	0x20000bd0
 8003a28:	20000bec 	.word	0x20000bec
 8003a2c:	e000ed04 	.word	0xe000ed04
 8003a30:	20000bc4 	.word	0x20000bc4

08003a34 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d109      	bne.n	8003a5e <prvTaskIsTaskSuspended+0x2a>
 8003a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4e:	f383 8811 	msr	BASEPRI, r3
 8003a52:	f3bf 8f6f 	isb	sy
 8003a56:	f3bf 8f4f 	dsb	sy
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	e7fe      	b.n	8003a5c <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	4a0a      	ldr	r2, [pc, #40]	; (8003a8c <prvTaskIsTaskSuspended+0x58>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d10a      	bne.n	8003a7e <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6c:	4a08      	ldr	r2, [pc, #32]	; (8003a90 <prvTaskIsTaskSuspended+0x5c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d005      	beq.n	8003a7e <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a7e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003a80:	4618      	mov	r0, r3
 8003a82:	371c      	adds	r7, #28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	20000bb0 	.word	0x20000bb0
 8003a90:	20000b84 	.word	0x20000b84

08003a94 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <vTaskResume+0x26>
 8003aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	e7fe      	b.n	8003ab8 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003aba:	4b21      	ldr	r3, [pc, #132]	; (8003b40 <vTaskResume+0xac>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d038      	beq.n	8003b36 <vTaskResume+0xa2>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d035      	beq.n	8003b36 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8003aca:	f001 fa77 	bl	8004fbc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f7ff ffb0 	bl	8003a34 <prvTaskIsTaskSuspended>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d02b      	beq.n	8003b32 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	3304      	adds	r3, #4
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fe ff6a 	bl	80029b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae8:	4b16      	ldr	r3, [pc, #88]	; (8003b44 <vTaskResume+0xb0>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d903      	bls.n	8003af8 <vTaskResume+0x64>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	4a13      	ldr	r2, [pc, #76]	; (8003b44 <vTaskResume+0xb0>)
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4a10      	ldr	r2, [pc, #64]	; (8003b48 <vTaskResume+0xb4>)
 8003b06:	441a      	add	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4610      	mov	r0, r2
 8003b10:	f7fe fef5 	bl	80028fe <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b18:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <vTaskResume+0xac>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d307      	bcc.n	8003b32 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8003b22:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <vTaskResume+0xb8>)
 8003b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	f3bf 8f4f 	dsb	sy
 8003b2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8003b32:	f001 fa71 	bl	8005018 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b36:	bf00      	nop
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	200006f0 	.word	0x200006f0
 8003b44:	20000bcc 	.word	0x20000bcc
 8003b48:	200006f4 	.word	0x200006f4
 8003b4c:	e000ed04 	.word	0xe000ed04

08003b50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08a      	sub	sp, #40	; 0x28
 8003b54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b5e:	463a      	mov	r2, r7
 8003b60:	1d39      	adds	r1, r7, #4
 8003b62:	f107 0308 	add.w	r3, r7, #8
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fe fcf4 	bl	8002554 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b6c:	6839      	ldr	r1, [r7, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	9202      	str	r2, [sp, #8]
 8003b74:	9301      	str	r3, [sp, #4]
 8003b76:	2300      	movs	r3, #0
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	460a      	mov	r2, r1
 8003b7e:	4920      	ldr	r1, [pc, #128]	; (8003c00 <vTaskStartScheduler+0xb0>)
 8003b80:	4820      	ldr	r0, [pc, #128]	; (8003c04 <vTaskStartScheduler+0xb4>)
 8003b82:	f7ff fd0f 	bl	80035a4 <xTaskCreateStatic>
 8003b86:	4602      	mov	r2, r0
 8003b88:	4b1f      	ldr	r3, [pc, #124]	; (8003c08 <vTaskStartScheduler+0xb8>)
 8003b8a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b8c:	4b1e      	ldr	r3, [pc, #120]	; (8003c08 <vTaskStartScheduler+0xb8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b94:	2301      	movs	r3, #1
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	e001      	b.n	8003b9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d102      	bne.n	8003baa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003ba4:	f000 fd80 	bl	80046a8 <xTimerCreateTimerTask>
 8003ba8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d115      	bne.n	8003bdc <vTaskStartScheduler+0x8c>
 8003bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003bc2:	4b12      	ldr	r3, [pc, #72]	; (8003c0c <vTaskStartScheduler+0xbc>)
 8003bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003bca:	4b11      	ldr	r3, [pc, #68]	; (8003c10 <vTaskStartScheduler+0xc0>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003bd0:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <vTaskStartScheduler+0xc4>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003bd6:	f001 f953 	bl	8004e80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bda:	e00d      	b.n	8003bf8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be2:	d109      	bne.n	8003bf8 <vTaskStartScheduler+0xa8>
 8003be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	e7fe      	b.n	8003bf6 <vTaskStartScheduler+0xa6>
}
 8003bf8:	bf00      	nop
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	08006038 	.word	0x08006038
 8003c04:	080042d9 	.word	0x080042d9
 8003c08:	20000be8 	.word	0x20000be8
 8003c0c:	20000be4 	.word	0x20000be4
 8003c10:	20000bd0 	.word	0x20000bd0
 8003c14:	20000bc8 	.word	0x20000bc8

08003c18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003c1c:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <vTaskSuspendAll+0x18>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3301      	adds	r3, #1
 8003c22:	4a03      	ldr	r2, [pc, #12]	; (8003c30 <vTaskSuspendAll+0x18>)
 8003c24:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003c26:	bf00      	nop
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	20000bec 	.word	0x20000bec

08003c34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c42:	4b41      	ldr	r3, [pc, #260]	; (8003d48 <xTaskResumeAll+0x114>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <xTaskResumeAll+0x2a>
 8003c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	e7fe      	b.n	8003c5c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c5e:	f001 f9ad 	bl	8004fbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c62:	4b39      	ldr	r3, [pc, #228]	; (8003d48 <xTaskResumeAll+0x114>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	4a37      	ldr	r2, [pc, #220]	; (8003d48 <xTaskResumeAll+0x114>)
 8003c6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c6c:	4b36      	ldr	r3, [pc, #216]	; (8003d48 <xTaskResumeAll+0x114>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d162      	bne.n	8003d3a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c74:	4b35      	ldr	r3, [pc, #212]	; (8003d4c <xTaskResumeAll+0x118>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d05e      	beq.n	8003d3a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c7c:	e02f      	b.n	8003cde <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c7e:	4b34      	ldr	r3, [pc, #208]	; (8003d50 <xTaskResumeAll+0x11c>)
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	3318      	adds	r3, #24
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fe fe94 	bl	80029b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	3304      	adds	r3, #4
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fe fe8f 	bl	80029b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9e:	4b2d      	ldr	r3, [pc, #180]	; (8003d54 <xTaskResumeAll+0x120>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d903      	bls.n	8003cae <xTaskResumeAll+0x7a>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003caa:	4a2a      	ldr	r2, [pc, #168]	; (8003d54 <xTaskResumeAll+0x120>)
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4a27      	ldr	r2, [pc, #156]	; (8003d58 <xTaskResumeAll+0x124>)
 8003cbc:	441a      	add	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	f7fe fe1a 	bl	80028fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cce:	4b23      	ldr	r3, [pc, #140]	; (8003d5c <xTaskResumeAll+0x128>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d302      	bcc.n	8003cde <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003cd8:	4b21      	ldr	r3, [pc, #132]	; (8003d60 <xTaskResumeAll+0x12c>)
 8003cda:	2201      	movs	r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cde:	4b1c      	ldr	r3, [pc, #112]	; (8003d50 <xTaskResumeAll+0x11c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1cb      	bne.n	8003c7e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cec:	f000 fbde 	bl	80044ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003cf0:	4b1c      	ldr	r3, [pc, #112]	; (8003d64 <xTaskResumeAll+0x130>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d010      	beq.n	8003d1e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cfc:	f000 f846 	bl	8003d8c <xTaskIncrementTick>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003d06:	4b16      	ldr	r3, [pc, #88]	; (8003d60 <xTaskResumeAll+0x12c>)
 8003d08:	2201      	movs	r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1f1      	bne.n	8003cfc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003d18:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <xTaskResumeAll+0x130>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d1e:	4b10      	ldr	r3, [pc, #64]	; (8003d60 <xTaskResumeAll+0x12c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d26:	2301      	movs	r3, #1
 8003d28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d2a:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <xTaskResumeAll+0x134>)
 8003d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d3a:	f001 f96d 	bl	8005018 <vPortExitCritical>

	return xAlreadyYielded;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	20000bec 	.word	0x20000bec
 8003d4c:	20000bc4 	.word	0x20000bc4
 8003d50:	20000b84 	.word	0x20000b84
 8003d54:	20000bcc 	.word	0x20000bcc
 8003d58:	200006f4 	.word	0x200006f4
 8003d5c:	200006f0 	.word	0x200006f0
 8003d60:	20000bd8 	.word	0x20000bd8
 8003d64:	20000bd4 	.word	0x20000bd4
 8003d68:	e000ed04 	.word	0xe000ed04

08003d6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d72:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <xTaskGetTickCount+0x1c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d78:	687b      	ldr	r3, [r7, #4]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	20000bc8 	.word	0x20000bc8

08003d8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d96:	4b4e      	ldr	r3, [pc, #312]	; (8003ed0 <xTaskIncrementTick+0x144>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f040 8088 	bne.w	8003eb0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003da0:	4b4c      	ldr	r3, [pc, #304]	; (8003ed4 <xTaskIncrementTick+0x148>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3301      	adds	r3, #1
 8003da6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003da8:	4a4a      	ldr	r2, [pc, #296]	; (8003ed4 <xTaskIncrementTick+0x148>)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d11f      	bne.n	8003df4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003db4:	4b48      	ldr	r3, [pc, #288]	; (8003ed8 <xTaskIncrementTick+0x14c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d009      	beq.n	8003dd2 <xTaskIncrementTick+0x46>
 8003dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	603b      	str	r3, [r7, #0]
 8003dd0:	e7fe      	b.n	8003dd0 <xTaskIncrementTick+0x44>
 8003dd2:	4b41      	ldr	r3, [pc, #260]	; (8003ed8 <xTaskIncrementTick+0x14c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	4b40      	ldr	r3, [pc, #256]	; (8003edc <xTaskIncrementTick+0x150>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a3e      	ldr	r2, [pc, #248]	; (8003ed8 <xTaskIncrementTick+0x14c>)
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	4a3e      	ldr	r2, [pc, #248]	; (8003edc <xTaskIncrementTick+0x150>)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	4b3e      	ldr	r3, [pc, #248]	; (8003ee0 <xTaskIncrementTick+0x154>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3301      	adds	r3, #1
 8003dec:	4a3c      	ldr	r2, [pc, #240]	; (8003ee0 <xTaskIncrementTick+0x154>)
 8003dee:	6013      	str	r3, [r2, #0]
 8003df0:	f000 fb5c 	bl	80044ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003df4:	4b3b      	ldr	r3, [pc, #236]	; (8003ee4 <xTaskIncrementTick+0x158>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d349      	bcc.n	8003e92 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dfe:	4b36      	ldr	r3, [pc, #216]	; (8003ed8 <xTaskIncrementTick+0x14c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d104      	bne.n	8003e12 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e08:	4b36      	ldr	r3, [pc, #216]	; (8003ee4 <xTaskIncrementTick+0x158>)
 8003e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e0e:	601a      	str	r2, [r3, #0]
					break;
 8003e10:	e03f      	b.n	8003e92 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e12:	4b31      	ldr	r3, [pc, #196]	; (8003ed8 <xTaskIncrementTick+0x14c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d203      	bcs.n	8003e32 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e2a:	4a2e      	ldr	r2, [pc, #184]	; (8003ee4 <xTaskIncrementTick+0x158>)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e30:	e02f      	b.n	8003e92 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	3304      	adds	r3, #4
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fe fdbe 	bl	80029b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d004      	beq.n	8003e4e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	3318      	adds	r3, #24
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fe fdb5 	bl	80029b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e52:	4b25      	ldr	r3, [pc, #148]	; (8003ee8 <xTaskIncrementTick+0x15c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d903      	bls.n	8003e62 <xTaskIncrementTick+0xd6>
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5e:	4a22      	ldr	r2, [pc, #136]	; (8003ee8 <xTaskIncrementTick+0x15c>)
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4a1f      	ldr	r2, [pc, #124]	; (8003eec <xTaskIncrementTick+0x160>)
 8003e70:	441a      	add	r2, r3
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	3304      	adds	r3, #4
 8003e76:	4619      	mov	r1, r3
 8003e78:	4610      	mov	r0, r2
 8003e7a:	f7fe fd40 	bl	80028fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e82:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <xTaskIncrementTick+0x164>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d3b8      	bcc.n	8003dfe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e90:	e7b5      	b.n	8003dfe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e92:	4b17      	ldr	r3, [pc, #92]	; (8003ef0 <xTaskIncrementTick+0x164>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e98:	4914      	ldr	r1, [pc, #80]	; (8003eec <xTaskIncrementTick+0x160>)
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d907      	bls.n	8003eba <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	e004      	b.n	8003eba <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003eb0:	4b10      	ldr	r3, [pc, #64]	; (8003ef4 <xTaskIncrementTick+0x168>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	4a0f      	ldr	r2, [pc, #60]	; (8003ef4 <xTaskIncrementTick+0x168>)
 8003eb8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003eba:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <xTaskIncrementTick+0x16c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003ec6:	697b      	ldr	r3, [r7, #20]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20000bec 	.word	0x20000bec
 8003ed4:	20000bc8 	.word	0x20000bc8
 8003ed8:	20000b7c 	.word	0x20000b7c
 8003edc:	20000b80 	.word	0x20000b80
 8003ee0:	20000bdc 	.word	0x20000bdc
 8003ee4:	20000be4 	.word	0x20000be4
 8003ee8:	20000bcc 	.word	0x20000bcc
 8003eec:	200006f4 	.word	0x200006f4
 8003ef0:	200006f0 	.word	0x200006f0
 8003ef4:	20000bd4 	.word	0x20000bd4
 8003ef8:	20000bd8 	.word	0x20000bd8

08003efc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f02:	4b27      	ldr	r3, [pc, #156]	; (8003fa0 <vTaskSwitchContext+0xa4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f0a:	4b26      	ldr	r3, [pc, #152]	; (8003fa4 <vTaskSwitchContext+0xa8>)
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f10:	e040      	b.n	8003f94 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003f12:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <vTaskSwitchContext+0xa8>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f18:	4b23      	ldr	r3, [pc, #140]	; (8003fa8 <vTaskSwitchContext+0xac>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	e00f      	b.n	8003f40 <vTaskSwitchContext+0x44>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d109      	bne.n	8003f3a <vTaskSwitchContext+0x3e>
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	607b      	str	r3, [r7, #4]
 8003f38:	e7fe      	b.n	8003f38 <vTaskSwitchContext+0x3c>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	491a      	ldr	r1, [pc, #104]	; (8003fac <vTaskSwitchContext+0xb0>)
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0e5      	beq.n	8003f20 <vTaskSwitchContext+0x24>
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4a13      	ldr	r2, [pc, #76]	; (8003fac <vTaskSwitchContext+0xb0>)
 8003f60:	4413      	add	r3, r2
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	3308      	adds	r3, #8
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d104      	bne.n	8003f84 <vTaskSwitchContext+0x88>
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	605a      	str	r2, [r3, #4]
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	4a09      	ldr	r2, [pc, #36]	; (8003fb0 <vTaskSwitchContext+0xb4>)
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	4a06      	ldr	r2, [pc, #24]	; (8003fa8 <vTaskSwitchContext+0xac>)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6013      	str	r3, [r2, #0]
}
 8003f94:	bf00      	nop
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	20000bec 	.word	0x20000bec
 8003fa4:	20000bd8 	.word	0x20000bd8
 8003fa8:	20000bcc 	.word	0x20000bcc
 8003fac:	200006f4 	.word	0x200006f4
 8003fb0:	200006f0 	.word	0x200006f0

08003fb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d109      	bne.n	8003fd8 <vTaskPlaceOnEventList+0x24>
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	e7fe      	b.n	8003fd6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fd8:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <vTaskPlaceOnEventList+0x44>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3318      	adds	r3, #24
 8003fde:	4619      	mov	r1, r3
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7fe fcb0 	bl	8002946 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	6838      	ldr	r0, [r7, #0]
 8003fea:	f000 fb09 	bl	8004600 <prvAddCurrentTaskToDelayedList>
}
 8003fee:	bf00      	nop
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	200006f0 	.word	0x200006f0

08003ffc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d109      	bne.n	8004022 <vTaskPlaceOnEventListRestricted+0x26>
 800400e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	e7fe      	b.n	8004020 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004022:	4b0a      	ldr	r3, [pc, #40]	; (800404c <vTaskPlaceOnEventListRestricted+0x50>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3318      	adds	r3, #24
 8004028:	4619      	mov	r1, r3
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f7fe fc67 	bl	80028fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004036:	f04f 33ff 	mov.w	r3, #4294967295
 800403a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	68b8      	ldr	r0, [r7, #8]
 8004040:	f000 fade 	bl	8004600 <prvAddCurrentTaskToDelayedList>
	}
 8004044:	bf00      	nop
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	200006f0 	.word	0x200006f0

08004050 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d109      	bne.n	800407a <xTaskRemoveFromEventList+0x2a>
 8004066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	e7fe      	b.n	8004078 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	3318      	adds	r3, #24
 800407e:	4618      	mov	r0, r3
 8004080:	f7fe fc9a 	bl	80029b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004084:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <xTaskRemoveFromEventList+0xac>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d11d      	bne.n	80040c8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	3304      	adds	r3, #4
 8004090:	4618      	mov	r0, r3
 8004092:	f7fe fc91 	bl	80029b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409a:	4b19      	ldr	r3, [pc, #100]	; (8004100 <xTaskRemoveFromEventList+0xb0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d903      	bls.n	80040aa <xTaskRemoveFromEventList+0x5a>
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	4a16      	ldr	r2, [pc, #88]	; (8004100 <xTaskRemoveFromEventList+0xb0>)
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4a13      	ldr	r2, [pc, #76]	; (8004104 <xTaskRemoveFromEventList+0xb4>)
 80040b8:	441a      	add	r2, r3
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	3304      	adds	r3, #4
 80040be:	4619      	mov	r1, r3
 80040c0:	4610      	mov	r0, r2
 80040c2:	f7fe fc1c 	bl	80028fe <vListInsertEnd>
 80040c6:	e005      	b.n	80040d4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	3318      	adds	r3, #24
 80040cc:	4619      	mov	r1, r3
 80040ce:	480e      	ldr	r0, [pc, #56]	; (8004108 <xTaskRemoveFromEventList+0xb8>)
 80040d0:	f7fe fc15 	bl	80028fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d8:	4b0c      	ldr	r3, [pc, #48]	; (800410c <xTaskRemoveFromEventList+0xbc>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	429a      	cmp	r2, r3
 80040e0:	d905      	bls.n	80040ee <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80040e2:	2301      	movs	r3, #1
 80040e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040e6:	4b0a      	ldr	r3, [pc, #40]	; (8004110 <xTaskRemoveFromEventList+0xc0>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	e001      	b.n	80040f2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80040f2:	697b      	ldr	r3, [r7, #20]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20000bec 	.word	0x20000bec
 8004100:	20000bcc 	.word	0x20000bcc
 8004104:	200006f4 	.word	0x200006f4
 8004108:	20000b84 	.word	0x20000b84
 800410c:	200006f0 	.word	0x200006f0
 8004110:	20000bd8 	.word	0x20000bd8

08004114 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800411e:	4b28      	ldr	r3, [pc, #160]	; (80041c0 <vTaskRemoveFromUnorderedEventList+0xac>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <vTaskRemoveFromUnorderedEventList+0x26>
 8004126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	613b      	str	r3, [r7, #16]
 8004138:	e7fe      	b.n	8004138 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d109      	bne.n	8004164 <vTaskRemoveFromUnorderedEventList+0x50>
 8004150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	e7fe      	b.n	8004162 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7fe fc27 	bl	80029b8 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	3304      	adds	r3, #4
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe fc22 	bl	80029b8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004178:	4b12      	ldr	r3, [pc, #72]	; (80041c4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	429a      	cmp	r2, r3
 800417e:	d903      	bls.n	8004188 <vTaskRemoveFromUnorderedEventList+0x74>
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	4a0f      	ldr	r2, [pc, #60]	; (80041c4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8004186:	6013      	str	r3, [r2, #0]
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4a0c      	ldr	r2, [pc, #48]	; (80041c8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004196:	441a      	add	r2, r3
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	3304      	adds	r3, #4
 800419c:	4619      	mov	r1, r3
 800419e:	4610      	mov	r0, r2
 80041a0:	f7fe fbad 	bl	80028fe <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a8:	4b08      	ldr	r3, [pc, #32]	; (80041cc <vTaskRemoveFromUnorderedEventList+0xb8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d902      	bls.n	80041b8 <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80041b2:	4b07      	ldr	r3, [pc, #28]	; (80041d0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
	}
}
 80041b8:	bf00      	nop
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	20000bec 	.word	0x20000bec
 80041c4:	20000bcc 	.word	0x20000bcc
 80041c8:	200006f4 	.word	0x200006f4
 80041cc:	200006f0 	.word	0x200006f0
 80041d0:	20000bd8 	.word	0x20000bd8

080041d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <vTaskInternalSetTimeOutState+0x24>)
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041e4:	4b05      	ldr	r3, [pc, #20]	; (80041fc <vTaskInternalSetTimeOutState+0x28>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	605a      	str	r2, [r3, #4]
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	20000bdc 	.word	0x20000bdc
 80041fc:	20000bc8 	.word	0x20000bc8

08004200 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d109      	bne.n	8004224 <xTaskCheckForTimeOut+0x24>
 8004210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	e7fe      	b.n	8004222 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d109      	bne.n	800423e <xTaskCheckForTimeOut+0x3e>
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	e7fe      	b.n	800423c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800423e:	f000 febd 	bl	8004fbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004242:	4b1d      	ldr	r3, [pc, #116]	; (80042b8 <xTaskCheckForTimeOut+0xb8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425a:	d102      	bne.n	8004262 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800425c:	2300      	movs	r3, #0
 800425e:	61fb      	str	r3, [r7, #28]
 8004260:	e023      	b.n	80042aa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	4b15      	ldr	r3, [pc, #84]	; (80042bc <xTaskCheckForTimeOut+0xbc>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d007      	beq.n	800427e <xTaskCheckForTimeOut+0x7e>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	429a      	cmp	r2, r3
 8004276:	d302      	bcc.n	800427e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004278:	2301      	movs	r3, #1
 800427a:	61fb      	str	r3, [r7, #28]
 800427c:	e015      	b.n	80042aa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	429a      	cmp	r2, r3
 8004286:	d20b      	bcs.n	80042a0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	1ad2      	subs	r2, r2, r3
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff ff9d 	bl	80041d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	e004      	b.n	80042aa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80042a6:	2301      	movs	r3, #1
 80042a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80042aa:	f000 feb5 	bl	8005018 <vPortExitCritical>

	return xReturn;
 80042ae:	69fb      	ldr	r3, [r7, #28]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3720      	adds	r7, #32
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	20000bc8 	.word	0x20000bc8
 80042bc:	20000bdc 	.word	0x20000bdc

080042c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042c4:	4b03      	ldr	r3, [pc, #12]	; (80042d4 <vTaskMissedYield+0x14>)
 80042c6:	2201      	movs	r2, #1
 80042c8:	601a      	str	r2, [r3, #0]
}
 80042ca:	bf00      	nop
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	20000bd8 	.word	0x20000bd8

080042d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042e0:	f000 f852 	bl	8004388 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042e4:	4b06      	ldr	r3, [pc, #24]	; (8004300 <prvIdleTask+0x28>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d9f9      	bls.n	80042e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80042ec:	4b05      	ldr	r3, [pc, #20]	; (8004304 <prvIdleTask+0x2c>)
 80042ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042fc:	e7f0      	b.n	80042e0 <prvIdleTask+0x8>
 80042fe:	bf00      	nop
 8004300:	200006f4 	.word	0x200006f4
 8004304:	e000ed04 	.word	0xe000ed04

08004308 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800430e:	2300      	movs	r3, #0
 8004310:	607b      	str	r3, [r7, #4]
 8004312:	e00c      	b.n	800432e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	4613      	mov	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4a12      	ldr	r2, [pc, #72]	; (8004368 <prvInitialiseTaskLists+0x60>)
 8004320:	4413      	add	r3, r2
 8004322:	4618      	mov	r0, r3
 8004324:	f7fe fabe 	bl	80028a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3301      	adds	r3, #1
 800432c:	607b      	str	r3, [r7, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b37      	cmp	r3, #55	; 0x37
 8004332:	d9ef      	bls.n	8004314 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004334:	480d      	ldr	r0, [pc, #52]	; (800436c <prvInitialiseTaskLists+0x64>)
 8004336:	f7fe fab5 	bl	80028a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800433a:	480d      	ldr	r0, [pc, #52]	; (8004370 <prvInitialiseTaskLists+0x68>)
 800433c:	f7fe fab2 	bl	80028a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004340:	480c      	ldr	r0, [pc, #48]	; (8004374 <prvInitialiseTaskLists+0x6c>)
 8004342:	f7fe faaf 	bl	80028a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004346:	480c      	ldr	r0, [pc, #48]	; (8004378 <prvInitialiseTaskLists+0x70>)
 8004348:	f7fe faac 	bl	80028a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800434c:	480b      	ldr	r0, [pc, #44]	; (800437c <prvInitialiseTaskLists+0x74>)
 800434e:	f7fe faa9 	bl	80028a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004352:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <prvInitialiseTaskLists+0x78>)
 8004354:	4a05      	ldr	r2, [pc, #20]	; (800436c <prvInitialiseTaskLists+0x64>)
 8004356:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004358:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <prvInitialiseTaskLists+0x7c>)
 800435a:	4a05      	ldr	r2, [pc, #20]	; (8004370 <prvInitialiseTaskLists+0x68>)
 800435c:	601a      	str	r2, [r3, #0]
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	200006f4 	.word	0x200006f4
 800436c:	20000b54 	.word	0x20000b54
 8004370:	20000b68 	.word	0x20000b68
 8004374:	20000b84 	.word	0x20000b84
 8004378:	20000b98 	.word	0x20000b98
 800437c:	20000bb0 	.word	0x20000bb0
 8004380:	20000b7c 	.word	0x20000b7c
 8004384:	20000b80 	.word	0x20000b80

08004388 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800438e:	e019      	b.n	80043c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004390:	f000 fe14 	bl	8004fbc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004394:	4b0f      	ldr	r3, [pc, #60]	; (80043d4 <prvCheckTasksWaitingTermination+0x4c>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3304      	adds	r3, #4
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fe fb09 	bl	80029b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043a6:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <prvCheckTasksWaitingTermination+0x50>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	4a0a      	ldr	r2, [pc, #40]	; (80043d8 <prvCheckTasksWaitingTermination+0x50>)
 80043ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043b0:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <prvCheckTasksWaitingTermination+0x54>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3b01      	subs	r3, #1
 80043b6:	4a09      	ldr	r2, [pc, #36]	; (80043dc <prvCheckTasksWaitingTermination+0x54>)
 80043b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043ba:	f000 fe2d 	bl	8005018 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f846 	bl	8004450 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043c4:	4b05      	ldr	r3, [pc, #20]	; (80043dc <prvCheckTasksWaitingTermination+0x54>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e1      	bne.n	8004390 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043cc:	bf00      	nop
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	20000b98 	.word	0x20000b98
 80043d8:	20000bc4 	.word	0x20000bc4
 80043dc:	20000bac 	.word	0x20000bac

080043e0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80043ec:	e005      	b.n	80043fa <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3301      	adds	r3, #1
 80043f2:	607b      	str	r3, [r7, #4]
			ulCount++;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	3301      	adds	r3, #1
 80043f8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	2ba5      	cmp	r3, #165	; 0xa5
 8004400:	d0f5      	beq.n	80043ee <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	089b      	lsrs	r3, r3, #2
 8004406:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	b29b      	uxth	r3, r3
	}
 800440c:	4618      	mov	r0, r3
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d102      	bne.n	800442c <uxTaskGetStackHighWaterMark+0x14>
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <uxTaskGetStackHighWaterMark+0x34>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	e000      	b.n	800442e <uxTaskGetStackHighWaterMark+0x16>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004434:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8004436:	6938      	ldr	r0, [r7, #16]
 8004438:	f7ff ffd2 	bl	80043e0 <prvTaskCheckFreeStackSpace>
 800443c:	4603      	mov	r3, r0
 800443e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8004440:	68fb      	ldr	r3, [r7, #12]
	}
 8004442:	4618      	mov	r0, r3
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	200006f0 	.word	0x200006f0

08004450 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800445e:	2b00      	cmp	r3, #0
 8004460:	d108      	bne.n	8004474 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	4618      	mov	r0, r3
 8004468:	f000 ff84 	bl	8005374 <vPortFree>
				vPortFree( pxTCB );
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 ff81 	bl	8005374 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004472:	e017      	b.n	80044a4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800447a:	2b01      	cmp	r3, #1
 800447c:	d103      	bne.n	8004486 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 ff78 	bl	8005374 <vPortFree>
	}
 8004484:	e00e      	b.n	80044a4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800448c:	2b02      	cmp	r3, #2
 800448e:	d009      	beq.n	80044a4 <prvDeleteTCB+0x54>
 8004490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	e7fe      	b.n	80044a2 <prvDeleteTCB+0x52>
	}
 80044a4:	bf00      	nop
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044b2:	4b0c      	ldr	r3, [pc, #48]	; (80044e4 <prvResetNextTaskUnblockTime+0x38>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d104      	bne.n	80044c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80044bc:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <prvResetNextTaskUnblockTime+0x3c>)
 80044be:	f04f 32ff 	mov.w	r2, #4294967295
 80044c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80044c4:	e008      	b.n	80044d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044c6:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <prvResetNextTaskUnblockTime+0x38>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	4a04      	ldr	r2, [pc, #16]	; (80044e8 <prvResetNextTaskUnblockTime+0x3c>)
 80044d6:	6013      	str	r3, [r2, #0]
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	20000b7c 	.word	0x20000b7c
 80044e8:	20000be4 	.word	0x20000be4

080044ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044f2:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <xTaskGetSchedulerState+0x34>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d102      	bne.n	8004500 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044fa:	2301      	movs	r3, #1
 80044fc:	607b      	str	r3, [r7, #4]
 80044fe:	e008      	b.n	8004512 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004500:	4b08      	ldr	r3, [pc, #32]	; (8004524 <xTaskGetSchedulerState+0x38>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d102      	bne.n	800450e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004508:	2302      	movs	r3, #2
 800450a:	607b      	str	r3, [r7, #4]
 800450c:	e001      	b.n	8004512 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800450e:	2300      	movs	r3, #0
 8004510:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004512:	687b      	ldr	r3, [r7, #4]
	}
 8004514:	4618      	mov	r0, r3
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	20000bd0 	.word	0x20000bd0
 8004524:	20000bec 	.word	0x20000bec

08004528 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004534:	2300      	movs	r3, #0
 8004536:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d054      	beq.n	80045e8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800453e:	4b2d      	ldr	r3, [pc, #180]	; (80045f4 <xTaskPriorityDisinherit+0xcc>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	429a      	cmp	r2, r3
 8004546:	d009      	beq.n	800455c <xTaskPriorityDisinherit+0x34>
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	e7fe      	b.n	800455a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004560:	2b00      	cmp	r3, #0
 8004562:	d109      	bne.n	8004578 <xTaskPriorityDisinherit+0x50>
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	60bb      	str	r3, [r7, #8]
 8004576:	e7fe      	b.n	8004576 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457c:	1e5a      	subs	r2, r3, #1
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458a:	429a      	cmp	r2, r3
 800458c:	d02c      	beq.n	80045e8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004592:	2b00      	cmp	r3, #0
 8004594:	d128      	bne.n	80045e8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	3304      	adds	r3, #4
 800459a:	4618      	mov	r0, r3
 800459c:	f7fe fa0c 	bl	80029b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b8:	4b0f      	ldr	r3, [pc, #60]	; (80045f8 <xTaskPriorityDisinherit+0xd0>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d903      	bls.n	80045c8 <xTaskPriorityDisinherit+0xa0>
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	4a0c      	ldr	r2, [pc, #48]	; (80045f8 <xTaskPriorityDisinherit+0xd0>)
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045cc:	4613      	mov	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4a09      	ldr	r2, [pc, #36]	; (80045fc <xTaskPriorityDisinherit+0xd4>)
 80045d6:	441a      	add	r2, r3
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	3304      	adds	r3, #4
 80045dc:	4619      	mov	r1, r3
 80045de:	4610      	mov	r0, r2
 80045e0:	f7fe f98d 	bl	80028fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80045e4:	2301      	movs	r3, #1
 80045e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045e8:	697b      	ldr	r3, [r7, #20]
	}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	200006f0 	.word	0x200006f0
 80045f8:	20000bcc 	.word	0x20000bcc
 80045fc:	200006f4 	.word	0x200006f4

08004600 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800460a:	4b21      	ldr	r3, [pc, #132]	; (8004690 <prvAddCurrentTaskToDelayedList+0x90>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004610:	4b20      	ldr	r3, [pc, #128]	; (8004694 <prvAddCurrentTaskToDelayedList+0x94>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3304      	adds	r3, #4
 8004616:	4618      	mov	r0, r3
 8004618:	f7fe f9ce 	bl	80029b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004622:	d10a      	bne.n	800463a <prvAddCurrentTaskToDelayedList+0x3a>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d007      	beq.n	800463a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800462a:	4b1a      	ldr	r3, [pc, #104]	; (8004694 <prvAddCurrentTaskToDelayedList+0x94>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3304      	adds	r3, #4
 8004630:	4619      	mov	r1, r3
 8004632:	4819      	ldr	r0, [pc, #100]	; (8004698 <prvAddCurrentTaskToDelayedList+0x98>)
 8004634:	f7fe f963 	bl	80028fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004638:	e026      	b.n	8004688 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4413      	add	r3, r2
 8004640:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004642:	4b14      	ldr	r3, [pc, #80]	; (8004694 <prvAddCurrentTaskToDelayedList+0x94>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	429a      	cmp	r2, r3
 8004650:	d209      	bcs.n	8004666 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004652:	4b12      	ldr	r3, [pc, #72]	; (800469c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	4b0f      	ldr	r3, [pc, #60]	; (8004694 <prvAddCurrentTaskToDelayedList+0x94>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3304      	adds	r3, #4
 800465c:	4619      	mov	r1, r3
 800465e:	4610      	mov	r0, r2
 8004660:	f7fe f971 	bl	8002946 <vListInsert>
}
 8004664:	e010      	b.n	8004688 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004666:	4b0e      	ldr	r3, [pc, #56]	; (80046a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	4b0a      	ldr	r3, [pc, #40]	; (8004694 <prvAddCurrentTaskToDelayedList+0x94>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3304      	adds	r3, #4
 8004670:	4619      	mov	r1, r3
 8004672:	4610      	mov	r0, r2
 8004674:	f7fe f967 	bl	8002946 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004678:	4b0a      	ldr	r3, [pc, #40]	; (80046a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	429a      	cmp	r2, r3
 8004680:	d202      	bcs.n	8004688 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004682:	4a08      	ldr	r2, [pc, #32]	; (80046a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	6013      	str	r3, [r2, #0]
}
 8004688:	bf00      	nop
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	20000bc8 	.word	0x20000bc8
 8004694:	200006f0 	.word	0x200006f0
 8004698:	20000bb0 	.word	0x20000bb0
 800469c:	20000b80 	.word	0x20000b80
 80046a0:	20000b7c 	.word	0x20000b7c
 80046a4:	20000be4 	.word	0x20000be4

080046a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08a      	sub	sp, #40	; 0x28
 80046ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80046b2:	f000 faff 	bl	8004cb4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80046b6:	4b1c      	ldr	r3, [pc, #112]	; (8004728 <xTimerCreateTimerTask+0x80>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d021      	beq.n	8004702 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80046c6:	1d3a      	adds	r2, r7, #4
 80046c8:	f107 0108 	add.w	r1, r7, #8
 80046cc:	f107 030c 	add.w	r3, r7, #12
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fd ff59 	bl	8002588 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	9202      	str	r2, [sp, #8]
 80046de:	9301      	str	r3, [sp, #4]
 80046e0:	2302      	movs	r3, #2
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	2300      	movs	r3, #0
 80046e6:	460a      	mov	r2, r1
 80046e8:	4910      	ldr	r1, [pc, #64]	; (800472c <xTimerCreateTimerTask+0x84>)
 80046ea:	4811      	ldr	r0, [pc, #68]	; (8004730 <xTimerCreateTimerTask+0x88>)
 80046ec:	f7fe ff5a 	bl	80035a4 <xTaskCreateStatic>
 80046f0:	4602      	mov	r2, r0
 80046f2:	4b10      	ldr	r3, [pc, #64]	; (8004734 <xTimerCreateTimerTask+0x8c>)
 80046f4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80046f6:	4b0f      	ldr	r3, [pc, #60]	; (8004734 <xTimerCreateTimerTask+0x8c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80046fe:	2301      	movs	r3, #1
 8004700:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d109      	bne.n	800471c <xTimerCreateTimerTask+0x74>
 8004708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	e7fe      	b.n	800471a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800471c:	697b      	ldr	r3, [r7, #20]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20000c20 	.word	0x20000c20
 800472c:	08006040 	.word	0x08006040
 8004730:	08004869 	.word	0x08004869
 8004734:	20000c24 	.word	0x20000c24

08004738 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08a      	sub	sp, #40	; 0x28
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004746:	2300      	movs	r3, #0
 8004748:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d109      	bne.n	8004764 <xTimerGenericCommand+0x2c>
 8004750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	623b      	str	r3, [r7, #32]
 8004762:	e7fe      	b.n	8004762 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004764:	4b19      	ldr	r3, [pc, #100]	; (80047cc <xTimerGenericCommand+0x94>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d02a      	beq.n	80047c2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2b05      	cmp	r3, #5
 800477c:	dc18      	bgt.n	80047b0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800477e:	f7ff feb5 	bl	80044ec <xTaskGetSchedulerState>
 8004782:	4603      	mov	r3, r0
 8004784:	2b02      	cmp	r3, #2
 8004786:	d109      	bne.n	800479c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004788:	4b10      	ldr	r3, [pc, #64]	; (80047cc <xTimerGenericCommand+0x94>)
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	f107 0110 	add.w	r1, r7, #16
 8004790:	2300      	movs	r3, #0
 8004792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004794:	f7fe fa78 	bl	8002c88 <xQueueGenericSend>
 8004798:	6278      	str	r0, [r7, #36]	; 0x24
 800479a:	e012      	b.n	80047c2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800479c:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <xTimerGenericCommand+0x94>)
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	f107 0110 	add.w	r1, r7, #16
 80047a4:	2300      	movs	r3, #0
 80047a6:	2200      	movs	r2, #0
 80047a8:	f7fe fa6e 	bl	8002c88 <xQueueGenericSend>
 80047ac:	6278      	str	r0, [r7, #36]	; 0x24
 80047ae:	e008      	b.n	80047c2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80047b0:	4b06      	ldr	r3, [pc, #24]	; (80047cc <xTimerGenericCommand+0x94>)
 80047b2:	6818      	ldr	r0, [r3, #0]
 80047b4:	f107 0110 	add.w	r1, r7, #16
 80047b8:	2300      	movs	r3, #0
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	f7fe fb5e 	bl	8002e7c <xQueueGenericSendFromISR>
 80047c0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3728      	adds	r7, #40	; 0x28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	20000c20 	.word	0x20000c20

080047d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b088      	sub	sp, #32
 80047d4:	af02      	add	r7, sp, #8
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047da:	4b22      	ldr	r3, [pc, #136]	; (8004864 <prvProcessExpiredTimer+0x94>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	3304      	adds	r3, #4
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fe f8e5 	bl	80029b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d021      	beq.n	8004840 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	699a      	ldr	r2, [r3, #24]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	18d1      	adds	r1, r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	6978      	ldr	r0, [r7, #20]
 800480a:	f000 f8d1 	bl	80049b0 <prvInsertTimerInActiveList>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d01e      	beq.n	8004852 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004814:	2300      	movs	r3, #0
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	2300      	movs	r3, #0
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	2100      	movs	r1, #0
 800481e:	6978      	ldr	r0, [r7, #20]
 8004820:	f7ff ff8a 	bl	8004738 <xTimerGenericCommand>
 8004824:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d112      	bne.n	8004852 <prvProcessExpiredTimer+0x82>
 800482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	e7fe      	b.n	800483e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004846:	f023 0301 	bic.w	r3, r3, #1
 800484a:	b2da      	uxtb	r2, r3
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	6978      	ldr	r0, [r7, #20]
 8004858:	4798      	blx	r3
}
 800485a:	bf00      	nop
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20000c18 	.word	0x20000c18

08004868 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004870:	f107 0308 	add.w	r3, r7, #8
 8004874:	4618      	mov	r0, r3
 8004876:	f000 f857 	bl	8004928 <prvGetNextExpireTime>
 800487a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	4619      	mov	r1, r3
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 f803 	bl	800488c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004886:	f000 f8d5 	bl	8004a34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800488a:	e7f1      	b.n	8004870 <prvTimerTask+0x8>

0800488c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004896:	f7ff f9bf 	bl	8003c18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800489a:	f107 0308 	add.w	r3, r7, #8
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 f866 	bl	8004970 <prvSampleTimeNow>
 80048a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d130      	bne.n	800490e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10a      	bne.n	80048c8 <prvProcessTimerOrBlockTask+0x3c>
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d806      	bhi.n	80048c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80048ba:	f7ff f9bb 	bl	8003c34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80048be:	68f9      	ldr	r1, [r7, #12]
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7ff ff85 	bl	80047d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80048c6:	e024      	b.n	8004912 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d008      	beq.n	80048e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80048ce:	4b13      	ldr	r3, [pc, #76]	; (800491c <prvProcessTimerOrBlockTask+0x90>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <prvProcessTimerOrBlockTask+0x50>
 80048d8:	2301      	movs	r3, #1
 80048da:	e000      	b.n	80048de <prvProcessTimerOrBlockTask+0x52>
 80048dc:	2300      	movs	r3, #0
 80048de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80048e0:	4b0f      	ldr	r3, [pc, #60]	; (8004920 <prvProcessTimerOrBlockTask+0x94>)
 80048e2:	6818      	ldr	r0, [r3, #0]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	4619      	mov	r1, r3
 80048ee:	f7fe fe25 	bl	800353c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80048f2:	f7ff f99f 	bl	8003c34 <xTaskResumeAll>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10a      	bne.n	8004912 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80048fc:	4b09      	ldr	r3, [pc, #36]	; (8004924 <prvProcessTimerOrBlockTask+0x98>)
 80048fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	f3bf 8f6f 	isb	sy
}
 800490c:	e001      	b.n	8004912 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800490e:	f7ff f991 	bl	8003c34 <xTaskResumeAll>
}
 8004912:	bf00      	nop
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20000c1c 	.word	0x20000c1c
 8004920:	20000c20 	.word	0x20000c20
 8004924:	e000ed04 	.word	0xe000ed04

08004928 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004930:	4b0e      	ldr	r3, [pc, #56]	; (800496c <prvGetNextExpireTime+0x44>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <prvGetNextExpireTime+0x16>
 800493a:	2201      	movs	r2, #1
 800493c:	e000      	b.n	8004940 <prvGetNextExpireTime+0x18>
 800493e:	2200      	movs	r2, #0
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d105      	bne.n	8004958 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800494c:	4b07      	ldr	r3, [pc, #28]	; (800496c <prvGetNextExpireTime+0x44>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	e001      	b.n	800495c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800495c:	68fb      	ldr	r3, [r7, #12]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	20000c18 	.word	0x20000c18

08004970 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004978:	f7ff f9f8 	bl	8003d6c <xTaskGetTickCount>
 800497c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800497e:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <prvSampleTimeNow+0x3c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	429a      	cmp	r2, r3
 8004986:	d205      	bcs.n	8004994 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004988:	f000 f930 	bl	8004bec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	e002      	b.n	800499a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800499a:	4a04      	ldr	r2, [pc, #16]	; (80049ac <prvSampleTimeNow+0x3c>)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80049a0:	68fb      	ldr	r3, [r7, #12]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20000c28 	.word	0x20000c28

080049b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80049be:	2300      	movs	r3, #0
 80049c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d812      	bhi.n	80049fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	1ad2      	subs	r2, r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d302      	bcc.n	80049ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80049e4:	2301      	movs	r3, #1
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	e01b      	b.n	8004a22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80049ea:	4b10      	ldr	r3, [pc, #64]	; (8004a2c <prvInsertTimerInActiveList+0x7c>)
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	3304      	adds	r3, #4
 80049f2:	4619      	mov	r1, r3
 80049f4:	4610      	mov	r0, r2
 80049f6:	f7fd ffa6 	bl	8002946 <vListInsert>
 80049fa:	e012      	b.n	8004a22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d206      	bcs.n	8004a12 <prvInsertTimerInActiveList+0x62>
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d302      	bcc.n	8004a12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	e007      	b.n	8004a22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a12:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <prvInsertTimerInActiveList+0x80>)
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	3304      	adds	r3, #4
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	f7fd ff92 	bl	8002946 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004a22:	697b      	ldr	r3, [r7, #20]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	20000c1c 	.word	0x20000c1c
 8004a30:	20000c18 	.word	0x20000c18

08004a34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08e      	sub	sp, #56	; 0x38
 8004a38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a3a:	e0c6      	b.n	8004bca <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	da17      	bge.n	8004a72 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004a42:	1d3b      	adds	r3, r7, #4
 8004a44:	3304      	adds	r3, #4
 8004a46:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d109      	bne.n	8004a62 <prvProcessReceivedCommands+0x2e>
 8004a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	61fb      	str	r3, [r7, #28]
 8004a60:	e7fe      	b.n	8004a60 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a68:	6850      	ldr	r0, [r2, #4]
 8004a6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a6c:	6892      	ldr	r2, [r2, #8]
 8004a6e:	4611      	mov	r1, r2
 8004a70:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f2c0 80a7 	blt.w	8004bc8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d004      	beq.n	8004a90 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a88:	3304      	adds	r3, #4
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fd ff94 	bl	80029b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a90:	463b      	mov	r3, r7
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff ff6c 	bl	8004970 <prvSampleTimeNow>
 8004a98:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b09      	cmp	r3, #9
 8004a9e:	f200 8094 	bhi.w	8004bca <prvProcessReceivedCommands+0x196>
 8004aa2:	a201      	add	r2, pc, #4	; (adr r2, 8004aa8 <prvProcessReceivedCommands+0x74>)
 8004aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa8:	08004ad1 	.word	0x08004ad1
 8004aac:	08004ad1 	.word	0x08004ad1
 8004ab0:	08004ad1 	.word	0x08004ad1
 8004ab4:	08004b43 	.word	0x08004b43
 8004ab8:	08004b57 	.word	0x08004b57
 8004abc:	08004b9f 	.word	0x08004b9f
 8004ac0:	08004ad1 	.word	0x08004ad1
 8004ac4:	08004ad1 	.word	0x08004ad1
 8004ac8:	08004b43 	.word	0x08004b43
 8004acc:	08004b57 	.word	0x08004b57
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ad6:	f043 0301 	orr.w	r3, r3, #1
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	18d1      	adds	r1, r2, r3
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004af0:	f7ff ff5e 	bl	80049b0 <prvInsertTimerInActiveList>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d067      	beq.n	8004bca <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d05c      	beq.n	8004bca <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	441a      	add	r2, r3
 8004b18:	2300      	movs	r3, #0
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	2100      	movs	r1, #0
 8004b20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b22:	f7ff fe09 	bl	8004738 <xTimerGenericCommand>
 8004b26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d14d      	bne.n	8004bca <prvProcessReceivedCommands+0x196>
 8004b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	61bb      	str	r3, [r7, #24]
 8004b40:	e7fe      	b.n	8004b40 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b48:	f023 0301 	bic.w	r3, r3, #1
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004b54:	e039      	b.n	8004bca <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b5c:	f043 0301 	orr.w	r3, r3, #1
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d109      	bne.n	8004b8a <prvProcessReceivedCommands+0x156>
 8004b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	e7fe      	b.n	8004b88 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	699a      	ldr	r2, [r3, #24]
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	18d1      	adds	r1, r2, r3
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b98:	f7ff ff0a 	bl	80049b0 <prvInsertTimerInActiveList>
					break;
 8004b9c:	e015      	b.n	8004bca <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d103      	bne.n	8004bb4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8004bac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bae:	f000 fbe1 	bl	8005374 <vPortFree>
 8004bb2:	e00a      	b.n	8004bca <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bba:	f023 0301 	bic.w	r3, r3, #1
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004bc6:	e000      	b.n	8004bca <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004bc8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bca:	4b07      	ldr	r3, [pc, #28]	; (8004be8 <prvProcessReceivedCommands+0x1b4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	1d39      	adds	r1, r7, #4
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fe f9e6 	bl	8002fa4 <xQueueReceive>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f47f af2e 	bne.w	8004a3c <prvProcessReceivedCommands+0x8>
	}
}
 8004be0:	bf00      	nop
 8004be2:	3730      	adds	r7, #48	; 0x30
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	20000c20 	.word	0x20000c20

08004bec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b088      	sub	sp, #32
 8004bf0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bf2:	e047      	b.n	8004c84 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bf4:	4b2d      	ldr	r3, [pc, #180]	; (8004cac <prvSwitchTimerLists+0xc0>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bfe:	4b2b      	ldr	r3, [pc, #172]	; (8004cac <prvSwitchTimerLists+0xc0>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	3304      	adds	r3, #4
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fd fed3 	bl	80029b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d02d      	beq.n	8004c84 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4413      	add	r3, r2
 8004c30:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d90e      	bls.n	8004c58 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c46:	4b19      	ldr	r3, [pc, #100]	; (8004cac <prvSwitchTimerLists+0xc0>)
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4610      	mov	r0, r2
 8004c52:	f7fd fe78 	bl	8002946 <vListInsert>
 8004c56:	e015      	b.n	8004c84 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c58:	2300      	movs	r3, #0
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	2100      	movs	r1, #0
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f7ff fd68 	bl	8004738 <xTimerGenericCommand>
 8004c68:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d109      	bne.n	8004c84 <prvSwitchTimerLists+0x98>
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	603b      	str	r3, [r7, #0]
 8004c82:	e7fe      	b.n	8004c82 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c84:	4b09      	ldr	r3, [pc, #36]	; (8004cac <prvSwitchTimerLists+0xc0>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1b2      	bne.n	8004bf4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c8e:	4b07      	ldr	r3, [pc, #28]	; (8004cac <prvSwitchTimerLists+0xc0>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c94:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <prvSwitchTimerLists+0xc4>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a04      	ldr	r2, [pc, #16]	; (8004cac <prvSwitchTimerLists+0xc0>)
 8004c9a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c9c:	4a04      	ldr	r2, [pc, #16]	; (8004cb0 <prvSwitchTimerLists+0xc4>)
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	6013      	str	r3, [r2, #0]
}
 8004ca2:	bf00      	nop
 8004ca4:	3718      	adds	r7, #24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20000c18 	.word	0x20000c18
 8004cb0:	20000c1c 	.word	0x20000c1c

08004cb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004cba:	f000 f97f 	bl	8004fbc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004cbe:	4b15      	ldr	r3, [pc, #84]	; (8004d14 <prvCheckForValidListAndQueue+0x60>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d120      	bne.n	8004d08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004cc6:	4814      	ldr	r0, [pc, #80]	; (8004d18 <prvCheckForValidListAndQueue+0x64>)
 8004cc8:	f7fd fdec 	bl	80028a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ccc:	4813      	ldr	r0, [pc, #76]	; (8004d1c <prvCheckForValidListAndQueue+0x68>)
 8004cce:	f7fd fde9 	bl	80028a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004cd2:	4b13      	ldr	r3, [pc, #76]	; (8004d20 <prvCheckForValidListAndQueue+0x6c>)
 8004cd4:	4a10      	ldr	r2, [pc, #64]	; (8004d18 <prvCheckForValidListAndQueue+0x64>)
 8004cd6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004cd8:	4b12      	ldr	r3, [pc, #72]	; (8004d24 <prvCheckForValidListAndQueue+0x70>)
 8004cda:	4a10      	ldr	r2, [pc, #64]	; (8004d1c <prvCheckForValidListAndQueue+0x68>)
 8004cdc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004cde:	2300      	movs	r3, #0
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	4b11      	ldr	r3, [pc, #68]	; (8004d28 <prvCheckForValidListAndQueue+0x74>)
 8004ce4:	4a11      	ldr	r2, [pc, #68]	; (8004d2c <prvCheckForValidListAndQueue+0x78>)
 8004ce6:	2110      	movs	r1, #16
 8004ce8:	200a      	movs	r0, #10
 8004cea:	f7fd fef7 	bl	8002adc <xQueueGenericCreateStatic>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	4b08      	ldr	r3, [pc, #32]	; (8004d14 <prvCheckForValidListAndQueue+0x60>)
 8004cf2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004cf4:	4b07      	ldr	r3, [pc, #28]	; (8004d14 <prvCheckForValidListAndQueue+0x60>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d005      	beq.n	8004d08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004cfc:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <prvCheckForValidListAndQueue+0x60>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	490b      	ldr	r1, [pc, #44]	; (8004d30 <prvCheckForValidListAndQueue+0x7c>)
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fe fbf2 	bl	80034ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d08:	f000 f986 	bl	8005018 <vPortExitCritical>
}
 8004d0c:	bf00      	nop
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	20000c20 	.word	0x20000c20
 8004d18:	20000bf0 	.word	0x20000bf0
 8004d1c:	20000c04 	.word	0x20000c04
 8004d20:	20000c18 	.word	0x20000c18
 8004d24:	20000c1c 	.word	0x20000c1c
 8004d28:	20000ccc 	.word	0x20000ccc
 8004d2c:	20000c2c 	.word	0x20000c2c
 8004d30:	08006048 	.word	0x08006048

08004d34 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08a      	sub	sp, #40	; 0x28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
 8004d40:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8004d42:	f06f 0301 	mvn.w	r3, #1
 8004d46:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d54:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <xTimerPendFunctionCallFromISR+0x3c>)
 8004d56:	6818      	ldr	r0, [r3, #0]
 8004d58:	f107 0114 	add.w	r1, r7, #20
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	f7fe f88c 	bl	8002e7c <xQueueGenericSendFromISR>
 8004d64:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3728      	adds	r7, #40	; 0x28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	20000c20 	.word	0x20000c20

08004d74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	3b04      	subs	r3, #4
 8004d84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	3b04      	subs	r3, #4
 8004d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	f023 0201 	bic.w	r2, r3, #1
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3b04      	subs	r3, #4
 8004da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004da4:	4a0c      	ldr	r2, [pc, #48]	; (8004dd8 <pxPortInitialiseStack+0x64>)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	3b14      	subs	r3, #20
 8004dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	3b04      	subs	r3, #4
 8004dba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f06f 0202 	mvn.w	r2, #2
 8004dc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	3b20      	subs	r3, #32
 8004dc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004dca:	68fb      	ldr	r3, [r7, #12]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	08004ddd 	.word	0x08004ddd

08004ddc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004de2:	2300      	movs	r3, #0
 8004de4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004de6:	4b11      	ldr	r3, [pc, #68]	; (8004e2c <prvTaskExitError+0x50>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dee:	d009      	beq.n	8004e04 <prvTaskExitError+0x28>
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	e7fe      	b.n	8004e02 <prvTaskExitError+0x26>
 8004e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e16:	bf00      	nop
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0fc      	beq.n	8004e18 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e1e:	bf00      	nop
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	20000008 	.word	0x20000008

08004e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e30:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <pxCurrentTCBConst2>)
 8004e32:	6819      	ldr	r1, [r3, #0]
 8004e34:	6808      	ldr	r0, [r1, #0]
 8004e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3a:	f380 8809 	msr	PSP, r0
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	f04f 0000 	mov.w	r0, #0
 8004e46:	f380 8811 	msr	BASEPRI, r0
 8004e4a:	4770      	bx	lr
 8004e4c:	f3af 8000 	nop.w

08004e50 <pxCurrentTCBConst2>:
 8004e50:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop

08004e58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004e58:	4808      	ldr	r0, [pc, #32]	; (8004e7c <prvPortStartFirstTask+0x24>)
 8004e5a:	6800      	ldr	r0, [r0, #0]
 8004e5c:	6800      	ldr	r0, [r0, #0]
 8004e5e:	f380 8808 	msr	MSP, r0
 8004e62:	f04f 0000 	mov.w	r0, #0
 8004e66:	f380 8814 	msr	CONTROL, r0
 8004e6a:	b662      	cpsie	i
 8004e6c:	b661      	cpsie	f
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	df00      	svc	0
 8004e78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e7a:	bf00      	nop
 8004e7c:	e000ed08 	.word	0xe000ed08

08004e80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e86:	4b44      	ldr	r3, [pc, #272]	; (8004f98 <xPortStartScheduler+0x118>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a44      	ldr	r2, [pc, #272]	; (8004f9c <xPortStartScheduler+0x11c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d109      	bne.n	8004ea4 <xPortStartScheduler+0x24>
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	e7fe      	b.n	8004ea2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ea4:	4b3c      	ldr	r3, [pc, #240]	; (8004f98 <xPortStartScheduler+0x118>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a3d      	ldr	r2, [pc, #244]	; (8004fa0 <xPortStartScheduler+0x120>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d109      	bne.n	8004ec2 <xPortStartScheduler+0x42>
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	e7fe      	b.n	8004ec0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ec2:	4b38      	ldr	r3, [pc, #224]	; (8004fa4 <xPortStartScheduler+0x124>)
 8004ec4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	22ff      	movs	r2, #255	; 0xff
 8004ed2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	4b30      	ldr	r3, [pc, #192]	; (8004fa8 <xPortStartScheduler+0x128>)
 8004ee8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004eea:	4b30      	ldr	r3, [pc, #192]	; (8004fac <xPortStartScheduler+0x12c>)
 8004eec:	2207      	movs	r2, #7
 8004eee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ef0:	e009      	b.n	8004f06 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004ef2:	4b2e      	ldr	r3, [pc, #184]	; (8004fac <xPortStartScheduler+0x12c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	4a2c      	ldr	r2, [pc, #176]	; (8004fac <xPortStartScheduler+0x12c>)
 8004efa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f06:	78fb      	ldrb	r3, [r7, #3]
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0e:	2b80      	cmp	r3, #128	; 0x80
 8004f10:	d0ef      	beq.n	8004ef2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f12:	4b26      	ldr	r3, [pc, #152]	; (8004fac <xPortStartScheduler+0x12c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f1c3 0307 	rsb	r3, r3, #7
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d009      	beq.n	8004f32 <xPortStartScheduler+0xb2>
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	60bb      	str	r3, [r7, #8]
 8004f30:	e7fe      	b.n	8004f30 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f32:	4b1e      	ldr	r3, [pc, #120]	; (8004fac <xPortStartScheduler+0x12c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	021b      	lsls	r3, r3, #8
 8004f38:	4a1c      	ldr	r2, [pc, #112]	; (8004fac <xPortStartScheduler+0x12c>)
 8004f3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f3c:	4b1b      	ldr	r3, [pc, #108]	; (8004fac <xPortStartScheduler+0x12c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f44:	4a19      	ldr	r2, [pc, #100]	; (8004fac <xPortStartScheduler+0x12c>)
 8004f46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f50:	4b17      	ldr	r3, [pc, #92]	; (8004fb0 <xPortStartScheduler+0x130>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a16      	ldr	r2, [pc, #88]	; (8004fb0 <xPortStartScheduler+0x130>)
 8004f56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f5c:	4b14      	ldr	r3, [pc, #80]	; (8004fb0 <xPortStartScheduler+0x130>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a13      	ldr	r2, [pc, #76]	; (8004fb0 <xPortStartScheduler+0x130>)
 8004f62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f68:	f000 f8d6 	bl	8005118 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f6c:	4b11      	ldr	r3, [pc, #68]	; (8004fb4 <xPortStartScheduler+0x134>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f72:	f000 f8f5 	bl	8005160 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f76:	4b10      	ldr	r3, [pc, #64]	; (8004fb8 <xPortStartScheduler+0x138>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a0f      	ldr	r2, [pc, #60]	; (8004fb8 <xPortStartScheduler+0x138>)
 8004f7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f80:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f82:	f7ff ff69 	bl	8004e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f86:	f7fe ffb9 	bl	8003efc <vTaskSwitchContext>
	prvTaskExitError();
 8004f8a:	f7ff ff27 	bl	8004ddc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	e000ed00 	.word	0xe000ed00
 8004f9c:	410fc271 	.word	0x410fc271
 8004fa0:	410fc270 	.word	0x410fc270
 8004fa4:	e000e400 	.word	0xe000e400
 8004fa8:	20000d1c 	.word	0x20000d1c
 8004fac:	20000d20 	.word	0x20000d20
 8004fb0:	e000ed20 	.word	0xe000ed20
 8004fb4:	20000008 	.word	0x20000008
 8004fb8:	e000ef34 	.word	0xe000ef34

08004fbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004fd4:	4b0e      	ldr	r3, [pc, #56]	; (8005010 <vPortEnterCritical+0x54>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	4a0d      	ldr	r2, [pc, #52]	; (8005010 <vPortEnterCritical+0x54>)
 8004fdc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004fde:	4b0c      	ldr	r3, [pc, #48]	; (8005010 <vPortEnterCritical+0x54>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d10e      	bne.n	8005004 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004fe6:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <vPortEnterCritical+0x58>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d009      	beq.n	8005004 <vPortEnterCritical+0x48>
 8004ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	603b      	str	r3, [r7, #0]
 8005002:	e7fe      	b.n	8005002 <vPortEnterCritical+0x46>
	}
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	20000008 	.word	0x20000008
 8005014:	e000ed04 	.word	0xe000ed04

08005018 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800501e:	4b11      	ldr	r3, [pc, #68]	; (8005064 <vPortExitCritical+0x4c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <vPortExitCritical+0x22>
 8005026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	607b      	str	r3, [r7, #4]
 8005038:	e7fe      	b.n	8005038 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800503a:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <vPortExitCritical+0x4c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3b01      	subs	r3, #1
 8005040:	4a08      	ldr	r2, [pc, #32]	; (8005064 <vPortExitCritical+0x4c>)
 8005042:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005044:	4b07      	ldr	r3, [pc, #28]	; (8005064 <vPortExitCritical+0x4c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d104      	bne.n	8005056 <vPortExitCritical+0x3e>
 800504c:	2300      	movs	r3, #0
 800504e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	20000008 	.word	0x20000008
	...

08005070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005070:	f3ef 8009 	mrs	r0, PSP
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	4b15      	ldr	r3, [pc, #84]	; (80050d0 <pxCurrentTCBConst>)
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	f01e 0f10 	tst.w	lr, #16
 8005080:	bf08      	it	eq
 8005082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800508a:	6010      	str	r0, [r2, #0]
 800508c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005090:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005094:	f380 8811 	msr	BASEPRI, r0
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f7fe ff2c 	bl	8003efc <vTaskSwitchContext>
 80050a4:	f04f 0000 	mov.w	r0, #0
 80050a8:	f380 8811 	msr	BASEPRI, r0
 80050ac:	bc09      	pop	{r0, r3}
 80050ae:	6819      	ldr	r1, [r3, #0]
 80050b0:	6808      	ldr	r0, [r1, #0]
 80050b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b6:	f01e 0f10 	tst.w	lr, #16
 80050ba:	bf08      	it	eq
 80050bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80050c0:	f380 8809 	msr	PSP, r0
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	f3af 8000 	nop.w

080050d0 <pxCurrentTCBConst>:
 80050d0:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop

080050d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050f0:	f7fe fe4c 	bl	8003d8c <xTaskIncrementTick>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050fa:	4b06      	ldr	r3, [pc, #24]	; (8005114 <SysTick_Handler+0x3c>)
 80050fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	2300      	movs	r3, #0
 8005104:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800510c:	bf00      	nop
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	e000ed04 	.word	0xe000ed04

08005118 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800511c:	4b0b      	ldr	r3, [pc, #44]	; (800514c <vPortSetupTimerInterrupt+0x34>)
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005122:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <vPortSetupTimerInterrupt+0x38>)
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005128:	4b0a      	ldr	r3, [pc, #40]	; (8005154 <vPortSetupTimerInterrupt+0x3c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a0a      	ldr	r2, [pc, #40]	; (8005158 <vPortSetupTimerInterrupt+0x40>)
 800512e:	fba2 2303 	umull	r2, r3, r2, r3
 8005132:	099b      	lsrs	r3, r3, #6
 8005134:	4a09      	ldr	r2, [pc, #36]	; (800515c <vPortSetupTimerInterrupt+0x44>)
 8005136:	3b01      	subs	r3, #1
 8005138:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800513a:	4b04      	ldr	r3, [pc, #16]	; (800514c <vPortSetupTimerInterrupt+0x34>)
 800513c:	2207      	movs	r2, #7
 800513e:	601a      	str	r2, [r3, #0]
}
 8005140:	bf00      	nop
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	e000e010 	.word	0xe000e010
 8005150:	e000e018 	.word	0xe000e018
 8005154:	2000000c 	.word	0x2000000c
 8005158:	10624dd3 	.word	0x10624dd3
 800515c:	e000e014 	.word	0xe000e014

08005160 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005160:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005170 <vPortEnableVFP+0x10>
 8005164:	6801      	ldr	r1, [r0, #0]
 8005166:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800516a:	6001      	str	r1, [r0, #0]
 800516c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800516e:	bf00      	nop
 8005170:	e000ed88 	.word	0xe000ed88

08005174 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800517a:	f3ef 8305 	mrs	r3, IPSR
 800517e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2b0f      	cmp	r3, #15
 8005184:	d913      	bls.n	80051ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005186:	4a16      	ldr	r2, [pc, #88]	; (80051e0 <vPortValidateInterruptPriority+0x6c>)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4413      	add	r3, r2
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005190:	4b14      	ldr	r3, [pc, #80]	; (80051e4 <vPortValidateInterruptPriority+0x70>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	7afa      	ldrb	r2, [r7, #11]
 8005196:	429a      	cmp	r2, r3
 8005198:	d209      	bcs.n	80051ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	607b      	str	r3, [r7, #4]
 80051ac:	e7fe      	b.n	80051ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80051ae:	4b0e      	ldr	r3, [pc, #56]	; (80051e8 <vPortValidateInterruptPriority+0x74>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80051b6:	4b0d      	ldr	r3, [pc, #52]	; (80051ec <vPortValidateInterruptPriority+0x78>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d909      	bls.n	80051d2 <vPortValidateInterruptPriority+0x5e>
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	603b      	str	r3, [r7, #0]
 80051d0:	e7fe      	b.n	80051d0 <vPortValidateInterruptPriority+0x5c>
	}
 80051d2:	bf00      	nop
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	e000e3f0 	.word	0xe000e3f0
 80051e4:	20000d1c 	.word	0x20000d1c
 80051e8:	e000ed0c 	.word	0xe000ed0c
 80051ec:	20000d20 	.word	0x20000d20

080051f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08a      	sub	sp, #40	; 0x28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051f8:	2300      	movs	r3, #0
 80051fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051fc:	f7fe fd0c 	bl	8003c18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005200:	4b57      	ldr	r3, [pc, #348]	; (8005360 <pvPortMalloc+0x170>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005208:	f000 f90c 	bl	8005424 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800520c:	4b55      	ldr	r3, [pc, #340]	; (8005364 <pvPortMalloc+0x174>)
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4013      	ands	r3, r2
 8005214:	2b00      	cmp	r3, #0
 8005216:	f040 808c 	bne.w	8005332 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d01c      	beq.n	800525a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005220:	2208      	movs	r2, #8
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4413      	add	r3, r2
 8005226:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f003 0307 	and.w	r3, r3, #7
 800522e:	2b00      	cmp	r3, #0
 8005230:	d013      	beq.n	800525a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f023 0307 	bic.w	r3, r3, #7
 8005238:	3308      	adds	r3, #8
 800523a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	2b00      	cmp	r3, #0
 8005244:	d009      	beq.n	800525a <pvPortMalloc+0x6a>
 8005246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	e7fe      	b.n	8005258 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d068      	beq.n	8005332 <pvPortMalloc+0x142>
 8005260:	4b41      	ldr	r3, [pc, #260]	; (8005368 <pvPortMalloc+0x178>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	429a      	cmp	r2, r3
 8005268:	d863      	bhi.n	8005332 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800526a:	4b40      	ldr	r3, [pc, #256]	; (800536c <pvPortMalloc+0x17c>)
 800526c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800526e:	4b3f      	ldr	r3, [pc, #252]	; (800536c <pvPortMalloc+0x17c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005274:	e004      	b.n	8005280 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	429a      	cmp	r2, r3
 8005288:	d903      	bls.n	8005292 <pvPortMalloc+0xa2>
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1f1      	bne.n	8005276 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005292:	4b33      	ldr	r3, [pc, #204]	; (8005360 <pvPortMalloc+0x170>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005298:	429a      	cmp	r2, r3
 800529a:	d04a      	beq.n	8005332 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2208      	movs	r2, #8
 80052a2:	4413      	add	r3, r2
 80052a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	1ad2      	subs	r2, r2, r3
 80052b6:	2308      	movs	r3, #8
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d91e      	bls.n	80052fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80052be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4413      	add	r3, r2
 80052c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	f003 0307 	and.w	r3, r3, #7
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d009      	beq.n	80052e4 <pvPortMalloc+0xf4>
 80052d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	e7fe      	b.n	80052e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	1ad2      	subs	r2, r2, r3
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052f6:	69b8      	ldr	r0, [r7, #24]
 80052f8:	f000 f8f6 	bl	80054e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052fc:	4b1a      	ldr	r3, [pc, #104]	; (8005368 <pvPortMalloc+0x178>)
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	4a18      	ldr	r2, [pc, #96]	; (8005368 <pvPortMalloc+0x178>)
 8005308:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800530a:	4b17      	ldr	r3, [pc, #92]	; (8005368 <pvPortMalloc+0x178>)
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	4b18      	ldr	r3, [pc, #96]	; (8005370 <pvPortMalloc+0x180>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d203      	bcs.n	800531e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005316:	4b14      	ldr	r3, [pc, #80]	; (8005368 <pvPortMalloc+0x178>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a15      	ldr	r2, [pc, #84]	; (8005370 <pvPortMalloc+0x180>)
 800531c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	4b10      	ldr	r3, [pc, #64]	; (8005364 <pvPortMalloc+0x174>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	431a      	orrs	r2, r3
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	2200      	movs	r2, #0
 8005330:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005332:	f7fe fc7f 	bl	8003c34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	2b00      	cmp	r3, #0
 800533e:	d009      	beq.n	8005354 <pvPortMalloc+0x164>
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	e7fe      	b.n	8005352 <pvPortMalloc+0x162>
	return pvReturn;
 8005354:	69fb      	ldr	r3, [r7, #28]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3728      	adds	r7, #40	; 0x28
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	2000492c 	.word	0x2000492c
 8005364:	20004938 	.word	0x20004938
 8005368:	20004930 	.word	0x20004930
 800536c:	20004924 	.word	0x20004924
 8005370:	20004934 	.word	0x20004934

08005374 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d046      	beq.n	8005414 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005386:	2308      	movs	r3, #8
 8005388:	425b      	negs	r3, r3
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4413      	add	r3, r2
 800538e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	4b20      	ldr	r3, [pc, #128]	; (800541c <vPortFree+0xa8>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4013      	ands	r3, r2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d109      	bne.n	80053b6 <vPortFree+0x42>
 80053a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	e7fe      	b.n	80053b4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <vPortFree+0x5e>
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	60bb      	str	r3, [r7, #8]
 80053d0:	e7fe      	b.n	80053d0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	4b11      	ldr	r3, [pc, #68]	; (800541c <vPortFree+0xa8>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4013      	ands	r3, r2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d019      	beq.n	8005414 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d115      	bne.n	8005414 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	4b0b      	ldr	r3, [pc, #44]	; (800541c <vPortFree+0xa8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	43db      	mvns	r3, r3
 80053f2:	401a      	ands	r2, r3
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053f8:	f7fe fc0e 	bl	8003c18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	4b07      	ldr	r3, [pc, #28]	; (8005420 <vPortFree+0xac>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4413      	add	r3, r2
 8005406:	4a06      	ldr	r2, [pc, #24]	; (8005420 <vPortFree+0xac>)
 8005408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800540a:	6938      	ldr	r0, [r7, #16]
 800540c:	f000 f86c 	bl	80054e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005410:	f7fe fc10 	bl	8003c34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005414:	bf00      	nop
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	20004938 	.word	0x20004938
 8005420:	20004930 	.word	0x20004930

08005424 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800542a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800542e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005430:	4b27      	ldr	r3, [pc, #156]	; (80054d0 <prvHeapInit+0xac>)
 8005432:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00c      	beq.n	8005458 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3307      	adds	r3, #7
 8005442:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0307 	bic.w	r3, r3, #7
 800544a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	4a1f      	ldr	r2, [pc, #124]	; (80054d0 <prvHeapInit+0xac>)
 8005454:	4413      	add	r3, r2
 8005456:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800545c:	4a1d      	ldr	r2, [pc, #116]	; (80054d4 <prvHeapInit+0xb0>)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005462:	4b1c      	ldr	r3, [pc, #112]	; (80054d4 <prvHeapInit+0xb0>)
 8005464:	2200      	movs	r2, #0
 8005466:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	4413      	add	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005470:	2208      	movs	r2, #8
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1a9b      	subs	r3, r3, r2
 8005476:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0307 	bic.w	r3, r3, #7
 800547e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4a15      	ldr	r2, [pc, #84]	; (80054d8 <prvHeapInit+0xb4>)
 8005484:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005486:	4b14      	ldr	r3, [pc, #80]	; (80054d8 <prvHeapInit+0xb4>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2200      	movs	r2, #0
 800548c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800548e:	4b12      	ldr	r3, [pc, #72]	; (80054d8 <prvHeapInit+0xb4>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	1ad2      	subs	r2, r2, r3
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80054a4:	4b0c      	ldr	r3, [pc, #48]	; (80054d8 <prvHeapInit+0xb4>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	4a0a      	ldr	r2, [pc, #40]	; (80054dc <prvHeapInit+0xb8>)
 80054b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	4a09      	ldr	r2, [pc, #36]	; (80054e0 <prvHeapInit+0xbc>)
 80054ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80054bc:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <prvHeapInit+0xc0>)
 80054be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80054c2:	601a      	str	r2, [r3, #0]
}
 80054c4:	bf00      	nop
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	20000d24 	.word	0x20000d24
 80054d4:	20004924 	.word	0x20004924
 80054d8:	2000492c 	.word	0x2000492c
 80054dc:	20004934 	.word	0x20004934
 80054e0:	20004930 	.word	0x20004930
 80054e4:	20004938 	.word	0x20004938

080054e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054f0:	4b28      	ldr	r3, [pc, #160]	; (8005594 <prvInsertBlockIntoFreeList+0xac>)
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	e002      	b.n	80054fc <prvInsertBlockIntoFreeList+0x14>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	60fb      	str	r3, [r7, #12]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	429a      	cmp	r2, r3
 8005504:	d8f7      	bhi.n	80054f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	4413      	add	r3, r2
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	429a      	cmp	r2, r3
 8005516:	d108      	bne.n	800552a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	441a      	add	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	441a      	add	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	429a      	cmp	r2, r3
 800553c:	d118      	bne.n	8005570 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	4b15      	ldr	r3, [pc, #84]	; (8005598 <prvInsertBlockIntoFreeList+0xb0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d00d      	beq.n	8005566 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	441a      	add	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	e008      	b.n	8005578 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005566:	4b0c      	ldr	r3, [pc, #48]	; (8005598 <prvInsertBlockIntoFreeList+0xb0>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	e003      	b.n	8005578 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	429a      	cmp	r2, r3
 800557e:	d002      	beq.n	8005586 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005586:	bf00      	nop
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	20004924 	.word	0x20004924
 8005598:	2000492c 	.word	0x2000492c

0800559c <bargraph_output>:

//simple wrapper header file for the ports and pins

//set the bargraph LED pins according to the value passed into this function
//similar to the busOut() interface in MBed
void bargraph_output(uint16_t states) {
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	4603      	mov	r3, r0
 80055a4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, (states & 1<<0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80055a6:	88fb      	ldrh	r3, [r7, #6]
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	461a      	mov	r2, r3
 80055b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055b6:	4838      	ldr	r0, [pc, #224]	; (8005698 <bargraph_output+0xfc>)
 80055b8:	f7fb fc44 	bl	8000e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, (states & 1<<1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80055bc:	88fb      	ldrh	r3, [r7, #6]
 80055be:	105b      	asrs	r3, r3, #1
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80055ce:	4832      	ldr	r0, [pc, #200]	; (8005698 <bargraph_output+0xfc>)
 80055d0:	f7fb fc38 	bl	8000e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, (states & 1<<2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80055d4:	88fb      	ldrh	r3, [r7, #6]
 80055d6:	109b      	asrs	r3, r3, #2
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	461a      	mov	r2, r3
 80055e2:	2140      	movs	r1, #64	; 0x40
 80055e4:	482d      	ldr	r0, [pc, #180]	; (800569c <bargraph_output+0x100>)
 80055e6:	f7fb fc2d 	bl	8000e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, (states & 1<<3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	10db      	asrs	r3, r3, #3
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	461a      	mov	r2, r3
 80055f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055fc:	4826      	ldr	r0, [pc, #152]	; (8005698 <bargraph_output+0xfc>)
 80055fe:	f7fb fc21 	bl	8000e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, (states & 1<<4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005602:	88fb      	ldrh	r3, [r7, #6]
 8005604:	111b      	asrs	r3, r3, #4
 8005606:	b2db      	uxtb	r3, r3
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	b2db      	uxtb	r3, r3
 800560e:	461a      	mov	r2, r3
 8005610:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005614:	4821      	ldr	r0, [pc, #132]	; (800569c <bargraph_output+0x100>)
 8005616:	f7fb fc15 	bl	8000e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, (states & 1<<5) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800561a:	88fb      	ldrh	r3, [r7, #6]
 800561c:	115b      	asrs	r3, r3, #5
 800561e:	b2db      	uxtb	r3, r3
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	b2db      	uxtb	r3, r3
 8005626:	461a      	mov	r2, r3
 8005628:	2180      	movs	r1, #128	; 0x80
 800562a:	481c      	ldr	r0, [pc, #112]	; (800569c <bargraph_output+0x100>)
 800562c:	f7fb fc0a 	bl	8000e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, (states & 1<<6) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005630:	88fb      	ldrh	r3, [r7, #6]
 8005632:	119b      	asrs	r3, r3, #6
 8005634:	b2db      	uxtb	r3, r3
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	b2db      	uxtb	r3, r3
 800563c:	461a      	mov	r2, r3
 800563e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005642:	4817      	ldr	r0, [pc, #92]	; (80056a0 <bargraph_output+0x104>)
 8005644:	f7fb fbfe 	bl	8000e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, (states & 1<<7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005648:	88fb      	ldrh	r3, [r7, #6]
 800564a:	11db      	asrs	r3, r3, #7
 800564c:	b2db      	uxtb	r3, r3
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	b2db      	uxtb	r3, r3
 8005654:	461a      	mov	r2, r3
 8005656:	f44f 7100 	mov.w	r1, #512	; 0x200
 800565a:	4810      	ldr	r0, [pc, #64]	; (800569c <bargraph_output+0x100>)
 800565c:	f7fb fbf2 	bl	8000e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, (states & 1<<8) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005660:	88fb      	ldrh	r3, [r7, #6]
 8005662:	121b      	asrs	r3, r3, #8
 8005664:	b2db      	uxtb	r3, r3
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	b2db      	uxtb	r3, r3
 800566c:	461a      	mov	r2, r3
 800566e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005672:	480b      	ldr	r0, [pc, #44]	; (80056a0 <bargraph_output+0x104>)
 8005674:	f7fb fbe6 	bl	8000e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, (states & 1<<9) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005678:	88fb      	ldrh	r3, [r7, #6]
 800567a:	125b      	asrs	r3, r3, #9
 800567c:	b2db      	uxtb	r3, r3
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	b2db      	uxtb	r3, r3
 8005684:	461a      	mov	r2, r3
 8005686:	f44f 7100 	mov.w	r1, #512	; 0x200
 800568a:	4805      	ldr	r0, [pc, #20]	; (80056a0 <bargraph_output+0x104>)
 800568c:	f7fb fbda 	bl	8000e44 <HAL_GPIO_WritePin>
}
 8005690:	bf00      	nop
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	40020400 	.word	0x40020400
 800569c:	40020800 	.word	0x40020800
 80056a0:	40020000 	.word	0x40020000

080056a4 <bargraph_init>:
//====================== PRIVATE FUNCTION PROTOTYPES ======================
static void draw_bargraph(void *argument); //runs in a thread context
static void animate_bargraph(void *argument); //runs in a thread context

//====================== PUBLIC FUNCTIONS =========================
void bargraph_init() {
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b092      	sub	sp, #72	; 0x48
 80056a8:	af00      	add	r7, sp, #0
	//create the bargraph drawing thread
	const osThreadAttr_t draw_attributes = {
 80056aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056ae:	2224      	movs	r2, #36	; 0x24
 80056b0:	2100      	movs	r1, #0
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fcab 	bl	800600e <memset>
 80056b8:	4b20      	ldr	r3, [pc, #128]	; (800573c <bargraph_init+0x98>)
 80056ba:	627b      	str	r3, [r7, #36]	; 0x24
 80056bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80056c2:	2328      	movs	r3, #40	; 0x28
 80056c4:	63fb      	str	r3, [r7, #60]	; 0x3c
			.name = "draw",
			.priority = (osPriority_t) osPriorityHigh,
			.stack_size = 256
	};
	//suspends itself right at startup
	drawHandle = osThreadNew(draw_bargraph, NULL, &draw_attributes);
 80056c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056ca:	461a      	mov	r2, r3
 80056cc:	2100      	movs	r1, #0
 80056ce:	481c      	ldr	r0, [pc, #112]	; (8005740 <bargraph_init+0x9c>)
 80056d0:	f7fc fae2 	bl	8001c98 <osThreadNew>
 80056d4:	4602      	mov	r2, r0
 80056d6:	4b1b      	ldr	r3, [pc, #108]	; (8005744 <bargraph_init+0xa0>)
 80056d8:	601a      	str	r2, [r3, #0]

	//create the queue to send the bytes to the draw buffer
	//just need one element to ferry the new "image" over to the thread safely
	drawbuf_queue = osMessageQueueNew(1, sizeof(uint16_t), NULL);
 80056da:	2200      	movs	r2, #0
 80056dc:	2102      	movs	r1, #2
 80056de:	2001      	movs	r0, #1
 80056e0:	f7fc fd66 	bl	80021b0 <osMessageQueueNew>
 80056e4:	4602      	mov	r2, r0
 80056e6:	4b18      	ldr	r3, [pc, #96]	; (8005748 <bargraph_init+0xa4>)
 80056e8:	601a      	str	r2, [r3, #0]

	//start a new animation thread too
	//this thread immediately suspends itself until it gets resumed by the draw_soc function
	const osThreadAttr_t animator_attributes = {
 80056ea:	463b      	mov	r3, r7
 80056ec:	2224      	movs	r2, #36	; 0x24
 80056ee:	2100      	movs	r1, #0
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fc8c 	bl	800600e <memset>
 80056f6:	4b15      	ldr	r3, [pc, #84]	; (800574c <bargraph_init+0xa8>)
 80056f8:	603b      	str	r3, [r7, #0]
 80056fa:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	2320      	movs	r3, #32
 8005702:	61bb      	str	r3, [r7, #24]
			.name = "animator",
			.priority = (osPriority_t) osPriorityAboveNormal,
			.stack_size = 448
	};
	animatorHandle = osThreadNew(animate_bargraph, NULL, &animator_attributes);
 8005704:	463b      	mov	r3, r7
 8005706:	461a      	mov	r2, r3
 8005708:	2100      	movs	r1, #0
 800570a:	4811      	ldr	r0, [pc, #68]	; (8005750 <bargraph_init+0xac>)
 800570c:	f7fc fac4 	bl	8001c98 <osThreadNew>
 8005710:	4602      	mov	r2, r0
 8005712:	4b10      	ldr	r3, [pc, #64]	; (8005754 <bargraph_init+0xb0>)
 8005714:	601a      	str	r2, [r3, #0]

	//create the queue to send the SOC to the animation thread
	//just nead one element to ferry the SOC to render to the thread safely
	socbuf_queue = osMessageQueueNew(1, sizeof(float), NULL);
 8005716:	2200      	movs	r2, #0
 8005718:	2104      	movs	r1, #4
 800571a:	2001      	movs	r0, #1
 800571c:	f7fc fd48 	bl	80021b0 <osMessageQueueNew>
 8005720:	4602      	mov	r2, r0
 8005722:	4b0d      	ldr	r3, [pc, #52]	; (8005758 <bargraph_init+0xb4>)
 8005724:	601a      	str	r2, [r3, #0]

	//create the flags to notify the status of the animation thread
	//want to tell the "draw_soc" function whether the animtator is running or not
	animator_run_flags = osEventFlagsNew(NULL);
 8005726:	2000      	movs	r0, #0
 8005728:	f7fc fc20 	bl	8001f6c <osEventFlagsNew>
 800572c:	4602      	mov	r2, r0
 800572e:	4b0b      	ldr	r3, [pc, #44]	; (800575c <bargraph_init+0xb8>)
 8005730:	601a      	str	r2, [r3, #0]
}
 8005732:	bf00      	nop
 8005734:	3748      	adds	r7, #72	; 0x48
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	08006050 	.word	0x08006050
 8005740:	08005a21 	.word	0x08005a21
 8005744:	20004948 	.word	0x20004948
 8005748:	2000493c 	.word	0x2000493c
 800574c:	08006058 	.word	0x08006058
 8005750:	080057e9 	.word	0x080057e9
 8005754:	2000494c 	.word	0x2000494c
 8005758:	20004940 	.word	0x20004940
 800575c:	20004944 	.word	0x20004944

08005760 <bargraph_draw_soc>:

//draw a particular SOC on the bargraph display
void bargraph_draw_soc(float soc) {
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	ed87 0a01 	vstr	s0, [r7, #4]
	//only restart the animation when the animator is suspended
	if(osEventFlagsGet(animator_run_flags) & ANIMATOR_READY) {
 800576a:	4b10      	ldr	r3, [pc, #64]	; (80057ac <bargraph_draw_soc+0x4c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f7fc fcea 	bl	8002148 <osEventFlagsGet>
 8005774:	4603      	mov	r3, r0
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d011      	beq.n	80057a2 <bargraph_draw_soc+0x42>
		osStatus_t status;
		Q_UPDATE(socbuf_queue, soc);
 800577e:	4b0c      	ldr	r3, [pc, #48]	; (80057b0 <bargraph_draw_soc+0x50>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4618      	mov	r0, r3
 8005784:	f7fc feb2 	bl	80024ec <osMessageQueueReset>
 8005788:	4b09      	ldr	r3, [pc, #36]	; (80057b0 <bargraph_draw_soc+0x50>)
 800578a:	6818      	ldr	r0, [r3, #0]
 800578c:	1d39      	adds	r1, r7, #4
 800578e:	2300      	movs	r3, #0
 8005790:	2200      	movs	r2, #0
 8005792:	f7fc fd93 	bl	80022bc <osMessageQueuePut>
		status = osThreadResume(animatorHandle);
 8005796:	4b07      	ldr	r3, [pc, #28]	; (80057b4 <bargraph_draw_soc+0x54>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4618      	mov	r0, r3
 800579c:	f7fc fb84 	bl	8001ea8 <osThreadResume>
 80057a0:	60f8      	str	r0, [r7, #12]
		UNUSED(status);
	}
}
 80057a2:	bf00      	nop
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20004944 	.word	0x20004944
 80057b0:	20004940 	.word	0x20004940
 80057b4:	2000494c 	.word	0x2000494c

080057b8 <bargraph_draw_stack_space>:

//report free stack space for the draw thread
uint32_t bargraph_draw_stack_space() {
 80057b8:	b580      	push	{r7, lr}
 80057ba:	af00      	add	r7, sp, #0
	return osThreadGetStackSpace(drawHandle);
 80057bc:	4b03      	ldr	r3, [pc, #12]	; (80057cc <bargraph_draw_stack_space+0x14>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fc fb0f 	bl	8001de4 <osThreadGetStackSpace>
 80057c6:	4603      	mov	r3, r0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	20004948 	.word	0x20004948

080057d0 <bargraph_animate_stack_space>:

uint32_t bargraph_animate_stack_space() {
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
	return osThreadGetStackSpace(animatorHandle);
 80057d4:	4b03      	ldr	r3, [pc, #12]	; (80057e4 <bargraph_animate_stack_space+0x14>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4618      	mov	r0, r3
 80057da:	f7fc fb03 	bl	8001de4 <osThreadGetStackSpace>
 80057de:	4603      	mov	r3, r0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	2000494c 	.word	0x2000494c

080057e8 <animate_bargraph>:

//===================== PRIVATE/THREAD FUNCTION DEFINITIONS ====================

//draw the SOC animation on the LED bargraph
//gets called in a thread context
void animate_bargraph(void* argument) {
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08a      	sub	sp, #40	; 0x28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
	float soc = 0;
 80057f0:	f04f 0300 	mov.w	r3, #0
 80057f4:	613b      	str	r3, [r7, #16]

	while(true) {
		//suspend this thread on startup
		osEventFlagsSet(animator_run_flags, ANIMATOR_READY); //ready to re-run animation
 80057f6:	4b84      	ldr	r3, [pc, #528]	; (8005a08 <animate_bargraph+0x220>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2101      	movs	r1, #1
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fc fc07 	bl	8002010 <osEventFlagsSet>
		osThreadSuspend(animatorHandle);
 8005802:	4b82      	ldr	r3, [pc, #520]	; (8005a0c <animate_bargraph+0x224>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4618      	mov	r0, r3
 8005808:	f7fc fb1a 	bl	8001e40 <osThreadSuspend>

		//============= resuming the animation thread ==========
		uint16_t display_buffer = 0;
 800580c:	2300      	movs	r3, #0
 800580e:	81fb      	strh	r3, [r7, #14]
		osEventFlagsClear(animator_run_flags, ANIMATOR_READY); //running animation, clear flags
 8005810:	4b7d      	ldr	r3, [pc, #500]	; (8005a08 <animate_bargraph+0x220>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2101      	movs	r1, #1
 8005816:	4618      	mov	r0, r3
 8005818:	f7fc fc52 	bl	80020c0 <osEventFlagsClear>
		//pull the SOC from the queue
		if(osMessageQueueGetCount(socbuf_queue) > 0) {
 800581c:	4b7c      	ldr	r3, [pc, #496]	; (8005a10 <animate_bargraph+0x228>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4618      	mov	r0, r3
 8005822:	f7fc fe31 	bl	8002488 <osMessageQueueGetCount>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d008      	beq.n	800583e <animate_bargraph+0x56>
			osStatus_t status; //storing status for debugging purposes
			status = osMessageQueueGet(socbuf_queue, &soc, NULL, 0);
 800582c:	4b78      	ldr	r3, [pc, #480]	; (8005a10 <animate_bargraph+0x228>)
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	f107 0110 	add.w	r1, r7, #16
 8005834:	2300      	movs	r3, #0
 8005836:	2200      	movs	r2, #0
 8005838:	f7fc fdb4 	bl	80023a4 <osMessageQueueGet>
 800583c:	61b8      	str	r0, [r7, #24]
			UNUSED(status);
		}
		Q_UPDATE(drawbuf_queue, display_buffer); //start with drawing nothing
 800583e:	4b75      	ldr	r3, [pc, #468]	; (8005a14 <animate_bargraph+0x22c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f7fc fe52 	bl	80024ec <osMessageQueueReset>
 8005848:	4b72      	ldr	r3, [pc, #456]	; (8005a14 <animate_bargraph+0x22c>)
 800584a:	6818      	ldr	r0, [r3, #0]
 800584c:	f107 010e 	add.w	r1, r7, #14
 8005850:	2300      	movs	r3, #0
 8005852:	2200      	movs	r2, #0
 8005854:	f7fc fd32 	bl	80022bc <osMessageQueuePut>
		osThreadResume(drawHandle); //restart the draw thread
 8005858:	4b6f      	ldr	r3, [pc, #444]	; (8005a18 <animate_bargraph+0x230>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4618      	mov	r0, r3
 800585e:	f7fc fb23 	bl	8001ea8 <osThreadResume>

		//================= running the animation =================
		soc = soc >= 1 ? 0.999 : (soc < 0 ? 0 : soc); //constraining SOC between 0 and 1 exclusive
 8005862:	edd7 7a04 	vldr	s15, [r7, #16]
 8005866:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800586a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800586e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005872:	db01      	blt.n	8005878 <animate_bargraph+0x90>
 8005874:	4b69      	ldr	r3, [pc, #420]	; (8005a1c <animate_bargraph+0x234>)
 8005876:	e00a      	b.n	800588e <animate_bargraph+0xa6>
 8005878:	edd7 7a04 	vldr	s15, [r7, #16]
 800587c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005884:	d502      	bpl.n	800588c <animate_bargraph+0xa4>
 8005886:	f04f 0300 	mov.w	r3, #0
 800588a:	e000      	b.n	800588e <animate_bargraph+0xa6>
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	613b      	str	r3, [r7, #16]
		//gives us an integer version of the SOC that we can work with to draw the bargraph
		//a "solid" light will denote a x6-10 SOC
		//i.e. a full SOC (96-100%) will have all lights lit
		//and a 54% SOC will have the first 5 lights be solid and the 6th light blinking
		uint8_t scaled_soc = (uint8_t)(soc*20);
 8005890:	edd7 7a04 	vldr	s15, [r7, #16]
 8005894:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005898:	ee67 7a87 	vmul.f32	s15, s15, s14
 800589c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058a0:	edc7 7a00 	vstr	s15, [r7]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	75fb      	strb	r3, [r7, #23]

		//flash the bottom most LED if the SOC is "critical"
		//involves updating display buffer, clearing the queue, and pushing it into the queue
		if(scaled_soc < 1) {
 80058a8:	7dfb      	ldrb	r3, [r7, #23]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d12d      	bne.n	800590a <animate_bargraph+0x122>
			for(int i = 0; i < CRITICAL_FLASH_COUNT; i++) {
 80058ae:	2300      	movs	r3, #0
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
 80058b2:	e026      	b.n	8005902 <animate_bargraph+0x11a>
				display_buffer = 1;
 80058b4:	2301      	movs	r3, #1
 80058b6:	81fb      	strh	r3, [r7, #14]
				Q_UPDATE(drawbuf_queue, display_buffer);
 80058b8:	4b56      	ldr	r3, [pc, #344]	; (8005a14 <animate_bargraph+0x22c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4618      	mov	r0, r3
 80058be:	f7fc fe15 	bl	80024ec <osMessageQueueReset>
 80058c2:	4b54      	ldr	r3, [pc, #336]	; (8005a14 <animate_bargraph+0x22c>)
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	f107 010e 	add.w	r1, r7, #14
 80058ca:	2300      	movs	r3, #0
 80058cc:	2200      	movs	r2, #0
 80058ce:	f7fc fcf5 	bl	80022bc <osMessageQueuePut>
				osDelay(CRITICAL_FLASH_RATE);
 80058d2:	204b      	movs	r0, #75	; 0x4b
 80058d4:	f7fc fb1c 	bl	8001f10 <osDelay>

				display_buffer = 0;
 80058d8:	2300      	movs	r3, #0
 80058da:	81fb      	strh	r3, [r7, #14]
				Q_UPDATE(drawbuf_queue, display_buffer);
 80058dc:	4b4d      	ldr	r3, [pc, #308]	; (8005a14 <animate_bargraph+0x22c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7fc fe03 	bl	80024ec <osMessageQueueReset>
 80058e6:	4b4b      	ldr	r3, [pc, #300]	; (8005a14 <animate_bargraph+0x22c>)
 80058e8:	6818      	ldr	r0, [r3, #0]
 80058ea:	f107 010e 	add.w	r1, r7, #14
 80058ee:	2300      	movs	r3, #0
 80058f0:	2200      	movs	r2, #0
 80058f2:	f7fc fce3 	bl	80022bc <osMessageQueuePut>
				osDelay(CRITICAL_FLASH_RATE);
 80058f6:	204b      	movs	r0, #75	; 0x4b
 80058f8:	f7fc fb0a 	bl	8001f10 <osDelay>
			for(int i = 0; i < CRITICAL_FLASH_COUNT; i++) {
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	3301      	adds	r3, #1
 8005900:	627b      	str	r3, [r7, #36]	; 0x24
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	2b09      	cmp	r3, #9
 8005906:	ddd5      	ble.n	80058b4 <animate_bargraph+0xcc>
 8005908:	e074      	b.n	80059f4 <animate_bargraph+0x20c>
		}

		//if the SOC is greater than 5%
		else {
			//draw an animation to light up all the "solid lights" before the last one
			display_buffer = 0;
 800590a:	2300      	movs	r3, #0
 800590c:	81fb      	strh	r3, [r7, #14]
			for(int i = 0; i < (scaled_soc>>1); i++) {
 800590e:	2300      	movs	r3, #0
 8005910:	623b      	str	r3, [r7, #32]
 8005912:	e01d      	b.n	8005950 <animate_bargraph+0x168>
				display_buffer |= (1<<i);
 8005914:	2201      	movs	r2, #1
 8005916:	6a3b      	ldr	r3, [r7, #32]
 8005918:	fa02 f303 	lsl.w	r3, r2, r3
 800591c:	b21a      	sxth	r2, r3
 800591e:	89fb      	ldrh	r3, [r7, #14]
 8005920:	b21b      	sxth	r3, r3
 8005922:	4313      	orrs	r3, r2
 8005924:	b21b      	sxth	r3, r3
 8005926:	b29b      	uxth	r3, r3
 8005928:	81fb      	strh	r3, [r7, #14]
				Q_UPDATE(drawbuf_queue, display_buffer);
 800592a:	4b3a      	ldr	r3, [pc, #232]	; (8005a14 <animate_bargraph+0x22c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4618      	mov	r0, r3
 8005930:	f7fc fddc 	bl	80024ec <osMessageQueueReset>
 8005934:	4b37      	ldr	r3, [pc, #220]	; (8005a14 <animate_bargraph+0x22c>)
 8005936:	6818      	ldr	r0, [r3, #0]
 8005938:	f107 010e 	add.w	r1, r7, #14
 800593c:	2300      	movs	r3, #0
 800593e:	2200      	movs	r2, #0
 8005940:	f7fc fcbc 	bl	80022bc <osMessageQueuePut>
				osDelay(BUILDUP_DELAY);
 8005944:	2032      	movs	r0, #50	; 0x32
 8005946:	f7fc fae3 	bl	8001f10 <osDelay>
			for(int i = 0; i < (scaled_soc>>1); i++) {
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	3301      	adds	r3, #1
 800594e:	623b      	str	r3, [r7, #32]
 8005950:	7dfb      	ldrb	r3, [r7, #23]
 8005952:	085b      	lsrs	r3, r3, #1
 8005954:	b2db      	uxtb	r3, r3
 8005956:	461a      	mov	r2, r3
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	4293      	cmp	r3, r2
 800595c:	dbda      	blt.n	8005914 <animate_bargraph+0x12c>
			}

			//if the top number is odd, then make the LED solid
			if(scaled_soc & 0x01) {
 800595e:	7dfb      	ldrb	r3, [r7, #23]
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	2b00      	cmp	r3, #0
 8005966:	d01e      	beq.n	80059a6 <animate_bargraph+0x1be>
				display_buffer |= (1 << (scaled_soc >> 1)); //add the extra LED lit up
 8005968:	7dfb      	ldrb	r3, [r7, #23]
 800596a:	085b      	lsrs	r3, r3, #1
 800596c:	b2db      	uxtb	r3, r3
 800596e:	461a      	mov	r2, r3
 8005970:	2301      	movs	r3, #1
 8005972:	4093      	lsls	r3, r2
 8005974:	b21a      	sxth	r2, r3
 8005976:	89fb      	ldrh	r3, [r7, #14]
 8005978:	b21b      	sxth	r3, r3
 800597a:	4313      	orrs	r3, r2
 800597c:	b21b      	sxth	r3, r3
 800597e:	b29b      	uxth	r3, r3
 8005980:	81fb      	strh	r3, [r7, #14]
				Q_UPDATE(drawbuf_queue, display_buffer);
 8005982:	4b24      	ldr	r3, [pc, #144]	; (8005a14 <animate_bargraph+0x22c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	f7fc fdb0 	bl	80024ec <osMessageQueueReset>
 800598c:	4b21      	ldr	r3, [pc, #132]	; (8005a14 <animate_bargraph+0x22c>)
 800598e:	6818      	ldr	r0, [r3, #0]
 8005990:	f107 010e 	add.w	r1, r7, #14
 8005994:	2300      	movs	r3, #0
 8005996:	2200      	movs	r2, #0
 8005998:	f7fc fc90 	bl	80022bc <osMessageQueuePut>
				osDelay(FLASH_DELAY * FLASH_COUNT * 2);
 800599c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80059a0:	f7fc fab6 	bl	8001f10 <osDelay>
 80059a4:	e026      	b.n	80059f4 <animate_bargraph+0x20c>
			}

			//if the scaled SOC is even, flash the top LED
			else {
				for(int i = 0; i < FLASH_COUNT<<1; i++) {
 80059a6:	2300      	movs	r3, #0
 80059a8:	61fb      	str	r3, [r7, #28]
 80059aa:	e020      	b.n	80059ee <animate_bargraph+0x206>
					display_buffer ^= 1 << (scaled_soc>>1); //toggle this particular bit in the buffer
 80059ac:	7dfb      	ldrb	r3, [r7, #23]
 80059ae:	085b      	lsrs	r3, r3, #1
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	461a      	mov	r2, r3
 80059b4:	2301      	movs	r3, #1
 80059b6:	4093      	lsls	r3, r2
 80059b8:	b21a      	sxth	r2, r3
 80059ba:	89fb      	ldrh	r3, [r7, #14]
 80059bc:	b21b      	sxth	r3, r3
 80059be:	4053      	eors	r3, r2
 80059c0:	b21b      	sxth	r3, r3
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	81fb      	strh	r3, [r7, #14]
					Q_UPDATE(drawbuf_queue, display_buffer);
 80059c6:	4b13      	ldr	r3, [pc, #76]	; (8005a14 <animate_bargraph+0x22c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fc fd8e 	bl	80024ec <osMessageQueueReset>
 80059d0:	4b10      	ldr	r3, [pc, #64]	; (8005a14 <animate_bargraph+0x22c>)
 80059d2:	6818      	ldr	r0, [r3, #0]
 80059d4:	f107 010e 	add.w	r1, r7, #14
 80059d8:	2300      	movs	r3, #0
 80059da:	2200      	movs	r2, #0
 80059dc:	f7fc fc6e 	bl	80022bc <osMessageQueuePut>
					osDelay(FLASH_DELAY);
 80059e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80059e4:	f7fc fa94 	bl	8001f10 <osDelay>
				for(int i = 0; i < FLASH_COUNT<<1; i++) {
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	3301      	adds	r3, #1
 80059ec:	61fb      	str	r3, [r7, #28]
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	2b07      	cmp	r3, #7
 80059f2:	dddb      	ble.n	80059ac <animate_bargraph+0x1c4>
				}
			}
		}

		//====== shutting the draw thread down ======
		osThreadSuspend(drawHandle); //suspend the drawing thread since we're done animating
 80059f4:	4b08      	ldr	r3, [pc, #32]	; (8005a18 <animate_bargraph+0x230>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7fc fa21 	bl	8001e40 <osThreadSuspend>
		bargraph_output(0); //clear the bargraph pins
 80059fe:	2000      	movs	r0, #0
 8005a00:	f7ff fdcc 	bl	800559c <bargraph_output>
	while(true) {
 8005a04:	e6f7      	b.n	80057f6 <animate_bargraph+0xe>
 8005a06:	bf00      	nop
 8005a08:	20004944 	.word	0x20004944
 8005a0c:	2000494c 	.word	0x2000494c
 8005a10:	20004940 	.word	0x20004940
 8005a14:	2000493c 	.word	0x2000493c
 8005a18:	20004948 	.word	0x20004948
 8005a1c:	3f7fbe77 	.word	0x3f7fbe77

08005a20 <draw_bargraph>:


//draws the bargraph
//gets called in a thread context
//@param argument: doesn't matter, not used
static void draw_bargraph(void *argument) {
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
	uint16_t draw_buffer = 0;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	81fb      	strh	r3, [r7, #14]
	bool polarity = false; //tells us whether we're drawing odds or evens
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	75fb      	strb	r3, [r7, #23]
	osThreadSuspend(drawHandle); //suspend right at startup
 8005a30:	4b1d      	ldr	r3, [pc, #116]	; (8005aa8 <draw_bargraph+0x88>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fc fa03 	bl	8001e40 <osThreadSuspend>

	while(true) {
		//if we have a new message from the queue, update the draw buffer
		if(osMessageQueueGetCount(drawbuf_queue) > 0) {
 8005a3a:	4b1c      	ldr	r3, [pc, #112]	; (8005aac <draw_bargraph+0x8c>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fc fd22 	bl	8002488 <osMessageQueueGetCount>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d008      	beq.n	8005a5c <draw_bargraph+0x3c>
			osStatus_t status; //storing status for debugging purposes
			status = osMessageQueueGet(drawbuf_queue, &draw_buffer, NULL, 0);
 8005a4a:	4b18      	ldr	r3, [pc, #96]	; (8005aac <draw_bargraph+0x8c>)
 8005a4c:	6818      	ldr	r0, [r3, #0]
 8005a4e:	f107 010e 	add.w	r1, r7, #14
 8005a52:	2300      	movs	r3, #0
 8005a54:	2200      	movs	r2, #0
 8005a56:	f7fc fca5 	bl	80023a4 <osMessageQueueGet>
 8005a5a:	6138      	str	r0, [r7, #16]
			UNUSED(status);
		}

		if(polarity) bargraph_output(draw_buffer & 0x155); //turn on the corresponding ODD leds according to the display buffer
 8005a5c:	7dfb      	ldrb	r3, [r7, #23]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d008      	beq.n	8005a74 <draw_bargraph+0x54>
 8005a62:	89fa      	ldrh	r2, [r7, #14]
 8005a64:	f240 1355 	movw	r3, #341	; 0x155
 8005a68:	4013      	ands	r3, r2
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff fd95 	bl	800559c <bargraph_output>
 8005a72:	e007      	b.n	8005a84 <draw_bargraph+0x64>
		else bargraph_output(draw_buffer & 0x2AA); //turn on the corresponding EVEN leds according to the display buffer
 8005a74:	89fa      	ldrh	r2, [r7, #14]
 8005a76:	f240 23aa 	movw	r3, #682	; 0x2aa
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff fd8c 	bl	800559c <bargraph_output>
		polarity = !polarity;
 8005a84:	7dfb      	ldrb	r3, [r7, #23]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	bf14      	ite	ne
 8005a8a:	2301      	movne	r3, #1
 8005a8c:	2300      	moveq	r3, #0
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	f083 0301 	eor.w	r3, r3, #1
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	75fb      	strb	r3, [r7, #23]
 8005a98:	7dfb      	ldrb	r3, [r7, #23]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	75fb      	strb	r3, [r7, #23]

		//delay for the next screen update
		osDelay(BARGRAPH_UPDATE_DELAY);
 8005aa0:	2002      	movs	r0, #2
 8005aa2:	f7fc fa35 	bl	8001f10 <osDelay>
		if(osMessageQueueGetCount(drawbuf_queue) > 0) {
 8005aa6:	e7c8      	b.n	8005a3a <draw_bargraph+0x1a>
 8005aa8:	20004948 	.word	0x20004948
 8005aac:	2000493c 	.word	0x2000493c

08005ab0 <doStateMachine>:
#include "cmsis_os.h"

extern osThreadId_t StateMachineHandle;

//basically our main code goes here
void doStateMachine(void *argument) {
 8005ab0:	b590      	push	{r4, r7, lr}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
	bargraph_init();
 8005ab8:	f7ff fdf4 	bl	80056a4 <bargraph_init>

	for(float i = 0; i < 1; i+= 0.05) {
 8005abc:	f04f 0300 	mov.w	r3, #0
 8005ac0:	617b      	str	r3, [r7, #20]
 8005ac2:	e017      	b.n	8005af4 <doStateMachine+0x44>
		bargraph_draw_soc(i);
 8005ac4:	ed97 0a05 	vldr	s0, [r7, #20]
 8005ac8:	f7ff fe4a 	bl	8005760 <bargraph_draw_soc>
		osDelay(7500);
 8005acc:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8005ad0:	f7fc fa1e 	bl	8001f10 <osDelay>
	for(float i = 0; i < 1; i+= 0.05) {
 8005ad4:	6978      	ldr	r0, [r7, #20]
 8005ad6:	f7fa fce7 	bl	80004a8 <__aeabi_f2d>
 8005ada:	a314      	add	r3, pc, #80	; (adr r3, 8005b2c <doStateMachine+0x7c>)
 8005adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae0:	f7fa fb84 	bl	80001ec <__adddf3>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	460c      	mov	r4, r1
 8005ae8:	4618      	mov	r0, r3
 8005aea:	4621      	mov	r1, r4
 8005aec:	f7fa fd34 	bl	8000558 <__aeabi_d2f>
 8005af0:	4603      	mov	r3, r0
 8005af2:	617b      	str	r3, [r7, #20]
 8005af4:	edd7 7a05 	vldr	s15, [r7, #20]
 8005af8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b04:	d4de      	bmi.n	8005ac4 <doStateMachine+0x14>
	}

	uint32_t draw_space, main_space, animate_space;
	draw_space = bargraph_draw_stack_space();
 8005b06:	f7ff fe57 	bl	80057b8 <bargraph_draw_stack_space>
 8005b0a:	6138      	str	r0, [r7, #16]
	animate_space = bargraph_animate_stack_space();
 8005b0c:	f7ff fe60 	bl	80057d0 <bargraph_animate_stack_space>
 8005b10:	60f8      	str	r0, [r7, #12]
	main_space = osThreadGetStackSpace(StateMachineHandle);
 8005b12:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <doStateMachine+0x78>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fc f964 	bl	8001de4 <osThreadGetStackSpace>
 8005b1c:	60b8      	str	r0, [r7, #8]

	while(1) {
		osDelay(1);
 8005b1e:	2001      	movs	r0, #1
 8005b20:	f7fc f9f6 	bl	8001f10 <osDelay>
 8005b24:	e7fb      	b.n	8005b1e <doStateMachine+0x6e>
 8005b26:	bf00      	nop
 8005b28:	20004994 	.word	0x20004994
 8005b2c:	9999999a 	.word	0x9999999a
 8005b30:	3fa99999 	.word	0x3fa99999

08005b34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8005b38:	f7fa fede 	bl	80008f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005b3c:	f000 f81a 	bl	8005b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005b40:	f000 f882 	bl	8005c48 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 8005b44:	4807      	ldr	r0, [pc, #28]	; (8005b64 <main+0x30>)
 8005b46:	f7fb fe4c 	bl	80017e2 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8005b4a:	f7fc f83b 	bl	8001bc4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StateMachine */
  StateMachineHandle = osThreadNew(doStateMachine, NULL, &StateMachine_attributes);
 8005b4e:	4a06      	ldr	r2, [pc, #24]	; (8005b68 <main+0x34>)
 8005b50:	2100      	movs	r1, #0
 8005b52:	4806      	ldr	r0, [pc, #24]	; (8005b6c <main+0x38>)
 8005b54:	f7fc f8a0 	bl	8001c98 <osThreadNew>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <main+0x3c>)
 8005b5c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8005b5e:	f7fc f865 	bl	8001c2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005b62:	e7fe      	b.n	8005b62 <main+0x2e>
 8005b64:	20004998 	.word	0x20004998
 8005b68:	08006074 	.word	0x08006074
 8005b6c:	08005ab1 	.word	0x08005ab1
 8005b70:	20004994 	.word	0x20004994

08005b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b094      	sub	sp, #80	; 0x50
 8005b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b7a:	f107 0320 	add.w	r3, r7, #32
 8005b7e:	2230      	movs	r2, #48	; 0x30
 8005b80:	2100      	movs	r1, #0
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 fa43 	bl	800600e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005b88:	f107 030c 	add.w	r3, r7, #12
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	605a      	str	r2, [r3, #4]
 8005b92:	609a      	str	r2, [r3, #8]
 8005b94:	60da      	str	r2, [r3, #12]
 8005b96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b98:	2300      	movs	r3, #0
 8005b9a:	60bb      	str	r3, [r7, #8]
 8005b9c:	4b28      	ldr	r3, [pc, #160]	; (8005c40 <SystemClock_Config+0xcc>)
 8005b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba0:	4a27      	ldr	r2, [pc, #156]	; (8005c40 <SystemClock_Config+0xcc>)
 8005ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8005ba8:	4b25      	ldr	r3, [pc, #148]	; (8005c40 <SystemClock_Config+0xcc>)
 8005baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb0:	60bb      	str	r3, [r7, #8]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	607b      	str	r3, [r7, #4]
 8005bb8:	4b22      	ldr	r3, [pc, #136]	; (8005c44 <SystemClock_Config+0xd0>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005bc0:	4a20      	ldr	r2, [pc, #128]	; (8005c44 <SystemClock_Config+0xd0>)
 8005bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bc6:	6013      	str	r3, [r2, #0]
 8005bc8:	4b1e      	ldr	r3, [pc, #120]	; (8005c44 <SystemClock_Config+0xd0>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005bd0:	607b      	str	r3, [r7, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005bd8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005bde:	2302      	movs	r3, #2
 8005be0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005be2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005be8:	2304      	movs	r3, #4
 8005bea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8005bec:	2340      	movs	r3, #64	; 0x40
 8005bee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005bf4:	2304      	movs	r3, #4
 8005bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005bf8:	f107 0320 	add.w	r3, r7, #32
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7fb f93b 	bl	8000e78 <HAL_RCC_OscConfig>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8005c08:	f000 f8e2 	bl	8005dd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005c0c:	230f      	movs	r3, #15
 8005c0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005c10:	2302      	movs	r3, #2
 8005c12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8005c14:	2390      	movs	r3, #144	; 0x90
 8005c16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005c20:	f107 030c 	add.w	r3, r7, #12
 8005c24:	2100      	movs	r1, #0
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fb fb96 	bl	8001358 <HAL_RCC_ClockConfig>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005c32:	f000 f8cd 	bl	8005dd0 <Error_Handler>
  }
}
 8005c36:	bf00      	nop
 8005c38:	3750      	adds	r7, #80	; 0x50
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	40023800 	.word	0x40023800
 8005c44:	40007000 	.word	0x40007000

08005c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08a      	sub	sp, #40	; 0x28
 8005c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c4e:	f107 0314 	add.w	r3, r7, #20
 8005c52:	2200      	movs	r2, #0
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	605a      	str	r2, [r3, #4]
 8005c58:	609a      	str	r2, [r3, #8]
 8005c5a:	60da      	str	r2, [r3, #12]
 8005c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005c5e:	2300      	movs	r3, #0
 8005c60:	613b      	str	r3, [r7, #16]
 8005c62:	4b4d      	ldr	r3, [pc, #308]	; (8005d98 <MX_GPIO_Init+0x150>)
 8005c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c66:	4a4c      	ldr	r2, [pc, #304]	; (8005d98 <MX_GPIO_Init+0x150>)
 8005c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8005c6e:	4b4a      	ldr	r3, [pc, #296]	; (8005d98 <MX_GPIO_Init+0x150>)
 8005c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c76:	613b      	str	r3, [r7, #16]
 8005c78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60fb      	str	r3, [r7, #12]
 8005c7e:	4b46      	ldr	r3, [pc, #280]	; (8005d98 <MX_GPIO_Init+0x150>)
 8005c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c82:	4a45      	ldr	r2, [pc, #276]	; (8005d98 <MX_GPIO_Init+0x150>)
 8005c84:	f043 0302 	orr.w	r3, r3, #2
 8005c88:	6313      	str	r3, [r2, #48]	; 0x30
 8005c8a:	4b43      	ldr	r3, [pc, #268]	; (8005d98 <MX_GPIO_Init+0x150>)
 8005c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c96:	2300      	movs	r3, #0
 8005c98:	60bb      	str	r3, [r7, #8]
 8005c9a:	4b3f      	ldr	r3, [pc, #252]	; (8005d98 <MX_GPIO_Init+0x150>)
 8005c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9e:	4a3e      	ldr	r2, [pc, #248]	; (8005d98 <MX_GPIO_Init+0x150>)
 8005ca0:	f043 0304 	orr.w	r3, r3, #4
 8005ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ca6:	4b3c      	ldr	r3, [pc, #240]	; (8005d98 <MX_GPIO_Init+0x150>)
 8005ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005caa:	f003 0304 	and.w	r3, r3, #4
 8005cae:	60bb      	str	r3, [r7, #8]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	607b      	str	r3, [r7, #4]
 8005cb6:	4b38      	ldr	r3, [pc, #224]	; (8005d98 <MX_GPIO_Init+0x150>)
 8005cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cba:	4a37      	ldr	r2, [pc, #220]	; (8005d98 <MX_GPIO_Init+0x150>)
 8005cbc:	f043 0301 	orr.w	r3, r3, #1
 8005cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8005cc2:	4b35      	ldr	r3, [pc, #212]	; (8005d98 <MX_GPIO_Init+0x150>)
 8005cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	607b      	str	r3, [r7, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005cce:	2300      	movs	r3, #0
 8005cd0:	603b      	str	r3, [r7, #0]
 8005cd2:	4b31      	ldr	r3, [pc, #196]	; (8005d98 <MX_GPIO_Init+0x150>)
 8005cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd6:	4a30      	ldr	r2, [pc, #192]	; (8005d98 <MX_GPIO_Init+0x150>)
 8005cd8:	f043 0308 	orr.w	r3, r3, #8
 8005cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8005cde:	4b2e      	ldr	r3, [pc, #184]	; (8005d98 <MX_GPIO_Init+0x150>)
 8005ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce2:	f003 0308 	and.w	r3, r3, #8
 8005ce6:	603b      	str	r3, [r7, #0]
 8005ce8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED0_Pin|LED3_Pin, GPIO_PIN_RESET);
 8005cea:	2200      	movs	r2, #0
 8005cec:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8005cf0:	482a      	ldr	r0, [pc, #168]	; (8005d9c <MX_GPIO_Init+0x154>)
 8005cf2:	f7fb f8a7 	bl	8000e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED5_Pin|LED4_Pin|LED7_Pin, GPIO_PIN_RESET);
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8005cfc:	4828      	ldr	r0, [pc, #160]	; (8005da0 <MX_GPIO_Init+0x158>)
 8005cfe:	f7fb f8a1 	bl	8000e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED6_Pin|LED9_Pin|LED8_Pin, GPIO_PIN_RESET);
 8005d02:	2200      	movs	r2, #0
 8005d04:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005d08:	4826      	ldr	r0, [pc, #152]	; (8005da4 <MX_GPIO_Init+0x15c>)
 8005d0a:	f7fb f89b 	bl	8000e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INT_OUT_GPIO_Port, INT_OUT_Pin, GPIO_PIN_RESET);
 8005d0e:	2200      	movs	r2, #0
 8005d10:	2104      	movs	r1, #4
 8005d12:	4825      	ldr	r0, [pc, #148]	; (8005da8 <MX_GPIO_Init+0x160>)
 8005d14:	f7fb f896 	bl	8000e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED0_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED0_Pin|LED3_Pin;
 8005d18:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005d1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d26:	2300      	movs	r3, #0
 8005d28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d2a:	f107 0314 	add.w	r3, r7, #20
 8005d2e:	4619      	mov	r1, r3
 8005d30:	481a      	ldr	r0, [pc, #104]	; (8005d9c <MX_GPIO_Init+0x154>)
 8005d32:	f7fa ff05 	bl	8000b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED5_Pin LED4_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED5_Pin|LED4_Pin|LED7_Pin;
 8005d36:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005d3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d40:	2300      	movs	r3, #0
 8005d42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d44:	2300      	movs	r3, #0
 8005d46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d48:	f107 0314 	add.w	r3, r7, #20
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	4814      	ldr	r0, [pc, #80]	; (8005da0 <MX_GPIO_Init+0x158>)
 8005d50:	f7fa fef6 	bl	8000b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED6_Pin LED9_Pin LED8_Pin */
  GPIO_InitStruct.Pin = LED6_Pin|LED9_Pin|LED8_Pin;
 8005d54:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d62:	2300      	movs	r3, #0
 8005d64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d66:	f107 0314 	add.w	r3, r7, #20
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	480d      	ldr	r0, [pc, #52]	; (8005da4 <MX_GPIO_Init+0x15c>)
 8005d6e:	f7fa fee7 	bl	8000b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_OUT_Pin */
  GPIO_InitStruct.Pin = INT_OUT_Pin;
 8005d72:	2304      	movs	r3, #4
 8005d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d76:	2301      	movs	r3, #1
 8005d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INT_OUT_GPIO_Port, &GPIO_InitStruct);
 8005d82:	f107 0314 	add.w	r3, r7, #20
 8005d86:	4619      	mov	r1, r3
 8005d88:	4807      	ldr	r0, [pc, #28]	; (8005da8 <MX_GPIO_Init+0x160>)
 8005d8a:	f7fa fed9 	bl	8000b40 <HAL_GPIO_Init>

}
 8005d8e:	bf00      	nop
 8005d90:	3728      	adds	r7, #40	; 0x28
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	40023800 	.word	0x40023800
 8005d9c:	40020400 	.word	0x40020400
 8005da0:	40020800 	.word	0x40020800
 8005da4:	40020000 	.word	0x40020000
 8005da8:	40020c00 	.word	0x40020c00

08005dac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a04      	ldr	r2, [pc, #16]	; (8005dcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d101      	bne.n	8005dc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005dbe:	f7fa fdbd 	bl	800093c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005dc2:	bf00      	nop
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	40000c00 	.word	0x40000c00

08005dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005dd4:	bf00      	nop
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
	...

08005de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005de6:	2300      	movs	r3, #0
 8005de8:	607b      	str	r3, [r7, #4]
 8005dea:	4b12      	ldr	r3, [pc, #72]	; (8005e34 <HAL_MspInit+0x54>)
 8005dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dee:	4a11      	ldr	r2, [pc, #68]	; (8005e34 <HAL_MspInit+0x54>)
 8005df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005df4:	6453      	str	r3, [r2, #68]	; 0x44
 8005df6:	4b0f      	ldr	r3, [pc, #60]	; (8005e34 <HAL_MspInit+0x54>)
 8005df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dfe:	607b      	str	r3, [r7, #4]
 8005e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e02:	2300      	movs	r3, #0
 8005e04:	603b      	str	r3, [r7, #0]
 8005e06:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <HAL_MspInit+0x54>)
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	4a0a      	ldr	r2, [pc, #40]	; (8005e34 <HAL_MspInit+0x54>)
 8005e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e10:	6413      	str	r3, [r2, #64]	; 0x40
 8005e12:	4b08      	ldr	r3, [pc, #32]	; (8005e34 <HAL_MspInit+0x54>)
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e1a:	603b      	str	r3, [r7, #0]
 8005e1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005e1e:	2200      	movs	r2, #0
 8005e20:	210f      	movs	r1, #15
 8005e22:	f06f 0001 	mvn.w	r0, #1
 8005e26:	f7fa fe61 	bl	8000aec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e2a:	bf00      	nop
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	40023800 	.word	0x40023800

08005e38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b08c      	sub	sp, #48	; 0x30
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005e40:	2300      	movs	r3, #0
 8005e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005e44:	2300      	movs	r3, #0
 8005e46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8005e48:	2200      	movs	r2, #0
 8005e4a:	6879      	ldr	r1, [r7, #4]
 8005e4c:	2032      	movs	r0, #50	; 0x32
 8005e4e:	f7fa fe4d 	bl	8000aec <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005e52:	2032      	movs	r0, #50	; 0x32
 8005e54:	f7fa fe66 	bl	8000b24 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	4b1e      	ldr	r3, [pc, #120]	; (8005ed8 <HAL_InitTick+0xa0>)
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	4a1d      	ldr	r2, [pc, #116]	; (8005ed8 <HAL_InitTick+0xa0>)
 8005e62:	f043 0308 	orr.w	r3, r3, #8
 8005e66:	6413      	str	r3, [r2, #64]	; 0x40
 8005e68:	4b1b      	ldr	r3, [pc, #108]	; (8005ed8 <HAL_InitTick+0xa0>)
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6c:	f003 0308 	and.w	r3, r3, #8
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005e74:	f107 0210 	add.w	r2, r7, #16
 8005e78:	f107 0314 	add.w	r3, r7, #20
 8005e7c:	4611      	mov	r1, r2
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fb fc48 	bl	8001714 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005e84:	f7fb fc32 	bl	80016ec <HAL_RCC_GetPCLK1Freq>
 8005e88:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8c:	4a13      	ldr	r2, [pc, #76]	; (8005edc <HAL_InitTick+0xa4>)
 8005e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e92:	0c9b      	lsrs	r3, r3, #18
 8005e94:	3b01      	subs	r3, #1
 8005e96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8005e98:	4b11      	ldr	r3, [pc, #68]	; (8005ee0 <HAL_InitTick+0xa8>)
 8005e9a:	4a12      	ldr	r2, [pc, #72]	; (8005ee4 <HAL_InitTick+0xac>)
 8005e9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8005e9e:	4b10      	ldr	r3, [pc, #64]	; (8005ee0 <HAL_InitTick+0xa8>)
 8005ea0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005ea4:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8005ea6:	4a0e      	ldr	r2, [pc, #56]	; (8005ee0 <HAL_InitTick+0xa8>)
 8005ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eaa:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8005eac:	4b0c      	ldr	r3, [pc, #48]	; (8005ee0 <HAL_InitTick+0xa8>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005eb2:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <HAL_InitTick+0xa8>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8005eb8:	4809      	ldr	r0, [pc, #36]	; (8005ee0 <HAL_InitTick+0xa8>)
 8005eba:	f7fb fc5d 	bl	8001778 <HAL_TIM_Base_Init>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d104      	bne.n	8005ece <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8005ec4:	4806      	ldr	r0, [pc, #24]	; (8005ee0 <HAL_InitTick+0xa8>)
 8005ec6:	f7fb fc8c 	bl	80017e2 <HAL_TIM_Base_Start_IT>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	e000      	b.n	8005ed0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3730      	adds	r7, #48	; 0x30
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	40023800 	.word	0x40023800
 8005edc:	431bde83 	.word	0x431bde83
 8005ee0:	20004998 	.word	0x20004998
 8005ee4:	40000c00 	.word	0x40000c00

08005ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005eec:	bf00      	nop
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005efa:	e7fe      	b.n	8005efa <HardFault_Handler+0x4>

08005efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005efc:	b480      	push	{r7}
 8005efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005f00:	e7fe      	b.n	8005f00 <MemManage_Handler+0x4>

08005f02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005f02:	b480      	push	{r7}
 8005f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005f06:	e7fe      	b.n	8005f06 <BusFault_Handler+0x4>

08005f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005f0c:	e7fe      	b.n	8005f0c <UsageFault_Handler+0x4>

08005f0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005f12:	bf00      	nop
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005f20:	4802      	ldr	r0, [pc, #8]	; (8005f2c <TIM5_IRQHandler+0x10>)
 8005f22:	f7fb fc82 	bl	800182a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005f26:	bf00      	nop
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20004998 	.word	0x20004998

08005f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005f30:	b480      	push	{r7}
 8005f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005f34:	4b08      	ldr	r3, [pc, #32]	; (8005f58 <SystemInit+0x28>)
 8005f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f3a:	4a07      	ldr	r2, [pc, #28]	; (8005f58 <SystemInit+0x28>)
 8005f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005f44:	4b04      	ldr	r3, [pc, #16]	; (8005f58 <SystemInit+0x28>)
 8005f46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005f4a:	609a      	str	r2, [r3, #8]
#endif
}
 8005f4c:	bf00      	nop
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	e000ed00 	.word	0xe000ed00

08005f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005f5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005f94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005f60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005f62:	e003      	b.n	8005f6c <LoopCopyDataInit>

08005f64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005f64:	4b0c      	ldr	r3, [pc, #48]	; (8005f98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005f66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005f68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005f6a:	3104      	adds	r1, #4

08005f6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005f6c:	480b      	ldr	r0, [pc, #44]	; (8005f9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005f6e:	4b0c      	ldr	r3, [pc, #48]	; (8005fa0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005f70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005f72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005f74:	d3f6      	bcc.n	8005f64 <CopyDataInit>
  ldr  r2, =_sbss
 8005f76:	4a0b      	ldr	r2, [pc, #44]	; (8005fa4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005f78:	e002      	b.n	8005f80 <LoopFillZerobss>

08005f7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005f7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005f7c:	f842 3b04 	str.w	r3, [r2], #4

08005f80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005f80:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005f82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005f84:	d3f9      	bcc.n	8005f7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005f86:	f7ff ffd3 	bl	8005f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005f8a:	f000 f811 	bl	8005fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005f8e:	f7ff fdd1 	bl	8005b34 <main>
  bx  lr    
 8005f92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005f94:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8005f98:	080060c0 	.word	0x080060c0
  ldr  r0, =_sdata
 8005f9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005fa0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8005fa4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8005fa8:	200049d8 	.word	0x200049d8

08005fac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005fac:	e7fe      	b.n	8005fac <ADC_IRQHandler>
	...

08005fb0 <__libc_init_array>:
 8005fb0:	b570      	push	{r4, r5, r6, lr}
 8005fb2:	4e0d      	ldr	r6, [pc, #52]	; (8005fe8 <__libc_init_array+0x38>)
 8005fb4:	4c0d      	ldr	r4, [pc, #52]	; (8005fec <__libc_init_array+0x3c>)
 8005fb6:	1ba4      	subs	r4, r4, r6
 8005fb8:	10a4      	asrs	r4, r4, #2
 8005fba:	2500      	movs	r5, #0
 8005fbc:	42a5      	cmp	r5, r4
 8005fbe:	d109      	bne.n	8005fd4 <__libc_init_array+0x24>
 8005fc0:	4e0b      	ldr	r6, [pc, #44]	; (8005ff0 <__libc_init_array+0x40>)
 8005fc2:	4c0c      	ldr	r4, [pc, #48]	; (8005ff4 <__libc_init_array+0x44>)
 8005fc4:	f000 f82c 	bl	8006020 <_init>
 8005fc8:	1ba4      	subs	r4, r4, r6
 8005fca:	10a4      	asrs	r4, r4, #2
 8005fcc:	2500      	movs	r5, #0
 8005fce:	42a5      	cmp	r5, r4
 8005fd0:	d105      	bne.n	8005fde <__libc_init_array+0x2e>
 8005fd2:	bd70      	pop	{r4, r5, r6, pc}
 8005fd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fd8:	4798      	blx	r3
 8005fda:	3501      	adds	r5, #1
 8005fdc:	e7ee      	b.n	8005fbc <__libc_init_array+0xc>
 8005fde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fe2:	4798      	blx	r3
 8005fe4:	3501      	adds	r5, #1
 8005fe6:	e7f2      	b.n	8005fce <__libc_init_array+0x1e>
 8005fe8:	080060b8 	.word	0x080060b8
 8005fec:	080060b8 	.word	0x080060b8
 8005ff0:	080060b8 	.word	0x080060b8
 8005ff4:	080060bc 	.word	0x080060bc

08005ff8 <memcpy>:
 8005ff8:	b510      	push	{r4, lr}
 8005ffa:	1e43      	subs	r3, r0, #1
 8005ffc:	440a      	add	r2, r1
 8005ffe:	4291      	cmp	r1, r2
 8006000:	d100      	bne.n	8006004 <memcpy+0xc>
 8006002:	bd10      	pop	{r4, pc}
 8006004:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006008:	f803 4f01 	strb.w	r4, [r3, #1]!
 800600c:	e7f7      	b.n	8005ffe <memcpy+0x6>

0800600e <memset>:
 800600e:	4402      	add	r2, r0
 8006010:	4603      	mov	r3, r0
 8006012:	4293      	cmp	r3, r2
 8006014:	d100      	bne.n	8006018 <memset+0xa>
 8006016:	4770      	bx	lr
 8006018:	f803 1b01 	strb.w	r1, [r3], #1
 800601c:	e7f9      	b.n	8006012 <memset+0x4>
	...

08006020 <_init>:
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	bf00      	nop
 8006024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006026:	bc08      	pop	{r3}
 8006028:	469e      	mov	lr, r3
 800602a:	4770      	bx	lr

0800602c <_fini>:
 800602c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602e:	bf00      	nop
 8006030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006032:	bc08      	pop	{r3}
 8006034:	469e      	mov	lr, r3
 8006036:	4770      	bx	lr
