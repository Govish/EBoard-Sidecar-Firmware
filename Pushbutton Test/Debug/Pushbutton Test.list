
Pushbutton Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006364  08006364  00016364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063d4  080063d4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080063d4  080063d4  000163d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063dc  080063dc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063dc  080063dc  000163dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063e0  080063e0  000163e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080063e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a44  20000010  080063f4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20004a54  080063f4  00024a54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017410  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ea9  00000000  00000000  00037450  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f0  00000000  00000000  0003a300  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010a8  00000000  00000000  0003b4f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017acd  00000000  00000000  0003c598  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e204  00000000  00000000  00054065  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093374  00000000  00000000  00062269  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f55dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a4c  00000000  00000000  000f5658  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800634c 	.word	0x0800634c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	0800634c 	.word	0x0800634c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e4:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <HAL_Init+0x40>)
 80004ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <HAL_Init+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <HAL_Init+0x40>)
 80004f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <HAL_Init+0x40>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a07      	ldr	r2, [pc, #28]	; (8000520 <HAL_Init+0x40>)
 8000502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000506:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000508:	2003      	movs	r0, #3
 800050a:	f000 f8d8 	bl	80006be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800050e:	2000      	movs	r0, #0
 8000510:	f005 fe28 	bl	8006164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000514:	f005 fd58 	bl	8005fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000518:	2300      	movs	r3, #0
}
 800051a:	4618      	mov	r0, r3
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40023c00 	.word	0x40023c00

08000524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_IncTick+0x20>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_IncTick+0x24>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_IncTick+0x24>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000004 	.word	0x20000004
 8000548:	20004948 	.word	0x20004948

0800054c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <HAL_GetTick+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20004948 	.word	0x20004948

08000564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f003 0307 	and.w	r3, r3, #7
 8000572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800057a:	68ba      	ldr	r2, [r7, #8]
 800057c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000580:	4013      	ands	r3, r2
 8000582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800058c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000596:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	60d3      	str	r3, [r2, #12]
}
 800059c:	bf00      	nop
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	e000ed00 	.word	0xe000ed00

080005ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <__NVIC_GetPriorityGrouping+0x18>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	f003 0307 	and.w	r3, r3, #7
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	db0b      	blt.n	80005f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f003 021f 	and.w	r2, r3, #31
 80005e0:	4907      	ldr	r1, [pc, #28]	; (8000600 <__NVIC_EnableIRQ+0x38>)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	095b      	lsrs	r3, r3, #5
 80005e8:	2001      	movs	r0, #1
 80005ea:	fa00 f202 	lsl.w	r2, r0, r2
 80005ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000e100 	.word	0xe000e100

08000604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000614:	2b00      	cmp	r3, #0
 8000616:	db0a      	blt.n	800062e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	b2da      	uxtb	r2, r3
 800061c:	490c      	ldr	r1, [pc, #48]	; (8000650 <__NVIC_SetPriority+0x4c>)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	0112      	lsls	r2, r2, #4
 8000624:	b2d2      	uxtb	r2, r2
 8000626:	440b      	add	r3, r1
 8000628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800062c:	e00a      	b.n	8000644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4908      	ldr	r1, [pc, #32]	; (8000654 <__NVIC_SetPriority+0x50>)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	f003 030f 	and.w	r3, r3, #15
 800063a:	3b04      	subs	r3, #4
 800063c:	0112      	lsls	r2, r2, #4
 800063e:	b2d2      	uxtb	r2, r2
 8000640:	440b      	add	r3, r1
 8000642:	761a      	strb	r2, [r3, #24]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000e100 	.word	0xe000e100
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000658:	b480      	push	{r7}
 800065a:	b089      	sub	sp, #36	; 0x24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	f1c3 0307 	rsb	r3, r3, #7
 8000672:	2b04      	cmp	r3, #4
 8000674:	bf28      	it	cs
 8000676:	2304      	movcs	r3, #4
 8000678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3304      	adds	r3, #4
 800067e:	2b06      	cmp	r3, #6
 8000680:	d902      	bls.n	8000688 <NVIC_EncodePriority+0x30>
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	3b03      	subs	r3, #3
 8000686:	e000      	b.n	800068a <NVIC_EncodePriority+0x32>
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068c:	f04f 32ff 	mov.w	r2, #4294967295
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	fa02 f303 	lsl.w	r3, r2, r3
 8000696:	43da      	mvns	r2, r3
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	401a      	ands	r2, r3
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a0:	f04f 31ff 	mov.w	r1, #4294967295
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	fa01 f303 	lsl.w	r3, r1, r3
 80006aa:	43d9      	mvns	r1, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b0:	4313      	orrs	r3, r2
         );
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3724      	adds	r7, #36	; 0x24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b082      	sub	sp, #8
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f7ff ff4c 	bl	8000564 <__NVIC_SetPriorityGrouping>
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
 80006e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006e6:	f7ff ff61 	bl	80005ac <__NVIC_GetPriorityGrouping>
 80006ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	68b9      	ldr	r1, [r7, #8]
 80006f0:	6978      	ldr	r0, [r7, #20]
 80006f2:	f7ff ffb1 	bl	8000658 <NVIC_EncodePriority>
 80006f6:	4602      	mov	r2, r0
 80006f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006fc:	4611      	mov	r1, r2
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff80 	bl	8000604 <__NVIC_SetPriority>
}
 8000704:	bf00      	nop
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff54 	bl	80005c8 <__NVIC_EnableIRQ>
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000728:	b480      	push	{r7}
 800072a:	b089      	sub	sp, #36	; 0x24
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
 8000742:	e159      	b.n	80009f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000744:	2201      	movs	r2, #1
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	fa02 f303 	lsl.w	r3, r2, r3
 800074c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	697a      	ldr	r2, [r7, #20]
 8000754:	4013      	ands	r3, r2
 8000756:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000758:	693a      	ldr	r2, [r7, #16]
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	429a      	cmp	r2, r3
 800075e:	f040 8148 	bne.w	80009f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d00b      	beq.n	8000782 <HAL_GPIO_Init+0x5a>
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	2b02      	cmp	r3, #2
 8000770:	d007      	beq.n	8000782 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000776:	2b11      	cmp	r3, #17
 8000778:	d003      	beq.n	8000782 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	2b12      	cmp	r3, #18
 8000780:	d130      	bne.n	80007e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	2203      	movs	r2, #3
 800078e:	fa02 f303 	lsl.w	r3, r2, r3
 8000792:	43db      	mvns	r3, r3
 8000794:	69ba      	ldr	r2, [r7, #24]
 8000796:	4013      	ands	r3, r2
 8000798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	68da      	ldr	r2, [r3, #12]
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	69ba      	ldr	r2, [r7, #24]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	69ba      	ldr	r2, [r7, #24]
 80007b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007b8:	2201      	movs	r2, #1
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	fa02 f303 	lsl.w	r3, r2, r3
 80007c0:	43db      	mvns	r3, r3
 80007c2:	69ba      	ldr	r2, [r7, #24]
 80007c4:	4013      	ands	r3, r2
 80007c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	091b      	lsrs	r3, r3, #4
 80007ce:	f003 0201 	and.w	r2, r3, #1
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	fa02 f303 	lsl.w	r3, r2, r3
 80007d8:	69ba      	ldr	r2, [r7, #24]
 80007da:	4313      	orrs	r3, r2
 80007dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	69ba      	ldr	r2, [r7, #24]
 80007e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	2203      	movs	r2, #3
 80007f0:	fa02 f303 	lsl.w	r3, r2, r3
 80007f4:	43db      	mvns	r3, r3
 80007f6:	69ba      	ldr	r2, [r7, #24]
 80007f8:	4013      	ands	r3, r2
 80007fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	689a      	ldr	r2, [r3, #8]
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	69ba      	ldr	r2, [r7, #24]
 800080a:	4313      	orrs	r3, r2
 800080c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	69ba      	ldr	r2, [r7, #24]
 8000812:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	2b02      	cmp	r3, #2
 800081a:	d003      	beq.n	8000824 <HAL_GPIO_Init+0xfc>
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	2b12      	cmp	r3, #18
 8000822:	d123      	bne.n	800086c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	08da      	lsrs	r2, r3, #3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3208      	adds	r2, #8
 800082c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000830:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	f003 0307 	and.w	r3, r3, #7
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	220f      	movs	r2, #15
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	43db      	mvns	r3, r3
 8000842:	69ba      	ldr	r2, [r7, #24]
 8000844:	4013      	ands	r3, r2
 8000846:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	691a      	ldr	r2, [r3, #16]
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	fa02 f303 	lsl.w	r3, r2, r3
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	4313      	orrs	r3, r2
 800085c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	08da      	lsrs	r2, r3, #3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3208      	adds	r2, #8
 8000866:	69b9      	ldr	r1, [r7, #24]
 8000868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	2203      	movs	r2, #3
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	43db      	mvns	r3, r3
 800087e:	69ba      	ldr	r2, [r7, #24]
 8000880:	4013      	ands	r3, r2
 8000882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	f003 0203 	and.w	r2, r3, #3
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	69ba      	ldr	r2, [r7, #24]
 8000896:	4313      	orrs	r3, r2
 8000898:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	69ba      	ldr	r2, [r7, #24]
 800089e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	f000 80a2 	beq.w	80009f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	4b56      	ldr	r3, [pc, #344]	; (8000a0c <HAL_GPIO_Init+0x2e4>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	4a55      	ldr	r2, [pc, #340]	; (8000a0c <HAL_GPIO_Init+0x2e4>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008bc:	6453      	str	r3, [r2, #68]	; 0x44
 80008be:	4b53      	ldr	r3, [pc, #332]	; (8000a0c <HAL_GPIO_Init+0x2e4>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80008ca:	4a51      	ldr	r2, [pc, #324]	; (8000a10 <HAL_GPIO_Init+0x2e8>)
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	089b      	lsrs	r3, r3, #2
 80008d0:	3302      	adds	r3, #2
 80008d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	f003 0303 	and.w	r3, r3, #3
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	220f      	movs	r2, #15
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	4013      	ands	r3, r2
 80008ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a48      	ldr	r2, [pc, #288]	; (8000a14 <HAL_GPIO_Init+0x2ec>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d019      	beq.n	800092a <HAL_GPIO_Init+0x202>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a47      	ldr	r2, [pc, #284]	; (8000a18 <HAL_GPIO_Init+0x2f0>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d013      	beq.n	8000926 <HAL_GPIO_Init+0x1fe>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a46      	ldr	r2, [pc, #280]	; (8000a1c <HAL_GPIO_Init+0x2f4>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d00d      	beq.n	8000922 <HAL_GPIO_Init+0x1fa>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a45      	ldr	r2, [pc, #276]	; (8000a20 <HAL_GPIO_Init+0x2f8>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d007      	beq.n	800091e <HAL_GPIO_Init+0x1f6>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a44      	ldr	r2, [pc, #272]	; (8000a24 <HAL_GPIO_Init+0x2fc>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d101      	bne.n	800091a <HAL_GPIO_Init+0x1f2>
 8000916:	2304      	movs	r3, #4
 8000918:	e008      	b.n	800092c <HAL_GPIO_Init+0x204>
 800091a:	2307      	movs	r3, #7
 800091c:	e006      	b.n	800092c <HAL_GPIO_Init+0x204>
 800091e:	2303      	movs	r3, #3
 8000920:	e004      	b.n	800092c <HAL_GPIO_Init+0x204>
 8000922:	2302      	movs	r3, #2
 8000924:	e002      	b.n	800092c <HAL_GPIO_Init+0x204>
 8000926:	2301      	movs	r3, #1
 8000928:	e000      	b.n	800092c <HAL_GPIO_Init+0x204>
 800092a:	2300      	movs	r3, #0
 800092c:	69fa      	ldr	r2, [r7, #28]
 800092e:	f002 0203 	and.w	r2, r2, #3
 8000932:	0092      	lsls	r2, r2, #2
 8000934:	4093      	lsls	r3, r2
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	4313      	orrs	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800093c:	4934      	ldr	r1, [pc, #208]	; (8000a10 <HAL_GPIO_Init+0x2e8>)
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	089b      	lsrs	r3, r3, #2
 8000942:	3302      	adds	r3, #2
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800094a:	4b37      	ldr	r3, [pc, #220]	; (8000a28 <HAL_GPIO_Init+0x300>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	43db      	mvns	r3, r3
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	4013      	ands	r3, r2
 8000958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000962:	2b00      	cmp	r3, #0
 8000964:	d003      	beq.n	800096e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000966:	69ba      	ldr	r2, [r7, #24]
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	4313      	orrs	r3, r2
 800096c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800096e:	4a2e      	ldr	r2, [pc, #184]	; (8000a28 <HAL_GPIO_Init+0x300>)
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000974:	4b2c      	ldr	r3, [pc, #176]	; (8000a28 <HAL_GPIO_Init+0x300>)
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	43db      	mvns	r3, r3
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	4013      	ands	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098c:	2b00      	cmp	r3, #0
 800098e:	d003      	beq.n	8000998 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	4313      	orrs	r3, r2
 8000996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000998:	4a23      	ldr	r2, [pc, #140]	; (8000a28 <HAL_GPIO_Init+0x300>)
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <HAL_GPIO_Init+0x300>)
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	43db      	mvns	r3, r3
 80009a8:	69ba      	ldr	r2, [r7, #24]
 80009aa:	4013      	ands	r3, r2
 80009ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d003      	beq.n	80009c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80009ba:	69ba      	ldr	r2, [r7, #24]
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	4313      	orrs	r3, r2
 80009c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80009c2:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <HAL_GPIO_Init+0x300>)
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80009c8:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <HAL_GPIO_Init+0x300>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	43db      	mvns	r3, r3
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	4013      	ands	r3, r2
 80009d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d003      	beq.n	80009ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <HAL_GPIO_Init+0x300>)
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3301      	adds	r3, #1
 80009f6:	61fb      	str	r3, [r7, #28]
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	2b0f      	cmp	r3, #15
 80009fc:	f67f aea2 	bls.w	8000744 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a00:	bf00      	nop
 8000a02:	3724      	adds	r7, #36	; 0x24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40013800 	.word	0x40013800
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40020400 	.word	0x40020400
 8000a1c:	40020800 	.word	0x40020800
 8000a20:	40020c00 	.word	0x40020c00
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40013c00 	.word	0x40013c00

08000a2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	691a      	ldr	r2, [r3, #16]
 8000a3c:	887b      	ldrh	r3, [r7, #2]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d002      	beq.n	8000a4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000a44:	2301      	movs	r3, #1
 8000a46:	73fb      	strb	r3, [r7, #15]
 8000a48:	e001      	b.n	8000a4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	460b      	mov	r3, r1
 8000a66:	807b      	strh	r3, [r7, #2]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a6c:	787b      	ldrb	r3, [r7, #1]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d003      	beq.n	8000a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a72:	887a      	ldrh	r2, [r7, #2]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000a78:	e003      	b.n	8000a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a7a:	887b      	ldrh	r3, [r7, #2]
 8000a7c:	041a      	lsls	r2, r3, #16
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	619a      	str	r2, [r3, #24]
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	460b      	mov	r3, r1
 8000a98:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	695a      	ldr	r2, [r3, #20]
 8000a9e:	887b      	ldrh	r3, [r7, #2]
 8000aa0:	401a      	ands	r2, r3
 8000aa2:	887b      	ldrh	r3, [r7, #2]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d104      	bne.n	8000ab2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000aa8:	887b      	ldrh	r3, [r7, #2]
 8000aaa:	041a      	lsls	r2, r3, #16
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000ab0:	e002      	b.n	8000ab8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000ab2:	887a      	ldrh	r2, [r7, #2]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	619a      	str	r2, [r3, #24]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d101      	bne.n	8000ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e25b      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d075      	beq.n	8000bce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ae2:	4ba3      	ldr	r3, [pc, #652]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	f003 030c 	and.w	r3, r3, #12
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	d00c      	beq.n	8000b08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000aee:	4ba0      	ldr	r3, [pc, #640]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000af6:	2b08      	cmp	r3, #8
 8000af8:	d112      	bne.n	8000b20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000afa:	4b9d      	ldr	r3, [pc, #628]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b06:	d10b      	bne.n	8000b20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b08:	4b99      	ldr	r3, [pc, #612]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d05b      	beq.n	8000bcc <HAL_RCC_OscConfig+0x108>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d157      	bne.n	8000bcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e236      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b28:	d106      	bne.n	8000b38 <HAL_RCC_OscConfig+0x74>
 8000b2a:	4b91      	ldr	r3, [pc, #580]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a90      	ldr	r2, [pc, #576]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b34:	6013      	str	r3, [r2, #0]
 8000b36:	e01d      	b.n	8000b74 <HAL_RCC_OscConfig+0xb0>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b40:	d10c      	bne.n	8000b5c <HAL_RCC_OscConfig+0x98>
 8000b42:	4b8b      	ldr	r3, [pc, #556]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a8a      	ldr	r2, [pc, #552]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b4c:	6013      	str	r3, [r2, #0]
 8000b4e:	4b88      	ldr	r3, [pc, #544]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a87      	ldr	r2, [pc, #540]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b58:	6013      	str	r3, [r2, #0]
 8000b5a:	e00b      	b.n	8000b74 <HAL_RCC_OscConfig+0xb0>
 8000b5c:	4b84      	ldr	r3, [pc, #528]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a83      	ldr	r2, [pc, #524]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	4b81      	ldr	r3, [pc, #516]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a80      	ldr	r2, [pc, #512]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d013      	beq.n	8000ba4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b7c:	f7ff fce6 	bl	800054c <HAL_GetTick>
 8000b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b82:	e008      	b.n	8000b96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b84:	f7ff fce2 	bl	800054c <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2b64      	cmp	r3, #100	; 0x64
 8000b90:	d901      	bls.n	8000b96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000b92:	2303      	movs	r3, #3
 8000b94:	e1fb      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b96:	4b76      	ldr	r3, [pc, #472]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d0f0      	beq.n	8000b84 <HAL_RCC_OscConfig+0xc0>
 8000ba2:	e014      	b.n	8000bce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba4:	f7ff fcd2 	bl	800054c <HAL_GetTick>
 8000ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000baa:	e008      	b.n	8000bbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bac:	f7ff fcce 	bl	800054c <HAL_GetTick>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	2b64      	cmp	r3, #100	; 0x64
 8000bb8:	d901      	bls.n	8000bbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	e1e7      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bbe:	4b6c      	ldr	r3, [pc, #432]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1f0      	bne.n	8000bac <HAL_RCC_OscConfig+0xe8>
 8000bca:	e000      	b.n	8000bce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d063      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bda:	4b65      	ldr	r3, [pc, #404]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	f003 030c 	and.w	r3, r3, #12
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d00b      	beq.n	8000bfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000be6:	4b62      	ldr	r3, [pc, #392]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bee:	2b08      	cmp	r3, #8
 8000bf0:	d11c      	bne.n	8000c2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bf2:	4b5f      	ldr	r3, [pc, #380]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d116      	bne.n	8000c2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bfe:	4b5c      	ldr	r3, [pc, #368]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d005      	beq.n	8000c16 <HAL_RCC_OscConfig+0x152>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d001      	beq.n	8000c16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e1bb      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c16:	4b56      	ldr	r3, [pc, #344]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	4952      	ldr	r1, [pc, #328]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000c26:	4313      	orrs	r3, r2
 8000c28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c2a:	e03a      	b.n	8000ca2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d020      	beq.n	8000c76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c34:	4b4f      	ldr	r3, [pc, #316]	; (8000d74 <HAL_RCC_OscConfig+0x2b0>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c3a:	f7ff fc87 	bl	800054c <HAL_GetTick>
 8000c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c40:	e008      	b.n	8000c54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c42:	f7ff fc83 	bl	800054c <HAL_GetTick>
 8000c46:	4602      	mov	r2, r0
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d901      	bls.n	8000c54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c50:	2303      	movs	r3, #3
 8000c52:	e19c      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c54:	4b46      	ldr	r3, [pc, #280]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d0f0      	beq.n	8000c42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c60:	4b43      	ldr	r3, [pc, #268]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	4940      	ldr	r1, [pc, #256]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000c70:	4313      	orrs	r3, r2
 8000c72:	600b      	str	r3, [r1, #0]
 8000c74:	e015      	b.n	8000ca2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c76:	4b3f      	ldr	r3, [pc, #252]	; (8000d74 <HAL_RCC_OscConfig+0x2b0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c7c:	f7ff fc66 	bl	800054c <HAL_GetTick>
 8000c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c82:	e008      	b.n	8000c96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c84:	f7ff fc62 	bl	800054c <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d901      	bls.n	8000c96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000c92:	2303      	movs	r3, #3
 8000c94:	e17b      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c96:	4b36      	ldr	r3, [pc, #216]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1f0      	bne.n	8000c84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0308 	and.w	r3, r3, #8
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d030      	beq.n	8000d10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d016      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cb6:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <HAL_RCC_OscConfig+0x2b4>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cbc:	f7ff fc46 	bl	800054c <HAL_GetTick>
 8000cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cc2:	e008      	b.n	8000cd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cc4:	f7ff fc42 	bl	800054c <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d901      	bls.n	8000cd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	e15b      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cd6:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d0f0      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x200>
 8000ce2:	e015      	b.n	8000d10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ce4:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <HAL_RCC_OscConfig+0x2b4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cea:	f7ff fc2f 	bl	800054c <HAL_GetTick>
 8000cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cf0:	e008      	b.n	8000d04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cf2:	f7ff fc2b 	bl	800054c <HAL_GetTick>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d901      	bls.n	8000d04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000d00:	2303      	movs	r3, #3
 8000d02:	e144      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1f0      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f000 80a0 	beq.w	8000e5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d10f      	bne.n	8000d4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_RCC_OscConfig+0x2b8>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d121      	bne.n	8000d9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_RCC_OscConfig+0x2b8>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <HAL_RCC_OscConfig+0x2b8>)
 8000d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d66:	f7ff fbf1 	bl	800054c <HAL_GetTick>
 8000d6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d6c:	e011      	b.n	8000d92 <HAL_RCC_OscConfig+0x2ce>
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800
 8000d74:	42470000 	.word	0x42470000
 8000d78:	42470e80 	.word	0x42470e80
 8000d7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d80:	f7ff fbe4 	bl	800054c <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d901      	bls.n	8000d92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e0fd      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d92:	4b81      	ldr	r3, [pc, #516]	; (8000f98 <HAL_RCC_OscConfig+0x4d4>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f0      	beq.n	8000d80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d106      	bne.n	8000db4 <HAL_RCC_OscConfig+0x2f0>
 8000da6:	4b7d      	ldr	r3, [pc, #500]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000daa:	4a7c      	ldr	r2, [pc, #496]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6713      	str	r3, [r2, #112]	; 0x70
 8000db2:	e01c      	b.n	8000dee <HAL_RCC_OscConfig+0x32a>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	2b05      	cmp	r3, #5
 8000dba:	d10c      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x312>
 8000dbc:	4b77      	ldr	r3, [pc, #476]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dc0:	4a76      	ldr	r2, [pc, #472]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8000dc8:	4b74      	ldr	r3, [pc, #464]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dcc:	4a73      	ldr	r2, [pc, #460]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8000dd4:	e00b      	b.n	8000dee <HAL_RCC_OscConfig+0x32a>
 8000dd6:	4b71      	ldr	r3, [pc, #452]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dda:	4a70      	ldr	r2, [pc, #448]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000ddc:	f023 0301 	bic.w	r3, r3, #1
 8000de0:	6713      	str	r3, [r2, #112]	; 0x70
 8000de2:	4b6e      	ldr	r3, [pc, #440]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000de6:	4a6d      	ldr	r2, [pc, #436]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000de8:	f023 0304 	bic.w	r3, r3, #4
 8000dec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d015      	beq.n	8000e22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000df6:	f7ff fba9 	bl	800054c <HAL_GetTick>
 8000dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dfc:	e00a      	b.n	8000e14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dfe:	f7ff fba5 	bl	800054c <HAL_GetTick>
 8000e02:	4602      	mov	r2, r0
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d901      	bls.n	8000e14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000e10:	2303      	movs	r3, #3
 8000e12:	e0bc      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e14:	4b61      	ldr	r3, [pc, #388]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d0ee      	beq.n	8000dfe <HAL_RCC_OscConfig+0x33a>
 8000e20:	e014      	b.n	8000e4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e22:	f7ff fb93 	bl	800054c <HAL_GetTick>
 8000e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e28:	e00a      	b.n	8000e40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e2a:	f7ff fb8f 	bl	800054c <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d901      	bls.n	8000e40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e0a6      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e40:	4b56      	ldr	r3, [pc, #344]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d1ee      	bne.n	8000e2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e4c:	7dfb      	ldrb	r3, [r7, #23]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d105      	bne.n	8000e5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e52:	4b52      	ldr	r3, [pc, #328]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a51      	ldr	r2, [pc, #324]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 8092 	beq.w	8000f8c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e68:	4b4c      	ldr	r3, [pc, #304]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	f003 030c 	and.w	r3, r3, #12
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	d05c      	beq.n	8000f2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d141      	bne.n	8000f00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e7c:	4b48      	ldr	r3, [pc, #288]	; (8000fa0 <HAL_RCC_OscConfig+0x4dc>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e82:	f7ff fb63 	bl	800054c <HAL_GetTick>
 8000e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e88:	e008      	b.n	8000e9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e8a:	f7ff fb5f 	bl	800054c <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e078      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e9c:	4b3f      	ldr	r3, [pc, #252]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1f0      	bne.n	8000e8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	69da      	ldr	r2, [r3, #28]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a1b      	ldr	r3, [r3, #32]
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb6:	019b      	lsls	r3, r3, #6
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ebe:	085b      	lsrs	r3, r3, #1
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	041b      	lsls	r3, r3, #16
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eca:	061b      	lsls	r3, r3, #24
 8000ecc:	4933      	ldr	r1, [pc, #204]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ed2:	4b33      	ldr	r3, [pc, #204]	; (8000fa0 <HAL_RCC_OscConfig+0x4dc>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed8:	f7ff fb38 	bl	800054c <HAL_GetTick>
 8000edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ede:	e008      	b.n	8000ef2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ee0:	f7ff fb34 	bl	800054c <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e04d      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ef2:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0f0      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x41c>
 8000efe:	e045      	b.n	8000f8c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f00:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <HAL_RCC_OscConfig+0x4dc>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f06:	f7ff fb21 	bl	800054c <HAL_GetTick>
 8000f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f0c:	e008      	b.n	8000f20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f0e:	f7ff fb1d 	bl	800054c <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e036      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f20:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1f0      	bne.n	8000f0e <HAL_RCC_OscConfig+0x44a>
 8000f2c:	e02e      	b.n	8000f8c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d101      	bne.n	8000f3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e029      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d11c      	bne.n	8000f88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d115      	bne.n	8000f88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000f62:	4013      	ands	r3, r2
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d10d      	bne.n	8000f88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d106      	bne.n	8000f88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d001      	beq.n	8000f8c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e000      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40007000 	.word	0x40007000
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	42470060 	.word	0x42470060

08000fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d101      	bne.n	8000fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e0cc      	b.n	8001152 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fb8:	4b68      	ldr	r3, [pc, #416]	; (800115c <HAL_RCC_ClockConfig+0x1b8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 030f 	and.w	r3, r3, #15
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d90c      	bls.n	8000fe0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fc6:	4b65      	ldr	r3, [pc, #404]	; (800115c <HAL_RCC_ClockConfig+0x1b8>)
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fce:	4b63      	ldr	r3, [pc, #396]	; (800115c <HAL_RCC_ClockConfig+0x1b8>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d001      	beq.n	8000fe0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e0b8      	b.n	8001152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d020      	beq.n	800102e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d005      	beq.n	8001004 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ff8:	4b59      	ldr	r3, [pc, #356]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	4a58      	ldr	r2, [pc, #352]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8000ffe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001002:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	2b00      	cmp	r3, #0
 800100e:	d005      	beq.n	800101c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001010:	4b53      	ldr	r3, [pc, #332]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	4a52      	ldr	r2, [pc, #328]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001016:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800101a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800101c:	4b50      	ldr	r3, [pc, #320]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	494d      	ldr	r1, [pc, #308]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 800102a:	4313      	orrs	r3, r2
 800102c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	d044      	beq.n	80010c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d107      	bne.n	8001052 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001042:	4b47      	ldr	r3, [pc, #284]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d119      	bne.n	8001082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e07f      	b.n	8001152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b02      	cmp	r3, #2
 8001058:	d003      	beq.n	8001062 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800105e:	2b03      	cmp	r3, #3
 8001060:	d107      	bne.n	8001072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001062:	4b3f      	ldr	r3, [pc, #252]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d109      	bne.n	8001082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e06f      	b.n	8001152 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001072:	4b3b      	ldr	r3, [pc, #236]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e067      	b.n	8001152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001082:	4b37      	ldr	r3, [pc, #220]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f023 0203 	bic.w	r2, r3, #3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	4934      	ldr	r1, [pc, #208]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001090:	4313      	orrs	r3, r2
 8001092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001094:	f7ff fa5a 	bl	800054c <HAL_GetTick>
 8001098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800109a:	e00a      	b.n	80010b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800109c:	f7ff fa56 	bl	800054c <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e04f      	b.n	8001152 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010b2:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 020c 	and.w	r2, r3, #12
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d1eb      	bne.n	800109c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010c4:	4b25      	ldr	r3, [pc, #148]	; (800115c <HAL_RCC_ClockConfig+0x1b8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 030f 	and.w	r3, r3, #15
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d20c      	bcs.n	80010ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010d2:	4b22      	ldr	r3, [pc, #136]	; (800115c <HAL_RCC_ClockConfig+0x1b8>)
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010da:	4b20      	ldr	r3, [pc, #128]	; (800115c <HAL_RCC_ClockConfig+0x1b8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d001      	beq.n	80010ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e032      	b.n	8001152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d008      	beq.n	800110a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010f8:	4b19      	ldr	r3, [pc, #100]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	4916      	ldr	r1, [pc, #88]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001106:	4313      	orrs	r3, r2
 8001108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	2b00      	cmp	r3, #0
 8001114:	d009      	beq.n	800112a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001116:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	490e      	ldr	r1, [pc, #56]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001126:	4313      	orrs	r3, r2
 8001128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800112a:	f000 f821 	bl	8001170 <HAL_RCC_GetSysClockFreq>
 800112e:	4601      	mov	r1, r0
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	091b      	lsrs	r3, r3, #4
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <HAL_RCC_ClockConfig+0x1c0>)
 800113c:	5cd3      	ldrb	r3, [r2, r3]
 800113e:	fa21 f303 	lsr.w	r3, r1, r3
 8001142:	4a09      	ldr	r2, [pc, #36]	; (8001168 <HAL_RCC_ClockConfig+0x1c4>)
 8001144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_RCC_ClockConfig+0x1c8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f005 f80a 	bl	8006164 <HAL_InitTick>

  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40023c00 	.word	0x40023c00
 8001160:	40023800 	.word	0x40023800
 8001164:	080063bc 	.word	0x080063bc
 8001168:	2000000c 	.word	0x2000000c
 800116c:	20000000 	.word	0x20000000

08001170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001186:	4b63      	ldr	r3, [pc, #396]	; (8001314 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 030c 	and.w	r3, r3, #12
 800118e:	2b04      	cmp	r3, #4
 8001190:	d007      	beq.n	80011a2 <HAL_RCC_GetSysClockFreq+0x32>
 8001192:	2b08      	cmp	r3, #8
 8001194:	d008      	beq.n	80011a8 <HAL_RCC_GetSysClockFreq+0x38>
 8001196:	2b00      	cmp	r3, #0
 8001198:	f040 80b4 	bne.w	8001304 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800119c:	4b5e      	ldr	r3, [pc, #376]	; (8001318 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800119e:	60bb      	str	r3, [r7, #8]
       break;
 80011a0:	e0b3      	b.n	800130a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011a2:	4b5e      	ldr	r3, [pc, #376]	; (800131c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80011a4:	60bb      	str	r3, [r7, #8]
      break;
 80011a6:	e0b0      	b.n	800130a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011a8:	4b5a      	ldr	r3, [pc, #360]	; (8001314 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011b2:	4b58      	ldr	r3, [pc, #352]	; (8001314 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d04a      	beq.n	8001254 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011be:	4b55      	ldr	r3, [pc, #340]	; (8001314 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	099b      	lsrs	r3, r3, #6
 80011c4:	f04f 0400 	mov.w	r4, #0
 80011c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	ea03 0501 	and.w	r5, r3, r1
 80011d4:	ea04 0602 	and.w	r6, r4, r2
 80011d8:	4629      	mov	r1, r5
 80011da:	4632      	mov	r2, r6
 80011dc:	f04f 0300 	mov.w	r3, #0
 80011e0:	f04f 0400 	mov.w	r4, #0
 80011e4:	0154      	lsls	r4, r2, #5
 80011e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011ea:	014b      	lsls	r3, r1, #5
 80011ec:	4619      	mov	r1, r3
 80011ee:	4622      	mov	r2, r4
 80011f0:	1b49      	subs	r1, r1, r5
 80011f2:	eb62 0206 	sbc.w	r2, r2, r6
 80011f6:	f04f 0300 	mov.w	r3, #0
 80011fa:	f04f 0400 	mov.w	r4, #0
 80011fe:	0194      	lsls	r4, r2, #6
 8001200:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001204:	018b      	lsls	r3, r1, #6
 8001206:	1a5b      	subs	r3, r3, r1
 8001208:	eb64 0402 	sbc.w	r4, r4, r2
 800120c:	f04f 0100 	mov.w	r1, #0
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	00e2      	lsls	r2, r4, #3
 8001216:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800121a:	00d9      	lsls	r1, r3, #3
 800121c:	460b      	mov	r3, r1
 800121e:	4614      	mov	r4, r2
 8001220:	195b      	adds	r3, r3, r5
 8001222:	eb44 0406 	adc.w	r4, r4, r6
 8001226:	f04f 0100 	mov.w	r1, #0
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	0262      	lsls	r2, r4, #9
 8001230:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001234:	0259      	lsls	r1, r3, #9
 8001236:	460b      	mov	r3, r1
 8001238:	4614      	mov	r4, r2
 800123a:	4618      	mov	r0, r3
 800123c:	4621      	mov	r1, r4
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f04f 0400 	mov.w	r4, #0
 8001244:	461a      	mov	r2, r3
 8001246:	4623      	mov	r3, r4
 8001248:	f7fe ffca 	bl	80001e0 <__aeabi_uldivmod>
 800124c:	4603      	mov	r3, r0
 800124e:	460c      	mov	r4, r1
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	e049      	b.n	80012e8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001254:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	099b      	lsrs	r3, r3, #6
 800125a:	f04f 0400 	mov.w	r4, #0
 800125e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	ea03 0501 	and.w	r5, r3, r1
 800126a:	ea04 0602 	and.w	r6, r4, r2
 800126e:	4629      	mov	r1, r5
 8001270:	4632      	mov	r2, r6
 8001272:	f04f 0300 	mov.w	r3, #0
 8001276:	f04f 0400 	mov.w	r4, #0
 800127a:	0154      	lsls	r4, r2, #5
 800127c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001280:	014b      	lsls	r3, r1, #5
 8001282:	4619      	mov	r1, r3
 8001284:	4622      	mov	r2, r4
 8001286:	1b49      	subs	r1, r1, r5
 8001288:	eb62 0206 	sbc.w	r2, r2, r6
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	f04f 0400 	mov.w	r4, #0
 8001294:	0194      	lsls	r4, r2, #6
 8001296:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800129a:	018b      	lsls	r3, r1, #6
 800129c:	1a5b      	subs	r3, r3, r1
 800129e:	eb64 0402 	sbc.w	r4, r4, r2
 80012a2:	f04f 0100 	mov.w	r1, #0
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	00e2      	lsls	r2, r4, #3
 80012ac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80012b0:	00d9      	lsls	r1, r3, #3
 80012b2:	460b      	mov	r3, r1
 80012b4:	4614      	mov	r4, r2
 80012b6:	195b      	adds	r3, r3, r5
 80012b8:	eb44 0406 	adc.w	r4, r4, r6
 80012bc:	f04f 0100 	mov.w	r1, #0
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	02a2      	lsls	r2, r4, #10
 80012c6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80012ca:	0299      	lsls	r1, r3, #10
 80012cc:	460b      	mov	r3, r1
 80012ce:	4614      	mov	r4, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	4621      	mov	r1, r4
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f04f 0400 	mov.w	r4, #0
 80012da:	461a      	mov	r2, r3
 80012dc:	4623      	mov	r3, r4
 80012de:	f7fe ff7f 	bl	80001e0 <__aeabi_uldivmod>
 80012e2:	4603      	mov	r3, r0
 80012e4:	460c      	mov	r4, r1
 80012e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	0c1b      	lsrs	r3, r3, #16
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	3301      	adds	r3, #1
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001300:	60bb      	str	r3, [r7, #8]
      break;
 8001302:	e002      	b.n	800130a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001306:	60bb      	str	r3, [r7, #8]
      break;
 8001308:	bf00      	nop
    }
  }
  return sysclockfreq;
 800130a:	68bb      	ldr	r3, [r7, #8]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	00f42400 	.word	0x00f42400
 800131c:	007a1200 	.word	0x007a1200

08001320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <HAL_RCC_GetHCLKFreq+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	2000000c 	.word	0x2000000c

08001338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800133c:	f7ff fff0 	bl	8001320 <HAL_RCC_GetHCLKFreq>
 8001340:	4601      	mov	r1, r0
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	0b5b      	lsrs	r3, r3, #13
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	4a03      	ldr	r2, [pc, #12]	; (800135c <HAL_RCC_GetPCLK2Freq+0x24>)
 800134e:	5cd3      	ldrb	r3, [r2, r3]
 8001350:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001354:	4618      	mov	r0, r3
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40023800 	.word	0x40023800
 800135c:	080063cc 	.word	0x080063cc

08001360 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	220f      	movs	r2, #15
 800136e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_RCC_GetClockConfig+0x5c>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f003 0203 	and.w	r2, r3, #3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_RCC_GetClockConfig+0x5c>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <HAL_RCC_GetClockConfig+0x5c>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_RCC_GetClockConfig+0x5c>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	08db      	lsrs	r3, r3, #3
 800139a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <HAL_RCC_GetClockConfig+0x60>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 020f 	and.w	r2, r3, #15
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	601a      	str	r2, [r3, #0]
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40023c00 	.word	0x40023c00

080013c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e01d      	b.n	8001412 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d106      	bne.n	80013f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f004 fe18 	bl	8006020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2202      	movs	r2, #2
 80013f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3304      	adds	r3, #4
 8001400:	4619      	mov	r1, r3
 8001402:	4610      	mov	r0, r2
 8001404:	f000 fbce 	bl	8001ba4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800141a:	b480      	push	{r7}
 800141c:	b085      	sub	sp, #20
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f042 0201 	orr.w	r2, r2, #1
 8001430:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2b06      	cmp	r3, #6
 8001442:	d007      	beq.n	8001454 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0201 	orr.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e01d      	b.n	80014b0 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d106      	bne.n	800148e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f815 	bl	80014b8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2202      	movs	r2, #2
 8001492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3304      	adds	r3, #4
 800149e:	4619      	mov	r1, r3
 80014a0:	4610      	mov	r0, r2
 80014a2:	f000 fb7f 	bl	8001ba4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e01d      	b.n	800151a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d106      	bne.n	80014f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f004 fdb4 	bl	8006060 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2202      	movs	r2, #2
 80014fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3304      	adds	r3, #4
 8001508:	4619      	mov	r1, r3
 800150a:	4610      	mov	r0, r2
 800150c:	f000 fb4a 	bl	8001ba4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2201      	movs	r2, #1
 8001534:	6839      	ldr	r1, [r7, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fdda 	bl	80020f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a10      	ldr	r2, [pc, #64]	; (8001584 <HAL_TIM_PWM_Start+0x60>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d107      	bne.n	8001556 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001554:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2b06      	cmp	r3, #6
 8001566:	d007      	beq.n	8001578 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 0201 	orr.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40010000 	.word	0x40010000

08001588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b02      	cmp	r3, #2
 800159c:	d122      	bne.n	80015e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d11b      	bne.n	80015e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f06f 0202 	mvn.w	r2, #2
 80015b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 facb 	bl	8001b66 <HAL_TIM_IC_CaptureCallback>
 80015d0:	e005      	b.n	80015de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 fabd 	bl	8001b52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 face 	bl	8001b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d122      	bne.n	8001638 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d11b      	bne.n	8001638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f06f 0204 	mvn.w	r2, #4
 8001608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2202      	movs	r2, #2
 800160e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 faa1 	bl	8001b66 <HAL_TIM_IC_CaptureCallback>
 8001624:	e005      	b.n	8001632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 fa93 	bl	8001b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 faa4 	bl	8001b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b08      	cmp	r3, #8
 8001644:	d122      	bne.n	800168c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	2b08      	cmp	r3, #8
 8001652:	d11b      	bne.n	800168c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f06f 0208 	mvn.w	r2, #8
 800165c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2204      	movs	r2, #4
 8001662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 fa77 	bl	8001b66 <HAL_TIM_IC_CaptureCallback>
 8001678:	e005      	b.n	8001686 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fa69 	bl	8001b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 fa7a 	bl	8001b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	f003 0310 	and.w	r3, r3, #16
 8001696:	2b10      	cmp	r3, #16
 8001698:	d122      	bne.n	80016e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	f003 0310 	and.w	r3, r3, #16
 80016a4:	2b10      	cmp	r3, #16
 80016a6:	d11b      	bne.n	80016e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f06f 0210 	mvn.w	r2, #16
 80016b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2208      	movs	r2, #8
 80016b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 fa4d 	bl	8001b66 <HAL_TIM_IC_CaptureCallback>
 80016cc:	e005      	b.n	80016da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 fa3f 	bl	8001b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 fa50 	bl	8001b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d10e      	bne.n	800170c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d107      	bne.n	800170c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f06f 0201 	mvn.w	r2, #1
 8001704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f004 fa6c 	bl	8005be4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001716:	2b80      	cmp	r3, #128	; 0x80
 8001718:	d10e      	bne.n	8001738 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001724:	2b80      	cmp	r3, #128	; 0x80
 8001726:	d107      	bne.n	8001738 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 fd7a 	bl	800222c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001742:	2b40      	cmp	r3, #64	; 0x40
 8001744:	d10e      	bne.n	8001764 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001750:	2b40      	cmp	r3, #64	; 0x40
 8001752:	d107      	bne.n	8001764 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800175c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 fa15 	bl	8001b8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	f003 0320 	and.w	r3, r3, #32
 800176e:	2b20      	cmp	r3, #32
 8001770:	d10e      	bne.n	8001790 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	2b20      	cmp	r3, #32
 800177e:	d107      	bne.n	8001790 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f06f 0220 	mvn.w	r2, #32
 8001788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 fd44 	bl	8002218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d101      	bne.n	80017b2 <HAL_TIM_OC_ConfigChannel+0x1a>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e04e      	b.n	8001850 <HAL_TIM_OC_ConfigChannel+0xb8>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2202      	movs	r2, #2
 80017be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b0c      	cmp	r3, #12
 80017c6:	d839      	bhi.n	800183c <HAL_TIM_OC_ConfigChannel+0xa4>
 80017c8:	a201      	add	r2, pc, #4	; (adr r2, 80017d0 <HAL_TIM_OC_ConfigChannel+0x38>)
 80017ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ce:	bf00      	nop
 80017d0:	08001805 	.word	0x08001805
 80017d4:	0800183d 	.word	0x0800183d
 80017d8:	0800183d 	.word	0x0800183d
 80017dc:	0800183d 	.word	0x0800183d
 80017e0:	08001813 	.word	0x08001813
 80017e4:	0800183d 	.word	0x0800183d
 80017e8:	0800183d 	.word	0x0800183d
 80017ec:	0800183d 	.word	0x0800183d
 80017f0:	08001821 	.word	0x08001821
 80017f4:	0800183d 	.word	0x0800183d
 80017f8:	0800183d 	.word	0x0800183d
 80017fc:	0800183d 	.word	0x0800183d
 8001800:	0800182f 	.word	0x0800182f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68b9      	ldr	r1, [r7, #8]
 800180a:	4618      	mov	r0, r3
 800180c:	f000 fa4a 	bl	8001ca4 <TIM_OC1_SetConfig>
      break;
 8001810:	e015      	b.n	800183e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68b9      	ldr	r1, [r7, #8]
 8001818:	4618      	mov	r0, r3
 800181a:	f000 faa9 	bl	8001d70 <TIM_OC2_SetConfig>
      break;
 800181e:	e00e      	b.n	800183e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68b9      	ldr	r1, [r7, #8]
 8001826:	4618      	mov	r0, r3
 8001828:	f000 fb0e 	bl	8001e48 <TIM_OC3_SetConfig>
      break;
 800182c:	e007      	b.n	800183e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68b9      	ldr	r1, [r7, #8]
 8001834:	4618      	mov	r0, r3
 8001836:	f000 fb71 	bl	8001f1c <TIM_OC4_SetConfig>
      break;
 800183a:	e000      	b.n	800183e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800183c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800186a:	2b01      	cmp	r3, #1
 800186c:	d101      	bne.n	8001872 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800186e:	2302      	movs	r3, #2
 8001870:	e0b4      	b.n	80019dc <HAL_TIM_PWM_ConfigChannel+0x184>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2202      	movs	r2, #2
 800187e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b0c      	cmp	r3, #12
 8001886:	f200 809f 	bhi.w	80019c8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800188a:	a201      	add	r2, pc, #4	; (adr r2, 8001890 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800188c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001890:	080018c5 	.word	0x080018c5
 8001894:	080019c9 	.word	0x080019c9
 8001898:	080019c9 	.word	0x080019c9
 800189c:	080019c9 	.word	0x080019c9
 80018a0:	08001905 	.word	0x08001905
 80018a4:	080019c9 	.word	0x080019c9
 80018a8:	080019c9 	.word	0x080019c9
 80018ac:	080019c9 	.word	0x080019c9
 80018b0:	08001947 	.word	0x08001947
 80018b4:	080019c9 	.word	0x080019c9
 80018b8:	080019c9 	.word	0x080019c9
 80018bc:	080019c9 	.word	0x080019c9
 80018c0:	08001987 	.word	0x08001987
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68b9      	ldr	r1, [r7, #8]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f9ea 	bl	8001ca4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	699a      	ldr	r2, [r3, #24]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0208 	orr.w	r2, r2, #8
 80018de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	699a      	ldr	r2, [r3, #24]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0204 	bic.w	r2, r2, #4
 80018ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6999      	ldr	r1, [r3, #24]
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	691a      	ldr	r2, [r3, #16]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	619a      	str	r2, [r3, #24]
      break;
 8001902:	e062      	b.n	80019ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68b9      	ldr	r1, [r7, #8]
 800190a:	4618      	mov	r0, r3
 800190c:	f000 fa30 	bl	8001d70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	699a      	ldr	r2, [r3, #24]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800191e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	699a      	ldr	r2, [r3, #24]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800192e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6999      	ldr	r1, [r3, #24]
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	021a      	lsls	r2, r3, #8
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	619a      	str	r2, [r3, #24]
      break;
 8001944:	e041      	b.n	80019ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68b9      	ldr	r1, [r7, #8]
 800194c:	4618      	mov	r0, r3
 800194e:	f000 fa7b 	bl	8001e48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	69da      	ldr	r2, [r3, #28]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f042 0208 	orr.w	r2, r2, #8
 8001960:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	69da      	ldr	r2, [r3, #28]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0204 	bic.w	r2, r2, #4
 8001970:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	69d9      	ldr	r1, [r3, #28]
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	691a      	ldr	r2, [r3, #16]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	61da      	str	r2, [r3, #28]
      break;
 8001984:	e021      	b.n	80019ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68b9      	ldr	r1, [r7, #8]
 800198c:	4618      	mov	r0, r3
 800198e:	f000 fac5 	bl	8001f1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	69da      	ldr	r2, [r3, #28]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	69da      	ldr	r2, [r3, #28]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	69d9      	ldr	r1, [r3, #28]
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	021a      	lsls	r2, r3, #8
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	61da      	str	r2, [r3, #28]
      break;
 80019c6:	e000      	b.n	80019ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80019c8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <HAL_TIM_ConfigClockSource+0x18>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e0a6      	b.n	8001b4a <HAL_TIM_ConfigClockSource+0x166>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2202      	movs	r2, #2
 8001a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b40      	cmp	r3, #64	; 0x40
 8001a32:	d067      	beq.n	8001b04 <HAL_TIM_ConfigClockSource+0x120>
 8001a34:	2b40      	cmp	r3, #64	; 0x40
 8001a36:	d80b      	bhi.n	8001a50 <HAL_TIM_ConfigClockSource+0x6c>
 8001a38:	2b10      	cmp	r3, #16
 8001a3a:	d073      	beq.n	8001b24 <HAL_TIM_ConfigClockSource+0x140>
 8001a3c:	2b10      	cmp	r3, #16
 8001a3e:	d802      	bhi.n	8001a46 <HAL_TIM_ConfigClockSource+0x62>
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d06f      	beq.n	8001b24 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001a44:	e078      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001a46:	2b20      	cmp	r3, #32
 8001a48:	d06c      	beq.n	8001b24 <HAL_TIM_ConfigClockSource+0x140>
 8001a4a:	2b30      	cmp	r3, #48	; 0x30
 8001a4c:	d06a      	beq.n	8001b24 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001a4e:	e073      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001a50:	2b70      	cmp	r3, #112	; 0x70
 8001a52:	d00d      	beq.n	8001a70 <HAL_TIM_ConfigClockSource+0x8c>
 8001a54:	2b70      	cmp	r3, #112	; 0x70
 8001a56:	d804      	bhi.n	8001a62 <HAL_TIM_ConfigClockSource+0x7e>
 8001a58:	2b50      	cmp	r3, #80	; 0x50
 8001a5a:	d033      	beq.n	8001ac4 <HAL_TIM_ConfigClockSource+0xe0>
 8001a5c:	2b60      	cmp	r3, #96	; 0x60
 8001a5e:	d041      	beq.n	8001ae4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001a60:	e06a      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a66:	d066      	beq.n	8001b36 <HAL_TIM_ConfigClockSource+0x152>
 8001a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a6c:	d017      	beq.n	8001a9e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001a6e:	e063      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6818      	ldr	r0, [r3, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	6899      	ldr	r1, [r3, #8]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f000 fb16 	bl	80020b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001a92:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	609a      	str	r2, [r3, #8]
      break;
 8001a9c:	e04c      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	6899      	ldr	r1, [r3, #8]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	f000 faff 	bl	80020b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ac0:	609a      	str	r2, [r3, #8]
      break;
 8001ac2:	e039      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	6859      	ldr	r1, [r3, #4]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	f000 fa73 	bl	8001fbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2150      	movs	r1, #80	; 0x50
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 facc 	bl	800207a <TIM_ITRx_SetConfig>
      break;
 8001ae2:	e029      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6818      	ldr	r0, [r3, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	6859      	ldr	r1, [r3, #4]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	461a      	mov	r2, r3
 8001af2:	f000 fa92 	bl	800201a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2160      	movs	r1, #96	; 0x60
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 fabc 	bl	800207a <TIM_ITRx_SetConfig>
      break;
 8001b02:	e019      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	6859      	ldr	r1, [r3, #4]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	461a      	mov	r2, r3
 8001b12:	f000 fa53 	bl	8001fbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2140      	movs	r1, #64	; 0x40
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 faac 	bl	800207a <TIM_ITRx_SetConfig>
      break;
 8001b22:	e009      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4610      	mov	r0, r2
 8001b30:	f000 faa3 	bl	800207a <TIM_ITRx_SetConfig>
      break;
 8001b34:	e000      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001b36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a34      	ldr	r2, [pc, #208]	; (8001c88 <TIM_Base_SetConfig+0xe4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d00f      	beq.n	8001bdc <TIM_Base_SetConfig+0x38>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc2:	d00b      	beq.n	8001bdc <TIM_Base_SetConfig+0x38>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a31      	ldr	r2, [pc, #196]	; (8001c8c <TIM_Base_SetConfig+0xe8>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d007      	beq.n	8001bdc <TIM_Base_SetConfig+0x38>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a30      	ldr	r2, [pc, #192]	; (8001c90 <TIM_Base_SetConfig+0xec>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d003      	beq.n	8001bdc <TIM_Base_SetConfig+0x38>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a2f      	ldr	r2, [pc, #188]	; (8001c94 <TIM_Base_SetConfig+0xf0>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d108      	bne.n	8001bee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a25      	ldr	r2, [pc, #148]	; (8001c88 <TIM_Base_SetConfig+0xe4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d01b      	beq.n	8001c2e <TIM_Base_SetConfig+0x8a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bfc:	d017      	beq.n	8001c2e <TIM_Base_SetConfig+0x8a>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a22      	ldr	r2, [pc, #136]	; (8001c8c <TIM_Base_SetConfig+0xe8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d013      	beq.n	8001c2e <TIM_Base_SetConfig+0x8a>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a21      	ldr	r2, [pc, #132]	; (8001c90 <TIM_Base_SetConfig+0xec>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d00f      	beq.n	8001c2e <TIM_Base_SetConfig+0x8a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a20      	ldr	r2, [pc, #128]	; (8001c94 <TIM_Base_SetConfig+0xf0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d00b      	beq.n	8001c2e <TIM_Base_SetConfig+0x8a>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a1f      	ldr	r2, [pc, #124]	; (8001c98 <TIM_Base_SetConfig+0xf4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d007      	beq.n	8001c2e <TIM_Base_SetConfig+0x8a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a1e      	ldr	r2, [pc, #120]	; (8001c9c <TIM_Base_SetConfig+0xf8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d003      	beq.n	8001c2e <TIM_Base_SetConfig+0x8a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a1d      	ldr	r2, [pc, #116]	; (8001ca0 <TIM_Base_SetConfig+0xfc>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d108      	bne.n	8001c40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a08      	ldr	r2, [pc, #32]	; (8001c88 <TIM_Base_SetConfig+0xe4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d103      	bne.n	8001c74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	615a      	str	r2, [r3, #20]
}
 8001c7a:	bf00      	nop
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40010000 	.word	0x40010000
 8001c8c:	40000400 	.word	0x40000400
 8001c90:	40000800 	.word	0x40000800
 8001c94:	40000c00 	.word	0x40000c00
 8001c98:	40014000 	.word	0x40014000
 8001c9c:	40014400 	.word	0x40014400
 8001ca0:	40014800 	.word	0x40014800

08001ca4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b087      	sub	sp, #28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	f023 0201 	bic.w	r2, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f023 0303 	bic.w	r3, r3, #3
 8001cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f023 0302 	bic.w	r3, r3, #2
 8001cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a1c      	ldr	r2, [pc, #112]	; (8001d6c <TIM_OC1_SetConfig+0xc8>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d10c      	bne.n	8001d1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f023 0308 	bic.w	r3, r3, #8
 8001d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f023 0304 	bic.w	r3, r3, #4
 8001d18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a13      	ldr	r2, [pc, #76]	; (8001d6c <TIM_OC1_SetConfig+0xc8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d111      	bne.n	8001d46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	621a      	str	r2, [r3, #32]
}
 8001d60:	bf00      	nop
 8001d62:	371c      	adds	r7, #28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	40010000 	.word	0x40010000

08001d70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b087      	sub	sp, #28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	f023 0210 	bic.w	r2, r3, #16
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f023 0320 	bic.w	r3, r3, #32
 8001dba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a1e      	ldr	r2, [pc, #120]	; (8001e44 <TIM_OC2_SetConfig+0xd4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d10d      	bne.n	8001dec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001dea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a15      	ldr	r2, [pc, #84]	; (8001e44 <TIM_OC2_SetConfig+0xd4>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d113      	bne.n	8001e1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001dfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	621a      	str	r2, [r3, #32]
}
 8001e36:	bf00      	nop
 8001e38:	371c      	adds	r7, #28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40010000 	.word	0x40010000

08001e48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f023 0303 	bic.w	r3, r3, #3
 8001e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a1d      	ldr	r2, [pc, #116]	; (8001f18 <TIM_OC3_SetConfig+0xd0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d10d      	bne.n	8001ec2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001eac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	021b      	lsls	r3, r3, #8
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ec0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a14      	ldr	r2, [pc, #80]	; (8001f18 <TIM_OC3_SetConfig+0xd0>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d113      	bne.n	8001ef2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	621a      	str	r2, [r3, #32]
}
 8001f0c:	bf00      	nop
 8001f0e:	371c      	adds	r7, #28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	40010000 	.word	0x40010000

08001f1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	021b      	lsls	r3, r3, #8
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	031b      	lsls	r3, r3, #12
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a10      	ldr	r2, [pc, #64]	; (8001fb8 <TIM_OC4_SetConfig+0x9c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d109      	bne.n	8001f90 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	019b      	lsls	r3, r3, #6
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	621a      	str	r2, [r3, #32]
}
 8001faa:	bf00      	nop
 8001fac:	371c      	adds	r7, #28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40010000 	.word	0x40010000

08001fbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	f023 0201 	bic.w	r2, r3, #1
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f023 030a 	bic.w	r3, r3, #10
 8001ff8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	621a      	str	r2, [r3, #32]
}
 800200e:	bf00      	nop
 8002010:	371c      	adds	r7, #28
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800201a:	b480      	push	{r7}
 800201c:	b087      	sub	sp, #28
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	f023 0210 	bic.w	r2, r3, #16
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002044:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	031b      	lsls	r3, r3, #12
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	4313      	orrs	r3, r2
 800204e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002056:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	621a      	str	r2, [r3, #32]
}
 800206e:	bf00      	nop
 8002070:	371c      	adds	r7, #28
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800207a:	b480      	push	{r7}
 800207c:	b085      	sub	sp, #20
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002090:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4313      	orrs	r3, r2
 8002098:	f043 0307 	orr.w	r3, r3, #7
 800209c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	609a      	str	r2, [r3, #8]
}
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
 80020bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	021a      	lsls	r2, r3, #8
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	431a      	orrs	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	4313      	orrs	r3, r2
 80020dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	609a      	str	r2, [r3, #8]
}
 80020e4:	bf00      	nop
 80020e6:	371c      	adds	r7, #28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b087      	sub	sp, #28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f003 031f 	and.w	r3, r3, #31
 8002102:	2201      	movs	r2, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6a1a      	ldr	r2, [r3, #32]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	43db      	mvns	r3, r3
 8002112:	401a      	ands	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a1a      	ldr	r2, [r3, #32]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f003 031f 	and.w	r3, r3, #31
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	fa01 f303 	lsl.w	r3, r1, r3
 8002128:	431a      	orrs	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	621a      	str	r2, [r3, #32]
}
 800212e:	bf00      	nop
 8002130:	371c      	adds	r7, #28
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002150:	2302      	movs	r3, #2
 8002152:	e050      	b.n	80021f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800217a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a1c      	ldr	r2, [pc, #112]	; (8002204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d018      	beq.n	80021ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a0:	d013      	beq.n	80021ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a18      	ldr	r2, [pc, #96]	; (8002208 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d00e      	beq.n	80021ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a16      	ldr	r2, [pc, #88]	; (800220c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d009      	beq.n	80021ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a15      	ldr	r2, [pc, #84]	; (8002210 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d004      	beq.n	80021ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a13      	ldr	r2, [pc, #76]	; (8002214 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d10c      	bne.n	80021e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	4313      	orrs	r3, r2
 80021da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40010000 	.word	0x40010000
 8002208:	40000400 	.word	0x40000400
 800220c:	40000800 	.word	0x40000800
 8002210:	40000c00 	.word	0x40000c00
 8002214:	40014000 	.word	0x40014000

08002218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002256:	f3ef 8305 	mrs	r3, IPSR
 800225a:	60bb      	str	r3, [r7, #8]
  return(result);
 800225c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10f      	bne.n	8002282 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002262:	f3ef 8310 	mrs	r3, PRIMASK
 8002266:	607b      	str	r3, [r7, #4]
  return(result);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d105      	bne.n	800227a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800226e:	f3ef 8311 	mrs	r3, BASEPRI
 8002272:	603b      	str	r3, [r7, #0]
  return(result);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d007      	beq.n	800228a <osKernelInitialize+0x3a>
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <osKernelInitialize+0x64>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d103      	bne.n	800228a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002282:	f06f 0305 	mvn.w	r3, #5
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	e00c      	b.n	80022a4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800228a:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <osKernelInitialize+0x64>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d105      	bne.n	800229e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <osKernelInitialize+0x64>)
 8002294:	2201      	movs	r2, #1
 8002296:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	e002      	b.n	80022a4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800229e:	f04f 33ff 	mov.w	r3, #4294967295
 80022a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80022a4:	68fb      	ldr	r3, [r7, #12]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	2000002c 	.word	0x2000002c

080022b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022be:	f3ef 8305 	mrs	r3, IPSR
 80022c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80022c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10f      	bne.n	80022ea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022ca:	f3ef 8310 	mrs	r3, PRIMASK
 80022ce:	607b      	str	r3, [r7, #4]
  return(result);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d105      	bne.n	80022e2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80022d6:	f3ef 8311 	mrs	r3, BASEPRI
 80022da:	603b      	str	r3, [r7, #0]
  return(result);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d007      	beq.n	80022f2 <osKernelStart+0x3a>
 80022e2:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <osKernelStart+0x68>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d103      	bne.n	80022f2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80022ea:	f06f 0305 	mvn.w	r3, #5
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	e010      	b.n	8002314 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80022f2:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <osKernelStart+0x68>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d109      	bne.n	800230e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80022fa:	f7ff ffa1 	bl	8002240 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80022fe:	4b08      	ldr	r3, [pc, #32]	; (8002320 <osKernelStart+0x68>)
 8002300:	2202      	movs	r2, #2
 8002302:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002304:	f001 fc98 	bl	8003c38 <vTaskStartScheduler>
      stat = osOK;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	e002      	b.n	8002314 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295
 8002312:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002314:	68fb      	ldr	r3, [r7, #12]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	2000002c 	.word	0x2000002c

08002324 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b090      	sub	sp, #64	; 0x40
 8002328:	af04      	add	r7, sp, #16
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002330:	2300      	movs	r3, #0
 8002332:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002334:	f3ef 8305 	mrs	r3, IPSR
 8002338:	61fb      	str	r3, [r7, #28]
  return(result);
 800233a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800233c:	2b00      	cmp	r3, #0
 800233e:	f040 808f 	bne.w	8002460 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002342:	f3ef 8310 	mrs	r3, PRIMASK
 8002346:	61bb      	str	r3, [r7, #24]
  return(result);
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d105      	bne.n	800235a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800234e:	f3ef 8311 	mrs	r3, BASEPRI
 8002352:	617b      	str	r3, [r7, #20]
  return(result);
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <osThreadNew+0x3e>
 800235a:	4b44      	ldr	r3, [pc, #272]	; (800246c <osThreadNew+0x148>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d07e      	beq.n	8002460 <osThreadNew+0x13c>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d07b      	beq.n	8002460 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800236c:	2318      	movs	r3, #24
 800236e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8002370:	2300      	movs	r3, #0
 8002372:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8002374:	f04f 33ff 	mov.w	r3, #4294967295
 8002378:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d045      	beq.n	800240c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <osThreadNew+0x6a>
        name = attr->name;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d008      	beq.n	80023b4 <osThreadNew+0x90>
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	2b38      	cmp	r3, #56	; 0x38
 80023a6:	d805      	bhi.n	80023b4 <osThreadNew+0x90>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <osThreadNew+0x94>
        return (NULL);
 80023b4:	2300      	movs	r3, #0
 80023b6:	e054      	b.n	8002462 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	089b      	lsrs	r3, r3, #2
 80023c6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00e      	beq.n	80023ee <osThreadNew+0xca>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	2b5f      	cmp	r3, #95	; 0x5f
 80023d6:	d90a      	bls.n	80023ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d006      	beq.n	80023ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <osThreadNew+0xca>
        mem = 1;
 80023e8:	2301      	movs	r3, #1
 80023ea:	623b      	str	r3, [r7, #32]
 80023ec:	e010      	b.n	8002410 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10c      	bne.n	8002410 <osThreadNew+0xec>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d108      	bne.n	8002410 <osThreadNew+0xec>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d104      	bne.n	8002410 <osThreadNew+0xec>
          mem = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	623b      	str	r3, [r7, #32]
 800240a:	e001      	b.n	8002410 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d110      	bne.n	8002438 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800241e:	9202      	str	r2, [sp, #8]
 8002420:	9301      	str	r3, [sp, #4]
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800242a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f001 fa2f 	bl	8003890 <xTaskCreateStatic>
 8002432:	4603      	mov	r3, r0
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	e013      	b.n	8002460 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d110      	bne.n	8002460 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800243e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002440:	b29a      	uxth	r2, r3
 8002442:	f107 0310 	add.w	r3, r7, #16
 8002446:	9301      	str	r3, [sp, #4]
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f001 fa77 	bl	8003944 <xTaskCreate>
 8002456:	4603      	mov	r3, r0
 8002458:	2b01      	cmp	r3, #1
 800245a:	d001      	beq.n	8002460 <osThreadNew+0x13c>
          hTask = NULL;
 800245c:	2300      	movs	r3, #0
 800245e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002460:	693b      	ldr	r3, [r7, #16]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3730      	adds	r7, #48	; 0x30
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	2000002c 	.word	0x2000002c

08002470 <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800247c:	f3ef 8305 	mrs	r3, IPSR
 8002480:	617b      	str	r3, [r7, #20]
  return(result);
 8002482:	697b      	ldr	r3, [r7, #20]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 8002484:	2b00      	cmp	r3, #0
 8002486:	d112      	bne.n	80024ae <osThreadGetStackSpace+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002488:	f3ef 8310 	mrs	r3, PRIMASK
 800248c:	613b      	str	r3, [r7, #16]
  return(result);
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d105      	bne.n	80024a0 <osThreadGetStackSpace+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002494:	f3ef 8311 	mrs	r3, BASEPRI
 8002498:	60fb      	str	r3, [r7, #12]
  return(result);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <osThreadGetStackSpace+0x38>
 80024a0:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <osThreadGetStackSpace+0x58>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d002      	beq.n	80024ae <osThreadGetStackSpace+0x3e>
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <osThreadGetStackSpace+0x44>
    sz = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
 80024b2:	e003      	b.n	80024bc <osThreadGetStackSpace+0x4c>
  } else {
    sz = (uint32_t)uxTaskGetStackHighWaterMark (hTask);
 80024b4:	69b8      	ldr	r0, [r7, #24]
 80024b6:	f002 f85d 	bl	8004574 <uxTaskGetStackHighWaterMark>
 80024ba:	61f8      	str	r0, [r7, #28]
  }

  return (sz);
 80024bc:	69fb      	ldr	r3, [r7, #28]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3720      	adds	r7, #32
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	2000002c 	.word	0x2000002c

080024cc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024d4:	f3ef 8305 	mrs	r3, IPSR
 80024d8:	613b      	str	r3, [r7, #16]
  return(result);
 80024da:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10f      	bne.n	8002500 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024e0:	f3ef 8310 	mrs	r3, PRIMASK
 80024e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d105      	bne.n	80024f8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80024ec:	f3ef 8311 	mrs	r3, BASEPRI
 80024f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <osDelay+0x3c>
 80024f8:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <osDelay+0x58>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d103      	bne.n	8002508 <osDelay+0x3c>
    stat = osErrorISR;
 8002500:	f06f 0305 	mvn.w	r3, #5
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	e007      	b.n	8002518 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f001 fb5c 	bl	8003bd0 <vTaskDelay>
    }
  }

  return (stat);
 8002518:	697b      	ldr	r3, [r7, #20]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	2000002c 	.word	0x2000002c

08002528 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8002530:	2300      	movs	r3, #0
 8002532:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002534:	f3ef 8305 	mrs	r3, IPSR
 8002538:	617b      	str	r3, [r7, #20]
  return(result);
 800253a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 800253c:	2b00      	cmp	r3, #0
 800253e:	d13d      	bne.n	80025bc <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002540:	f3ef 8310 	mrs	r3, PRIMASK
 8002544:	613b      	str	r3, [r7, #16]
  return(result);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d105      	bne.n	8002558 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800254c:	f3ef 8311 	mrs	r3, BASEPRI
 8002550:	60fb      	str	r3, [r7, #12]
  return(result);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <osEventFlagsNew+0x38>
 8002558:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <osEventFlagsNew+0xa0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d02d      	beq.n	80025bc <osEventFlagsNew+0x94>
    mem = -1;
 8002560:	f04f 33ff 	mov.w	r3, #4294967295
 8002564:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d015      	beq.n	8002598 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d006      	beq.n	8002582 <osEventFlagsNew+0x5a>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	2b1f      	cmp	r3, #31
 800257a:	d902      	bls.n	8002582 <osEventFlagsNew+0x5a>
        mem = 1;
 800257c:	2301      	movs	r3, #1
 800257e:	61bb      	str	r3, [r7, #24]
 8002580:	e00c      	b.n	800259c <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d108      	bne.n	800259c <osEventFlagsNew+0x74>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d104      	bne.n	800259c <osEventFlagsNew+0x74>
          mem = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	e001      	b.n	800259c <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d106      	bne.n	80025b0 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 f98a 	bl	80028c0 <xEventGroupCreateStatic>
 80025ac:	61f8      	str	r0, [r7, #28]
 80025ae:	e005      	b.n	80025bc <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d102      	bne.n	80025bc <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 80025b6:	f000 f9b8 	bl	800292a <xEventGroupCreate>
 80025ba:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80025bc:	69fb      	ldr	r3, [r7, #28]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3720      	adds	r7, #32
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	2000002c 	.word	0x2000002c

080025cc <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d004      	beq.n	80025ea <osEventFlagsSet+0x1e>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80025ea:	f06f 0303 	mvn.w	r3, #3
 80025ee:	61fb      	str	r3, [r7, #28]
 80025f0:	e03a      	b.n	8002668 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025f2:	f3ef 8305 	mrs	r3, IPSR
 80025f6:	617b      	str	r3, [r7, #20]
  return(result);
 80025f8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10f      	bne.n	800261e <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002602:	613b      	str	r3, [r7, #16]
  return(result);
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d105      	bne.n	8002616 <osEventFlagsSet+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800260a:	f3ef 8311 	mrs	r3, BASEPRI
 800260e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d021      	beq.n	800265a <osEventFlagsSet+0x8e>
 8002616:	4b17      	ldr	r3, [pc, #92]	; (8002674 <osEventFlagsSet+0xa8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d11d      	bne.n	800265a <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8002622:	f107 0308 	add.w	r3, r7, #8
 8002626:	461a      	mov	r2, r3
 8002628:	6839      	ldr	r1, [r7, #0]
 800262a:	69b8      	ldr	r0, [r7, #24]
 800262c:	f000 fb94 	bl	8002d58 <xEventGroupSetBitsFromISR>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d103      	bne.n	800263e <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8002636:	f06f 0302 	mvn.w	r3, #2
 800263a:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800263c:	e013      	b.n	8002666 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00e      	beq.n	8002666 <osEventFlagsSet+0x9a>
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <osEventFlagsSet+0xac>)
 800264a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	f3bf 8f4f 	dsb	sy
 8002654:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8002658:	e005      	b.n	8002666 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800265a:	6839      	ldr	r1, [r7, #0]
 800265c:	69b8      	ldr	r0, [r7, #24]
 800265e:	f000 fab6 	bl	8002bce <xEventGroupSetBits>
 8002662:	61f8      	str	r0, [r7, #28]
 8002664:	e000      	b.n	8002668 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8002666:	bf00      	nop
  }

  return (rflags);
 8002668:	69fb      	ldr	r3, [r7, #28]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3720      	adds	r7, #32
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	2000002c 	.word	0x2000002c
 8002678:	e000ed04 	.word	0xe000ed04

0800267c <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d004      	beq.n	800269a <osEventFlagsClear+0x1e>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 800269a:	f06f 0303 	mvn.w	r3, #3
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	e029      	b.n	80026f6 <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026a2:	f3ef 8305 	mrs	r3, IPSR
 80026a6:	617b      	str	r3, [r7, #20]
  return(result);
 80026a8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10f      	bne.n	80026ce <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ae:	f3ef 8310 	mrs	r3, PRIMASK
 80026b2:	613b      	str	r3, [r7, #16]
  return(result);
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d105      	bne.n	80026c6 <osEventFlagsClear+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80026ba:	f3ef 8311 	mrs	r3, BASEPRI
 80026be:	60fb      	str	r3, [r7, #12]
  return(result);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d012      	beq.n	80026ec <osEventFlagsClear+0x70>
 80026c6:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <osEventFlagsClear+0x84>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d10e      	bne.n	80026ec <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80026ce:	69b8      	ldr	r0, [r7, #24]
 80026d0:	f000 fa5a 	bl	8002b88 <xEventGroupGetBitsFromISR>
 80026d4:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80026d6:	6839      	ldr	r1, [r7, #0]
 80026d8:	69b8      	ldr	r0, [r7, #24]
 80026da:	f000 fa41 	bl	8002b60 <xEventGroupClearBitsFromISR>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d108      	bne.n	80026f6 <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 80026e4:	f06f 0302 	mvn.w	r3, #2
 80026e8:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80026ea:	e004      	b.n	80026f6 <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80026ec:	6839      	ldr	r1, [r7, #0]
 80026ee:	69b8      	ldr	r0, [r7, #24]
 80026f0:	f000 fa00 	bl	8002af4 <xEventGroupClearBits>
 80026f4:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 80026f6:	69fb      	ldr	r3, [r7, #28]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3720      	adds	r7, #32
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	2000002c 	.word	0x2000002c

08002704 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if (ef_id == NULL) {
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d102      	bne.n	800271c <osEventFlagsGet+0x18>
    rflags = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	e01f      	b.n	800275c <osEventFlagsGet+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800271c:	f3ef 8305 	mrs	r3, IPSR
 8002720:	617b      	str	r3, [r7, #20]
  return(result);
 8002722:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10f      	bne.n	8002748 <osEventFlagsGet+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002728:	f3ef 8310 	mrs	r3, PRIMASK
 800272c:	613b      	str	r3, [r7, #16]
  return(result);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d105      	bne.n	8002740 <osEventFlagsGet+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002734:	f3ef 8311 	mrs	r3, BASEPRI
 8002738:	60fb      	str	r3, [r7, #12]
  return(result);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <osEventFlagsGet+0x4e>
 8002740:	4b09      	ldr	r3, [pc, #36]	; (8002768 <osEventFlagsGet+0x64>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d104      	bne.n	8002752 <osEventFlagsGet+0x4e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8002748:	69b8      	ldr	r0, [r7, #24]
 800274a:	f000 fa1d 	bl	8002b88 <xEventGroupGetBitsFromISR>
 800274e:	61f8      	str	r0, [r7, #28]
 8002750:	e004      	b.n	800275c <osEventFlagsGet+0x58>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8002752:	2100      	movs	r1, #0
 8002754:	69b8      	ldr	r0, [r7, #24]
 8002756:	f000 f9cd 	bl	8002af4 <xEventGroupClearBits>
 800275a:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 800275c:	69fb      	ldr	r3, [r7, #28]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3720      	adds	r7, #32
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	2000002c 	.word	0x2000002c

0800276c <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800276c:	b580      	push	{r7, lr}
 800276e:	b08e      	sub	sp, #56	; 0x38
 8002770:	af02      	add	r7, sp, #8
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d004      	beq.n	800278e <osEventFlagsWait+0x22>
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800278e:	f06f 0303 	mvn.w	r3, #3
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
 8002794:	e059      	b.n	800284a <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002796:	f3ef 8305 	mrs	r3, IPSR
 800279a:	61fb      	str	r3, [r7, #28]
  return(result);
 800279c:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10f      	bne.n	80027c2 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027a2:	f3ef 8310 	mrs	r3, PRIMASK
 80027a6:	61bb      	str	r3, [r7, #24]
  return(result);
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d105      	bne.n	80027ba <osEventFlagsWait+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80027ae:	f3ef 8311 	mrs	r3, BASEPRI
 80027b2:	617b      	str	r3, [r7, #20]
  return(result);
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d007      	beq.n	80027ca <osEventFlagsWait+0x5e>
 80027ba:	4b26      	ldr	r3, [pc, #152]	; (8002854 <osEventFlagsWait+0xe8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d103      	bne.n	80027ca <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 80027c2:	f06f 0305 	mvn.w	r3, #5
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
 80027c8:	e03f      	b.n	800284a <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 80027d4:	2301      	movs	r3, #1
 80027d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027d8:	e001      	b.n	80027de <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 80027da:	2300      	movs	r3, #0
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ec:	e001      	b.n	80027f2 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 80027ee:	2301      	movs	r3, #1
 80027f0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027fa:	68b9      	ldr	r1, [r7, #8]
 80027fc:	6a38      	ldr	r0, [r7, #32]
 80027fe:	f000 f8af 	bl	8002960 <xEventGroupWaitBits>
 8002802:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00e      	beq.n	800282c <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	429a      	cmp	r2, r3
 8002814:	d019      	beq.n	800284a <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 800281c:	f06f 0301 	mvn.w	r3, #1
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
 8002822:	e012      	b.n	800284a <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002824:	f06f 0302 	mvn.w	r3, #2
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
 800282a:	e00e      	b.n	800284a <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	4013      	ands	r3, r2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 800283c:	f06f 0301 	mvn.w	r3, #1
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
 8002842:	e002      	b.n	800284a <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002844:	f06f 0302 	mvn.w	r3, #2
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800284c:	4618      	mov	r0, r3
 800284e:	3730      	adds	r7, #48	; 0x30
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	2000002c 	.word	0x2000002c

08002858 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4a07      	ldr	r2, [pc, #28]	; (8002884 <vApplicationGetIdleTaskMemory+0x2c>)
 8002868:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	4a06      	ldr	r2, [pc, #24]	; (8002888 <vApplicationGetIdleTaskMemory+0x30>)
 800286e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2280      	movs	r2, #128	; 0x80
 8002874:	601a      	str	r2, [r3, #0]
}
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	20000030 	.word	0x20000030
 8002888:	20000090 	.word	0x20000090

0800288c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4a07      	ldr	r2, [pc, #28]	; (80028b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800289c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	4a06      	ldr	r2, [pc, #24]	; (80028bc <vApplicationGetTimerTaskMemory+0x30>)
 80028a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028aa:	601a      	str	r2, [r3, #0]
}
 80028ac:	bf00      	nop
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	20000290 	.word	0x20000290
 80028bc:	200002f0 	.word	0x200002f0

080028c0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <xEventGroupCreateStatic+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d2:	f383 8811 	msr	BASEPRI, r3
 80028d6:	f3bf 8f6f 	isb	sy
 80028da:	f3bf 8f4f 	dsb	sy
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	e7fe      	b.n	80028e0 <xEventGroupCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80028e2:	2320      	movs	r3, #32
 80028e4:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b20      	cmp	r3, #32
 80028ea:	d009      	beq.n	8002900 <xEventGroupCreateStatic+0x40>
 80028ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f0:	f383 8811 	msr	BASEPRI, r3
 80028f4:	f3bf 8f6f 	isb	sy
 80028f8:	f3bf 8f4f 	dsb	sy
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	e7fe      	b.n	80028fe <xEventGroupCreateStatic+0x3e>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <xEventGroupCreateStatic+0x60>
		{
			pxEventBits->uxEventBits = 0;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	3304      	adds	r3, #4
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fa33 	bl	8002d80 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2201      	movs	r2, #1
 800291e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8002920:	697b      	ldr	r3, [r7, #20]
	}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8002930:	2020      	movs	r0, #32
 8002932:	f002 fd25 	bl	8005380 <pvPortMalloc>
 8002936:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00a      	beq.n	8002954 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3304      	adds	r3, #4
 8002948:	4618      	mov	r0, r3
 800294a:	f000 fa19 	bl	8002d80 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8002954:	687b      	ldr	r3, [r7, #4]
	}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b090      	sub	sp, #64	; 0x40
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8002976:	2300      	movs	r3, #0
 8002978:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d109      	bne.n	8002994 <xEventGroupWaitBits+0x34>
 8002980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002984:	f383 8811 	msr	BASEPRI, r3
 8002988:	f3bf 8f6f 	isb	sy
 800298c:	f3bf 8f4f 	dsb	sy
 8002990:	623b      	str	r3, [r7, #32]
 8002992:	e7fe      	b.n	8002992 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d009      	beq.n	80029b2 <xEventGroupWaitBits+0x52>
 800299e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a2:	f383 8811 	msr	BASEPRI, r3
 80029a6:	f3bf 8f6f 	isb	sy
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	61fb      	str	r3, [r7, #28]
 80029b0:	e7fe      	b.n	80029b0 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d109      	bne.n	80029cc <xEventGroupWaitBits+0x6c>
 80029b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029bc:	f383 8811 	msr	BASEPRI, r3
 80029c0:	f3bf 8f6f 	isb	sy
 80029c4:	f3bf 8f4f 	dsb	sy
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	e7fe      	b.n	80029ca <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029cc:	f001 fe3c 	bl	8004648 <xTaskGetSchedulerState>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d102      	bne.n	80029dc <xEventGroupWaitBits+0x7c>
 80029d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <xEventGroupWaitBits+0x80>
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <xEventGroupWaitBits+0x82>
 80029e0:	2300      	movs	r3, #0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d109      	bne.n	80029fa <xEventGroupWaitBits+0x9a>
 80029e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ea:	f383 8811 	msr	BASEPRI, r3
 80029ee:	f3bf 8f6f 	isb	sy
 80029f2:	f3bf 8f4f 	dsb	sy
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	e7fe      	b.n	80029f8 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 80029fa:	f001 f981 	bl	8003d00 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80029fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a0a:	f000 f983 	bl	8002d14 <prvTestWaitCondition>
 8002a0e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8002a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00e      	beq.n	8002a34 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8002a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a18:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d028      	beq.n	8002a76 <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	401a      	ands	r2, r3
 8002a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	e020      	b.n	8002a76 <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8002a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d104      	bne.n	8002a44 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8002a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	633b      	str	r3, [r7, #48]	; 0x30
 8002a42:	e018      	b.n	8002a76 <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a50:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8002a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a5e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8002a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a62:	1d18      	adds	r0, r3, #4
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f001 fb39 	bl	80040e4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8002a72:	2300      	movs	r3, #0
 8002a74:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8002a76:	f001 f951 	bl	8003d1c <xTaskResumeAll>
 8002a7a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8002a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d031      	beq.n	8002ae6 <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d107      	bne.n	8002a98 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8002a88:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <xEventGroupWaitBits+0x190>)
 8002a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8002a98:	f001 fe60 	bl	800475c <uxTaskResetEventItemValue>
 8002a9c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8002a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d11a      	bne.n	8002ade <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 8002aa8:	f002 fb50 	bl	800514c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8002aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002ab8:	f000 f92c 	bl	8002d14 <prvTestWaitCondition>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d009      	beq.n	8002ad6 <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d006      	beq.n	8002ad6 <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	401a      	ands	r2, r3
 8002ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8002ada:	f002 fb65 	bl	80051a8 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8002ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3740      	adds	r7, #64	; 0x40
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	e000ed04 	.word	0xe000ed04

08002af4 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d109      	bne.n	8002b1c <xEventGroupClearBits+0x28>
 8002b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	e7fe      	b.n	8002b1a <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d009      	beq.n	8002b3a <xEventGroupClearBits+0x46>
 8002b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2a:	f383 8811 	msr	BASEPRI, r3
 8002b2e:	f3bf 8f6f 	isb	sy
 8002b32:	f3bf 8f4f 	dsb	sy
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	e7fe      	b.n	8002b38 <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 8002b3a:	f002 fb07 	bl	800514c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	401a      	ands	r2, r3
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8002b52:	f002 fb29 	bl	80051a8 <vPortExitCritical>

	return uxReturn;
 8002b56:	693b      	ldr	r3, [r7, #16]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4804      	ldr	r0, [pc, #16]	; (8002b84 <xEventGroupClearBitsFromISR+0x24>)
 8002b72:	f002 f9a5 	bl	8004ec0 <xTimerPendFunctionCallFromISR>
 8002b76:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8002b78:	68fb      	ldr	r3, [r7, #12]
	}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	08002cfb 	.word	0x08002cfb

08002b88 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b089      	sub	sp, #36	; 0x24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b94:	f3ef 8211 	mrs	r2, BASEPRI
 8002b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	60fa      	str	r2, [r7, #12]
 8002baa:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002bac:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002bae:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	f383 8811 	msr	BASEPRI, r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8002bc0:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3724      	adds	r7, #36	; 0x24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b08e      	sub	sp, #56	; 0x38
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8002be0:	2300      	movs	r3, #0
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d109      	bne.n	8002bfe <xEventGroupSetBits+0x30>
	__asm volatile
 8002bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bee:	f383 8811 	msr	BASEPRI, r3
 8002bf2:	f3bf 8f6f 	isb	sy
 8002bf6:	f3bf 8f4f 	dsb	sy
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	e7fe      	b.n	8002bfc <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d009      	beq.n	8002c1c <xEventGroupSetBits+0x4e>
 8002c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0c:	f383 8811 	msr	BASEPRI, r3
 8002c10:	f3bf 8f6f 	isb	sy
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	e7fe      	b.n	8002c1a <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8002c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1e:	3304      	adds	r3, #4
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	3308      	adds	r3, #8
 8002c26:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8002c28:	f001 f86a 	bl	8003d00 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8002c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3c:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8002c3e:	e03c      	b.n	8002cba <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8002c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8002c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002c56:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c5e:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d108      	bne.n	8002c7c <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8002c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00b      	beq.n	8002c8e <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8002c76:	2301      	movs	r3, #1
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c7a:	e008      	b.n	8002c8e <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8002c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d101      	bne.n	8002c8e <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8002c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d010      	beq.n	8002cb6 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8002c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8002ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cae:	4619      	mov	r1, r3
 8002cb0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002cb2:	f001 fadd 	bl	8004270 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8002cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d1be      	bne.n	8002c40 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	401a      	ands	r2, r3
 8002ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cce:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8002cd0:	f001 f824 	bl	8003d1c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8002cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd6:	681b      	ldr	r3, [r3, #0]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3738      	adds	r7, #56	; 0x38
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8002cea:	6839      	ldr	r1, [r7, #0]
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ff6e 	bl	8002bce <xEventGroupSetBits>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8002d04:	6839      	ldr	r1, [r7, #0]
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff fef4 	bl	8002af4 <xEventGroupClearBits>
}
 8002d0c:	bf00      	nop
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8002d14:	b480      	push	{r7}
 8002d16:	b087      	sub	sp, #28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d107      	bne.n	8002d3a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002d34:	2301      	movs	r3, #1
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	e007      	b.n	8002d4a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d101      	bne.n	8002d4a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002d46:	2301      	movs	r3, #1
 8002d48:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8002d4a:	697b      	ldr	r3, [r7, #20]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	371c      	adds	r7, #28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	68f9      	ldr	r1, [r7, #12]
 8002d6a:	4804      	ldr	r0, [pc, #16]	; (8002d7c <xEventGroupSetBitsFromISR+0x24>)
 8002d6c:	f002 f8a8 	bl	8004ec0 <xTimerPendFunctionCallFromISR>
 8002d70:	6178      	str	r0, [r7, #20]

		return xReturn;
 8002d72:	697b      	ldr	r3, [r7, #20]
	}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	08002ce1 	.word	0x08002ce1

08002d80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f103 0208 	add.w	r2, r3, #8
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f04f 32ff 	mov.w	r2, #4294967295
 8002d98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f103 0208 	add.w	r2, r3, #8
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f103 0208 	add.w	r2, r3, #8
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b085      	sub	sp, #20
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
 8002de2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	601a      	str	r2, [r3, #0]
}
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e22:	b480      	push	{r7}
 8002e24:	b085      	sub	sp, #20
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e38:	d103      	bne.n	8002e42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	e00c      	b.n	8002e5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3308      	adds	r3, #8
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	e002      	b.n	8002e50 <vListInsert+0x2e>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d2f6      	bcs.n	8002e4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	601a      	str	r2, [r3, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6892      	ldr	r2, [r2, #8]
 8002eaa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6852      	ldr	r2, [r2, #4]
 8002eb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d103      	bne.n	8002ec8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	1e5a      	subs	r2, r3, #1
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d109      	bne.n	8002f10 <xQueueGenericReset+0x28>
 8002efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f00:	f383 8811 	msr	BASEPRI, r3
 8002f04:	f3bf 8f6f 	isb	sy
 8002f08:	f3bf 8f4f 	dsb	sy
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	e7fe      	b.n	8002f0e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002f10:	f002 f91c 	bl	800514c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1c:	68f9      	ldr	r1, [r7, #12]
 8002f1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	441a      	add	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f40:	3b01      	subs	r3, #1
 8002f42:	68f9      	ldr	r1, [r7, #12]
 8002f44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f46:	fb01 f303 	mul.w	r3, r1, r3
 8002f4a:	441a      	add	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	22ff      	movs	r2, #255	; 0xff
 8002f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	22ff      	movs	r2, #255	; 0xff
 8002f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d114      	bne.n	8002f90 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d01a      	beq.n	8002fa4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	3310      	adds	r3, #16
 8002f72:	4618      	mov	r0, r3
 8002f74:	f001 f91a 	bl	80041ac <xTaskRemoveFromEventList>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d012      	beq.n	8002fa4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002f7e:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <xQueueGenericReset+0xcc>)
 8002f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	f3bf 8f6f 	isb	sy
 8002f8e:	e009      	b.n	8002fa4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	3310      	adds	r3, #16
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff fef3 	bl	8002d80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	3324      	adds	r3, #36	; 0x24
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff feee 	bl	8002d80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002fa4:	f002 f900 	bl	80051a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002fa8:	2301      	movs	r3, #1
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	e000ed04 	.word	0xe000ed04

08002fb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08e      	sub	sp, #56	; 0x38
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d109      	bne.n	8002fe0 <xQueueGenericCreateStatic+0x28>
 8002fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd0:	f383 8811 	msr	BASEPRI, r3
 8002fd4:	f3bf 8f6f 	isb	sy
 8002fd8:	f3bf 8f4f 	dsb	sy
 8002fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fde:	e7fe      	b.n	8002fde <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <xQueueGenericCreateStatic+0x42>
 8002fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fea:	f383 8811 	msr	BASEPRI, r3
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff8:	e7fe      	b.n	8002ff8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <xQueueGenericCreateStatic+0x4e>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <xQueueGenericCreateStatic+0x52>
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <xQueueGenericCreateStatic+0x54>
 800300a:	2300      	movs	r3, #0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d109      	bne.n	8003024 <xQueueGenericCreateStatic+0x6c>
 8003010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003014:	f383 8811 	msr	BASEPRI, r3
 8003018:	f3bf 8f6f 	isb	sy
 800301c:	f3bf 8f4f 	dsb	sy
 8003020:	623b      	str	r3, [r7, #32]
 8003022:	e7fe      	b.n	8003022 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <xQueueGenericCreateStatic+0x78>
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <xQueueGenericCreateStatic+0x7c>
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <xQueueGenericCreateStatic+0x7e>
 8003034:	2300      	movs	r3, #0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d109      	bne.n	800304e <xQueueGenericCreateStatic+0x96>
 800303a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303e:	f383 8811 	msr	BASEPRI, r3
 8003042:	f3bf 8f6f 	isb	sy
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	61fb      	str	r3, [r7, #28]
 800304c:	e7fe      	b.n	800304c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800304e:	2350      	movs	r3, #80	; 0x50
 8003050:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b50      	cmp	r3, #80	; 0x50
 8003056:	d009      	beq.n	800306c <xQueueGenericCreateStatic+0xb4>
 8003058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305c:	f383 8811 	msr	BASEPRI, r3
 8003060:	f3bf 8f6f 	isb	sy
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	61bb      	str	r3, [r7, #24]
 800306a:	e7fe      	b.n	800306a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800306c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00d      	beq.n	8003094 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003080:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	4613      	mov	r3, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f805 	bl	800309e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003096:	4618      	mov	r0, r3
 8003098:	3730      	adds	r7, #48	; 0x30
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b084      	sub	sp, #16
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	607a      	str	r2, [r7, #4]
 80030aa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d103      	bne.n	80030ba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	e002      	b.n	80030c0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80030cc:	2101      	movs	r1, #1
 80030ce:	69b8      	ldr	r0, [r7, #24]
 80030d0:	f7ff ff0a 	bl	8002ee8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80030dc:	bf00      	nop
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08e      	sub	sp, #56	; 0x38
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80030f2:	2300      	movs	r3, #0
 80030f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80030fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d109      	bne.n	8003114 <xQueueGenericSend+0x30>
 8003100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003104:	f383 8811 	msr	BASEPRI, r3
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	f3bf 8f4f 	dsb	sy
 8003110:	62bb      	str	r3, [r7, #40]	; 0x28
 8003112:	e7fe      	b.n	8003112 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d103      	bne.n	8003122 <xQueueGenericSend+0x3e>
 800311a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <xQueueGenericSend+0x42>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <xQueueGenericSend+0x44>
 8003126:	2300      	movs	r3, #0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d109      	bne.n	8003140 <xQueueGenericSend+0x5c>
 800312c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003130:	f383 8811 	msr	BASEPRI, r3
 8003134:	f3bf 8f6f 	isb	sy
 8003138:	f3bf 8f4f 	dsb	sy
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
 800313e:	e7fe      	b.n	800313e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d103      	bne.n	800314e <xQueueGenericSend+0x6a>
 8003146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314a:	2b01      	cmp	r3, #1
 800314c:	d101      	bne.n	8003152 <xQueueGenericSend+0x6e>
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <xQueueGenericSend+0x70>
 8003152:	2300      	movs	r3, #0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d109      	bne.n	800316c <xQueueGenericSend+0x88>
 8003158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315c:	f383 8811 	msr	BASEPRI, r3
 8003160:	f3bf 8f6f 	isb	sy
 8003164:	f3bf 8f4f 	dsb	sy
 8003168:	623b      	str	r3, [r7, #32]
 800316a:	e7fe      	b.n	800316a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800316c:	f001 fa6c 	bl	8004648 <xTaskGetSchedulerState>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d102      	bne.n	800317c <xQueueGenericSend+0x98>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <xQueueGenericSend+0x9c>
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <xQueueGenericSend+0x9e>
 8003180:	2300      	movs	r3, #0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d109      	bne.n	800319a <xQueueGenericSend+0xb6>
 8003186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318a:	f383 8811 	msr	BASEPRI, r3
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	f3bf 8f4f 	dsb	sy
 8003196:	61fb      	str	r3, [r7, #28]
 8003198:	e7fe      	b.n	8003198 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800319a:	f001 ffd7 	bl	800514c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800319e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d302      	bcc.n	80031b0 <xQueueGenericSend+0xcc>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d129      	bne.n	8003204 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	68b9      	ldr	r1, [r7, #8]
 80031b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031b6:	f000 f9ff 	bl	80035b8 <prvCopyDataToQueue>
 80031ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d010      	beq.n	80031e6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c6:	3324      	adds	r3, #36	; 0x24
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 ffef 	bl	80041ac <xTaskRemoveFromEventList>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d013      	beq.n	80031fc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80031d4:	4b3f      	ldr	r3, [pc, #252]	; (80032d4 <xQueueGenericSend+0x1f0>)
 80031d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	f3bf 8f4f 	dsb	sy
 80031e0:	f3bf 8f6f 	isb	sy
 80031e4:	e00a      	b.n	80031fc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80031e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d007      	beq.n	80031fc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80031ec:	4b39      	ldr	r3, [pc, #228]	; (80032d4 <xQueueGenericSend+0x1f0>)
 80031ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80031fc:	f001 ffd4 	bl	80051a8 <vPortExitCritical>
				return pdPASS;
 8003200:	2301      	movs	r3, #1
 8003202:	e063      	b.n	80032cc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d103      	bne.n	8003212 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800320a:	f001 ffcd 	bl	80051a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800320e:	2300      	movs	r3, #0
 8003210:	e05c      	b.n	80032cc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003214:	2b00      	cmp	r3, #0
 8003216:	d106      	bne.n	8003226 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003218:	f107 0314 	add.w	r3, r7, #20
 800321c:	4618      	mov	r0, r3
 800321e:	f001 f887 	bl	8004330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003222:	2301      	movs	r3, #1
 8003224:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003226:	f001 ffbf 	bl	80051a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800322a:	f000 fd69 	bl	8003d00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800322e:	f001 ff8d 	bl	800514c <vPortEnterCritical>
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003238:	b25b      	sxtb	r3, r3
 800323a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323e:	d103      	bne.n	8003248 <xQueueGenericSend+0x164>
 8003240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800324e:	b25b      	sxtb	r3, r3
 8003250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003254:	d103      	bne.n	800325e <xQueueGenericSend+0x17a>
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800325e:	f001 ffa3 	bl	80051a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003262:	1d3a      	adds	r2, r7, #4
 8003264:	f107 0314 	add.w	r3, r7, #20
 8003268:	4611      	mov	r1, r2
 800326a:	4618      	mov	r0, r3
 800326c:	f001 f876 	bl	800435c <xTaskCheckForTimeOut>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d124      	bne.n	80032c0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003276:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003278:	f000 fa96 	bl	80037a8 <prvIsQueueFull>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d018      	beq.n	80032b4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003284:	3310      	adds	r3, #16
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	4611      	mov	r1, r2
 800328a:	4618      	mov	r0, r3
 800328c:	f000 ff06 	bl	800409c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003290:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003292:	f000 fa21 	bl	80036d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003296:	f000 fd41 	bl	8003d1c <xTaskResumeAll>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	f47f af7c 	bne.w	800319a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80032a2:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <xQueueGenericSend+0x1f0>)
 80032a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	f3bf 8f6f 	isb	sy
 80032b2:	e772      	b.n	800319a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80032b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032b6:	f000 fa0f 	bl	80036d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032ba:	f000 fd2f 	bl	8003d1c <xTaskResumeAll>
 80032be:	e76c      	b.n	800319a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80032c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032c2:	f000 fa09 	bl	80036d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032c6:	f000 fd29 	bl	8003d1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80032ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3738      	adds	r7, #56	; 0x38
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	e000ed04 	.word	0xe000ed04

080032d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08e      	sub	sp, #56	; 0x38
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80032ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d109      	bne.n	8003304 <xQueueGenericSendFromISR+0x2c>
 80032f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f4:	f383 8811 	msr	BASEPRI, r3
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
 8003302:	e7fe      	b.n	8003302 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d103      	bne.n	8003312 <xQueueGenericSendFromISR+0x3a>
 800330a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <xQueueGenericSendFromISR+0x3e>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <xQueueGenericSendFromISR+0x40>
 8003316:	2300      	movs	r3, #0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d109      	bne.n	8003330 <xQueueGenericSendFromISR+0x58>
 800331c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003320:	f383 8811 	msr	BASEPRI, r3
 8003324:	f3bf 8f6f 	isb	sy
 8003328:	f3bf 8f4f 	dsb	sy
 800332c:	623b      	str	r3, [r7, #32]
 800332e:	e7fe      	b.n	800332e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d103      	bne.n	800333e <xQueueGenericSendFromISR+0x66>
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <xQueueGenericSendFromISR+0x6a>
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <xQueueGenericSendFromISR+0x6c>
 8003342:	2300      	movs	r3, #0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d109      	bne.n	800335c <xQueueGenericSendFromISR+0x84>
 8003348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	61fb      	str	r3, [r7, #28]
 800335a:	e7fe      	b.n	800335a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800335c:	f001 ffd2 	bl	8005304 <vPortValidateInterruptPriority>
	__asm volatile
 8003360:	f3ef 8211 	mrs	r2, BASEPRI
 8003364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003368:	f383 8811 	msr	BASEPRI, r3
 800336c:	f3bf 8f6f 	isb	sy
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	61ba      	str	r2, [r7, #24]
 8003376:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003378:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003384:	429a      	cmp	r2, r3
 8003386:	d302      	bcc.n	800338e <xQueueGenericSendFromISR+0xb6>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d12c      	bne.n	80033e8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003390:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003394:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	68b9      	ldr	r1, [r7, #8]
 800339c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800339e:	f000 f90b 	bl	80035b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80033a2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80033a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033aa:	d112      	bne.n	80033d2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d016      	beq.n	80033e2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b6:	3324      	adds	r3, #36	; 0x24
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 fef7 	bl	80041ac <xTaskRemoveFromEventList>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00e      	beq.n	80033e2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00b      	beq.n	80033e2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	e007      	b.n	80033e2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80033d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80033d6:	3301      	adds	r3, #1
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	b25a      	sxtb	r2, r3
 80033dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80033e2:	2301      	movs	r3, #1
 80033e4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80033e6:	e001      	b.n	80033ec <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	637b      	str	r3, [r7, #52]	; 0x34
 80033ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ee:	613b      	str	r3, [r7, #16]
	__asm volatile
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80033f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3738      	adds	r7, #56	; 0x38
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08c      	sub	sp, #48	; 0x30
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800340c:	2300      	movs	r3, #0
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	2b00      	cmp	r3, #0
 8003418:	d109      	bne.n	800342e <xQueueReceive+0x2e>
	__asm volatile
 800341a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341e:	f383 8811 	msr	BASEPRI, r3
 8003422:	f3bf 8f6f 	isb	sy
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	623b      	str	r3, [r7, #32]
 800342c:	e7fe      	b.n	800342c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d103      	bne.n	800343c <xQueueReceive+0x3c>
 8003434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <xQueueReceive+0x40>
 800343c:	2301      	movs	r3, #1
 800343e:	e000      	b.n	8003442 <xQueueReceive+0x42>
 8003440:	2300      	movs	r3, #0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d109      	bne.n	800345a <xQueueReceive+0x5a>
 8003446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344a:	f383 8811 	msr	BASEPRI, r3
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	f3bf 8f4f 	dsb	sy
 8003456:	61fb      	str	r3, [r7, #28]
 8003458:	e7fe      	b.n	8003458 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800345a:	f001 f8f5 	bl	8004648 <xTaskGetSchedulerState>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d102      	bne.n	800346a <xQueueReceive+0x6a>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <xQueueReceive+0x6e>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <xQueueReceive+0x70>
 800346e:	2300      	movs	r3, #0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d109      	bne.n	8003488 <xQueueReceive+0x88>
 8003474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003478:	f383 8811 	msr	BASEPRI, r3
 800347c:	f3bf 8f6f 	isb	sy
 8003480:	f3bf 8f4f 	dsb	sy
 8003484:	61bb      	str	r3, [r7, #24]
 8003486:	e7fe      	b.n	8003486 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003488:	f001 fe60 	bl	800514c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800348c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01f      	beq.n	80034d8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800349c:	f000 f8f6 	bl	800368c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	1e5a      	subs	r2, r3, #1
 80034a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00f      	beq.n	80034d0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	3310      	adds	r3, #16
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fe79 	bl	80041ac <xTaskRemoveFromEventList>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d007      	beq.n	80034d0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80034c0:	4b3c      	ldr	r3, [pc, #240]	; (80035b4 <xQueueReceive+0x1b4>)
 80034c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80034d0:	f001 fe6a 	bl	80051a8 <vPortExitCritical>
				return pdPASS;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e069      	b.n	80035ac <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d103      	bne.n	80034e6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80034de:	f001 fe63 	bl	80051a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80034e2:	2300      	movs	r3, #0
 80034e4:	e062      	b.n	80035ac <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d106      	bne.n	80034fa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034ec:	f107 0310 	add.w	r3, r7, #16
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 ff1d 	bl	8004330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034f6:	2301      	movs	r3, #1
 80034f8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034fa:	f001 fe55 	bl	80051a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034fe:	f000 fbff 	bl	8003d00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003502:	f001 fe23 	bl	800514c <vPortEnterCritical>
 8003506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003508:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800350c:	b25b      	sxtb	r3, r3
 800350e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003512:	d103      	bne.n	800351c <xQueueReceive+0x11c>
 8003514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800351c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003522:	b25b      	sxtb	r3, r3
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003528:	d103      	bne.n	8003532 <xQueueReceive+0x132>
 800352a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003532:	f001 fe39 	bl	80051a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003536:	1d3a      	adds	r2, r7, #4
 8003538:	f107 0310 	add.w	r3, r7, #16
 800353c:	4611      	mov	r1, r2
 800353e:	4618      	mov	r0, r3
 8003540:	f000 ff0c 	bl	800435c <xTaskCheckForTimeOut>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d123      	bne.n	8003592 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800354a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800354c:	f000 f916 	bl	800377c <prvIsQueueEmpty>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d017      	beq.n	8003586 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003558:	3324      	adds	r3, #36	; 0x24
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	4611      	mov	r1, r2
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fd9c 	bl	800409c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003566:	f000 f8b7 	bl	80036d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800356a:	f000 fbd7 	bl	8003d1c <xTaskResumeAll>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d189      	bne.n	8003488 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003574:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <xQueueReceive+0x1b4>)
 8003576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	e780      	b.n	8003488 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003588:	f000 f8a6 	bl	80036d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800358c:	f000 fbc6 	bl	8003d1c <xTaskResumeAll>
 8003590:	e77a      	b.n	8003488 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003594:	f000 f8a0 	bl	80036d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003598:	f000 fbc0 	bl	8003d1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800359c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800359e:	f000 f8ed 	bl	800377c <prvIsQueueEmpty>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f43f af6f 	beq.w	8003488 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80035aa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3730      	adds	r7, #48	; 0x30
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	e000ed04 	.word	0xe000ed04

080035b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10d      	bne.n	80035f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d14d      	bne.n	800367a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f001 f84e 	bl	8004684 <xTaskPriorityDisinherit>
 80035e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	609a      	str	r2, [r3, #8]
 80035f0:	e043      	b.n	800367a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d119      	bne.n	800362c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6858      	ldr	r0, [r3, #4]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	461a      	mov	r2, r3
 8003602:	68b9      	ldr	r1, [r7, #8]
 8003604:	f002 fe8e 	bl	8006324 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	441a      	add	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	429a      	cmp	r2, r3
 8003620:	d32b      	bcc.n	800367a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	e026      	b.n	800367a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	68d8      	ldr	r0, [r3, #12]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	461a      	mov	r2, r3
 8003636:	68b9      	ldr	r1, [r7, #8]
 8003638:	f002 fe74 	bl	8006324 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	425b      	negs	r3, r3
 8003646:	441a      	add	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	429a      	cmp	r2, r3
 8003656:	d207      	bcs.n	8003668 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	425b      	negs	r3, r3
 8003662:	441a      	add	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d105      	bne.n	800367a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	3b01      	subs	r3, #1
 8003678:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003682:	697b      	ldr	r3, [r7, #20]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d018      	beq.n	80036d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	441a      	add	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d303      	bcc.n	80036c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68d9      	ldr	r1, [r3, #12]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	461a      	mov	r2, r3
 80036ca:	6838      	ldr	r0, [r7, #0]
 80036cc:	f002 fe2a 	bl	8006324 <memcpy>
	}
}
 80036d0:	bf00      	nop
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80036e0:	f001 fd34 	bl	800514c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036ec:	e011      	b.n	8003712 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d012      	beq.n	800371c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3324      	adds	r3, #36	; 0x24
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 fd56 	bl	80041ac <xTaskRemoveFromEventList>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003706:	f000 fe89 	bl	800441c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800370a:	7bfb      	ldrb	r3, [r7, #15]
 800370c:	3b01      	subs	r3, #1
 800370e:	b2db      	uxtb	r3, r3
 8003710:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003716:	2b00      	cmp	r3, #0
 8003718:	dce9      	bgt.n	80036ee <prvUnlockQueue+0x16>
 800371a:	e000      	b.n	800371e <prvUnlockQueue+0x46>
					break;
 800371c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	22ff      	movs	r2, #255	; 0xff
 8003722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003726:	f001 fd3f 	bl	80051a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800372a:	f001 fd0f 	bl	800514c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003734:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003736:	e011      	b.n	800375c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d012      	beq.n	8003766 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3310      	adds	r3, #16
 8003744:	4618      	mov	r0, r3
 8003746:	f000 fd31 	bl	80041ac <xTaskRemoveFromEventList>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003750:	f000 fe64 	bl	800441c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003754:	7bbb      	ldrb	r3, [r7, #14]
 8003756:	3b01      	subs	r3, #1
 8003758:	b2db      	uxtb	r3, r3
 800375a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800375c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003760:	2b00      	cmp	r3, #0
 8003762:	dce9      	bgt.n	8003738 <prvUnlockQueue+0x60>
 8003764:	e000      	b.n	8003768 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003766:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	22ff      	movs	r2, #255	; 0xff
 800376c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003770:	f001 fd1a 	bl	80051a8 <vPortExitCritical>
}
 8003774:	bf00      	nop
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003784:	f001 fce2 	bl	800514c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378c:	2b00      	cmp	r3, #0
 800378e:	d102      	bne.n	8003796 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003790:	2301      	movs	r3, #1
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	e001      	b.n	800379a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800379a:	f001 fd05 	bl	80051a8 <vPortExitCritical>

	return xReturn;
 800379e:	68fb      	ldr	r3, [r7, #12]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037b0:	f001 fccc 	bl	800514c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037bc:	429a      	cmp	r2, r3
 80037be:	d102      	bne.n	80037c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80037c0:	2301      	movs	r3, #1
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	e001      	b.n	80037ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80037c6:	2300      	movs	r3, #0
 80037c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80037ca:	f001 fced 	bl	80051a8 <vPortExitCritical>

	return xReturn;
 80037ce:	68fb      	ldr	r3, [r7, #12]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	e014      	b.n	8003812 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80037e8:	4a0e      	ldr	r2, [pc, #56]	; (8003824 <vQueueAddToRegistry+0x4c>)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10b      	bne.n	800380c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80037f4:	490b      	ldr	r1, [pc, #44]	; (8003824 <vQueueAddToRegistry+0x4c>)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80037fe:	4a09      	ldr	r2, [pc, #36]	; (8003824 <vQueueAddToRegistry+0x4c>)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4413      	add	r3, r2
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800380a:	e005      	b.n	8003818 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	3301      	adds	r3, #1
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2b07      	cmp	r3, #7
 8003816:	d9e7      	bls.n	80037e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003818:	bf00      	nop
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	2000494c 	.word	0x2000494c

08003828 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003838:	f001 fc88 	bl	800514c <vPortEnterCritical>
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003842:	b25b      	sxtb	r3, r3
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d103      	bne.n	8003852 <vQueueWaitForMessageRestricted+0x2a>
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003858:	b25b      	sxtb	r3, r3
 800385a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385e:	d103      	bne.n	8003868 <vQueueWaitForMessageRestricted+0x40>
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003868:	f001 fc9e 	bl	80051a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003870:	2b00      	cmp	r3, #0
 8003872:	d106      	bne.n	8003882 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	3324      	adds	r3, #36	; 0x24
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	68b9      	ldr	r1, [r7, #8]
 800387c:	4618      	mov	r0, r3
 800387e:	f000 fc6b 	bl	8004158 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003882:	6978      	ldr	r0, [r7, #20]
 8003884:	f7ff ff28 	bl	80036d8 <prvUnlockQueue>
	}
 8003888:	bf00      	nop
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003890:	b580      	push	{r7, lr}
 8003892:	b08e      	sub	sp, #56	; 0x38
 8003894:	af04      	add	r7, sp, #16
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800389e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d109      	bne.n	80038b8 <xTaskCreateStatic+0x28>
 80038a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	623b      	str	r3, [r7, #32]
 80038b6:	e7fe      	b.n	80038b6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80038b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <xTaskCreateStatic+0x42>
 80038be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	61fb      	str	r3, [r7, #28]
 80038d0:	e7fe      	b.n	80038d0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80038d2:	2360      	movs	r3, #96	; 0x60
 80038d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	2b60      	cmp	r3, #96	; 0x60
 80038da:	d009      	beq.n	80038f0 <xTaskCreateStatic+0x60>
 80038dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	61bb      	str	r3, [r7, #24]
 80038ee:	e7fe      	b.n	80038ee <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80038f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80038f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01e      	beq.n	8003936 <xTaskCreateStatic+0xa6>
 80038f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d01b      	beq.n	8003936 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003906:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	2202      	movs	r2, #2
 800390c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003910:	2300      	movs	r3, #0
 8003912:	9303      	str	r3, [sp, #12]
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	9302      	str	r3, [sp, #8]
 8003918:	f107 0314 	add.w	r3, r7, #20
 800391c:	9301      	str	r3, [sp, #4]
 800391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f850 	bl	80039ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800392e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003930:	f000 f8de 	bl	8003af0 <prvAddNewTaskToReadyList>
 8003934:	e001      	b.n	800393a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800393a:	697b      	ldr	r3, [r7, #20]
	}
 800393c:	4618      	mov	r0, r3
 800393e:	3728      	adds	r7, #40	; 0x28
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08c      	sub	sp, #48	; 0x30
 8003948:	af04      	add	r7, sp, #16
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	4613      	mov	r3, r2
 8003952:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003954:	88fb      	ldrh	r3, [r7, #6]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4618      	mov	r0, r3
 800395a:	f001 fd11 	bl	8005380 <pvPortMalloc>
 800395e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00e      	beq.n	8003984 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003966:	2060      	movs	r0, #96	; 0x60
 8003968:	f001 fd0a 	bl	8005380 <pvPortMalloc>
 800396c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	631a      	str	r2, [r3, #48]	; 0x30
 800397a:	e005      	b.n	8003988 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800397c:	6978      	ldr	r0, [r7, #20]
 800397e:	f001 fdc1 	bl	8005504 <vPortFree>
 8003982:	e001      	b.n	8003988 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003984:	2300      	movs	r3, #0
 8003986:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d017      	beq.n	80039be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003996:	88fa      	ldrh	r2, [r7, #6]
 8003998:	2300      	movs	r3, #0
 800399a:	9303      	str	r3, [sp, #12]
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	9302      	str	r3, [sp, #8]
 80039a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a2:	9301      	str	r3, [sp, #4]
 80039a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	68b9      	ldr	r1, [r7, #8]
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 f80e 	bl	80039ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039b2:	69f8      	ldr	r0, [r7, #28]
 80039b4:	f000 f89c 	bl	8003af0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80039b8:	2301      	movs	r3, #1
 80039ba:	61bb      	str	r3, [r7, #24]
 80039bc:	e002      	b.n	80039c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80039be:	f04f 33ff 	mov.w	r3, #4294967295
 80039c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80039c4:	69bb      	ldr	r3, [r7, #24]
	}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3720      	adds	r7, #32
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b088      	sub	sp, #32
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	60f8      	str	r0, [r7, #12]
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	607a      	str	r2, [r7, #4]
 80039da:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80039dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	461a      	mov	r2, r3
 80039e6:	21a5      	movs	r1, #165	; 0xa5
 80039e8:	f002 fca7 	bl	800633a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80039ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039f6:	3b01      	subs	r3, #1
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	f023 0307 	bic.w	r3, r3, #7
 8003a04:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d009      	beq.n	8003a24 <prvInitialiseNewTask+0x56>
 8003a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a14:	f383 8811 	msr	BASEPRI, r3
 8003a18:	f3bf 8f6f 	isb	sy
 8003a1c:	f3bf 8f4f 	dsb	sy
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	e7fe      	b.n	8003a22 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8003a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d01f      	beq.n	8003a70 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a30:	2300      	movs	r3, #0
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	e012      	b.n	8003a5c <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	7819      	ldrb	r1, [r3, #0]
 8003a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	4413      	add	r3, r2
 8003a44:	3334      	adds	r3, #52	; 0x34
 8003a46:	460a      	mov	r2, r1
 8003a48:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	4413      	add	r3, r2
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d006      	beq.n	8003a64 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	61fb      	str	r3, [r7, #28]
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	2b0f      	cmp	r3, #15
 8003a60:	d9e9      	bls.n	8003a36 <prvInitialiseNewTask+0x68>
 8003a62:	e000      	b.n	8003a66 <prvInitialiseNewTask+0x98>
			{
				break;
 8003a64:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a6e:	e003      	b.n	8003a78 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7a:	2b37      	cmp	r3, #55	; 0x37
 8003a7c:	d901      	bls.n	8003a82 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a7e:	2337      	movs	r3, #55	; 0x37
 8003a80:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a86:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a8c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a90:	2200      	movs	r2, #0
 8003a92:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a96:	3304      	adds	r3, #4
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff f991 	bl	8002dc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa0:	3318      	adds	r3, #24
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff f98c 	bl	8002dc0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003abc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	68f9      	ldr	r1, [r7, #12]
 8003ad0:	69b8      	ldr	r0, [r7, #24]
 8003ad2:	f001 fa15 	bl	8004f00 <pxPortInitialiseStack>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ada:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ae6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ae8:	bf00      	nop
 8003aea:	3720      	adds	r7, #32
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003af8:	f001 fb28 	bl	800514c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003afc:	4b2d      	ldr	r3, [pc, #180]	; (8003bb4 <prvAddNewTaskToReadyList+0xc4>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3301      	adds	r3, #1
 8003b02:	4a2c      	ldr	r2, [pc, #176]	; (8003bb4 <prvAddNewTaskToReadyList+0xc4>)
 8003b04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b06:	4b2c      	ldr	r3, [pc, #176]	; (8003bb8 <prvAddNewTaskToReadyList+0xc8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d109      	bne.n	8003b22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b0e:	4a2a      	ldr	r2, [pc, #168]	; (8003bb8 <prvAddNewTaskToReadyList+0xc8>)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b14:	4b27      	ldr	r3, [pc, #156]	; (8003bb4 <prvAddNewTaskToReadyList+0xc4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d110      	bne.n	8003b3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b1c:	f000 fca2 	bl	8004464 <prvInitialiseTaskLists>
 8003b20:	e00d      	b.n	8003b3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b22:	4b26      	ldr	r3, [pc, #152]	; (8003bbc <prvAddNewTaskToReadyList+0xcc>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b2a:	4b23      	ldr	r3, [pc, #140]	; (8003bb8 <prvAddNewTaskToReadyList+0xc8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d802      	bhi.n	8003b3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b38:	4a1f      	ldr	r2, [pc, #124]	; (8003bb8 <prvAddNewTaskToReadyList+0xc8>)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b3e:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <prvAddNewTaskToReadyList+0xd0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3301      	adds	r3, #1
 8003b44:	4a1e      	ldr	r2, [pc, #120]	; (8003bc0 <prvAddNewTaskToReadyList+0xd0>)
 8003b46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003b48:	4b1d      	ldr	r3, [pc, #116]	; (8003bc0 <prvAddNewTaskToReadyList+0xd0>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b54:	4b1b      	ldr	r3, [pc, #108]	; (8003bc4 <prvAddNewTaskToReadyList+0xd4>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d903      	bls.n	8003b64 <prvAddNewTaskToReadyList+0x74>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	4a18      	ldr	r2, [pc, #96]	; (8003bc4 <prvAddNewTaskToReadyList+0xd4>)
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b68:	4613      	mov	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4a15      	ldr	r2, [pc, #84]	; (8003bc8 <prvAddNewTaskToReadyList+0xd8>)
 8003b72:	441a      	add	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3304      	adds	r3, #4
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	f7ff f92d 	bl	8002dda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b80:	f001 fb12 	bl	80051a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b84:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <prvAddNewTaskToReadyList+0xcc>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00e      	beq.n	8003baa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b8c:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <prvAddNewTaskToReadyList+0xc8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d207      	bcs.n	8003baa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <prvAddNewTaskToReadyList+0xdc>)
 8003b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000bc4 	.word	0x20000bc4
 8003bb8:	200006f0 	.word	0x200006f0
 8003bbc:	20000bd0 	.word	0x20000bd0
 8003bc0:	20000be0 	.word	0x20000be0
 8003bc4:	20000bcc 	.word	0x20000bcc
 8003bc8:	200006f4 	.word	0x200006f4
 8003bcc:	e000ed04 	.word	0xe000ed04

08003bd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d016      	beq.n	8003c10 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003be2:	4b13      	ldr	r3, [pc, #76]	; (8003c30 <vTaskDelay+0x60>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d009      	beq.n	8003bfe <vTaskDelay+0x2e>
 8003bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	e7fe      	b.n	8003bfc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003bfe:	f000 f87f 	bl	8003d00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c02:	2100      	movs	r1, #0
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 fdc1 	bl	800478c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c0a:	f000 f887 	bl	8003d1c <xTaskResumeAll>
 8003c0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d107      	bne.n	8003c26 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003c16:	4b07      	ldr	r3, [pc, #28]	; (8003c34 <vTaskDelay+0x64>)
 8003c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	f3bf 8f4f 	dsb	sy
 8003c22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c26:	bf00      	nop
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000bec 	.word	0x20000bec
 8003c34:	e000ed04 	.word	0xe000ed04

08003c38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08a      	sub	sp, #40	; 0x28
 8003c3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c46:	463a      	mov	r2, r7
 8003c48:	1d39      	adds	r1, r7, #4
 8003c4a:	f107 0308 	add.w	r3, r7, #8
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe fe02 	bl	8002858 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c54:	6839      	ldr	r1, [r7, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	9202      	str	r2, [sp, #8]
 8003c5c:	9301      	str	r3, [sp, #4]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	2300      	movs	r3, #0
 8003c64:	460a      	mov	r2, r1
 8003c66:	4920      	ldr	r1, [pc, #128]	; (8003ce8 <vTaskStartScheduler+0xb0>)
 8003c68:	4820      	ldr	r0, [pc, #128]	; (8003cec <vTaskStartScheduler+0xb4>)
 8003c6a:	f7ff fe11 	bl	8003890 <xTaskCreateStatic>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	4b1f      	ldr	r3, [pc, #124]	; (8003cf0 <vTaskStartScheduler+0xb8>)
 8003c72:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c74:	4b1e      	ldr	r3, [pc, #120]	; (8003cf0 <vTaskStartScheduler+0xb8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	e001      	b.n	8003c86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d102      	bne.n	8003c92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c8c:	f000 fdd2 	bl	8004834 <xTimerCreateTimerTask>
 8003c90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d115      	bne.n	8003cc4 <vTaskStartScheduler+0x8c>
 8003c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003caa:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <vTaskStartScheduler+0xbc>)
 8003cac:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003cb2:	4b11      	ldr	r3, [pc, #68]	; (8003cf8 <vTaskStartScheduler+0xc0>)
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003cb8:	4b10      	ldr	r3, [pc, #64]	; (8003cfc <vTaskStartScheduler+0xc4>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003cbe:	f001 f9a7 	bl	8005010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003cc2:	e00d      	b.n	8003ce0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cca:	d109      	bne.n	8003ce0 <vTaskStartScheduler+0xa8>
 8003ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	e7fe      	b.n	8003cde <vTaskStartScheduler+0xa6>
}
 8003ce0:	bf00      	nop
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	08006364 	.word	0x08006364
 8003cec:	08004435 	.word	0x08004435
 8003cf0:	20000be8 	.word	0x20000be8
 8003cf4:	20000be4 	.word	0x20000be4
 8003cf8:	20000bd0 	.word	0x20000bd0
 8003cfc:	20000bc8 	.word	0x20000bc8

08003d00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d04:	4b04      	ldr	r3, [pc, #16]	; (8003d18 <vTaskSuspendAll+0x18>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	4a03      	ldr	r2, [pc, #12]	; (8003d18 <vTaskSuspendAll+0x18>)
 8003d0c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003d0e:	bf00      	nop
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	20000bec 	.word	0x20000bec

08003d1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d2a:	4b41      	ldr	r3, [pc, #260]	; (8003e30 <xTaskResumeAll+0x114>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d109      	bne.n	8003d46 <xTaskResumeAll+0x2a>
 8003d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d36:	f383 8811 	msr	BASEPRI, r3
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	e7fe      	b.n	8003d44 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d46:	f001 fa01 	bl	800514c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d4a:	4b39      	ldr	r3, [pc, #228]	; (8003e30 <xTaskResumeAll+0x114>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	4a37      	ldr	r2, [pc, #220]	; (8003e30 <xTaskResumeAll+0x114>)
 8003d52:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d54:	4b36      	ldr	r3, [pc, #216]	; (8003e30 <xTaskResumeAll+0x114>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d162      	bne.n	8003e22 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d5c:	4b35      	ldr	r3, [pc, #212]	; (8003e34 <xTaskResumeAll+0x118>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d05e      	beq.n	8003e22 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d64:	e02f      	b.n	8003dc6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d66:	4b34      	ldr	r3, [pc, #208]	; (8003e38 <xTaskResumeAll+0x11c>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3318      	adds	r3, #24
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff f88e 	bl	8002e94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff f889 	bl	8002e94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d86:	4b2d      	ldr	r3, [pc, #180]	; (8003e3c <xTaskResumeAll+0x120>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d903      	bls.n	8003d96 <xTaskResumeAll+0x7a>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	4a2a      	ldr	r2, [pc, #168]	; (8003e3c <xTaskResumeAll+0x120>)
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4a27      	ldr	r2, [pc, #156]	; (8003e40 <xTaskResumeAll+0x124>)
 8003da4:	441a      	add	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	3304      	adds	r3, #4
 8003daa:	4619      	mov	r1, r3
 8003dac:	4610      	mov	r0, r2
 8003dae:	f7ff f814 	bl	8002dda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db6:	4b23      	ldr	r3, [pc, #140]	; (8003e44 <xTaskResumeAll+0x128>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d302      	bcc.n	8003dc6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003dc0:	4b21      	ldr	r3, [pc, #132]	; (8003e48 <xTaskResumeAll+0x12c>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dc6:	4b1c      	ldr	r3, [pc, #112]	; (8003e38 <xTaskResumeAll+0x11c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1cb      	bne.n	8003d66 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003dd4:	f000 fc18 	bl	8004608 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003dd8:	4b1c      	ldr	r3, [pc, #112]	; (8003e4c <xTaskResumeAll+0x130>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d010      	beq.n	8003e06 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003de4:	f000 f846 	bl	8003e74 <xTaskIncrementTick>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003dee:	4b16      	ldr	r3, [pc, #88]	; (8003e48 <xTaskResumeAll+0x12c>)
 8003df0:	2201      	movs	r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1f1      	bne.n	8003de4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003e00:	4b12      	ldr	r3, [pc, #72]	; (8003e4c <xTaskResumeAll+0x130>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e06:	4b10      	ldr	r3, [pc, #64]	; (8003e48 <xTaskResumeAll+0x12c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d009      	beq.n	8003e22 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e12:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <xTaskResumeAll+0x134>)
 8003e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e22:	f001 f9c1 	bl	80051a8 <vPortExitCritical>

	return xAlreadyYielded;
 8003e26:	68bb      	ldr	r3, [r7, #8]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	20000bec 	.word	0x20000bec
 8003e34:	20000bc4 	.word	0x20000bc4
 8003e38:	20000b84 	.word	0x20000b84
 8003e3c:	20000bcc 	.word	0x20000bcc
 8003e40:	200006f4 	.word	0x200006f4
 8003e44:	200006f0 	.word	0x200006f0
 8003e48:	20000bd8 	.word	0x20000bd8
 8003e4c:	20000bd4 	.word	0x20000bd4
 8003e50:	e000ed04 	.word	0xe000ed04

08003e54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e5a:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <xTaskGetTickCount+0x1c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e60:	687b      	ldr	r3, [r7, #4]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	20000bc8 	.word	0x20000bc8

08003e74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e7e:	4b4e      	ldr	r3, [pc, #312]	; (8003fb8 <xTaskIncrementTick+0x144>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f040 8088 	bne.w	8003f98 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e88:	4b4c      	ldr	r3, [pc, #304]	; (8003fbc <xTaskIncrementTick+0x148>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e90:	4a4a      	ldr	r2, [pc, #296]	; (8003fbc <xTaskIncrementTick+0x148>)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d11f      	bne.n	8003edc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e9c:	4b48      	ldr	r3, [pc, #288]	; (8003fc0 <xTaskIncrementTick+0x14c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <xTaskIncrementTick+0x46>
 8003ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	603b      	str	r3, [r7, #0]
 8003eb8:	e7fe      	b.n	8003eb8 <xTaskIncrementTick+0x44>
 8003eba:	4b41      	ldr	r3, [pc, #260]	; (8003fc0 <xTaskIncrementTick+0x14c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	4b40      	ldr	r3, [pc, #256]	; (8003fc4 <xTaskIncrementTick+0x150>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a3e      	ldr	r2, [pc, #248]	; (8003fc0 <xTaskIncrementTick+0x14c>)
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	4a3e      	ldr	r2, [pc, #248]	; (8003fc4 <xTaskIncrementTick+0x150>)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	4b3e      	ldr	r3, [pc, #248]	; (8003fc8 <xTaskIncrementTick+0x154>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	4a3c      	ldr	r2, [pc, #240]	; (8003fc8 <xTaskIncrementTick+0x154>)
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	f000 fb96 	bl	8004608 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003edc:	4b3b      	ldr	r3, [pc, #236]	; (8003fcc <xTaskIncrementTick+0x158>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d349      	bcc.n	8003f7a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ee6:	4b36      	ldr	r3, [pc, #216]	; (8003fc0 <xTaskIncrementTick+0x14c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d104      	bne.n	8003efa <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ef0:	4b36      	ldr	r3, [pc, #216]	; (8003fcc <xTaskIncrementTick+0x158>)
 8003ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef6:	601a      	str	r2, [r3, #0]
					break;
 8003ef8:	e03f      	b.n	8003f7a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003efa:	4b31      	ldr	r3, [pc, #196]	; (8003fc0 <xTaskIncrementTick+0x14c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d203      	bcs.n	8003f1a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f12:	4a2e      	ldr	r2, [pc, #184]	; (8003fcc <xTaskIncrementTick+0x158>)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f18:	e02f      	b.n	8003f7a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fe ffb8 	bl	8002e94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d004      	beq.n	8003f36 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	3318      	adds	r3, #24
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fe ffaf 	bl	8002e94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3a:	4b25      	ldr	r3, [pc, #148]	; (8003fd0 <xTaskIncrementTick+0x15c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d903      	bls.n	8003f4a <xTaskIncrementTick+0xd6>
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	4a22      	ldr	r2, [pc, #136]	; (8003fd0 <xTaskIncrementTick+0x15c>)
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4a1f      	ldr	r2, [pc, #124]	; (8003fd4 <xTaskIncrementTick+0x160>)
 8003f58:	441a      	add	r2, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4610      	mov	r0, r2
 8003f62:	f7fe ff3a 	bl	8002dda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6a:	4b1b      	ldr	r3, [pc, #108]	; (8003fd8 <xTaskIncrementTick+0x164>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d3b8      	bcc.n	8003ee6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003f74:	2301      	movs	r3, #1
 8003f76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f78:	e7b5      	b.n	8003ee6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f7a:	4b17      	ldr	r3, [pc, #92]	; (8003fd8 <xTaskIncrementTick+0x164>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f80:	4914      	ldr	r1, [pc, #80]	; (8003fd4 <xTaskIncrementTick+0x160>)
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d907      	bls.n	8003fa2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003f92:	2301      	movs	r3, #1
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	e004      	b.n	8003fa2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003f98:	4b10      	ldr	r3, [pc, #64]	; (8003fdc <xTaskIncrementTick+0x168>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	4a0f      	ldr	r2, [pc, #60]	; (8003fdc <xTaskIncrementTick+0x168>)
 8003fa0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003fa2:	4b0f      	ldr	r3, [pc, #60]	; (8003fe0 <xTaskIncrementTick+0x16c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003faa:	2301      	movs	r3, #1
 8003fac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003fae:	697b      	ldr	r3, [r7, #20]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	20000bec 	.word	0x20000bec
 8003fbc:	20000bc8 	.word	0x20000bc8
 8003fc0:	20000b7c 	.word	0x20000b7c
 8003fc4:	20000b80 	.word	0x20000b80
 8003fc8:	20000bdc 	.word	0x20000bdc
 8003fcc:	20000be4 	.word	0x20000be4
 8003fd0:	20000bcc 	.word	0x20000bcc
 8003fd4:	200006f4 	.word	0x200006f4
 8003fd8:	200006f0 	.word	0x200006f0
 8003fdc:	20000bd4 	.word	0x20000bd4
 8003fe0:	20000bd8 	.word	0x20000bd8

08003fe4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fea:	4b27      	ldr	r3, [pc, #156]	; (8004088 <vTaskSwitchContext+0xa4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ff2:	4b26      	ldr	r3, [pc, #152]	; (800408c <vTaskSwitchContext+0xa8>)
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ff8:	e040      	b.n	800407c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003ffa:	4b24      	ldr	r3, [pc, #144]	; (800408c <vTaskSwitchContext+0xa8>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004000:	4b23      	ldr	r3, [pc, #140]	; (8004090 <vTaskSwitchContext+0xac>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	e00f      	b.n	8004028 <vTaskSwitchContext+0x44>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d109      	bne.n	8004022 <vTaskSwitchContext+0x3e>
 800400e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	607b      	str	r3, [r7, #4]
 8004020:	e7fe      	b.n	8004020 <vTaskSwitchContext+0x3c>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	3b01      	subs	r3, #1
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	491a      	ldr	r1, [pc, #104]	; (8004094 <vTaskSwitchContext+0xb0>)
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0e5      	beq.n	8004008 <vTaskSwitchContext+0x24>
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4a13      	ldr	r2, [pc, #76]	; (8004094 <vTaskSwitchContext+0xb0>)
 8004048:	4413      	add	r3, r2
 800404a:	60bb      	str	r3, [r7, #8]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	605a      	str	r2, [r3, #4]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	3308      	adds	r3, #8
 800405e:	429a      	cmp	r2, r3
 8004060:	d104      	bne.n	800406c <vTaskSwitchContext+0x88>
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	605a      	str	r2, [r3, #4]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	4a09      	ldr	r2, [pc, #36]	; (8004098 <vTaskSwitchContext+0xb4>)
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	4a06      	ldr	r2, [pc, #24]	; (8004090 <vTaskSwitchContext+0xac>)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6013      	str	r3, [r2, #0]
}
 800407c:	bf00      	nop
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	20000bec 	.word	0x20000bec
 800408c:	20000bd8 	.word	0x20000bd8
 8004090:	20000bcc 	.word	0x20000bcc
 8004094:	200006f4 	.word	0x200006f4
 8004098:	200006f0 	.word	0x200006f0

0800409c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d109      	bne.n	80040c0 <vTaskPlaceOnEventList+0x24>
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	e7fe      	b.n	80040be <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040c0:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <vTaskPlaceOnEventList+0x44>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3318      	adds	r3, #24
 80040c6:	4619      	mov	r1, r3
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7fe feaa 	bl	8002e22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040ce:	2101      	movs	r1, #1
 80040d0:	6838      	ldr	r0, [r7, #0]
 80040d2:	f000 fb5b 	bl	800478c <prvAddCurrentTaskToDelayedList>
}
 80040d6:	bf00      	nop
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	200006f0 	.word	0x200006f0

080040e4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <vTaskPlaceOnUnorderedEventList+0x26>
 80040f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fa:	f383 8811 	msr	BASEPRI, r3
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	f3bf 8f4f 	dsb	sy
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	e7fe      	b.n	8004108 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800410a:	4b11      	ldr	r3, [pc, #68]	; (8004150 <vTaskPlaceOnUnorderedEventList+0x6c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d109      	bne.n	8004126 <vTaskPlaceOnUnorderedEventList+0x42>
 8004112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004116:	f383 8811 	msr	BASEPRI, r3
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	613b      	str	r3, [r7, #16]
 8004124:	e7fe      	b.n	8004124 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004126:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <vTaskPlaceOnUnorderedEventList+0x70>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004130:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004132:	4b08      	ldr	r3, [pc, #32]	; (8004154 <vTaskPlaceOnUnorderedEventList+0x70>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3318      	adds	r3, #24
 8004138:	4619      	mov	r1, r3
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f7fe fe4d 	bl	8002dda <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004140:	2101      	movs	r1, #1
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fb22 	bl	800478c <prvAddCurrentTaskToDelayedList>
}
 8004148:	bf00      	nop
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	20000bec 	.word	0x20000bec
 8004154:	200006f0 	.word	0x200006f0

08004158 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <vTaskPlaceOnEventListRestricted+0x26>
 800416a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	e7fe      	b.n	800417c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800417e:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <vTaskPlaceOnEventListRestricted+0x50>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3318      	adds	r3, #24
 8004184:	4619      	mov	r1, r3
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f7fe fe27 	bl	8002dda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d002      	beq.n	8004198 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004192:	f04f 33ff 	mov.w	r3, #4294967295
 8004196:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	68b8      	ldr	r0, [r7, #8]
 800419c:	f000 faf6 	bl	800478c <prvAddCurrentTaskToDelayedList>
	}
 80041a0:	bf00      	nop
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	200006f0 	.word	0x200006f0

080041ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d109      	bne.n	80041d6 <xTaskRemoveFromEventList+0x2a>
 80041c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	e7fe      	b.n	80041d4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	3318      	adds	r3, #24
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fe fe5a 	bl	8002e94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041e0:	4b1d      	ldr	r3, [pc, #116]	; (8004258 <xTaskRemoveFromEventList+0xac>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d11d      	bne.n	8004224 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	3304      	adds	r3, #4
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7fe fe51 	bl	8002e94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f6:	4b19      	ldr	r3, [pc, #100]	; (800425c <xTaskRemoveFromEventList+0xb0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d903      	bls.n	8004206 <xTaskRemoveFromEventList+0x5a>
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004202:	4a16      	ldr	r2, [pc, #88]	; (800425c <xTaskRemoveFromEventList+0xb0>)
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800420a:	4613      	mov	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4a13      	ldr	r2, [pc, #76]	; (8004260 <xTaskRemoveFromEventList+0xb4>)
 8004214:	441a      	add	r2, r3
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	3304      	adds	r3, #4
 800421a:	4619      	mov	r1, r3
 800421c:	4610      	mov	r0, r2
 800421e:	f7fe fddc 	bl	8002dda <vListInsertEnd>
 8004222:	e005      	b.n	8004230 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	3318      	adds	r3, #24
 8004228:	4619      	mov	r1, r3
 800422a:	480e      	ldr	r0, [pc, #56]	; (8004264 <xTaskRemoveFromEventList+0xb8>)
 800422c:	f7fe fdd5 	bl	8002dda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004234:	4b0c      	ldr	r3, [pc, #48]	; (8004268 <xTaskRemoveFromEventList+0xbc>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423a:	429a      	cmp	r2, r3
 800423c:	d905      	bls.n	800424a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800423e:	2301      	movs	r3, #1
 8004240:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004242:	4b0a      	ldr	r3, [pc, #40]	; (800426c <xTaskRemoveFromEventList+0xc0>)
 8004244:	2201      	movs	r2, #1
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	e001      	b.n	800424e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800424a:	2300      	movs	r3, #0
 800424c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800424e:	697b      	ldr	r3, [r7, #20]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	20000bec 	.word	0x20000bec
 800425c:	20000bcc 	.word	0x20000bcc
 8004260:	200006f4 	.word	0x200006f4
 8004264:	20000b84 	.word	0x20000b84
 8004268:	200006f0 	.word	0x200006f0
 800426c:	20000bd8 	.word	0x20000bd8

08004270 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800427a:	4b28      	ldr	r3, [pc, #160]	; (800431c <vTaskRemoveFromUnorderedEventList+0xac>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d109      	bne.n	8004296 <vTaskRemoveFromUnorderedEventList+0x26>
 8004282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	e7fe      	b.n	8004294 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d109      	bne.n	80042c0 <vTaskRemoveFromUnorderedEventList+0x50>
 80042ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	e7fe      	b.n	80042be <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7fe fde7 	bl	8002e94 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	3304      	adds	r3, #4
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fe fde2 	bl	8002e94 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d4:	4b12      	ldr	r3, [pc, #72]	; (8004320 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d903      	bls.n	80042e4 <vTaskRemoveFromUnorderedEventList+0x74>
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	4a0f      	ldr	r2, [pc, #60]	; (8004320 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e8:	4613      	mov	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4a0c      	ldr	r2, [pc, #48]	; (8004324 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80042f2:	441a      	add	r2, r3
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	3304      	adds	r3, #4
 80042f8:	4619      	mov	r1, r3
 80042fa:	4610      	mov	r0, r2
 80042fc:	f7fe fd6d 	bl	8002dda <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004304:	4b08      	ldr	r3, [pc, #32]	; (8004328 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430a:	429a      	cmp	r2, r3
 800430c:	d902      	bls.n	8004314 <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800430e:	4b07      	ldr	r3, [pc, #28]	; (800432c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8004310:	2201      	movs	r2, #1
 8004312:	601a      	str	r2, [r3, #0]
	}
}
 8004314:	bf00      	nop
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20000bec 	.word	0x20000bec
 8004320:	20000bcc 	.word	0x20000bcc
 8004324:	200006f4 	.word	0x200006f4
 8004328:	200006f0 	.word	0x200006f0
 800432c:	20000bd8 	.word	0x20000bd8

08004330 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004338:	4b06      	ldr	r3, [pc, #24]	; (8004354 <vTaskInternalSetTimeOutState+0x24>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004340:	4b05      	ldr	r3, [pc, #20]	; (8004358 <vTaskInternalSetTimeOutState+0x28>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	605a      	str	r2, [r3, #4]
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	20000bdc 	.word	0x20000bdc
 8004358:	20000bc8 	.word	0x20000bc8

0800435c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d109      	bne.n	8004380 <xTaskCheckForTimeOut+0x24>
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	e7fe      	b.n	800437e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d109      	bne.n	800439a <xTaskCheckForTimeOut+0x3e>
 8004386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	e7fe      	b.n	8004398 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800439a:	f000 fed7 	bl	800514c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800439e:	4b1d      	ldr	r3, [pc, #116]	; (8004414 <xTaskCheckForTimeOut+0xb8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b6:	d102      	bne.n	80043be <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80043b8:	2300      	movs	r3, #0
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	e023      	b.n	8004406 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	4b15      	ldr	r3, [pc, #84]	; (8004418 <xTaskCheckForTimeOut+0xbc>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d007      	beq.n	80043da <xTaskCheckForTimeOut+0x7e>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d302      	bcc.n	80043da <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80043d4:	2301      	movs	r3, #1
 80043d6:	61fb      	str	r3, [r7, #28]
 80043d8:	e015      	b.n	8004406 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d20b      	bcs.n	80043fc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	1ad2      	subs	r2, r2, r3
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7ff ff9d 	bl	8004330 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
 80043fa:	e004      	b.n	8004406 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004402:	2301      	movs	r3, #1
 8004404:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004406:	f000 fecf 	bl	80051a8 <vPortExitCritical>

	return xReturn;
 800440a:	69fb      	ldr	r3, [r7, #28]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3720      	adds	r7, #32
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	20000bc8 	.word	0x20000bc8
 8004418:	20000bdc 	.word	0x20000bdc

0800441c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004420:	4b03      	ldr	r3, [pc, #12]	; (8004430 <vTaskMissedYield+0x14>)
 8004422:	2201      	movs	r2, #1
 8004424:	601a      	str	r2, [r3, #0]
}
 8004426:	bf00      	nop
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	20000bd8 	.word	0x20000bd8

08004434 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800443c:	f000 f852 	bl	80044e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004440:	4b06      	ldr	r3, [pc, #24]	; (800445c <prvIdleTask+0x28>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d9f9      	bls.n	800443c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004448:	4b05      	ldr	r3, [pc, #20]	; (8004460 <prvIdleTask+0x2c>)
 800444a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004458:	e7f0      	b.n	800443c <prvIdleTask+0x8>
 800445a:	bf00      	nop
 800445c:	200006f4 	.word	0x200006f4
 8004460:	e000ed04 	.word	0xe000ed04

08004464 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800446a:	2300      	movs	r3, #0
 800446c:	607b      	str	r3, [r7, #4]
 800446e:	e00c      	b.n	800448a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4a12      	ldr	r2, [pc, #72]	; (80044c4 <prvInitialiseTaskLists+0x60>)
 800447c:	4413      	add	r3, r2
 800447e:	4618      	mov	r0, r3
 8004480:	f7fe fc7e 	bl	8002d80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3301      	adds	r3, #1
 8004488:	607b      	str	r3, [r7, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b37      	cmp	r3, #55	; 0x37
 800448e:	d9ef      	bls.n	8004470 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004490:	480d      	ldr	r0, [pc, #52]	; (80044c8 <prvInitialiseTaskLists+0x64>)
 8004492:	f7fe fc75 	bl	8002d80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004496:	480d      	ldr	r0, [pc, #52]	; (80044cc <prvInitialiseTaskLists+0x68>)
 8004498:	f7fe fc72 	bl	8002d80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800449c:	480c      	ldr	r0, [pc, #48]	; (80044d0 <prvInitialiseTaskLists+0x6c>)
 800449e:	f7fe fc6f 	bl	8002d80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044a2:	480c      	ldr	r0, [pc, #48]	; (80044d4 <prvInitialiseTaskLists+0x70>)
 80044a4:	f7fe fc6c 	bl	8002d80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044a8:	480b      	ldr	r0, [pc, #44]	; (80044d8 <prvInitialiseTaskLists+0x74>)
 80044aa:	f7fe fc69 	bl	8002d80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044ae:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <prvInitialiseTaskLists+0x78>)
 80044b0:	4a05      	ldr	r2, [pc, #20]	; (80044c8 <prvInitialiseTaskLists+0x64>)
 80044b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044b4:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <prvInitialiseTaskLists+0x7c>)
 80044b6:	4a05      	ldr	r2, [pc, #20]	; (80044cc <prvInitialiseTaskLists+0x68>)
 80044b8:	601a      	str	r2, [r3, #0]
}
 80044ba:	bf00      	nop
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	200006f4 	.word	0x200006f4
 80044c8:	20000b54 	.word	0x20000b54
 80044cc:	20000b68 	.word	0x20000b68
 80044d0:	20000b84 	.word	0x20000b84
 80044d4:	20000b98 	.word	0x20000b98
 80044d8:	20000bb0 	.word	0x20000bb0
 80044dc:	20000b7c 	.word	0x20000b7c
 80044e0:	20000b80 	.word	0x20000b80

080044e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044ea:	e019      	b.n	8004520 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044ec:	f000 fe2e 	bl	800514c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044f0:	4b0f      	ldr	r3, [pc, #60]	; (8004530 <prvCheckTasksWaitingTermination+0x4c>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3304      	adds	r3, #4
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fe fcc9 	bl	8002e94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004502:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <prvCheckTasksWaitingTermination+0x50>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3b01      	subs	r3, #1
 8004508:	4a0a      	ldr	r2, [pc, #40]	; (8004534 <prvCheckTasksWaitingTermination+0x50>)
 800450a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800450c:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <prvCheckTasksWaitingTermination+0x54>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3b01      	subs	r3, #1
 8004512:	4a09      	ldr	r2, [pc, #36]	; (8004538 <prvCheckTasksWaitingTermination+0x54>)
 8004514:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004516:	f000 fe47 	bl	80051a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f846 	bl	80045ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004520:	4b05      	ldr	r3, [pc, #20]	; (8004538 <prvCheckTasksWaitingTermination+0x54>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1e1      	bne.n	80044ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004528:	bf00      	nop
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	20000b98 	.word	0x20000b98
 8004534:	20000bc4 	.word	0x20000bc4
 8004538:	20000bac 	.word	0x20000bac

0800453c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004548:	e005      	b.n	8004556 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	3301      	adds	r3, #1
 800454e:	607b      	str	r3, [r7, #4]
			ulCount++;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3301      	adds	r3, #1
 8004554:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2ba5      	cmp	r3, #165	; 0xa5
 800455c:	d0f5      	beq.n	800454a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	089b      	lsrs	r3, r3, #2
 8004562:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	b29b      	uxth	r3, r3
	}
 8004568:	4618      	mov	r0, r3
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d102      	bne.n	8004588 <uxTaskGetStackHighWaterMark+0x14>
 8004582:	4b09      	ldr	r3, [pc, #36]	; (80045a8 <uxTaskGetStackHighWaterMark+0x34>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	e000      	b.n	800458a <uxTaskGetStackHighWaterMark+0x16>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004590:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8004592:	6938      	ldr	r0, [r7, #16]
 8004594:	f7ff ffd2 	bl	800453c <prvTaskCheckFreeStackSpace>
 8004598:	4603      	mov	r3, r0
 800459a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800459c:	68fb      	ldr	r3, [r7, #12]
	}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	200006f0 	.word	0x200006f0

080045ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d108      	bne.n	80045d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 ff9e 	bl	8005504 <vPortFree>
				vPortFree( pxTCB );
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 ff9b 	bl	8005504 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80045ce:	e017      	b.n	8004600 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d103      	bne.n	80045e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 ff92 	bl	8005504 <vPortFree>
	}
 80045e0:	e00e      	b.n	8004600 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d009      	beq.n	8004600 <prvDeleteTCB+0x54>
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	e7fe      	b.n	80045fe <prvDeleteTCB+0x52>
	}
 8004600:	bf00      	nop
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800460e:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <prvResetNextTaskUnblockTime+0x38>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d104      	bne.n	8004622 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004618:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <prvResetNextTaskUnblockTime+0x3c>)
 800461a:	f04f 32ff 	mov.w	r2, #4294967295
 800461e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004620:	e008      	b.n	8004634 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004622:	4b07      	ldr	r3, [pc, #28]	; (8004640 <prvResetNextTaskUnblockTime+0x38>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	4a04      	ldr	r2, [pc, #16]	; (8004644 <prvResetNextTaskUnblockTime+0x3c>)
 8004632:	6013      	str	r3, [r2, #0]
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	20000b7c 	.word	0x20000b7c
 8004644:	20000be4 	.word	0x20000be4

08004648 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800464e:	4b0b      	ldr	r3, [pc, #44]	; (800467c <xTaskGetSchedulerState+0x34>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d102      	bne.n	800465c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004656:	2301      	movs	r3, #1
 8004658:	607b      	str	r3, [r7, #4]
 800465a:	e008      	b.n	800466e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800465c:	4b08      	ldr	r3, [pc, #32]	; (8004680 <xTaskGetSchedulerState+0x38>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d102      	bne.n	800466a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004664:	2302      	movs	r3, #2
 8004666:	607b      	str	r3, [r7, #4]
 8004668:	e001      	b.n	800466e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800466a:	2300      	movs	r3, #0
 800466c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800466e:	687b      	ldr	r3, [r7, #4]
	}
 8004670:	4618      	mov	r0, r3
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	20000bd0 	.word	0x20000bd0
 8004680:	20000bec 	.word	0x20000bec

08004684 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d054      	beq.n	8004744 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800469a:	4b2d      	ldr	r3, [pc, #180]	; (8004750 <xTaskPriorityDisinherit+0xcc>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d009      	beq.n	80046b8 <xTaskPriorityDisinherit+0x34>
 80046a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a8:	f383 8811 	msr	BASEPRI, r3
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	e7fe      	b.n	80046b6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d109      	bne.n	80046d4 <xTaskPriorityDisinherit+0x50>
 80046c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	60bb      	str	r3, [r7, #8]
 80046d2:	e7fe      	b.n	80046d2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d8:	1e5a      	subs	r2, r3, #1
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d02c      	beq.n	8004744 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d128      	bne.n	8004744 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	3304      	adds	r3, #4
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fe fbcc 	bl	8002e94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004714:	4b0f      	ldr	r3, [pc, #60]	; (8004754 <xTaskPriorityDisinherit+0xd0>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	429a      	cmp	r2, r3
 800471a:	d903      	bls.n	8004724 <xTaskPriorityDisinherit+0xa0>
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	4a0c      	ldr	r2, [pc, #48]	; (8004754 <xTaskPriorityDisinherit+0xd0>)
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4a09      	ldr	r2, [pc, #36]	; (8004758 <xTaskPriorityDisinherit+0xd4>)
 8004732:	441a      	add	r2, r3
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	3304      	adds	r3, #4
 8004738:	4619      	mov	r1, r3
 800473a:	4610      	mov	r0, r2
 800473c:	f7fe fb4d 	bl	8002dda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004740:	2301      	movs	r3, #1
 8004742:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004744:	697b      	ldr	r3, [r7, #20]
	}
 8004746:	4618      	mov	r0, r3
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	200006f0 	.word	0x200006f0
 8004754:	20000bcc 	.word	0x20000bcc
 8004758:	200006f4 	.word	0x200006f4

0800475c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8004762:	4b09      	ldr	r3, [pc, #36]	; (8004788 <uxTaskResetEventItemValue+0x2c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800476a:	4b07      	ldr	r3, [pc, #28]	; (8004788 <uxTaskResetEventItemValue+0x2c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004770:	4b05      	ldr	r3, [pc, #20]	; (8004788 <uxTaskResetEventItemValue+0x2c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8004778:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800477a:	687b      	ldr	r3, [r7, #4]
}
 800477c:	4618      	mov	r0, r3
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	200006f0 	.word	0x200006f0

0800478c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004796:	4b21      	ldr	r3, [pc, #132]	; (800481c <prvAddCurrentTaskToDelayedList+0x90>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800479c:	4b20      	ldr	r3, [pc, #128]	; (8004820 <prvAddCurrentTaskToDelayedList+0x94>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3304      	adds	r3, #4
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fe fb76 	bl	8002e94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ae:	d10a      	bne.n	80047c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d007      	beq.n	80047c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047b6:	4b1a      	ldr	r3, [pc, #104]	; (8004820 <prvAddCurrentTaskToDelayedList+0x94>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3304      	adds	r3, #4
 80047bc:	4619      	mov	r1, r3
 80047be:	4819      	ldr	r0, [pc, #100]	; (8004824 <prvAddCurrentTaskToDelayedList+0x98>)
 80047c0:	f7fe fb0b 	bl	8002dda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047c4:	e026      	b.n	8004814 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4413      	add	r3, r2
 80047cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047ce:	4b14      	ldr	r3, [pc, #80]	; (8004820 <prvAddCurrentTaskToDelayedList+0x94>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d209      	bcs.n	80047f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047de:	4b12      	ldr	r3, [pc, #72]	; (8004828 <prvAddCurrentTaskToDelayedList+0x9c>)
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4b0f      	ldr	r3, [pc, #60]	; (8004820 <prvAddCurrentTaskToDelayedList+0x94>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3304      	adds	r3, #4
 80047e8:	4619      	mov	r1, r3
 80047ea:	4610      	mov	r0, r2
 80047ec:	f7fe fb19 	bl	8002e22 <vListInsert>
}
 80047f0:	e010      	b.n	8004814 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047f2:	4b0e      	ldr	r3, [pc, #56]	; (800482c <prvAddCurrentTaskToDelayedList+0xa0>)
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <prvAddCurrentTaskToDelayedList+0x94>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3304      	adds	r3, #4
 80047fc:	4619      	mov	r1, r3
 80047fe:	4610      	mov	r0, r2
 8004800:	f7fe fb0f 	bl	8002e22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004804:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	429a      	cmp	r2, r3
 800480c:	d202      	bcs.n	8004814 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800480e:	4a08      	ldr	r2, [pc, #32]	; (8004830 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	6013      	str	r3, [r2, #0]
}
 8004814:	bf00      	nop
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	20000bc8 	.word	0x20000bc8
 8004820:	200006f0 	.word	0x200006f0
 8004824:	20000bb0 	.word	0x20000bb0
 8004828:	20000b80 	.word	0x20000b80
 800482c:	20000b7c 	.word	0x20000b7c
 8004830:	20000be4 	.word	0x20000be4

08004834 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08a      	sub	sp, #40	; 0x28
 8004838:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800483a:	2300      	movs	r3, #0
 800483c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800483e:	f000 faff 	bl	8004e40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004842:	4b1c      	ldr	r3, [pc, #112]	; (80048b4 <xTimerCreateTimerTask+0x80>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d021      	beq.n	800488e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800484a:	2300      	movs	r3, #0
 800484c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800484e:	2300      	movs	r3, #0
 8004850:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004852:	1d3a      	adds	r2, r7, #4
 8004854:	f107 0108 	add.w	r1, r7, #8
 8004858:	f107 030c 	add.w	r3, r7, #12
 800485c:	4618      	mov	r0, r3
 800485e:	f7fe f815 	bl	800288c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	9202      	str	r2, [sp, #8]
 800486a:	9301      	str	r3, [sp, #4]
 800486c:	2302      	movs	r3, #2
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	2300      	movs	r3, #0
 8004872:	460a      	mov	r2, r1
 8004874:	4910      	ldr	r1, [pc, #64]	; (80048b8 <xTimerCreateTimerTask+0x84>)
 8004876:	4811      	ldr	r0, [pc, #68]	; (80048bc <xTimerCreateTimerTask+0x88>)
 8004878:	f7ff f80a 	bl	8003890 <xTaskCreateStatic>
 800487c:	4602      	mov	r2, r0
 800487e:	4b10      	ldr	r3, [pc, #64]	; (80048c0 <xTimerCreateTimerTask+0x8c>)
 8004880:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004882:	4b0f      	ldr	r3, [pc, #60]	; (80048c0 <xTimerCreateTimerTask+0x8c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800488a:	2301      	movs	r3, #1
 800488c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d109      	bne.n	80048a8 <xTimerCreateTimerTask+0x74>
 8004894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004898:	f383 8811 	msr	BASEPRI, r3
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	613b      	str	r3, [r7, #16]
 80048a6:	e7fe      	b.n	80048a6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80048a8:	697b      	ldr	r3, [r7, #20]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20000c20 	.word	0x20000c20
 80048b8:	0800636c 	.word	0x0800636c
 80048bc:	080049f5 	.word	0x080049f5
 80048c0:	20000c24 	.word	0x20000c24

080048c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08a      	sub	sp, #40	; 0x28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d109      	bne.n	80048f0 <xTimerGenericCommand+0x2c>
 80048dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	623b      	str	r3, [r7, #32]
 80048ee:	e7fe      	b.n	80048ee <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80048f0:	4b19      	ldr	r3, [pc, #100]	; (8004958 <xTimerGenericCommand+0x94>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d02a      	beq.n	800494e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b05      	cmp	r3, #5
 8004908:	dc18      	bgt.n	800493c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800490a:	f7ff fe9d 	bl	8004648 <xTaskGetSchedulerState>
 800490e:	4603      	mov	r3, r0
 8004910:	2b02      	cmp	r3, #2
 8004912:	d109      	bne.n	8004928 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004914:	4b10      	ldr	r3, [pc, #64]	; (8004958 <xTimerGenericCommand+0x94>)
 8004916:	6818      	ldr	r0, [r3, #0]
 8004918:	f107 0110 	add.w	r1, r7, #16
 800491c:	2300      	movs	r3, #0
 800491e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004920:	f7fe fbe0 	bl	80030e4 <xQueueGenericSend>
 8004924:	6278      	str	r0, [r7, #36]	; 0x24
 8004926:	e012      	b.n	800494e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004928:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <xTimerGenericCommand+0x94>)
 800492a:	6818      	ldr	r0, [r3, #0]
 800492c:	f107 0110 	add.w	r1, r7, #16
 8004930:	2300      	movs	r3, #0
 8004932:	2200      	movs	r2, #0
 8004934:	f7fe fbd6 	bl	80030e4 <xQueueGenericSend>
 8004938:	6278      	str	r0, [r7, #36]	; 0x24
 800493a:	e008      	b.n	800494e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800493c:	4b06      	ldr	r3, [pc, #24]	; (8004958 <xTimerGenericCommand+0x94>)
 800493e:	6818      	ldr	r0, [r3, #0]
 8004940:	f107 0110 	add.w	r1, r7, #16
 8004944:	2300      	movs	r3, #0
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	f7fe fcc6 	bl	80032d8 <xQueueGenericSendFromISR>
 800494c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004950:	4618      	mov	r0, r3
 8004952:	3728      	adds	r7, #40	; 0x28
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	20000c20 	.word	0x20000c20

0800495c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b088      	sub	sp, #32
 8004960:	af02      	add	r7, sp, #8
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004966:	4b22      	ldr	r3, [pc, #136]	; (80049f0 <prvProcessExpiredTimer+0x94>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	3304      	adds	r3, #4
 8004974:	4618      	mov	r0, r3
 8004976:	f7fe fa8d 	bl	8002e94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b00      	cmp	r3, #0
 8004986:	d021      	beq.n	80049cc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	699a      	ldr	r2, [r3, #24]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	18d1      	adds	r1, r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	6978      	ldr	r0, [r7, #20]
 8004996:	f000 f8d1 	bl	8004b3c <prvInsertTimerInActiveList>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01e      	beq.n	80049de <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049a0:	2300      	movs	r3, #0
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	2300      	movs	r3, #0
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	2100      	movs	r1, #0
 80049aa:	6978      	ldr	r0, [r7, #20]
 80049ac:	f7ff ff8a 	bl	80048c4 <xTimerGenericCommand>
 80049b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d112      	bne.n	80049de <prvProcessExpiredTimer+0x82>
 80049b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	e7fe      	b.n	80049ca <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049d2:	f023 0301 	bic.w	r3, r3, #1
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	6978      	ldr	r0, [r7, #20]
 80049e4:	4798      	blx	r3
}
 80049e6:	bf00      	nop
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000c18 	.word	0x20000c18

080049f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049fc:	f107 0308 	add.w	r3, r7, #8
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 f857 	bl	8004ab4 <prvGetNextExpireTime>
 8004a06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 f803 	bl	8004a18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a12:	f000 f8d5 	bl	8004bc0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a16:	e7f1      	b.n	80049fc <prvTimerTask+0x8>

08004a18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a22:	f7ff f96d 	bl	8003d00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a26:	f107 0308 	add.w	r3, r7, #8
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 f866 	bl	8004afc <prvSampleTimeNow>
 8004a30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d130      	bne.n	8004a9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10a      	bne.n	8004a54 <prvProcessTimerOrBlockTask+0x3c>
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d806      	bhi.n	8004a54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a46:	f7ff f969 	bl	8003d1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a4a:	68f9      	ldr	r1, [r7, #12]
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f7ff ff85 	bl	800495c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a52:	e024      	b.n	8004a9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d008      	beq.n	8004a6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a5a:	4b13      	ldr	r3, [pc, #76]	; (8004aa8 <prvProcessTimerOrBlockTask+0x90>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <prvProcessTimerOrBlockTask+0x50>
 8004a64:	2301      	movs	r3, #1
 8004a66:	e000      	b.n	8004a6a <prvProcessTimerOrBlockTask+0x52>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a6c:	4b0f      	ldr	r3, [pc, #60]	; (8004aac <prvProcessTimerOrBlockTask+0x94>)
 8004a6e:	6818      	ldr	r0, [r3, #0]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	4619      	mov	r1, r3
 8004a7a:	f7fe fed5 	bl	8003828 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004a7e:	f7ff f94d 	bl	8003d1c <xTaskResumeAll>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10a      	bne.n	8004a9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004a88:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <prvProcessTimerOrBlockTask+0x98>)
 8004a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	f3bf 8f6f 	isb	sy
}
 8004a98:	e001      	b.n	8004a9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004a9a:	f7ff f93f 	bl	8003d1c <xTaskResumeAll>
}
 8004a9e:	bf00      	nop
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000c1c 	.word	0x20000c1c
 8004aac:	20000c20 	.word	0x20000c20
 8004ab0:	e000ed04 	.word	0xe000ed04

08004ab4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004abc:	4b0e      	ldr	r3, [pc, #56]	; (8004af8 <prvGetNextExpireTime+0x44>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <prvGetNextExpireTime+0x16>
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	e000      	b.n	8004acc <prvGetNextExpireTime+0x18>
 8004aca:	2200      	movs	r2, #0
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d105      	bne.n	8004ae4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ad8:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <prvGetNextExpireTime+0x44>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	e001      	b.n	8004ae8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	20000c18 	.word	0x20000c18

08004afc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b04:	f7ff f9a6 	bl	8003e54 <xTaskGetTickCount>
 8004b08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b0a:	4b0b      	ldr	r3, [pc, #44]	; (8004b38 <prvSampleTimeNow+0x3c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d205      	bcs.n	8004b20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b14:	f000 f930 	bl	8004d78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	e002      	b.n	8004b26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004b26:	4a04      	ldr	r2, [pc, #16]	; (8004b38 <prvSampleTimeNow+0x3c>)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20000c28 	.word	0x20000c28

08004b3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
 8004b48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d812      	bhi.n	8004b88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	1ad2      	subs	r2, r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d302      	bcc.n	8004b76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b70:	2301      	movs	r3, #1
 8004b72:	617b      	str	r3, [r7, #20]
 8004b74:	e01b      	b.n	8004bae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b76:	4b10      	ldr	r3, [pc, #64]	; (8004bb8 <prvInsertTimerInActiveList+0x7c>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4610      	mov	r0, r2
 8004b82:	f7fe f94e 	bl	8002e22 <vListInsert>
 8004b86:	e012      	b.n	8004bae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d206      	bcs.n	8004b9e <prvInsertTimerInActiveList+0x62>
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d302      	bcc.n	8004b9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	617b      	str	r3, [r7, #20]
 8004b9c:	e007      	b.n	8004bae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b9e:	4b07      	ldr	r3, [pc, #28]	; (8004bbc <prvInsertTimerInActiveList+0x80>)
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4610      	mov	r0, r2
 8004baa:	f7fe f93a 	bl	8002e22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004bae:	697b      	ldr	r3, [r7, #20]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	20000c1c 	.word	0x20000c1c
 8004bbc:	20000c18 	.word	0x20000c18

08004bc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b08e      	sub	sp, #56	; 0x38
 8004bc4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bc6:	e0c6      	b.n	8004d56 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	da17      	bge.n	8004bfe <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004bce:	1d3b      	adds	r3, r7, #4
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d109      	bne.n	8004bee <prvProcessReceivedCommands+0x2e>
 8004bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	61fb      	str	r3, [r7, #28]
 8004bec:	e7fe      	b.n	8004bec <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bf4:	6850      	ldr	r0, [r2, #4]
 8004bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bf8:	6892      	ldr	r2, [r2, #8]
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f2c0 80a7 	blt.w	8004d54 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d004      	beq.n	8004c1c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c14:	3304      	adds	r3, #4
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7fe f93c 	bl	8002e94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c1c:	463b      	mov	r3, r7
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff ff6c 	bl	8004afc <prvSampleTimeNow>
 8004c24:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b09      	cmp	r3, #9
 8004c2a:	f200 8094 	bhi.w	8004d56 <prvProcessReceivedCommands+0x196>
 8004c2e:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <prvProcessReceivedCommands+0x74>)
 8004c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c34:	08004c5d 	.word	0x08004c5d
 8004c38:	08004c5d 	.word	0x08004c5d
 8004c3c:	08004c5d 	.word	0x08004c5d
 8004c40:	08004ccf 	.word	0x08004ccf
 8004c44:	08004ce3 	.word	0x08004ce3
 8004c48:	08004d2b 	.word	0x08004d2b
 8004c4c:	08004c5d 	.word	0x08004c5d
 8004c50:	08004c5d 	.word	0x08004c5d
 8004c54:	08004ccf 	.word	0x08004ccf
 8004c58:	08004ce3 	.word	0x08004ce3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c62:	f043 0301 	orr.w	r3, r3, #1
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	18d1      	adds	r1, r2, r3
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c7c:	f7ff ff5e 	bl	8004b3c <prvInsertTimerInActiveList>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d067      	beq.n	8004d56 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d05c      	beq.n	8004d56 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	441a      	add	r2, r3
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	2300      	movs	r3, #0
 8004caa:	2100      	movs	r1, #0
 8004cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cae:	f7ff fe09 	bl	80048c4 <xTimerGenericCommand>
 8004cb2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d14d      	bne.n	8004d56 <prvProcessReceivedCommands+0x196>
 8004cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	61bb      	str	r3, [r7, #24]
 8004ccc:	e7fe      	b.n	8004ccc <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cd4:	f023 0301 	bic.w	r3, r3, #1
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004ce0:	e039      	b.n	8004d56 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ce8:	f043 0301 	orr.w	r3, r3, #1
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d109      	bne.n	8004d16 <prvProcessReceivedCommands+0x156>
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	e7fe      	b.n	8004d14 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d18:	699a      	ldr	r2, [r3, #24]
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	18d1      	adds	r1, r2, r3
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d24:	f7ff ff0a 	bl	8004b3c <prvInsertTimerInActiveList>
					break;
 8004d28:	e015      	b.n	8004d56 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d103      	bne.n	8004d40 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8004d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d3a:	f000 fbe3 	bl	8005504 <vPortFree>
 8004d3e:	e00a      	b.n	8004d56 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d46:	f023 0301 	bic.w	r3, r3, #1
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d52:	e000      	b.n	8004d56 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004d54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d56:	4b07      	ldr	r3, [pc, #28]	; (8004d74 <prvProcessReceivedCommands+0x1b4>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	1d39      	adds	r1, r7, #4
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7fe fb4e 	bl	8003400 <xQueueReceive>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f47f af2e 	bne.w	8004bc8 <prvProcessReceivedCommands+0x8>
	}
}
 8004d6c:	bf00      	nop
 8004d6e:	3730      	adds	r7, #48	; 0x30
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	20000c20 	.word	0x20000c20

08004d78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b088      	sub	sp, #32
 8004d7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d7e:	e047      	b.n	8004e10 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d80:	4b2d      	ldr	r3, [pc, #180]	; (8004e38 <prvSwitchTimerLists+0xc0>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d8a:	4b2b      	ldr	r3, [pc, #172]	; (8004e38 <prvSwitchTimerLists+0xc0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	3304      	adds	r3, #4
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7fe f87b 	bl	8002e94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d02d      	beq.n	8004e10 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	4413      	add	r3, r2
 8004dbc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d90e      	bls.n	8004de4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dd2:	4b19      	ldr	r3, [pc, #100]	; (8004e38 <prvSwitchTimerLists+0xc0>)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4610      	mov	r0, r2
 8004dde:	f7fe f820 	bl	8002e22 <vListInsert>
 8004de2:	e015      	b.n	8004e10 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004de4:	2300      	movs	r3, #0
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	2300      	movs	r3, #0
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	2100      	movs	r1, #0
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f7ff fd68 	bl	80048c4 <xTimerGenericCommand>
 8004df4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d109      	bne.n	8004e10 <prvSwitchTimerLists+0x98>
 8004dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	603b      	str	r3, [r7, #0]
 8004e0e:	e7fe      	b.n	8004e0e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e10:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <prvSwitchTimerLists+0xc0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1b2      	bne.n	8004d80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e1a:	4b07      	ldr	r3, [pc, #28]	; (8004e38 <prvSwitchTimerLists+0xc0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e20:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <prvSwitchTimerLists+0xc4>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a04      	ldr	r2, [pc, #16]	; (8004e38 <prvSwitchTimerLists+0xc0>)
 8004e26:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e28:	4a04      	ldr	r2, [pc, #16]	; (8004e3c <prvSwitchTimerLists+0xc4>)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	6013      	str	r3, [r2, #0]
}
 8004e2e:	bf00      	nop
 8004e30:	3718      	adds	r7, #24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	20000c18 	.word	0x20000c18
 8004e3c:	20000c1c 	.word	0x20000c1c

08004e40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004e46:	f000 f981 	bl	800514c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004e4a:	4b15      	ldr	r3, [pc, #84]	; (8004ea0 <prvCheckForValidListAndQueue+0x60>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d120      	bne.n	8004e94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004e52:	4814      	ldr	r0, [pc, #80]	; (8004ea4 <prvCheckForValidListAndQueue+0x64>)
 8004e54:	f7fd ff94 	bl	8002d80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e58:	4813      	ldr	r0, [pc, #76]	; (8004ea8 <prvCheckForValidListAndQueue+0x68>)
 8004e5a:	f7fd ff91 	bl	8002d80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e5e:	4b13      	ldr	r3, [pc, #76]	; (8004eac <prvCheckForValidListAndQueue+0x6c>)
 8004e60:	4a10      	ldr	r2, [pc, #64]	; (8004ea4 <prvCheckForValidListAndQueue+0x64>)
 8004e62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e64:	4b12      	ldr	r3, [pc, #72]	; (8004eb0 <prvCheckForValidListAndQueue+0x70>)
 8004e66:	4a10      	ldr	r2, [pc, #64]	; (8004ea8 <prvCheckForValidListAndQueue+0x68>)
 8004e68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <prvCheckForValidListAndQueue+0x74>)
 8004e70:	4a11      	ldr	r2, [pc, #68]	; (8004eb8 <prvCheckForValidListAndQueue+0x78>)
 8004e72:	2110      	movs	r1, #16
 8004e74:	200a      	movs	r0, #10
 8004e76:	f7fe f89f 	bl	8002fb8 <xQueueGenericCreateStatic>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	4b08      	ldr	r3, [pc, #32]	; (8004ea0 <prvCheckForValidListAndQueue+0x60>)
 8004e7e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004e80:	4b07      	ldr	r3, [pc, #28]	; (8004ea0 <prvCheckForValidListAndQueue+0x60>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e88:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <prvCheckForValidListAndQueue+0x60>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	490b      	ldr	r1, [pc, #44]	; (8004ebc <prvCheckForValidListAndQueue+0x7c>)
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fe fca2 	bl	80037d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e94:	f000 f988 	bl	80051a8 <vPortExitCritical>
}
 8004e98:	bf00      	nop
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	20000c20 	.word	0x20000c20
 8004ea4:	20000bf0 	.word	0x20000bf0
 8004ea8:	20000c04 	.word	0x20000c04
 8004eac:	20000c18 	.word	0x20000c18
 8004eb0:	20000c1c 	.word	0x20000c1c
 8004eb4:	20000ccc 	.word	0x20000ccc
 8004eb8:	20000c2c 	.word	0x20000c2c
 8004ebc:	08006374 	.word	0x08006374

08004ec0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08a      	sub	sp, #40	; 0x28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8004ece:	f06f 0301 	mvn.w	r3, #1
 8004ed2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ee0:	4b06      	ldr	r3, [pc, #24]	; (8004efc <xTimerPendFunctionCallFromISR+0x3c>)
 8004ee2:	6818      	ldr	r0, [r3, #0]
 8004ee4:	f107 0114 	add.w	r1, r7, #20
 8004ee8:	2300      	movs	r3, #0
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	f7fe f9f4 	bl	80032d8 <xQueueGenericSendFromISR>
 8004ef0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3728      	adds	r7, #40	; 0x28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	20000c20 	.word	0x20000c20

08004f00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3b04      	subs	r3, #4
 8004f10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	3b04      	subs	r3, #4
 8004f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f023 0201 	bic.w	r2, r3, #1
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	3b04      	subs	r3, #4
 8004f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f30:	4a0c      	ldr	r2, [pc, #48]	; (8004f64 <pxPortInitialiseStack+0x64>)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	3b14      	subs	r3, #20
 8004f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	3b04      	subs	r3, #4
 8004f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f06f 0202 	mvn.w	r2, #2
 8004f4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	3b20      	subs	r3, #32
 8004f54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f56:	68fb      	ldr	r3, [r7, #12]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	08004f69 	.word	0x08004f69

08004f68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f72:	4b11      	ldr	r3, [pc, #68]	; (8004fb8 <prvTaskExitError+0x50>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7a:	d009      	beq.n	8004f90 <prvTaskExitError+0x28>
 8004f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	e7fe      	b.n	8004f8e <prvTaskExitError+0x26>
 8004f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fa2:	bf00      	nop
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0fc      	beq.n	8004fa4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004faa:	bf00      	nop
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	20000008 	.word	0x20000008
 8004fbc:	00000000 	.word	0x00000000

08004fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fc0:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <pxCurrentTCBConst2>)
 8004fc2:	6819      	ldr	r1, [r3, #0]
 8004fc4:	6808      	ldr	r0, [r1, #0]
 8004fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fca:	f380 8809 	msr	PSP, r0
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f04f 0000 	mov.w	r0, #0
 8004fd6:	f380 8811 	msr	BASEPRI, r0
 8004fda:	4770      	bx	lr
 8004fdc:	f3af 8000 	nop.w

08004fe0 <pxCurrentTCBConst2>:
 8004fe0:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop

08004fe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004fe8:	4808      	ldr	r0, [pc, #32]	; (800500c <prvPortStartFirstTask+0x24>)
 8004fea:	6800      	ldr	r0, [r0, #0]
 8004fec:	6800      	ldr	r0, [r0, #0]
 8004fee:	f380 8808 	msr	MSP, r0
 8004ff2:	f04f 0000 	mov.w	r0, #0
 8004ff6:	f380 8814 	msr	CONTROL, r0
 8004ffa:	b662      	cpsie	i
 8004ffc:	b661      	cpsie	f
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	df00      	svc	0
 8005008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800500a:	bf00      	nop
 800500c:	e000ed08 	.word	0xe000ed08

08005010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005016:	4b44      	ldr	r3, [pc, #272]	; (8005128 <xPortStartScheduler+0x118>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a44      	ldr	r2, [pc, #272]	; (800512c <xPortStartScheduler+0x11c>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d109      	bne.n	8005034 <xPortStartScheduler+0x24>
 8005020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	613b      	str	r3, [r7, #16]
 8005032:	e7fe      	b.n	8005032 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005034:	4b3c      	ldr	r3, [pc, #240]	; (8005128 <xPortStartScheduler+0x118>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a3d      	ldr	r2, [pc, #244]	; (8005130 <xPortStartScheduler+0x120>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d109      	bne.n	8005052 <xPortStartScheduler+0x42>
 800503e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	e7fe      	b.n	8005050 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005052:	4b38      	ldr	r3, [pc, #224]	; (8005134 <xPortStartScheduler+0x124>)
 8005054:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	22ff      	movs	r2, #255	; 0xff
 8005062:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	b2db      	uxtb	r3, r3
 800506a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800506c:	78fb      	ldrb	r3, [r7, #3]
 800506e:	b2db      	uxtb	r3, r3
 8005070:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005074:	b2da      	uxtb	r2, r3
 8005076:	4b30      	ldr	r3, [pc, #192]	; (8005138 <xPortStartScheduler+0x128>)
 8005078:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800507a:	4b30      	ldr	r3, [pc, #192]	; (800513c <xPortStartScheduler+0x12c>)
 800507c:	2207      	movs	r2, #7
 800507e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005080:	e009      	b.n	8005096 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005082:	4b2e      	ldr	r3, [pc, #184]	; (800513c <xPortStartScheduler+0x12c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3b01      	subs	r3, #1
 8005088:	4a2c      	ldr	r2, [pc, #176]	; (800513c <xPortStartScheduler+0x12c>)
 800508a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800508c:	78fb      	ldrb	r3, [r7, #3]
 800508e:	b2db      	uxtb	r3, r3
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	b2db      	uxtb	r3, r3
 8005094:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005096:	78fb      	ldrb	r3, [r7, #3]
 8005098:	b2db      	uxtb	r3, r3
 800509a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509e:	2b80      	cmp	r3, #128	; 0x80
 80050a0:	d0ef      	beq.n	8005082 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050a2:	4b26      	ldr	r3, [pc, #152]	; (800513c <xPortStartScheduler+0x12c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f1c3 0307 	rsb	r3, r3, #7
 80050aa:	2b04      	cmp	r3, #4
 80050ac:	d009      	beq.n	80050c2 <xPortStartScheduler+0xb2>
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	60bb      	str	r3, [r7, #8]
 80050c0:	e7fe      	b.n	80050c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050c2:	4b1e      	ldr	r3, [pc, #120]	; (800513c <xPortStartScheduler+0x12c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	021b      	lsls	r3, r3, #8
 80050c8:	4a1c      	ldr	r2, [pc, #112]	; (800513c <xPortStartScheduler+0x12c>)
 80050ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050cc:	4b1b      	ldr	r3, [pc, #108]	; (800513c <xPortStartScheduler+0x12c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050d4:	4a19      	ldr	r2, [pc, #100]	; (800513c <xPortStartScheduler+0x12c>)
 80050d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	b2da      	uxtb	r2, r3
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050e0:	4b17      	ldr	r3, [pc, #92]	; (8005140 <xPortStartScheduler+0x130>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a16      	ldr	r2, [pc, #88]	; (8005140 <xPortStartScheduler+0x130>)
 80050e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050ec:	4b14      	ldr	r3, [pc, #80]	; (8005140 <xPortStartScheduler+0x130>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a13      	ldr	r2, [pc, #76]	; (8005140 <xPortStartScheduler+0x130>)
 80050f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050f8:	f000 f8d6 	bl	80052a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050fc:	4b11      	ldr	r3, [pc, #68]	; (8005144 <xPortStartScheduler+0x134>)
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005102:	f000 f8f5 	bl	80052f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005106:	4b10      	ldr	r3, [pc, #64]	; (8005148 <xPortStartScheduler+0x138>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a0f      	ldr	r2, [pc, #60]	; (8005148 <xPortStartScheduler+0x138>)
 800510c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005110:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005112:	f7ff ff69 	bl	8004fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005116:	f7fe ff65 	bl	8003fe4 <vTaskSwitchContext>
	prvTaskExitError();
 800511a:	f7ff ff25 	bl	8004f68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	e000ed00 	.word	0xe000ed00
 800512c:	410fc271 	.word	0x410fc271
 8005130:	410fc270 	.word	0x410fc270
 8005134:	e000e400 	.word	0xe000e400
 8005138:	20000d1c 	.word	0x20000d1c
 800513c:	20000d20 	.word	0x20000d20
 8005140:	e000ed20 	.word	0xe000ed20
 8005144:	20000008 	.word	0x20000008
 8005148:	e000ef34 	.word	0xe000ef34

0800514c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005164:	4b0e      	ldr	r3, [pc, #56]	; (80051a0 <vPortEnterCritical+0x54>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3301      	adds	r3, #1
 800516a:	4a0d      	ldr	r2, [pc, #52]	; (80051a0 <vPortEnterCritical+0x54>)
 800516c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800516e:	4b0c      	ldr	r3, [pc, #48]	; (80051a0 <vPortEnterCritical+0x54>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d10e      	bne.n	8005194 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005176:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <vPortEnterCritical+0x58>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	d009      	beq.n	8005194 <vPortEnterCritical+0x48>
 8005180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	603b      	str	r3, [r7, #0]
 8005192:	e7fe      	b.n	8005192 <vPortEnterCritical+0x46>
	}
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	20000008 	.word	0x20000008
 80051a4:	e000ed04 	.word	0xe000ed04

080051a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051ae:	4b11      	ldr	r3, [pc, #68]	; (80051f4 <vPortExitCritical+0x4c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d109      	bne.n	80051ca <vPortExitCritical+0x22>
 80051b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ba:	f383 8811 	msr	BASEPRI, r3
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	607b      	str	r3, [r7, #4]
 80051c8:	e7fe      	b.n	80051c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80051ca:	4b0a      	ldr	r3, [pc, #40]	; (80051f4 <vPortExitCritical+0x4c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	4a08      	ldr	r2, [pc, #32]	; (80051f4 <vPortExitCritical+0x4c>)
 80051d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051d4:	4b07      	ldr	r3, [pc, #28]	; (80051f4 <vPortExitCritical+0x4c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d104      	bne.n	80051e6 <vPortExitCritical+0x3e>
 80051dc:	2300      	movs	r3, #0
 80051de:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	20000008 	.word	0x20000008
	...

08005200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005200:	f3ef 8009 	mrs	r0, PSP
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	4b15      	ldr	r3, [pc, #84]	; (8005260 <pxCurrentTCBConst>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	f01e 0f10 	tst.w	lr, #16
 8005210:	bf08      	it	eq
 8005212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800521a:	6010      	str	r0, [r2, #0]
 800521c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005224:	f380 8811 	msr	BASEPRI, r0
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f7fe fed8 	bl	8003fe4 <vTaskSwitchContext>
 8005234:	f04f 0000 	mov.w	r0, #0
 8005238:	f380 8811 	msr	BASEPRI, r0
 800523c:	bc09      	pop	{r0, r3}
 800523e:	6819      	ldr	r1, [r3, #0]
 8005240:	6808      	ldr	r0, [r1, #0]
 8005242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005246:	f01e 0f10 	tst.w	lr, #16
 800524a:	bf08      	it	eq
 800524c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005250:	f380 8809 	msr	PSP, r0
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	f3af 8000 	nop.w

08005260 <pxCurrentTCBConst>:
 8005260:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop

08005268 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005280:	f7fe fdf8 	bl	8003e74 <xTaskIncrementTick>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800528a:	4b06      	ldr	r3, [pc, #24]	; (80052a4 <SysTick_Handler+0x3c>)
 800528c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	2300      	movs	r3, #0
 8005294:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800529c:	bf00      	nop
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	e000ed04 	.word	0xe000ed04

080052a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052ac:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <vPortSetupTimerInterrupt+0x34>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052b2:	4b0b      	ldr	r3, [pc, #44]	; (80052e0 <vPortSetupTimerInterrupt+0x38>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052b8:	4b0a      	ldr	r3, [pc, #40]	; (80052e4 <vPortSetupTimerInterrupt+0x3c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a0a      	ldr	r2, [pc, #40]	; (80052e8 <vPortSetupTimerInterrupt+0x40>)
 80052be:	fba2 2303 	umull	r2, r3, r2, r3
 80052c2:	099b      	lsrs	r3, r3, #6
 80052c4:	4a09      	ldr	r2, [pc, #36]	; (80052ec <vPortSetupTimerInterrupt+0x44>)
 80052c6:	3b01      	subs	r3, #1
 80052c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052ca:	4b04      	ldr	r3, [pc, #16]	; (80052dc <vPortSetupTimerInterrupt+0x34>)
 80052cc:	2207      	movs	r2, #7
 80052ce:	601a      	str	r2, [r3, #0]
}
 80052d0:	bf00      	nop
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	e000e010 	.word	0xe000e010
 80052e0:	e000e018 	.word	0xe000e018
 80052e4:	2000000c 	.word	0x2000000c
 80052e8:	10624dd3 	.word	0x10624dd3
 80052ec:	e000e014 	.word	0xe000e014

080052f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80052f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005300 <vPortEnableVFP+0x10>
 80052f4:	6801      	ldr	r1, [r0, #0]
 80052f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052fa:	6001      	str	r1, [r0, #0]
 80052fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80052fe:	bf00      	nop
 8005300:	e000ed88 	.word	0xe000ed88

08005304 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800530a:	f3ef 8305 	mrs	r3, IPSR
 800530e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2b0f      	cmp	r3, #15
 8005314:	d913      	bls.n	800533e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005316:	4a16      	ldr	r2, [pc, #88]	; (8005370 <vPortValidateInterruptPriority+0x6c>)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4413      	add	r3, r2
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005320:	4b14      	ldr	r3, [pc, #80]	; (8005374 <vPortValidateInterruptPriority+0x70>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	7afa      	ldrb	r2, [r7, #11]
 8005326:	429a      	cmp	r2, r3
 8005328:	d209      	bcs.n	800533e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	607b      	str	r3, [r7, #4]
 800533c:	e7fe      	b.n	800533c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800533e:	4b0e      	ldr	r3, [pc, #56]	; (8005378 <vPortValidateInterruptPriority+0x74>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005346:	4b0d      	ldr	r3, [pc, #52]	; (800537c <vPortValidateInterruptPriority+0x78>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	429a      	cmp	r2, r3
 800534c:	d909      	bls.n	8005362 <vPortValidateInterruptPriority+0x5e>
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	e7fe      	b.n	8005360 <vPortValidateInterruptPriority+0x5c>
	}
 8005362:	bf00      	nop
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	e000e3f0 	.word	0xe000e3f0
 8005374:	20000d1c 	.word	0x20000d1c
 8005378:	e000ed0c 	.word	0xe000ed0c
 800537c:	20000d20 	.word	0x20000d20

08005380 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08a      	sub	sp, #40	; 0x28
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005388:	2300      	movs	r3, #0
 800538a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800538c:	f7fe fcb8 	bl	8003d00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005390:	4b57      	ldr	r3, [pc, #348]	; (80054f0 <pvPortMalloc+0x170>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005398:	f000 f90c 	bl	80055b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800539c:	4b55      	ldr	r3, [pc, #340]	; (80054f4 <pvPortMalloc+0x174>)
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4013      	ands	r3, r2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f040 808c 	bne.w	80054c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d01c      	beq.n	80053ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80053b0:	2208      	movs	r2, #8
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4413      	add	r3, r2
 80053b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d013      	beq.n	80053ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f023 0307 	bic.w	r3, r3, #7
 80053c8:	3308      	adds	r3, #8
 80053ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d009      	beq.n	80053ea <pvPortMalloc+0x6a>
 80053d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	e7fe      	b.n	80053e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d068      	beq.n	80054c2 <pvPortMalloc+0x142>
 80053f0:	4b41      	ldr	r3, [pc, #260]	; (80054f8 <pvPortMalloc+0x178>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d863      	bhi.n	80054c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053fa:	4b40      	ldr	r3, [pc, #256]	; (80054fc <pvPortMalloc+0x17c>)
 80053fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053fe:	4b3f      	ldr	r3, [pc, #252]	; (80054fc <pvPortMalloc+0x17c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005404:	e004      	b.n	8005410 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	429a      	cmp	r2, r3
 8005418:	d903      	bls.n	8005422 <pvPortMalloc+0xa2>
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f1      	bne.n	8005406 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005422:	4b33      	ldr	r3, [pc, #204]	; (80054f0 <pvPortMalloc+0x170>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005428:	429a      	cmp	r2, r3
 800542a:	d04a      	beq.n	80054c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2208      	movs	r2, #8
 8005432:	4413      	add	r3, r2
 8005434:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	1ad2      	subs	r2, r2, r3
 8005446:	2308      	movs	r3, #8
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	429a      	cmp	r2, r3
 800544c:	d91e      	bls.n	800548c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800544e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4413      	add	r3, r2
 8005454:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	2b00      	cmp	r3, #0
 800545e:	d009      	beq.n	8005474 <pvPortMalloc+0xf4>
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	613b      	str	r3, [r7, #16]
 8005472:	e7fe      	b.n	8005472 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	1ad2      	subs	r2, r2, r3
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005486:	69b8      	ldr	r0, [r7, #24]
 8005488:	f000 f8f6 	bl	8005678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800548c:	4b1a      	ldr	r3, [pc, #104]	; (80054f8 <pvPortMalloc+0x178>)
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	4a18      	ldr	r2, [pc, #96]	; (80054f8 <pvPortMalloc+0x178>)
 8005498:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800549a:	4b17      	ldr	r3, [pc, #92]	; (80054f8 <pvPortMalloc+0x178>)
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	4b18      	ldr	r3, [pc, #96]	; (8005500 <pvPortMalloc+0x180>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d203      	bcs.n	80054ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054a6:	4b14      	ldr	r3, [pc, #80]	; (80054f8 <pvPortMalloc+0x178>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a15      	ldr	r2, [pc, #84]	; (8005500 <pvPortMalloc+0x180>)
 80054ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	4b10      	ldr	r3, [pc, #64]	; (80054f4 <pvPortMalloc+0x174>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	431a      	orrs	r2, r3
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	2200      	movs	r2, #0
 80054c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80054c2:	f7fe fc2b 	bl	8003d1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d009      	beq.n	80054e4 <pvPortMalloc+0x164>
 80054d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	e7fe      	b.n	80054e2 <pvPortMalloc+0x162>
	return pvReturn;
 80054e4:	69fb      	ldr	r3, [r7, #28]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3728      	adds	r7, #40	; 0x28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	2000492c 	.word	0x2000492c
 80054f4:	20004938 	.word	0x20004938
 80054f8:	20004930 	.word	0x20004930
 80054fc:	20004924 	.word	0x20004924
 8005500:	20004934 	.word	0x20004934

08005504 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d046      	beq.n	80055a4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005516:	2308      	movs	r3, #8
 8005518:	425b      	negs	r3, r3
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	4413      	add	r3, r2
 800551e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	4b20      	ldr	r3, [pc, #128]	; (80055ac <vPortFree+0xa8>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4013      	ands	r3, r2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d109      	bne.n	8005546 <vPortFree+0x42>
 8005532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	e7fe      	b.n	8005544 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d009      	beq.n	8005562 <vPortFree+0x5e>
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	60bb      	str	r3, [r7, #8]
 8005560:	e7fe      	b.n	8005560 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	4b11      	ldr	r3, [pc, #68]	; (80055ac <vPortFree+0xa8>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4013      	ands	r3, r2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d019      	beq.n	80055a4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d115      	bne.n	80055a4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	4b0b      	ldr	r3, [pc, #44]	; (80055ac <vPortFree+0xa8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	43db      	mvns	r3, r3
 8005582:	401a      	ands	r2, r3
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005588:	f7fe fbba 	bl	8003d00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <vPortFree+0xac>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4413      	add	r3, r2
 8005596:	4a06      	ldr	r2, [pc, #24]	; (80055b0 <vPortFree+0xac>)
 8005598:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800559a:	6938      	ldr	r0, [r7, #16]
 800559c:	f000 f86c 	bl	8005678 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80055a0:	f7fe fbbc 	bl	8003d1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055a4:	bf00      	nop
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	20004938 	.word	0x20004938
 80055b0:	20004930 	.word	0x20004930

080055b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80055be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80055c0:	4b27      	ldr	r3, [pc, #156]	; (8005660 <prvHeapInit+0xac>)
 80055c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00c      	beq.n	80055e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3307      	adds	r3, #7
 80055d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0307 	bic.w	r3, r3, #7
 80055da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	4a1f      	ldr	r2, [pc, #124]	; (8005660 <prvHeapInit+0xac>)
 80055e4:	4413      	add	r3, r2
 80055e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055ec:	4a1d      	ldr	r2, [pc, #116]	; (8005664 <prvHeapInit+0xb0>)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055f2:	4b1c      	ldr	r3, [pc, #112]	; (8005664 <prvHeapInit+0xb0>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	4413      	add	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005600:	2208      	movs	r2, #8
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	1a9b      	subs	r3, r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0307 	bic.w	r3, r3, #7
 800560e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4a15      	ldr	r2, [pc, #84]	; (8005668 <prvHeapInit+0xb4>)
 8005614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005616:	4b14      	ldr	r3, [pc, #80]	; (8005668 <prvHeapInit+0xb4>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2200      	movs	r2, #0
 800561c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800561e:	4b12      	ldr	r3, [pc, #72]	; (8005668 <prvHeapInit+0xb4>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2200      	movs	r2, #0
 8005624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	1ad2      	subs	r2, r2, r3
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005634:	4b0c      	ldr	r3, [pc, #48]	; (8005668 <prvHeapInit+0xb4>)
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	4a0a      	ldr	r2, [pc, #40]	; (800566c <prvHeapInit+0xb8>)
 8005642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	4a09      	ldr	r2, [pc, #36]	; (8005670 <prvHeapInit+0xbc>)
 800564a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800564c:	4b09      	ldr	r3, [pc, #36]	; (8005674 <prvHeapInit+0xc0>)
 800564e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005652:	601a      	str	r2, [r3, #0]
}
 8005654:	bf00      	nop
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	20000d24 	.word	0x20000d24
 8005664:	20004924 	.word	0x20004924
 8005668:	2000492c 	.word	0x2000492c
 800566c:	20004934 	.word	0x20004934
 8005670:	20004930 	.word	0x20004930
 8005674:	20004938 	.word	0x20004938

08005678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005680:	4b28      	ldr	r3, [pc, #160]	; (8005724 <prvInsertBlockIntoFreeList+0xac>)
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	e002      	b.n	800568c <prvInsertBlockIntoFreeList+0x14>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	429a      	cmp	r2, r3
 8005694:	d8f7      	bhi.n	8005686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	4413      	add	r3, r2
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d108      	bne.n	80056ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	441a      	add	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	441a      	add	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d118      	bne.n	8005700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	4b15      	ldr	r3, [pc, #84]	; (8005728 <prvInsertBlockIntoFreeList+0xb0>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d00d      	beq.n	80056f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	441a      	add	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	e008      	b.n	8005708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056f6:	4b0c      	ldr	r3, [pc, #48]	; (8005728 <prvInsertBlockIntoFreeList+0xb0>)
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	e003      	b.n	8005708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	429a      	cmp	r2, r3
 800570e:	d002      	beq.n	8005716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005716:	bf00      	nop
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	20004924 	.word	0x20004924
 8005728:	2000492c 	.word	0x2000492c

0800572c <doStateMachine>:
extern osThreadId_t StateMachineHandle;
extern TIM_HandleTypeDef htim2;
extern osEventFlagsId_t pushbutton_flags;

//basically our main code goes here
void doStateMachine(void *argument) {
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
	uint32_t tick1, tick2;

	pushbutton_init();
 8005734:	f000 fa70 	bl	8005c18 <pushbutton_init>
	tick1 = HAL_GetTick();
 8005738:	f7fa ff08 	bl	800054c <HAL_GetTick>
 800573c:	6178      	str	r0, [r7, #20]

	osEventFlagsWait(pushbutton_flags, BUTTON_RELEASED, osFlagsWaitAny, osWaitForever); //make sure the button has a valid state
 800573e:	4b2a      	ldr	r3, [pc, #168]	; (80057e8 <doStateMachine+0xbc>)
 8005740:	6818      	ldr	r0, [r3, #0]
 8005742:	f04f 33ff 	mov.w	r3, #4294967295
 8005746:	2200      	movs	r2, #0
 8005748:	2101      	movs	r1, #1
 800574a:	f7fd f80f 	bl	800276c <osEventFlagsWait>
	osEventFlagsClear(pushbutton_flags, BUTTON_FLAGS_ALL); //clear all button flags, mostly the long press flag
 800574e:	4b26      	ldr	r3, [pc, #152]	; (80057e8 <doStateMachine+0xbc>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	210f      	movs	r1, #15
 8005754:	4618      	mov	r0, r3
 8005756:	f7fc ff91 	bl	800267c <osEventFlagsClear>

	osEventFlagsWait(pushbutton_flags, BUTTON_LONG_PRESSED, osFlagsWaitAny, osWaitForever); //precharge for 5 seconds
 800575a:	4b23      	ldr	r3, [pc, #140]	; (80057e8 <doStateMachine+0xbc>)
 800575c:	6818      	ldr	r0, [r3, #0]
 800575e:	f04f 33ff 	mov.w	r3, #4294967295
 8005762:	2200      	movs	r2, #0
 8005764:	2108      	movs	r1, #8
 8005766:	f7fd f801 	bl	800276c <osEventFlagsWait>
	HAL_GPIO_WritePin(FET_DRV_GPIO_Port, FET_DRV_Pin, GPIO_PIN_SET); //enable the high side FETs
 800576a:	2201      	movs	r2, #1
 800576c:	2104      	movs	r1, #4
 800576e:	481f      	ldr	r0, [pc, #124]	; (80057ec <doStateMachine+0xc0>)
 8005770:	f7fb f974 	bl	8000a5c <HAL_GPIO_WritePin>

	pushbutton_led_on();
 8005774:	f000 faa2 	bl	8005cbc <pushbutton_led_on>
	osDelay(2000);
 8005778:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800577c:	f7fc fea6 	bl	80024cc <osDelay>
	pushbutton_led_off();
 8005780:	f000 faa8 	bl	8005cd4 <pushbutton_led_off>
	osDelay(2000);
 8005784:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005788:	f7fc fea0 	bl	80024cc <osDelay>
	pushbutton_led_flash();
 800578c:	f000 faba 	bl	8005d04 <pushbutton_led_flash>
	osDelay(5000);
 8005790:	f241 3088 	movw	r0, #5000	; 0x1388
 8005794:	f7fc fe9a 	bl	80024cc <osDelay>
	pushbutton_led_on();
 8005798:	f000 fa90 	bl	8005cbc <pushbutton_led_on>
	osDelay(2000);
 800579c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80057a0:	f7fc fe94 	bl	80024cc <osDelay>
	pushbutton_led_fade();
 80057a4:	f000 faa2 	bl	8005cec <pushbutton_led_fade>
	osDelay(5000);
 80057a8:	f241 3088 	movw	r0, #5000	; 0x1388
 80057ac:	f7fc fe8e 	bl	80024cc <osDelay>
	tick2 = HAL_GetTick();
 80057b0:	f7fa fecc 	bl	800054c <HAL_GetTick>
 80057b4:	6138      	str	r0, [r7, #16]

	uint32_t stack;
	stack = led_stack_space();
 80057b6:	f000 fabd 	bl	8005d34 <led_stack_space>
 80057ba:	60f8      	str	r0, [r7, #12]
	stack = pushbutton_stack_space();
 80057bc:	f000 faae 	bl	8005d1c <pushbutton_stack_space>
 80057c0:	60f8      	str	r0, [r7, #12]

	pushbutton_led_off();
 80057c2:	f000 fa87 	bl	8005cd4 <pushbutton_led_off>
	osEventFlagsClear(pushbutton_flags, BUTTON_FLAGS_ALL);
 80057c6:	4b08      	ldr	r3, [pc, #32]	; (80057e8 <doStateMachine+0xbc>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	210f      	movs	r1, #15
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fc ff55 	bl	800267c <osEventFlagsClear>
	while(1) {
		HAL_GPIO_TogglePin(CC_CHAN_1_GPIO_Port, CC_CHAN_1_Pin);
 80057d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80057d6:	4806      	ldr	r0, [pc, #24]	; (80057f0 <doStateMachine+0xc4>)
 80057d8:	f7fb f959 	bl	8000a8e <HAL_GPIO_TogglePin>
		osDelay(1000);
 80057dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80057e0:	f7fc fe74 	bl	80024cc <osDelay>
		HAL_GPIO_TogglePin(CC_CHAN_1_GPIO_Port, CC_CHAN_1_Pin);
 80057e4:	e7f5      	b.n	80057d2 <doStateMachine+0xa6>
 80057e6:	bf00      	nop
 80057e8:	2000498c 	.word	0x2000498c
 80057ec:	40020800 	.word	0x40020800
 80057f0:	40020400 	.word	0x40020400

080057f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80057f8:	f7fa fe72 	bl	80004e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80057fc:	f000 f81e 	bl	800583c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005800:	f000 f956 	bl	8005ab0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8005804:	f000 f884 	bl	8005910 <MX_TIM2_Init>
  MX_TIM5_Init();
 8005808:	f000 f8f8 	bl	80059fc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11);
 800580c:	4807      	ldr	r0, [pc, #28]	; (800582c <main+0x38>)
 800580e:	f7fb fe04 	bl	800141a <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8005812:	f7fc fd1d 	bl	8002250 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StateMachine */
  StateMachineHandle = osThreadNew(doStateMachine, NULL, &StateMachine_attributes);
 8005816:	4a06      	ldr	r2, [pc, #24]	; (8005830 <main+0x3c>)
 8005818:	2100      	movs	r1, #0
 800581a:	4806      	ldr	r0, [pc, #24]	; (8005834 <main+0x40>)
 800581c:	f7fc fd82 	bl	8002324 <osThreadNew>
 8005820:	4602      	mov	r2, r0
 8005822:	4b05      	ldr	r3, [pc, #20]	; (8005838 <main+0x44>)
 8005824:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8005826:	f7fc fd47 	bl	80022b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800582a:	e7fe      	b.n	800582a <main+0x36>
 800582c:	20004a14 	.word	0x20004a14
 8005830:	08006398 	.word	0x08006398
 8005834:	0800572d 	.word	0x0800572d
 8005838:	200049d0 	.word	0x200049d0

0800583c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b094      	sub	sp, #80	; 0x50
 8005840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005842:	f107 0320 	add.w	r3, r7, #32
 8005846:	2230      	movs	r2, #48	; 0x30
 8005848:	2100      	movs	r1, #0
 800584a:	4618      	mov	r0, r3
 800584c:	f000 fd75 	bl	800633a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005850:	f107 030c 	add.w	r3, r7, #12
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	605a      	str	r2, [r3, #4]
 800585a:	609a      	str	r2, [r3, #8]
 800585c:	60da      	str	r2, [r3, #12]
 800585e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005860:	2300      	movs	r3, #0
 8005862:	60bb      	str	r3, [r7, #8]
 8005864:	4b28      	ldr	r3, [pc, #160]	; (8005908 <SystemClock_Config+0xcc>)
 8005866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005868:	4a27      	ldr	r2, [pc, #156]	; (8005908 <SystemClock_Config+0xcc>)
 800586a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800586e:	6413      	str	r3, [r2, #64]	; 0x40
 8005870:	4b25      	ldr	r3, [pc, #148]	; (8005908 <SystemClock_Config+0xcc>)
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005878:	60bb      	str	r3, [r7, #8]
 800587a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800587c:	2300      	movs	r3, #0
 800587e:	607b      	str	r3, [r7, #4]
 8005880:	4b22      	ldr	r3, [pc, #136]	; (800590c <SystemClock_Config+0xd0>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005888:	4a20      	ldr	r2, [pc, #128]	; (800590c <SystemClock_Config+0xd0>)
 800588a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	4b1e      	ldr	r3, [pc, #120]	; (800590c <SystemClock_Config+0xd0>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005898:	607b      	str	r3, [r7, #4]
 800589a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800589c:	2301      	movs	r3, #1
 800589e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80058a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80058a6:	2302      	movs	r3, #2
 80058a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80058aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80058ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80058b0:	2304      	movs	r3, #4
 80058b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80058b4:	2340      	movs	r3, #64	; 0x40
 80058b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80058b8:	2302      	movs	r3, #2
 80058ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80058bc:	2304      	movs	r3, #4
 80058be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80058c0:	f107 0320 	add.w	r3, r7, #32
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fb f8fd 	bl	8000ac4 <HAL_RCC_OscConfig>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80058d0:	f000 f99a 	bl	8005c08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80058d4:	230f      	movs	r3, #15
 80058d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80058d8:	2302      	movs	r3, #2
 80058da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80058dc:	2300      	movs	r3, #0
 80058de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80058e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80058e6:	2300      	movs	r3, #0
 80058e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80058ea:	f107 030c 	add.w	r3, r7, #12
 80058ee:	2102      	movs	r1, #2
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7fb fb57 	bl	8000fa4 <HAL_RCC_ClockConfig>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80058fc:	f000 f984 	bl	8005c08 <Error_Handler>
  }
}
 8005900:	bf00      	nop
 8005902:	3750      	adds	r7, #80	; 0x50
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	40023800 	.word	0x40023800
 800590c:	40007000 	.word	0x40007000

08005910 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08e      	sub	sp, #56	; 0x38
 8005914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005916:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800591a:	2200      	movs	r2, #0
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	605a      	str	r2, [r3, #4]
 8005920:	609a      	str	r2, [r3, #8]
 8005922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005924:	f107 0320 	add.w	r3, r7, #32
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800592e:	1d3b      	adds	r3, r7, #4
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	605a      	str	r2, [r3, #4]
 8005936:	609a      	str	r2, [r3, #8]
 8005938:	60da      	str	r2, [r3, #12]
 800593a:	611a      	str	r2, [r3, #16]
 800593c:	615a      	str	r2, [r3, #20]
 800593e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005940:	4b2d      	ldr	r3, [pc, #180]	; (80059f8 <MX_TIM2_Init+0xe8>)
 8005942:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005946:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8005948:	4b2b      	ldr	r3, [pc, #172]	; (80059f8 <MX_TIM2_Init+0xe8>)
 800594a:	2240      	movs	r2, #64	; 0x40
 800594c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800594e:	4b2a      	ldr	r3, [pc, #168]	; (80059f8 <MX_TIM2_Init+0xe8>)
 8005950:	2200      	movs	r2, #0
 8005952:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8005954:	4b28      	ldr	r3, [pc, #160]	; (80059f8 <MX_TIM2_Init+0xe8>)
 8005956:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800595a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800595c:	4b26      	ldr	r3, [pc, #152]	; (80059f8 <MX_TIM2_Init+0xe8>)
 800595e:	2200      	movs	r2, #0
 8005960:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005962:	4b25      	ldr	r3, [pc, #148]	; (80059f8 <MX_TIM2_Init+0xe8>)
 8005964:	2200      	movs	r2, #0
 8005966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005968:	4823      	ldr	r0, [pc, #140]	; (80059f8 <MX_TIM2_Init+0xe8>)
 800596a:	f7fb fd2b 	bl	80013c4 <HAL_TIM_Base_Init>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8005974:	f000 f948 	bl	8005c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800597c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800597e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005982:	4619      	mov	r1, r3
 8005984:	481c      	ldr	r0, [pc, #112]	; (80059f8 <MX_TIM2_Init+0xe8>)
 8005986:	f7fc f82d 	bl	80019e4 <HAL_TIM_ConfigClockSource>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8005990:	f000 f93a 	bl	8005c08 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8005994:	4818      	ldr	r0, [pc, #96]	; (80059f8 <MX_TIM2_Init+0xe8>)
 8005996:	f7fb fd64 	bl	8001462 <HAL_TIM_OC_Init>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80059a0:	f000 f932 	bl	8005c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059a4:	2300      	movs	r3, #0
 80059a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059a8:	2300      	movs	r3, #0
 80059aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80059ac:	f107 0320 	add.w	r3, r7, #32
 80059b0:	4619      	mov	r1, r3
 80059b2:	4811      	ldr	r0, [pc, #68]	; (80059f8 <MX_TIM2_Init+0xe8>)
 80059b4:	f7fc fbc2 	bl	800213c <HAL_TIMEx_MasterConfigSynchronization>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80059be:	f000 f923 	bl	8005c08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80059c2:	2330      	movs	r3, #48	; 0x30
 80059c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80059c6:	2300      	movs	r3, #0
 80059c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80059ca:	2300      	movs	r3, #0
 80059cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80059ce:	2300      	movs	r3, #0
 80059d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80059d2:	1d3b      	adds	r3, r7, #4
 80059d4:	2208      	movs	r2, #8
 80059d6:	4619      	mov	r1, r3
 80059d8:	4807      	ldr	r0, [pc, #28]	; (80059f8 <MX_TIM2_Init+0xe8>)
 80059da:	f7fb fedd 	bl	8001798 <HAL_TIM_OC_ConfigChannel>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80059e4:	f000 f910 	bl	8005c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80059e8:	4803      	ldr	r0, [pc, #12]	; (80059f8 <MX_TIM2_Init+0xe8>)
 80059ea:	f000 fb5b 	bl	80060a4 <HAL_TIM_MspPostInit>

}
 80059ee:	bf00      	nop
 80059f0:	3738      	adds	r7, #56	; 0x38
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	200049d4 	.word	0x200049d4

080059fc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08a      	sub	sp, #40	; 0x28
 8005a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a02:	f107 0320 	add.w	r3, r7, #32
 8005a06:	2200      	movs	r2, #0
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a0c:	1d3b      	adds	r3, r7, #4
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	605a      	str	r2, [r3, #4]
 8005a14:	609a      	str	r2, [r3, #8]
 8005a16:	60da      	str	r2, [r3, #12]
 8005a18:	611a      	str	r2, [r3, #16]
 8005a1a:	615a      	str	r2, [r3, #20]
 8005a1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005a1e:	4b22      	ldr	r3, [pc, #136]	; (8005aa8 <MX_TIM5_Init+0xac>)
 8005a20:	4a22      	ldr	r2, [pc, #136]	; (8005aac <MX_TIM5_Init+0xb0>)
 8005a22:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63;
 8005a24:	4b20      	ldr	r3, [pc, #128]	; (8005aa8 <MX_TIM5_Init+0xac>)
 8005a26:	223f      	movs	r2, #63	; 0x3f
 8005a28:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a2a:	4b1f      	ldr	r3, [pc, #124]	; (8005aa8 <MX_TIM5_Init+0xac>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8005a30:	4b1d      	ldr	r3, [pc, #116]	; (8005aa8 <MX_TIM5_Init+0xac>)
 8005a32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a36:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a38:	4b1b      	ldr	r3, [pc, #108]	; (8005aa8 <MX_TIM5_Init+0xac>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a3e:	4b1a      	ldr	r3, [pc, #104]	; (8005aa8 <MX_TIM5_Init+0xac>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8005a44:	4818      	ldr	r0, [pc, #96]	; (8005aa8 <MX_TIM5_Init+0xac>)
 8005a46:	f7fb fd41 	bl	80014cc <HAL_TIM_PWM_Init>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8005a50:	f000 f8da 	bl	8005c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a54:	2300      	movs	r3, #0
 8005a56:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005a5c:	f107 0320 	add.w	r3, r7, #32
 8005a60:	4619      	mov	r1, r3
 8005a62:	4811      	ldr	r0, [pc, #68]	; (8005aa8 <MX_TIM5_Init+0xac>)
 8005a64:	f7fc fb6a 	bl	800213c <HAL_TIMEx_MasterConfigSynchronization>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8005a6e:	f000 f8cb 	bl	8005c08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a72:	2360      	movs	r3, #96	; 0x60
 8005a74:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 127;
 8005a76:	237f      	movs	r3, #127	; 0x7f
 8005a78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005a82:	1d3b      	adds	r3, r7, #4
 8005a84:	2200      	movs	r2, #0
 8005a86:	4619      	mov	r1, r3
 8005a88:	4807      	ldr	r0, [pc, #28]	; (8005aa8 <MX_TIM5_Init+0xac>)
 8005a8a:	f7fb fee5 	bl	8001858 <HAL_TIM_PWM_ConfigChannel>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8005a94:	f000 f8b8 	bl	8005c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8005a98:	4803      	ldr	r0, [pc, #12]	; (8005aa8 <MX_TIM5_Init+0xac>)
 8005a9a:	f000 fb03 	bl	80060a4 <HAL_TIM_MspPostInit>

}
 8005a9e:	bf00      	nop
 8005aa0:	3728      	adds	r7, #40	; 0x28
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20004990 	.word	0x20004990
 8005aac:	40000c00 	.word	0x40000c00

08005ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b08a      	sub	sp, #40	; 0x28
 8005ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ab6:	f107 0314 	add.w	r3, r7, #20
 8005aba:	2200      	movs	r2, #0
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	605a      	str	r2, [r3, #4]
 8005ac0:	609a      	str	r2, [r3, #8]
 8005ac2:	60da      	str	r2, [r3, #12]
 8005ac4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	613b      	str	r3, [r7, #16]
 8005aca:	4b42      	ldr	r3, [pc, #264]	; (8005bd4 <MX_GPIO_Init+0x124>)
 8005acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ace:	4a41      	ldr	r2, [pc, #260]	; (8005bd4 <MX_GPIO_Init+0x124>)
 8005ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ad6:	4b3f      	ldr	r3, [pc, #252]	; (8005bd4 <MX_GPIO_Init+0x124>)
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ade:	613b      	str	r3, [r7, #16]
 8005ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	4b3b      	ldr	r3, [pc, #236]	; (8005bd4 <MX_GPIO_Init+0x124>)
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aea:	4a3a      	ldr	r2, [pc, #232]	; (8005bd4 <MX_GPIO_Init+0x124>)
 8005aec:	f043 0304 	orr.w	r3, r3, #4
 8005af0:	6313      	str	r3, [r2, #48]	; 0x30
 8005af2:	4b38      	ldr	r3, [pc, #224]	; (8005bd4 <MX_GPIO_Init+0x124>)
 8005af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	60fb      	str	r3, [r7, #12]
 8005afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005afe:	2300      	movs	r3, #0
 8005b00:	60bb      	str	r3, [r7, #8]
 8005b02:	4b34      	ldr	r3, [pc, #208]	; (8005bd4 <MX_GPIO_Init+0x124>)
 8005b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b06:	4a33      	ldr	r2, [pc, #204]	; (8005bd4 <MX_GPIO_Init+0x124>)
 8005b08:	f043 0301 	orr.w	r3, r3, #1
 8005b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b0e:	4b31      	ldr	r3, [pc, #196]	; (8005bd4 <MX_GPIO_Init+0x124>)
 8005b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	60bb      	str	r3, [r7, #8]
 8005b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	607b      	str	r3, [r7, #4]
 8005b1e:	4b2d      	ldr	r3, [pc, #180]	; (8005bd4 <MX_GPIO_Init+0x124>)
 8005b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b22:	4a2c      	ldr	r2, [pc, #176]	; (8005bd4 <MX_GPIO_Init+0x124>)
 8005b24:	f043 0302 	orr.w	r3, r3, #2
 8005b28:	6313      	str	r3, [r2, #48]	; 0x30
 8005b2a:	4b2a      	ldr	r3, [pc, #168]	; (8005bd4 <MX_GPIO_Init+0x124>)
 8005b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	607b      	str	r3, [r7, #4]
 8005b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FET_DRV_Pin|LED2_Pin|LED5_Pin|LED4_Pin
 8005b36:	2200      	movs	r2, #0
 8005b38:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 8005b3c:	4826      	ldr	r0, [pc, #152]	; (8005bd8 <MX_GPIO_Init+0x128>)
 8005b3e:	f7fa ff8d 	bl	8000a5c <HAL_GPIO_WritePin>
                          |LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED0_Pin|LED3_Pin|CC_CHAN_2_Pin
 8005b42:	2200      	movs	r2, #0
 8005b44:	f44f 4163 	mov.w	r1, #58112	; 0xe300
 8005b48:	4824      	ldr	r0, [pc, #144]	; (8005bdc <MX_GPIO_Init+0x12c>)
 8005b4a:	f7fa ff87 	bl	8000a5c <HAL_GPIO_WritePin>
                          |CC_CHAN_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED6_Pin|LED9_Pin|LED8_Pin, GPIO_PIN_RESET);
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005b54:	4822      	ldr	r0, [pc, #136]	; (8005be0 <MX_GPIO_Init+0x130>)
 8005b56:	f7fa ff81 	bl	8000a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FET_DRV_Pin LED2_Pin LED5_Pin LED4_Pin
                           LED7_Pin */
  GPIO_InitStruct.Pin = FET_DRV_Pin|LED2_Pin|LED5_Pin|LED4_Pin
 8005b5a:	f44f 7371 	mov.w	r3, #964	; 0x3c4
 8005b5e:	617b      	str	r3, [r7, #20]
                          |LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b60:	2301      	movs	r3, #1
 8005b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b64:	2300      	movs	r3, #0
 8005b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b6c:	f107 0314 	add.w	r3, r7, #20
 8005b70:	4619      	mov	r1, r3
 8005b72:	4819      	ldr	r0, [pc, #100]	; (8005bd8 <MX_GPIO_Init+0x128>)
 8005b74:	f7fa fdd8 	bl	8000728 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB_IN_Pin */
  GPIO_InitStruct.Pin = PB_IN_Pin;
 8005b78:	2308      	movs	r3, #8
 8005b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b80:	2301      	movs	r3, #1
 8005b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB_IN_GPIO_Port, &GPIO_InitStruct);
 8005b84:	f107 0314 	add.w	r3, r7, #20
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4813      	ldr	r0, [pc, #76]	; (8005bd8 <MX_GPIO_Init+0x128>)
 8005b8c:	f7fa fdcc 	bl	8000728 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED0_Pin LED3_Pin CC_CHAN_2_Pin
                           CC_CHAN_1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED0_Pin|LED3_Pin|CC_CHAN_2_Pin
 8005b90:	f44f 4363 	mov.w	r3, #58112	; 0xe300
 8005b94:	617b      	str	r3, [r7, #20]
                          |CC_CHAN_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b96:	2301      	movs	r3, #1
 8005b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ba2:	f107 0314 	add.w	r3, r7, #20
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	480c      	ldr	r0, [pc, #48]	; (8005bdc <MX_GPIO_Init+0x12c>)
 8005baa:	f7fa fdbd 	bl	8000728 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED6_Pin LED9_Pin LED8_Pin */
  GPIO_InitStruct.Pin = LED6_Pin|LED9_Pin|LED8_Pin;
 8005bae:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bc0:	f107 0314 	add.w	r3, r7, #20
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	4806      	ldr	r0, [pc, #24]	; (8005be0 <MX_GPIO_Init+0x130>)
 8005bc8:	f7fa fdae 	bl	8000728 <HAL_GPIO_Init>

}
 8005bcc:	bf00      	nop
 8005bce:	3728      	adds	r7, #40	; 0x28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	40023800 	.word	0x40023800
 8005bd8:	40020800 	.word	0x40020800
 8005bdc:	40020400 	.word	0x40020400
 8005be0:	40020000 	.word	0x40020000

08005be4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a04      	ldr	r2, [pc, #16]	; (8005c04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d101      	bne.n	8005bfa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005bf6:	f7fa fc95 	bl	8000524 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005bfa:	bf00      	nop
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	40014800 	.word	0x40014800

08005c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005c0c:	bf00      	nop
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
	...

08005c18 <pushbutton_init>:
static void do_led_fade();
static void do_led_flash();


//============= PUBLIC FUNCTION DEFINITIONS =============
void pushbutton_init() {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b092      	sub	sp, #72	; 0x48
 8005c1c:	af00      	add	r7, sp, #0
	//initialize the signal flags for the LED thread and the pushbutton status flags
	led_action_flags = osEventFlagsNew(NULL);
 8005c1e:	2000      	movs	r0, #0
 8005c20:	f7fc fc82 	bl	8002528 <osEventFlagsNew>
 8005c24:	4602      	mov	r2, r0
 8005c26:	4b1d      	ldr	r3, [pc, #116]	; (8005c9c <pushbutton_init+0x84>)
 8005c28:	601a      	str	r2, [r3, #0]
	pushbutton_flags = osEventFlagsNew(NULL);
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	f7fc fc7c 	bl	8002528 <osEventFlagsNew>
 8005c30:	4602      	mov	r2, r0
 8005c32:	4b1b      	ldr	r3, [pc, #108]	; (8005ca0 <pushbutton_init+0x88>)
 8005c34:	601a      	str	r2, [r3, #0]

	//initialize the led thread
	const osThreadAttr_t led_attributes = {
 8005c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c3a:	2224      	movs	r2, #36	; 0x24
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 fb7b 	bl	800633a <memset>
 8005c44:	4b17      	ldr	r3, [pc, #92]	; (8005ca4 <pushbutton_init+0x8c>)
 8005c46:	627b      	str	r3, [r7, #36]	; 0x24
 8005c48:	f44f 7390 	mov.w	r3, #288	; 0x120
 8005c4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c4e:	2318      	movs	r3, #24
 8005c50:	63fb      	str	r3, [r7, #60]	; 0x3c
			.name = "led",
			.priority = (osPriority_t) osPriorityNormal,
			.stack_size = 288
	};
	led_thread_handle = osThreadNew(led_thread, NULL, &led_attributes);
 8005c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c56:	461a      	mov	r2, r3
 8005c58:	2100      	movs	r1, #0
 8005c5a:	4813      	ldr	r0, [pc, #76]	; (8005ca8 <pushbutton_init+0x90>)
 8005c5c:	f7fc fb62 	bl	8002324 <osThreadNew>
 8005c60:	4602      	mov	r2, r0
 8005c62:	4b12      	ldr	r3, [pc, #72]	; (8005cac <pushbutton_init+0x94>)
 8005c64:	601a      	str	r2, [r3, #0]

	//initialize the main button thread
	const osThreadAttr_t button_attributes = {
 8005c66:	463b      	mov	r3, r7
 8005c68:	2224      	movs	r2, #36	; 0x24
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 fb64 	bl	800633a <memset>
 8005c72:	4b0f      	ldr	r3, [pc, #60]	; (8005cb0 <pushbutton_init+0x98>)
 8005c74:	603b      	str	r3, [r7, #0]
 8005c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	2320      	movs	r3, #32
 8005c7e:	61bb      	str	r3, [r7, #24]
			.name = "button",
			.priority = (osPriority_t) osPriorityAboveNormal,
			.stack_size = 256
	};
	button_thread_handle = osThreadNew(button_thread, NULL, &button_attributes);
 8005c80:	463b      	mov	r3, r7
 8005c82:	461a      	mov	r2, r3
 8005c84:	2100      	movs	r1, #0
 8005c86:	480b      	ldr	r0, [pc, #44]	; (8005cb4 <pushbutton_init+0x9c>)
 8005c88:	f7fc fb4c 	bl	8002324 <osThreadNew>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	4b0a      	ldr	r3, [pc, #40]	; (8005cb8 <pushbutton_init+0xa0>)
 8005c90:	601a      	str	r2, [r3, #0]
}
 8005c92:	bf00      	nop
 8005c94:	3748      	adds	r7, #72	; 0x48
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	2000493c 	.word	0x2000493c
 8005ca0:	2000498c 	.word	0x2000498c
 8005ca4:	0800638c 	.word	0x0800638c
 8005ca8:	08005e31 	.word	0x08005e31
 8005cac:	20004940 	.word	0x20004940
 8005cb0:	08006390 	.word	0x08006390
 8005cb4:	08005d4d 	.word	0x08005d4d
 8005cb8:	20004944 	.word	0x20004944

08005cbc <pushbutton_led_on>:

void pushbutton_led_on() {osEventFlagsSet(led_action_flags, BIT_LED_ON); }
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	4b03      	ldr	r3, [pc, #12]	; (8005cd0 <pushbutton_led_on+0x14>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fc fc80 	bl	80025cc <osEventFlagsSet>
 8005ccc:	bf00      	nop
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	2000493c 	.word	0x2000493c

08005cd4 <pushbutton_led_off>:
void pushbutton_led_off() {osEventFlagsSet(led_action_flags, BIT_LED_OFF); }
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	4b03      	ldr	r3, [pc, #12]	; (8005ce8 <pushbutton_led_off+0x14>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2102      	movs	r1, #2
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fc fc74 	bl	80025cc <osEventFlagsSet>
 8005ce4:	bf00      	nop
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	2000493c 	.word	0x2000493c

08005cec <pushbutton_led_fade>:
void pushbutton_led_fade() {osEventFlagsSet(led_action_flags, BIT_LED_FADE); }
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	4b03      	ldr	r3, [pc, #12]	; (8005d00 <pushbutton_led_fade+0x14>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2104      	movs	r1, #4
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fc fc68 	bl	80025cc <osEventFlagsSet>
 8005cfc:	bf00      	nop
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	2000493c 	.word	0x2000493c

08005d04 <pushbutton_led_flash>:
void pushbutton_led_flash() {osEventFlagsSet(led_action_flags, BIT_LED_FLASH); }
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	4b03      	ldr	r3, [pc, #12]	; (8005d18 <pushbutton_led_flash+0x14>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2108      	movs	r1, #8
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fc fc5c 	bl	80025cc <osEventFlagsSet>
 8005d14:	bf00      	nop
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	2000493c 	.word	0x2000493c

08005d1c <pushbutton_stack_space>:
	bool result = osEventFlagsGet(pushbutton_flags) & BUTTON_LONG_PRESSED;
	if(result && clear_flag) osEventFlagsClear(pushbutton_flags, BUTTON_LONG_PRESSED);
	return result;
}

uint32_t pushbutton_stack_space() {
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0
	return osThreadGetStackSpace(button_thread_handle);
 8005d20:	4b03      	ldr	r3, [pc, #12]	; (8005d30 <pushbutton_stack_space+0x14>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fc fba3 	bl	8002470 <osThreadGetStackSpace>
 8005d2a:	4603      	mov	r3, r0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	20004944 	.word	0x20004944

08005d34 <led_stack_space>:

uint32_t led_stack_space() {
 8005d34:	b580      	push	{r7, lr}
 8005d36:	af00      	add	r7, sp, #0
	return osThreadGetStackSpace(led_thread_handle);
 8005d38:	4b03      	ldr	r3, [pc, #12]	; (8005d48 <led_stack_space+0x14>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fc fb97 	bl	8002470 <osThreadGetStackSpace>
 8005d42:	4603      	mov	r3, r0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	20004940 	.word	0x20004940

08005d4c <button_thread>:

//====================== PRIVATE FUNCTION DEFINITIONS ======================
static void button_thread(void* argument) {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
	bool short_press, long_press; //flags that tell us if we've set the appropriate event flags yet
	uint32_t push_time; //timestamp of when the button was pressed

	while(1) {
		//button pressed -> gpio state will be high
		GPIO_PinState current_button_state = HAL_GPIO_ReadPin(PB_IN_GPIO_Port, PB_IN_Pin);
 8005d54:	2108      	movs	r1, #8
 8005d56:	4834      	ldr	r0, [pc, #208]	; (8005e28 <button_thread+0xdc>)
 8005d58:	f7fa fe68 	bl	8000a2c <HAL_GPIO_ReadPin>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	73fb      	strb	r3, [r7, #15]

		//if the button has settled, record the state
		if(current_button_state == last_state) {
 8005d60:	7bfa      	ldrb	r2, [r7, #15]
 8005d62:	7dfb      	ldrb	r3, [r7, #23]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d158      	bne.n	8005e1a <button_thread+0xce>

			if(current_button_state == GPIO_PIN_SET) { //button is pressed
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d138      	bne.n	8005de0 <button_thread+0x94>
				if(!last_button) push_time = HAL_GetTick(); //store the time if it was just pressed
 8005d6e:	7dbb      	ldrb	r3, [r7, #22]
 8005d70:	f083 0301 	eor.w	r3, r3, #1
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <button_thread+0x34>
 8005d7a:	f7fa fbe7 	bl	800054c <HAL_GetTick>
 8005d7e:	6138      	str	r0, [r7, #16]

				//check for short or long presses
				if(!short_press && ((HAL_GetTick() - push_time) > BUTTON_SHORT_PRESS_TIME)) {
 8005d80:	7d7b      	ldrb	r3, [r7, #21]
 8005d82:	f083 0301 	eor.w	r3, r3, #1
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00f      	beq.n	8005dac <button_thread+0x60>
 8005d8c:	f7fa fbde 	bl	800054c <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d9a:	d907      	bls.n	8005dac <button_thread+0x60>
					osEventFlagsSet(pushbutton_flags, BUTTON_SHORT_PRESSED);
 8005d9c:	4b23      	ldr	r3, [pc, #140]	; (8005e2c <button_thread+0xe0>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2104      	movs	r1, #4
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fc fc12 	bl	80025cc <osEventFlagsSet>
					short_press = true;
 8005da8:	2301      	movs	r3, #1
 8005daa:	757b      	strb	r3, [r7, #21]
				}
				if(!long_press && ((HAL_GetTick() - push_time) > BUTTON_LONG_PRESS_TIME)) {
 8005dac:	7d3b      	ldrb	r3, [r7, #20]
 8005dae:	f083 0301 	eor.w	r3, r3, #1
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d010      	beq.n	8005dda <button_thread+0x8e>
 8005db8:	f7fa fbc8 	bl	800054c <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d907      	bls.n	8005dda <button_thread+0x8e>
					osEventFlagsSet(pushbutton_flags, BUTTON_LONG_PRESSED);
 8005dca:	4b18      	ldr	r3, [pc, #96]	; (8005e2c <button_thread+0xe0>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2108      	movs	r1, #8
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7fc fbfb 	bl	80025cc <osEventFlagsSet>
					long_press = true;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	753b      	strb	r3, [r7, #20]
				}

				//remember the button state
				last_button = true;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	75bb      	strb	r3, [r7, #22]
 8005dde:	e01c      	b.n	8005e1a <button_thread+0xce>
			}

			else { //button is released
				if(last_button) {//button was just released
 8005de0:	7dbb      	ldrb	r3, [r7, #22]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d017      	beq.n	8005e16 <button_thread+0xca>
					//if the button was pressed for less than the "short press time"
					if((HAL_GetTick() - push_time) < BUTTON_SHORT_PRESS_TIME)
 8005de6:	f7fa fbb1 	bl	800054c <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005df4:	d205      	bcs.n	8005e02 <button_thread+0xb6>
						osEventFlagsSet(pushbutton_flags, BUTTON_BUMPED); //set the event flag for a "bump"
 8005df6:	4b0d      	ldr	r3, [pc, #52]	; (8005e2c <button_thread+0xe0>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2102      	movs	r1, #2
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fc fbe5 	bl	80025cc <osEventFlagsSet>

					//also set the event flag for releasing the button
					osEventFlagsSet(pushbutton_flags, BUTTON_RELEASED);
 8005e02:	4b0a      	ldr	r3, [pc, #40]	; (8005e2c <button_thread+0xe0>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2101      	movs	r1, #1
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7fc fbdf 	bl	80025cc <osEventFlagsSet>

					//reset some of our local flags for short and long presses
					short_press = false;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	757b      	strb	r3, [r7, #21]
					long_press = false;
 8005e12:	2300      	movs	r3, #0
 8005e14:	753b      	strb	r3, [r7, #20]
				}
				last_button = false;
 8005e16:	2300      	movs	r3, #0
 8005e18:	75bb      	strb	r3, [r7, #22]
			}

		}

		last_state = current_button_state; //updating the debounce memory (pin state)
 8005e1a:	7bfb      	ldrb	r3, [r7, #15]
 8005e1c:	75fb      	strb	r3, [r7, #23]
		osDelay(BUTTON_BOUNCE_TIME);
 8005e1e:	2019      	movs	r0, #25
 8005e20:	f7fc fb54 	bl	80024cc <osDelay>
	while(1) {
 8005e24:	e796      	b.n	8005d54 <button_thread+0x8>
 8005e26:	bf00      	nop
 8005e28:	40020800 	.word	0x40020800
 8005e2c:	2000498c 	.word	0x2000498c

08005e30 <led_thread>:
	}
}

static void led_thread(void* argument) {
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1); //start the PWM timer for the LED
 8005e38:	2100      	movs	r1, #0
 8005e3a:	482b      	ldr	r0, [pc, #172]	; (8005ee8 <led_thread+0xb8>)
 8005e3c:	f7fb fb72 	bl	8001524 <HAL_TIM_PWM_Start>

	while(1) {
		//suspend this thread until any flag is set (and don't clear the set flag)
		osEventFlagsWait(led_action_flags, BIT_LED_ALL, osFlagsNoClear, osWaitForever);
 8005e40:	4b2a      	ldr	r3, [pc, #168]	; (8005eec <led_thread+0xbc>)
 8005e42:	6818      	ldr	r0, [r3, #0]
 8005e44:	f04f 33ff 	mov.w	r3, #4294967295
 8005e48:	2202      	movs	r2, #2
 8005e4a:	210f      	movs	r1, #15
 8005e4c:	f7fc fc8e 	bl	800276c <osEventFlagsWait>

		//if a flag bit is set, run the appropriate LED routine
		//order of the conditionals indicates the priority of the flash routines
		//each routine will return pretty much immediately though
		if(osEventFlagsGet(led_action_flags) & BIT_LED_FLASH) {
 8005e50:	4b26      	ldr	r3, [pc, #152]	; (8005eec <led_thread+0xbc>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7fc fc55 	bl	8002704 <osEventFlagsGet>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	f003 0308 	and.w	r3, r3, #8
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d008      	beq.n	8005e76 <led_thread+0x46>
			do_led_flash();
 8005e64:	f000 f89c 	bl	8005fa0 <do_led_flash>
			osEventFlagsClear(led_action_flags, BIT_LED_FLASH); //clear the flag manually
 8005e68:	4b20      	ldr	r3, [pc, #128]	; (8005eec <led_thread+0xbc>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2108      	movs	r1, #8
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7fc fc04 	bl	800267c <osEventFlagsClear>
 8005e74:	e7e4      	b.n	8005e40 <led_thread+0x10>
		}
		else if (osEventFlagsGet(led_action_flags) & BIT_LED_FADE) {
 8005e76:	4b1d      	ldr	r3, [pc, #116]	; (8005eec <led_thread+0xbc>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fc fc42 	bl	8002704 <osEventFlagsGet>
 8005e80:	4603      	mov	r3, r0
 8005e82:	f003 0304 	and.w	r3, r3, #4
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d008      	beq.n	8005e9c <led_thread+0x6c>
			osEventFlagsClear(led_action_flags, BIT_LED_FADE); //clearing this before so the break function works
 8005e8a:	4b18      	ldr	r3, [pc, #96]	; (8005eec <led_thread+0xbc>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2104      	movs	r1, #4
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7fc fbf3 	bl	800267c <osEventFlagsClear>
			do_led_fade();
 8005e96:	f000 f847 	bl	8005f28 <do_led_fade>
 8005e9a:	e7d1      	b.n	8005e40 <led_thread+0x10>
		}
		else if (osEventFlagsGet(led_action_flags) & BIT_LED_ON) {
 8005e9c:	4b13      	ldr	r3, [pc, #76]	; (8005eec <led_thread+0xbc>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fc fc2f 	bl	8002704 <osEventFlagsGet>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d008      	beq.n	8005ec2 <led_thread+0x92>
			do_led_on();
 8005eb0:	f000 f81e 	bl	8005ef0 <do_led_on>
			osEventFlagsClear(led_action_flags, BIT_LED_ON);
 8005eb4:	4b0d      	ldr	r3, [pc, #52]	; (8005eec <led_thread+0xbc>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2101      	movs	r1, #1
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fc fbde 	bl	800267c <osEventFlagsClear>
 8005ec0:	e7be      	b.n	8005e40 <led_thread+0x10>
		}
		else if (osEventFlagsGet(led_action_flags) & BIT_LED_OFF) {
 8005ec2:	4b0a      	ldr	r3, [pc, #40]	; (8005eec <led_thread+0xbc>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fc fc1c 	bl	8002704 <osEventFlagsGet>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d0b4      	beq.n	8005e40 <led_thread+0x10>
			do_led_off();
 8005ed6:	f000 f819 	bl	8005f0c <do_led_off>
			osEventFlagsClear(led_action_flags, BIT_LED_OFF);
 8005eda:	4b04      	ldr	r3, [pc, #16]	; (8005eec <led_thread+0xbc>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2102      	movs	r1, #2
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fc fbcb 	bl	800267c <osEventFlagsClear>
		osEventFlagsWait(led_action_flags, BIT_LED_ALL, osFlagsNoClear, osWaitForever);
 8005ee6:	e7ab      	b.n	8005e40 <led_thread+0x10>
 8005ee8:	20004990 	.word	0x20004990
 8005eec:	2000493c 	.word	0x2000493c

08005ef0 <do_led_on>:
	//gracefully exiting if it somehow gets here
	osThreadExit();
}

//helper functions for the LED threads
static void do_led_on() {
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0
	htim5.Instance->CCR1 = UINT32_MAX; //just max out counter register to force the channel on
 8005ef4:	4b04      	ldr	r3, [pc, #16]	; (8005f08 <do_led_on+0x18>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8005efc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005efe:	bf00      	nop
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	20004990 	.word	0x20004990

08005f0c <do_led_off>:

static void do_led_off() {
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
	htim5.Instance->CCR1 = 0; //set counter register to zero to force the channel off
 8005f10:	4b04      	ldr	r3, [pc, #16]	; (8005f24 <do_led_off+0x18>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2200      	movs	r2, #0
 8005f16:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005f18:	bf00      	nop
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	20004990 	.word	0x20004990

08005f28 <do_led_fade>:

static void do_led_fade() {
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
	//reset the LED PWM peripheral to normal PWM mode
	//necessary if called after configuring peripheral for flashing the LED
	htim5.Init.Period = PWM_PERIOD;
 8005f2e:	4b1a      	ldr	r3, [pc, #104]	; (8005f98 <do_led_fade+0x70>)
 8005f30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005f34:	60da      	str	r2, [r3, #12]
	htim5.Instance->CCR1 = 0;
 8005f36:	4b18      	ldr	r3, [pc, #96]	; (8005f98 <do_led_fade+0x70>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Init(&htim5);
 8005f3e:	4816      	ldr	r0, [pc, #88]	; (8005f98 <do_led_fade+0x70>)
 8005f40:	f7fb fac4 	bl	80014cc <HAL_TIM_PWM_Init>
	int count_amount;

	//run the fade forever until we want to swap to a different event
	while(1) {
		//set the direction that we're gonna be counting
		if(htim5.Instance->CCR1 > 1000) count_amount = -COUNT_STEP;
 8005f44:	4b14      	ldr	r3, [pc, #80]	; (8005f98 <do_led_fade+0x70>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f4e:	d903      	bls.n	8005f58 <do_led_fade+0x30>
 8005f50:	f06f 0318 	mvn.w	r3, #24
 8005f54:	607b      	str	r3, [r7, #4]
 8005f56:	e006      	b.n	8005f66 <do_led_fade+0x3e>
		else if (htim5.Instance->CCR1 < COUNT_STEP) count_amount = COUNT_STEP;
 8005f58:	4b0f      	ldr	r3, [pc, #60]	; (8005f98 <do_led_fade+0x70>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5e:	2b18      	cmp	r3, #24
 8005f60:	d801      	bhi.n	8005f66 <do_led_fade+0x3e>
 8005f62:	2319      	movs	r3, #25
 8005f64:	607b      	str	r3, [r7, #4]

		htim5.Instance->CCR1 += count_amount; //increment compare value for the PWM module
 8005f66:	4b0c      	ldr	r3, [pc, #48]	; (8005f98 <do_led_fade+0x70>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	4b0a      	ldr	r3, [pc, #40]	; (8005f98 <do_led_fade+0x70>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	440a      	add	r2, r1
 8005f74:	635a      	str	r2, [r3, #52]	; 0x34
		osDelay(FADE_DELAY);
 8005f76:	200a      	movs	r0, #10
 8005f78:	f7fc faa8 	bl	80024cc <osDelay>

		//exit the loop if there's any of event flag that's asserted
		if(osEventFlagsGet(led_action_flags)) break;
 8005f7c:	4b07      	ldr	r3, [pc, #28]	; (8005f9c <do_led_fade+0x74>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fc fbbf 	bl	8002704 <osEventFlagsGet>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d100      	bne.n	8005f8e <do_led_fade+0x66>
		if(htim5.Instance->CCR1 > 1000) count_amount = -COUNT_STEP;
 8005f8c:	e7da      	b.n	8005f44 <do_led_fade+0x1c>
		if(osEventFlagsGet(led_action_flags)) break;
 8005f8e:	bf00      	nop
	}
}
 8005f90:	bf00      	nop
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	20004990 	.word	0x20004990
 8005f9c:	2000493c 	.word	0x2000493c

08005fa0 <do_led_flash>:

static void do_led_flash() {
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
	htim5.Init.Period = BLINK_PERIOD; //slow the PWM timer waaaaay down
 8005fa4:	4b05      	ldr	r3, [pc, #20]	; (8005fbc <do_led_flash+0x1c>)
 8005fa6:	4a06      	ldr	r2, [pc, #24]	; (8005fc0 <do_led_flash+0x20>)
 8005fa8:	60da      	str	r2, [r3, #12]
	htim5.Instance->CCR1 = BLINK_PERIOD>>1; //set the duty cycle to 50%
 8005faa:	4b04      	ldr	r3, [pc, #16]	; (8005fbc <do_led_flash+0x1c>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a05      	ldr	r2, [pc, #20]	; (8005fc4 <do_led_flash+0x24>)
 8005fb0:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Init(&htim5);
 8005fb2:	4802      	ldr	r0, [pc, #8]	; (8005fbc <do_led_flash+0x1c>)
 8005fb4:	f7fb fa8a 	bl	80014cc <HAL_TIM_PWM_Init>
}
 8005fb8:	bf00      	nop
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	20004990 	.word	0x20004990
 8005fc0:	00051615 	.word	0x00051615
 8005fc4:	00028b0a 	.word	0x00028b0a

08005fc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fce:	2300      	movs	r3, #0
 8005fd0:	607b      	str	r3, [r7, #4]
 8005fd2:	4b12      	ldr	r3, [pc, #72]	; (800601c <HAL_MspInit+0x54>)
 8005fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd6:	4a11      	ldr	r2, [pc, #68]	; (800601c <HAL_MspInit+0x54>)
 8005fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8005fde:	4b0f      	ldr	r3, [pc, #60]	; (800601c <HAL_MspInit+0x54>)
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fe6:	607b      	str	r3, [r7, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005fea:	2300      	movs	r3, #0
 8005fec:	603b      	str	r3, [r7, #0]
 8005fee:	4b0b      	ldr	r3, [pc, #44]	; (800601c <HAL_MspInit+0x54>)
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	4a0a      	ldr	r2, [pc, #40]	; (800601c <HAL_MspInit+0x54>)
 8005ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8005ffa:	4b08      	ldr	r3, [pc, #32]	; (800601c <HAL_MspInit+0x54>)
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006002:	603b      	str	r3, [r7, #0]
 8006004:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006006:	2200      	movs	r2, #0
 8006008:	210f      	movs	r1, #15
 800600a:	f06f 0001 	mvn.w	r0, #1
 800600e:	f7fa fb61 	bl	80006d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006012:	bf00      	nop
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	40023800 	.word	0x40023800

08006020 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006030:	d10d      	bne.n	800604e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006032:	2300      	movs	r3, #0
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	4b09      	ldr	r3, [pc, #36]	; (800605c <HAL_TIM_Base_MspInit+0x3c>)
 8006038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603a:	4a08      	ldr	r2, [pc, #32]	; (800605c <HAL_TIM_Base_MspInit+0x3c>)
 800603c:	f043 0301 	orr.w	r3, r3, #1
 8006040:	6413      	str	r3, [r2, #64]	; 0x40
 8006042:	4b06      	ldr	r3, [pc, #24]	; (800605c <HAL_TIM_Base_MspInit+0x3c>)
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800604e:	bf00      	nop
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	40023800 	.word	0x40023800

08006060 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a0b      	ldr	r2, [pc, #44]	; (800609c <HAL_TIM_PWM_MspInit+0x3c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d10d      	bne.n	800608e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006072:	2300      	movs	r3, #0
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	4b0a      	ldr	r3, [pc, #40]	; (80060a0 <HAL_TIM_PWM_MspInit+0x40>)
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	4a09      	ldr	r2, [pc, #36]	; (80060a0 <HAL_TIM_PWM_MspInit+0x40>)
 800607c:	f043 0308 	orr.w	r3, r3, #8
 8006080:	6413      	str	r3, [r2, #64]	; 0x40
 8006082:	4b07      	ldr	r3, [pc, #28]	; (80060a0 <HAL_TIM_PWM_MspInit+0x40>)
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	f003 0308 	and.w	r3, r3, #8
 800608a:	60fb      	str	r3, [r7, #12]
 800608c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800608e:	bf00      	nop
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	40000c00 	.word	0x40000c00
 80060a0:	40023800 	.word	0x40023800

080060a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b08a      	sub	sp, #40	; 0x28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060ac:	f107 0314 	add.w	r3, r7, #20
 80060b0:	2200      	movs	r2, #0
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	605a      	str	r2, [r3, #4]
 80060b6:	609a      	str	r2, [r3, #8]
 80060b8:	60da      	str	r2, [r3, #12]
 80060ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c4:	d11f      	bne.n	8006106 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060c6:	2300      	movs	r3, #0
 80060c8:	613b      	str	r3, [r7, #16]
 80060ca:	4b22      	ldr	r3, [pc, #136]	; (8006154 <HAL_TIM_MspPostInit+0xb0>)
 80060cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ce:	4a21      	ldr	r2, [pc, #132]	; (8006154 <HAL_TIM_MspPostInit+0xb0>)
 80060d0:	f043 0302 	orr.w	r3, r3, #2
 80060d4:	6313      	str	r3, [r2, #48]	; 0x30
 80060d6:	4b1f      	ldr	r3, [pc, #124]	; (8006154 <HAL_TIM_MspPostInit+0xb0>)
 80060d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	613b      	str	r3, [r7, #16]
 80060e0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80060e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060e8:	2302      	movs	r3, #2
 80060ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ec:	2300      	movs	r3, #0
 80060ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060f0:	2300      	movs	r3, #0
 80060f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80060f4:	2301      	movs	r3, #1
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80060f8:	f107 0314 	add.w	r3, r7, #20
 80060fc:	4619      	mov	r1, r3
 80060fe:	4816      	ldr	r0, [pc, #88]	; (8006158 <HAL_TIM_MspPostInit+0xb4>)
 8006100:	f7fa fb12 	bl	8000728 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8006104:	e022      	b.n	800614c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM5)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a14      	ldr	r2, [pc, #80]	; (800615c <HAL_TIM_MspPostInit+0xb8>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d11d      	bne.n	800614c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006110:	2300      	movs	r3, #0
 8006112:	60fb      	str	r3, [r7, #12]
 8006114:	4b0f      	ldr	r3, [pc, #60]	; (8006154 <HAL_TIM_MspPostInit+0xb0>)
 8006116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006118:	4a0e      	ldr	r2, [pc, #56]	; (8006154 <HAL_TIM_MspPostInit+0xb0>)
 800611a:	f043 0301 	orr.w	r3, r3, #1
 800611e:	6313      	str	r3, [r2, #48]	; 0x30
 8006120:	4b0c      	ldr	r3, [pc, #48]	; (8006154 <HAL_TIM_MspPostInit+0xb0>)
 8006122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PB_LED_Pin;
 800612c:	2301      	movs	r3, #1
 800612e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006130:	2302      	movs	r3, #2
 8006132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006134:	2300      	movs	r3, #0
 8006136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006138:	2300      	movs	r3, #0
 800613a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800613c:	2302      	movs	r3, #2
 800613e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PB_LED_GPIO_Port, &GPIO_InitStruct);
 8006140:	f107 0314 	add.w	r3, r7, #20
 8006144:	4619      	mov	r1, r3
 8006146:	4806      	ldr	r0, [pc, #24]	; (8006160 <HAL_TIM_MspPostInit+0xbc>)
 8006148:	f7fa faee 	bl	8000728 <HAL_GPIO_Init>
}
 800614c:	bf00      	nop
 800614e:	3728      	adds	r7, #40	; 0x28
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	40023800 	.word	0x40023800
 8006158:	40020400 	.word	0x40020400
 800615c:	40000c00 	.word	0x40000c00
 8006160:	40020000 	.word	0x40020000

08006164 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b08c      	sub	sp, #48	; 0x30
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800616c:	2300      	movs	r3, #0
 800616e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006170:	2300      	movs	r3, #0
 8006172:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8006174:	2200      	movs	r2, #0
 8006176:	6879      	ldr	r1, [r7, #4]
 8006178:	201a      	movs	r0, #26
 800617a:	f7fa faab 	bl	80006d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800617e:	201a      	movs	r0, #26
 8006180:	f7fa fac4 	bl	800070c <HAL_NVIC_EnableIRQ>
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8006184:	2300      	movs	r3, #0
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	4b1e      	ldr	r3, [pc, #120]	; (8006204 <HAL_InitTick+0xa0>)
 800618a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618c:	4a1d      	ldr	r2, [pc, #116]	; (8006204 <HAL_InitTick+0xa0>)
 800618e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006192:	6453      	str	r3, [r2, #68]	; 0x44
 8006194:	4b1b      	ldr	r3, [pc, #108]	; (8006204 <HAL_InitTick+0xa0>)
 8006196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800619c:	60fb      	str	r3, [r7, #12]
 800619e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80061a0:	f107 0210 	add.w	r2, r7, #16
 80061a4:	f107 0314 	add.w	r3, r7, #20
 80061a8:	4611      	mov	r1, r2
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fb f8d8 	bl	8001360 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80061b0:	f7fb f8c2 	bl	8001338 <HAL_RCC_GetPCLK2Freq>
 80061b4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80061b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b8:	4a13      	ldr	r2, [pc, #76]	; (8006208 <HAL_InitTick+0xa4>)
 80061ba:	fba2 2303 	umull	r2, r3, r2, r3
 80061be:	0c9b      	lsrs	r3, r3, #18
 80061c0:	3b01      	subs	r3, #1
 80061c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80061c4:	4b11      	ldr	r3, [pc, #68]	; (800620c <HAL_InitTick+0xa8>)
 80061c6:	4a12      	ldr	r2, [pc, #72]	; (8006210 <HAL_InitTick+0xac>)
 80061c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000 / 1000) - 1;
 80061ca:	4b10      	ldr	r3, [pc, #64]	; (800620c <HAL_InitTick+0xa8>)
 80061cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80061d0:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80061d2:	4a0e      	ldr	r2, [pc, #56]	; (800620c <HAL_InitTick+0xa8>)
 80061d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d6:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 80061d8:	4b0c      	ldr	r3, [pc, #48]	; (800620c <HAL_InitTick+0xa8>)
 80061da:	2200      	movs	r2, #0
 80061dc:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061de:	4b0b      	ldr	r3, [pc, #44]	; (800620c <HAL_InitTick+0xa8>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 80061e4:	4809      	ldr	r0, [pc, #36]	; (800620c <HAL_InitTick+0xa8>)
 80061e6:	f7fb f8ed 	bl	80013c4 <HAL_TIM_Base_Init>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d104      	bne.n	80061fa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 80061f0:	4806      	ldr	r0, [pc, #24]	; (800620c <HAL_InitTick+0xa8>)
 80061f2:	f7fb f912 	bl	800141a <HAL_TIM_Base_Start_IT>
 80061f6:	4603      	mov	r3, r0
 80061f8:	e000      	b.n	80061fc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3730      	adds	r7, #48	; 0x30
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	40023800 	.word	0x40023800
 8006208:	431bde83 	.word	0x431bde83
 800620c:	20004a14 	.word	0x20004a14
 8006210:	40014800 	.word	0x40014800

08006214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006214:	b480      	push	{r7}
 8006216:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006218:	bf00      	nop
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006222:	b480      	push	{r7}
 8006224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006226:	e7fe      	b.n	8006226 <HardFault_Handler+0x4>

08006228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006228:	b480      	push	{r7}
 800622a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800622c:	e7fe      	b.n	800622c <MemManage_Handler+0x4>

0800622e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800622e:	b480      	push	{r7}
 8006230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006232:	e7fe      	b.n	8006232 <BusFault_Handler+0x4>

08006234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006234:	b480      	push	{r7}
 8006236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006238:	e7fe      	b.n	8006238 <UsageFault_Handler+0x4>

0800623a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800623a:	b480      	push	{r7}
 800623c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800623e:	bf00      	nop
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800624c:	4802      	ldr	r0, [pc, #8]	; (8006258 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800624e:	f7fb f99b 	bl	8001588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8006252:	bf00      	nop
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	20004a14 	.word	0x20004a14

0800625c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800625c:	b480      	push	{r7}
 800625e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006260:	4b08      	ldr	r3, [pc, #32]	; (8006284 <SystemInit+0x28>)
 8006262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006266:	4a07      	ldr	r2, [pc, #28]	; (8006284 <SystemInit+0x28>)
 8006268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800626c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006270:	4b04      	ldr	r3, [pc, #16]	; (8006284 <SystemInit+0x28>)
 8006272:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006276:	609a      	str	r2, [r3, #8]
#endif
}
 8006278:	bf00      	nop
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	e000ed00 	.word	0xe000ed00

08006288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006288:	f8df d034 	ldr.w	sp, [pc, #52]	; 80062c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800628c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800628e:	e003      	b.n	8006298 <LoopCopyDataInit>

08006290 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006290:	4b0c      	ldr	r3, [pc, #48]	; (80062c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006292:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006294:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006296:	3104      	adds	r1, #4

08006298 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006298:	480b      	ldr	r0, [pc, #44]	; (80062c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800629a:	4b0c      	ldr	r3, [pc, #48]	; (80062cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800629c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800629e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80062a0:	d3f6      	bcc.n	8006290 <CopyDataInit>
  ldr  r2, =_sbss
 80062a2:	4a0b      	ldr	r2, [pc, #44]	; (80062d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80062a4:	e002      	b.n	80062ac <LoopFillZerobss>

080062a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80062a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80062a8:	f842 3b04 	str.w	r3, [r2], #4

080062ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80062ac:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80062ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80062b0:	d3f9      	bcc.n	80062a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80062b2:	f7ff ffd3 	bl	800625c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80062b6:	f000 f811 	bl	80062dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80062ba:	f7ff fa9b 	bl	80057f4 <main>
  bx  lr    
 80062be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80062c0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80062c4:	080063e4 	.word	0x080063e4
  ldr  r0, =_sdata
 80062c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80062cc:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80062d0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80062d4:	20004a54 	.word	0x20004a54

080062d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80062d8:	e7fe      	b.n	80062d8 <ADC_IRQHandler>
	...

080062dc <__libc_init_array>:
 80062dc:	b570      	push	{r4, r5, r6, lr}
 80062de:	4e0d      	ldr	r6, [pc, #52]	; (8006314 <__libc_init_array+0x38>)
 80062e0:	4c0d      	ldr	r4, [pc, #52]	; (8006318 <__libc_init_array+0x3c>)
 80062e2:	1ba4      	subs	r4, r4, r6
 80062e4:	10a4      	asrs	r4, r4, #2
 80062e6:	2500      	movs	r5, #0
 80062e8:	42a5      	cmp	r5, r4
 80062ea:	d109      	bne.n	8006300 <__libc_init_array+0x24>
 80062ec:	4e0b      	ldr	r6, [pc, #44]	; (800631c <__libc_init_array+0x40>)
 80062ee:	4c0c      	ldr	r4, [pc, #48]	; (8006320 <__libc_init_array+0x44>)
 80062f0:	f000 f82c 	bl	800634c <_init>
 80062f4:	1ba4      	subs	r4, r4, r6
 80062f6:	10a4      	asrs	r4, r4, #2
 80062f8:	2500      	movs	r5, #0
 80062fa:	42a5      	cmp	r5, r4
 80062fc:	d105      	bne.n	800630a <__libc_init_array+0x2e>
 80062fe:	bd70      	pop	{r4, r5, r6, pc}
 8006300:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006304:	4798      	blx	r3
 8006306:	3501      	adds	r5, #1
 8006308:	e7ee      	b.n	80062e8 <__libc_init_array+0xc>
 800630a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800630e:	4798      	blx	r3
 8006310:	3501      	adds	r5, #1
 8006312:	e7f2      	b.n	80062fa <__libc_init_array+0x1e>
 8006314:	080063dc 	.word	0x080063dc
 8006318:	080063dc 	.word	0x080063dc
 800631c:	080063dc 	.word	0x080063dc
 8006320:	080063e0 	.word	0x080063e0

08006324 <memcpy>:
 8006324:	b510      	push	{r4, lr}
 8006326:	1e43      	subs	r3, r0, #1
 8006328:	440a      	add	r2, r1
 800632a:	4291      	cmp	r1, r2
 800632c:	d100      	bne.n	8006330 <memcpy+0xc>
 800632e:	bd10      	pop	{r4, pc}
 8006330:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006334:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006338:	e7f7      	b.n	800632a <memcpy+0x6>

0800633a <memset>:
 800633a:	4402      	add	r2, r0
 800633c:	4603      	mov	r3, r0
 800633e:	4293      	cmp	r3, r2
 8006340:	d100      	bne.n	8006344 <memset+0xa>
 8006342:	4770      	bx	lr
 8006344:	f803 1b01 	strb.w	r1, [r3], #1
 8006348:	e7f9      	b.n	800633e <memset+0x4>
	...

0800634c <_init>:
 800634c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800634e:	bf00      	nop
 8006350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006352:	bc08      	pop	{r3}
 8006354:	469e      	mov	lr, r3
 8006356:	4770      	bx	lr

08006358 <_fini>:
 8006358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635a:	bf00      	nop
 800635c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800635e:	bc08      	pop	{r3}
 8006360:	469e      	mov	lr, r3
 8006362:	4770      	bx	lr
