
USB VCP Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fcf4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  0800fe98  0800fe98  0001fe98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080101a0  080101a0  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  080101a0  080101a0  000201a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080101a8  080101a8  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080101a8  080101a8  000201a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080101ac  080101ac  000201ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  080101b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a844  20000354  08010504  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  2000ab98  08010504  0003ab98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   000297e0  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000055d5  00000000  00000000  00059b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c18  00000000  00000000  0005f140  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019b0  00000000  00000000  00060d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d863  00000000  00000000  00062708  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c872  00000000  00000000  0007ff6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009ede5  00000000  00000000  0009c7dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013b5c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b84  00000000  00000000  0013b640  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000354 	.word	0x20000354
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fe7c 	.word	0x0800fe7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000358 	.word	0x20000358
 80001dc:	0800fe7c 	.word	0x0800fe7c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2f>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b20:	bf24      	itt	cs
 8000b22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2a:	d90d      	bls.n	8000b48 <__aeabi_d2f+0x30>
 8000b2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b40:	bf08      	it	eq
 8000b42:	f020 0001 	biceq.w	r0, r0, #1
 8000b46:	4770      	bx	lr
 8000b48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b4c:	d121      	bne.n	8000b92 <__aeabi_d2f+0x7a>
 8000b4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b52:	bfbc      	itt	lt
 8000b54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	4770      	bxlt	lr
 8000b5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b62:	f1c2 0218 	rsb	r2, r2, #24
 8000b66:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b72:	bf18      	it	ne
 8000b74:	f040 0001 	orrne.w	r0, r0, #1
 8000b78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b84:	ea40 000c 	orr.w	r0, r0, ip
 8000b88:	fa23 f302 	lsr.w	r3, r3, r2
 8000b8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b90:	e7cc      	b.n	8000b2c <__aeabi_d2f+0x14>
 8000b92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b96:	d107      	bne.n	8000ba8 <__aeabi_d2f+0x90>
 8000b98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b9c:	bf1e      	ittt	ne
 8000b9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba6:	4770      	bxne	lr
 8000ba8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <bargraph_output>:

//simple wrapper header file for the ports and pins

//set the bargraph LED pins according to the value passed into this function
//similar to the busOut() interface in MBed
void bargraph_output(uint16_t states) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, (states & 1<<0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	461a      	mov	r2, r3
 8000ece:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ed2:	4838      	ldr	r0, [pc, #224]	; (8000fb4 <bargraph_output+0xfc>)
 8000ed4:	f003 fa08 	bl	80042e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, (states & 1<<1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	105b      	asrs	r3, r3, #1
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eea:	4832      	ldr	r0, [pc, #200]	; (8000fb4 <bargraph_output+0xfc>)
 8000eec:	f003 f9fc 	bl	80042e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, (states & 1<<2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	109b      	asrs	r3, r3, #2
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	461a      	mov	r2, r3
 8000efe:	2140      	movs	r1, #64	; 0x40
 8000f00:	482d      	ldr	r0, [pc, #180]	; (8000fb8 <bargraph_output+0x100>)
 8000f02:	f003 f9f1 	bl	80042e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, (states & 1<<3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	10db      	asrs	r3, r3, #3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	461a      	mov	r2, r3
 8000f14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f18:	4826      	ldr	r0, [pc, #152]	; (8000fb4 <bargraph_output+0xfc>)
 8000f1a:	f003 f9e5 	bl	80042e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, (states & 1<<4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	111b      	asrs	r3, r3, #4
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f30:	4821      	ldr	r0, [pc, #132]	; (8000fb8 <bargraph_output+0x100>)
 8000f32:	f003 f9d9 	bl	80042e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, (states & 1<<5) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	115b      	asrs	r3, r3, #5
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	461a      	mov	r2, r3
 8000f44:	2180      	movs	r1, #128	; 0x80
 8000f46:	481c      	ldr	r0, [pc, #112]	; (8000fb8 <bargraph_output+0x100>)
 8000f48:	f003 f9ce 	bl	80042e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, (states & 1<<6) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	119b      	asrs	r3, r3, #6
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5e:	4817      	ldr	r0, [pc, #92]	; (8000fbc <bargraph_output+0x104>)
 8000f60:	f003 f9c2 	bl	80042e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, (states & 1<<7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000f64:	88fb      	ldrh	r3, [r7, #6]
 8000f66:	11db      	asrs	r3, r3, #7
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	461a      	mov	r2, r3
 8000f72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f76:	4810      	ldr	r0, [pc, #64]	; (8000fb8 <bargraph_output+0x100>)
 8000f78:	f003 f9b6 	bl	80042e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, (states & 1<<8) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	121b      	asrs	r3, r3, #8
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	461a      	mov	r2, r3
 8000f8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f8e:	480b      	ldr	r0, [pc, #44]	; (8000fbc <bargraph_output+0x104>)
 8000f90:	f003 f9aa 	bl	80042e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, (states & 1<<9) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	125b      	asrs	r3, r3, #9
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <bargraph_output+0x104>)
 8000fa8:	f003 f99e 	bl	80042e8 <HAL_GPIO_WritePin>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40020400 	.word	0x40020400
 8000fb8:	40020800 	.word	0x40020800
 8000fbc:	40020000 	.word	0x40020000

08000fc0 <bargraph_init>:
//====================== PRIVATE FUNCTION PROTOTYPES ======================
static void draw_bargraph(void *argument); //runs in a thread context
static void animate_bargraph(void *argument); //runs in a thread context

//====================== PUBLIC FUNCTIONS =========================
void bargraph_init(osMessageQueueId_t soc_buf_id) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b094      	sub	sp, #80	; 0x50
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	//create the flags to notify the status of the animation thread
	//want to tell the "draw_soc" function whether the animator is running or not
	animator_run_flags = osEventFlagsNew(NULL);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f009 f80f 	bl	8009fec <osEventFlagsNew>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	; (800104c <bargraph_init+0x8c>)
 8000fd2:	601a      	str	r2, [r3, #0]

	//create the queue to send the bytes to the draw buffer
	//just need one element to ferry the new "image" over to the thread safely
	drawbuf_queue = osMessageQueueNew(1, sizeof(uint16_t), NULL);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f009 f99f 	bl	800a31c <osMessageQueueNew>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <bargraph_init+0x90>)
 8000fe2:	601a      	str	r2, [r3, #0]

	//create the bargraph drawing thread
	const osThreadAttr_t draw_attributes = {
 8000fe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe8:	2224      	movs	r2, #36	; 0x24
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f00d f9dc 	bl	800e3aa <memset>
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <bargraph_init+0x94>)
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ff6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ffa:	643b      	str	r3, [r7, #64]	; 0x40
 8000ffc:	2328      	movs	r3, #40	; 0x28
 8000ffe:	647b      	str	r3, [r7, #68]	; 0x44
			.name = "draw",
			.priority = (osPriority_t) osPriorityHigh,
			.stack_size = 256
	};
	//suspends itself right at startup
	drawHandle = osThreadNew(draw_bargraph, NULL, &draw_attributes);
 8001000:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001004:	461a      	mov	r2, r3
 8001006:	2100      	movs	r1, #0
 8001008:	4813      	ldr	r0, [pc, #76]	; (8001058 <bargraph_init+0x98>)
 800100a:	f008 feb3 	bl	8009d74 <osThreadNew>
 800100e:	4602      	mov	r2, r0
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <bargraph_init+0x9c>)
 8001012:	601a      	str	r2, [r3, #0]

	//start a new animation thread too
	//this thread immediately suspends itself until it gets resumed by the draw_soc function
	//pass the soc_buf_id to the animator handle to grab the SOC value from
	const osThreadAttr_t animator_attributes = {
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	2224      	movs	r2, #36	; 0x24
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f00d f9c4 	bl	800e3aa <memset>
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <bargraph_init+0xa0>)
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800102a:	61fb      	str	r3, [r7, #28]
 800102c:	2320      	movs	r3, #32
 800102e:	623b      	str	r3, [r7, #32]
			.name = "animator",
			.priority = (osPriority_t) osPriorityAboveNormal,
			.stack_size = 512
	};
	animatorHandle = osThreadNew(animate_bargraph, (void*)soc_buf_id, &animator_attributes);
 8001030:	f107 0308 	add.w	r3, r7, #8
 8001034:	461a      	mov	r2, r3
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	480a      	ldr	r0, [pc, #40]	; (8001064 <bargraph_init+0xa4>)
 800103a:	f008 fe9b 	bl	8009d74 <osThreadNew>
 800103e:	4602      	mov	r2, r0
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <bargraph_init+0xa8>)
 8001042:	601a      	str	r2, [r3, #0]
}
 8001044:	bf00      	nop
 8001046:	3750      	adds	r7, #80	; 0x50
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000374 	.word	0x20000374
 8001050:	20000370 	.word	0x20000370
 8001054:	0800fe98 	.word	0x0800fe98
 8001058:	080012e5 	.word	0x080012e5
 800105c:	20000378 	.word	0x20000378
 8001060:	0800fea0 	.word	0x0800fea0
 8001064:	080010a5 	.word	0x080010a5
 8001068:	2000037c 	.word	0x2000037c

0800106c <bargraph_draw_soc>:

//draw a particular SOC on the bargraph display
void bargraph_draw_soc() {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
	//only restart the animation when the animator is suspended
	if(osEventFlagsGet(animator_run_flags) & ANIMATOR_READY) {
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <bargraph_draw_soc+0x34>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f009 f8a6 	bl	800a1c8 <osEventFlagsGet>
 800107c:	4603      	mov	r3, r0
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	d007      	beq.n	8001096 <bargraph_draw_soc+0x2a>
		osStatus_t status;
		status = osEventFlagsSet(animator_run_flags, RUN_ANIMATION);
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <bargraph_draw_soc+0x34>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2102      	movs	r1, #2
 800108c:	4618      	mov	r0, r3
 800108e:	f008 ffff 	bl	800a090 <osEventFlagsSet>
 8001092:	4603      	mov	r3, r0
 8001094:	607b      	str	r3, [r7, #4]
		UNUSED(status);
	}
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000374 	.word	0x20000374

080010a4 <animate_bargraph>:

//===================== PRIVATE/THREAD FUNCTION DEFINITIONS ====================

//draw the SOC animation on the LED bargraph
//gets called in a thread context
void animate_bargraph(void* argument) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	osMessageQueueId_t soc_queue;
	soc_queue = (osMessageQueueId_t)argument; //grab the message queue ID of the soc buffer (and cast it correctly)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	61bb      	str	r3, [r7, #24]
	float soc = 0;
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]

	osEventFlagsClear(animator_run_flags, RUN_ANIMATION); //make sure the run flag is cleared on startup
 80010b6:	4b87      	ldr	r3, [pc, #540]	; (80012d4 <animate_bargraph+0x230>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2102      	movs	r1, #2
 80010bc:	4618      	mov	r0, r3
 80010be:	f009 f83f 	bl	800a140 <osEventFlagsClear>

	while(true) {
		//suspend this thread on startup
		osEventFlagsSet(animator_run_flags, ANIMATOR_READY); //ready to re-run animation
 80010c2:	4b84      	ldr	r3, [pc, #528]	; (80012d4 <animate_bargraph+0x230>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2101      	movs	r1, #1
 80010c8:	4618      	mov	r0, r3
 80010ca:	f008 ffe1 	bl	800a090 <osEventFlagsSet>
		osEventFlagsWait(animator_run_flags, RUN_ANIMATION, osFlagsWaitAny, osWaitForever);
 80010ce:	4b81      	ldr	r3, [pc, #516]	; (80012d4 <animate_bargraph+0x230>)
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	2200      	movs	r2, #0
 80010d8:	2102      	movs	r1, #2
 80010da:	f009 f8a9 	bl	800a230 <osEventFlagsWait>

		//============= resuming the animation thread ==========
		uint16_t display_buffer = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	817b      	strh	r3, [r7, #10]
		osEventFlagsClear(animator_run_flags, ANIMATOR_READY); //running animation, clear flags
 80010e2:	4b7c      	ldr	r3, [pc, #496]	; (80012d4 <animate_bargraph+0x230>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2101      	movs	r1, #1
 80010e8:	4618      	mov	r0, r3
 80010ea:	f009 f829 	bl	800a140 <osEventFlagsClear>
		//pull the SOC from the queue
		if(osMessageQueueGetCount(soc_queue) > 0) {
 80010ee:	69b8      	ldr	r0, [r7, #24]
 80010f0:	f009 fa80 	bl	800a5f4 <osMessageQueueGetCount>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d007      	beq.n	800110a <animate_bargraph+0x66>
			osStatus_t status; //storing status for debugging purposes
			status = osMessageQueueGet(soc_queue, &soc, NULL, 0);
 80010fa:	f107 010c 	add.w	r1, r7, #12
 80010fe:	2300      	movs	r3, #0
 8001100:	2200      	movs	r2, #0
 8001102:	69b8      	ldr	r0, [r7, #24]
 8001104:	f009 fa04 	bl	800a510 <osMessageQueueGet>
 8001108:	6178      	str	r0, [r7, #20]
			UNUSED(status);
		}
		Q_UPDATE(drawbuf_queue, display_buffer); //start with drawing nothing
 800110a:	4b73      	ldr	r3, [pc, #460]	; (80012d8 <animate_bargraph+0x234>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f009 faa2 	bl	800a658 <osMessageQueueReset>
 8001114:	4b70      	ldr	r3, [pc, #448]	; (80012d8 <animate_bargraph+0x234>)
 8001116:	6818      	ldr	r0, [r3, #0]
 8001118:	f107 010a 	add.w	r1, r7, #10
 800111c:	2300      	movs	r3, #0
 800111e:	2200      	movs	r2, #0
 8001120:	f009 f982 	bl	800a428 <osMessageQueuePut>
		osThreadResume(drawHandle); //restart the draw thread
 8001124:	4b6d      	ldr	r3, [pc, #436]	; (80012dc <animate_bargraph+0x238>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f008 fefd 	bl	8009f28 <osThreadResume>

		//================= running the animation =================
		soc = soc >= 1 ? 0.999 : (soc < 0 ? 0 : soc); //constraining SOC between 0 and 1 exclusive
 800112e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001132:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800113a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113e:	db01      	blt.n	8001144 <animate_bargraph+0xa0>
 8001140:	4b67      	ldr	r3, [pc, #412]	; (80012e0 <animate_bargraph+0x23c>)
 8001142:	e00a      	b.n	800115a <animate_bargraph+0xb6>
 8001144:	edd7 7a03 	vldr	s15, [r7, #12]
 8001148:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800114c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001150:	d502      	bpl.n	8001158 <animate_bargraph+0xb4>
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	e000      	b.n	800115a <animate_bargraph+0xb6>
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	60fb      	str	r3, [r7, #12]
		//gives us an integer version of the SOC that we can work with to draw the bargraph
		//a "solid" light will denote a x6-10 SOC
		//i.e. a full SOC (96-100%) will have all lights lit
		//and a 54% SOC will have the first 5 lights be solid and the 6th light blinking
		uint8_t scaled_soc = (uint8_t)(soc*20);
 800115c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001160:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800116c:	edc7 7a00 	vstr	s15, [r7]
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	74fb      	strb	r3, [r7, #19]

		//flash the bottom most LED if the SOC is "critical"
		//involves updating display buffer, clearing the queue, and pushing it into the queue
		if(scaled_soc < 1) {
 8001174:	7cfb      	ldrb	r3, [r7, #19]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d12d      	bne.n	80011d6 <animate_bargraph+0x132>
			for(int i = 0; i < CRITICAL_FLASH_COUNT; i++) {
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
 800117e:	e026      	b.n	80011ce <animate_bargraph+0x12a>
				display_buffer = 1;
 8001180:	2301      	movs	r3, #1
 8001182:	817b      	strh	r3, [r7, #10]
				Q_UPDATE(drawbuf_queue, display_buffer);
 8001184:	4b54      	ldr	r3, [pc, #336]	; (80012d8 <animate_bargraph+0x234>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f009 fa65 	bl	800a658 <osMessageQueueReset>
 800118e:	4b52      	ldr	r3, [pc, #328]	; (80012d8 <animate_bargraph+0x234>)
 8001190:	6818      	ldr	r0, [r3, #0]
 8001192:	f107 010a 	add.w	r1, r7, #10
 8001196:	2300      	movs	r3, #0
 8001198:	2200      	movs	r2, #0
 800119a:	f009 f945 	bl	800a428 <osMessageQueuePut>
				osDelay(CRITICAL_FLASH_RATE);
 800119e:	204b      	movs	r0, #75	; 0x4b
 80011a0:	f008 fef6 	bl	8009f90 <osDelay>

				display_buffer = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	817b      	strh	r3, [r7, #10]
				Q_UPDATE(drawbuf_queue, display_buffer);
 80011a8:	4b4b      	ldr	r3, [pc, #300]	; (80012d8 <animate_bargraph+0x234>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f009 fa53 	bl	800a658 <osMessageQueueReset>
 80011b2:	4b49      	ldr	r3, [pc, #292]	; (80012d8 <animate_bargraph+0x234>)
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	f107 010a 	add.w	r1, r7, #10
 80011ba:	2300      	movs	r3, #0
 80011bc:	2200      	movs	r2, #0
 80011be:	f009 f933 	bl	800a428 <osMessageQueuePut>
				osDelay(CRITICAL_FLASH_RATE);
 80011c2:	204b      	movs	r0, #75	; 0x4b
 80011c4:	f008 fee4 	bl	8009f90 <osDelay>
			for(int i = 0; i < CRITICAL_FLASH_COUNT; i++) {
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	3301      	adds	r3, #1
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	2b09      	cmp	r3, #9
 80011d2:	ddd5      	ble.n	8001180 <animate_bargraph+0xdc>
 80011d4:	e074      	b.n	80012c0 <animate_bargraph+0x21c>
		}

		//if the SOC is greater than 5%
		else {
			//draw an animation to light up all the "solid lights" before the last one
			display_buffer = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	817b      	strh	r3, [r7, #10]
			for(int i = 0; i < (scaled_soc>>1); i++) {
 80011da:	2300      	movs	r3, #0
 80011dc:	623b      	str	r3, [r7, #32]
 80011de:	e01d      	b.n	800121c <animate_bargraph+0x178>
				display_buffer |= (1<<i);
 80011e0:	2201      	movs	r2, #1
 80011e2:	6a3b      	ldr	r3, [r7, #32]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	897b      	ldrh	r3, [r7, #10]
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	817b      	strh	r3, [r7, #10]
				Q_UPDATE(drawbuf_queue, display_buffer);
 80011f6:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <animate_bargraph+0x234>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f009 fa2c 	bl	800a658 <osMessageQueueReset>
 8001200:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <animate_bargraph+0x234>)
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	f107 010a 	add.w	r1, r7, #10
 8001208:	2300      	movs	r3, #0
 800120a:	2200      	movs	r2, #0
 800120c:	f009 f90c 	bl	800a428 <osMessageQueuePut>
				osDelay(BUILDUP_DELAY);
 8001210:	2032      	movs	r0, #50	; 0x32
 8001212:	f008 febd 	bl	8009f90 <osDelay>
			for(int i = 0; i < (scaled_soc>>1); i++) {
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	3301      	adds	r3, #1
 800121a:	623b      	str	r3, [r7, #32]
 800121c:	7cfb      	ldrb	r3, [r7, #19]
 800121e:	085b      	lsrs	r3, r3, #1
 8001220:	b2db      	uxtb	r3, r3
 8001222:	461a      	mov	r2, r3
 8001224:	6a3b      	ldr	r3, [r7, #32]
 8001226:	4293      	cmp	r3, r2
 8001228:	dbda      	blt.n	80011e0 <animate_bargraph+0x13c>
			}

			//if the top number is odd, then make the LED solid
			if(scaled_soc & 0x01) {
 800122a:	7cfb      	ldrb	r3, [r7, #19]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	2b00      	cmp	r3, #0
 8001232:	d01e      	beq.n	8001272 <animate_bargraph+0x1ce>
				display_buffer |= (1 << (scaled_soc >> 1)); //add the extra LED lit up
 8001234:	7cfb      	ldrb	r3, [r7, #19]
 8001236:	085b      	lsrs	r3, r3, #1
 8001238:	b2db      	uxtb	r3, r3
 800123a:	461a      	mov	r2, r3
 800123c:	2301      	movs	r3, #1
 800123e:	4093      	lsls	r3, r2
 8001240:	b21a      	sxth	r2, r3
 8001242:	897b      	ldrh	r3, [r7, #10]
 8001244:	b21b      	sxth	r3, r3
 8001246:	4313      	orrs	r3, r2
 8001248:	b21b      	sxth	r3, r3
 800124a:	b29b      	uxth	r3, r3
 800124c:	817b      	strh	r3, [r7, #10]
				Q_UPDATE(drawbuf_queue, display_buffer);
 800124e:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <animate_bargraph+0x234>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f009 fa00 	bl	800a658 <osMessageQueueReset>
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <animate_bargraph+0x234>)
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	f107 010a 	add.w	r1, r7, #10
 8001260:	2300      	movs	r3, #0
 8001262:	2200      	movs	r2, #0
 8001264:	f009 f8e0 	bl	800a428 <osMessageQueuePut>
				osDelay(FLASH_DELAY * FLASH_COUNT * 2);
 8001268:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800126c:	f008 fe90 	bl	8009f90 <osDelay>
 8001270:	e026      	b.n	80012c0 <animate_bargraph+0x21c>
			}

			//if the scaled SOC is even, flash the top LED
			else {
				for(int i = 0; i < FLASH_COUNT<<1; i++) {
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	e020      	b.n	80012ba <animate_bargraph+0x216>
					display_buffer ^= 1 << (scaled_soc>>1); //toggle this particular bit in the buffer
 8001278:	7cfb      	ldrb	r3, [r7, #19]
 800127a:	085b      	lsrs	r3, r3, #1
 800127c:	b2db      	uxtb	r3, r3
 800127e:	461a      	mov	r2, r3
 8001280:	2301      	movs	r3, #1
 8001282:	4093      	lsls	r3, r2
 8001284:	b21a      	sxth	r2, r3
 8001286:	897b      	ldrh	r3, [r7, #10]
 8001288:	b21b      	sxth	r3, r3
 800128a:	4053      	eors	r3, r2
 800128c:	b21b      	sxth	r3, r3
 800128e:	b29b      	uxth	r3, r3
 8001290:	817b      	strh	r3, [r7, #10]
					Q_UPDATE(drawbuf_queue, display_buffer);
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <animate_bargraph+0x234>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f009 f9de 	bl	800a658 <osMessageQueueReset>
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <animate_bargraph+0x234>)
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	f107 010a 	add.w	r1, r7, #10
 80012a4:	2300      	movs	r3, #0
 80012a6:	2200      	movs	r2, #0
 80012a8:	f009 f8be 	bl	800a428 <osMessageQueuePut>
					osDelay(FLASH_DELAY);
 80012ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012b0:	f008 fe6e 	bl	8009f90 <osDelay>
				for(int i = 0; i < FLASH_COUNT<<1; i++) {
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	3301      	adds	r3, #1
 80012b8:	61fb      	str	r3, [r7, #28]
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	2b07      	cmp	r3, #7
 80012be:	dddb      	ble.n	8001278 <animate_bargraph+0x1d4>
				}
			}
		}

		//====== shutting the draw thread down ======
		osThreadSuspend(drawHandle); //suspend the drawing thread since we're done animating
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <animate_bargraph+0x238>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f008 fdfb 	bl	8009ec0 <osThreadSuspend>
		bargraph_output(0); //clear the bargraph pins
 80012ca:	2000      	movs	r0, #0
 80012cc:	f7ff fdf4 	bl	8000eb8 <bargraph_output>
	while(true) {
 80012d0:	e6f7      	b.n	80010c2 <animate_bargraph+0x1e>
 80012d2:	bf00      	nop
 80012d4:	20000374 	.word	0x20000374
 80012d8:	20000370 	.word	0x20000370
 80012dc:	20000378 	.word	0x20000378
 80012e0:	3f7fbe77 	.word	0x3f7fbe77

080012e4 <draw_bargraph>:


//draws the bargraph
//gets called in a thread context
//@param argument: doesn't matter, not used
static void draw_bargraph(void *argument) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	uint16_t draw_buffer = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	81fb      	strh	r3, [r7, #14]
	bool polarity = false; //tells us whether we're drawing odds or evens
 80012f0:	2300      	movs	r3, #0
 80012f2:	75fb      	strb	r3, [r7, #23]
	osThreadSuspend(drawHandle); //suspend right at startup
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <draw_bargraph+0x88>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f008 fde1 	bl	8009ec0 <osThreadSuspend>

	while(true) {
		//if we have a new message from the queue, update the draw buffer
		if(osMessageQueueGetCount(drawbuf_queue) > 0) {
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <draw_bargraph+0x8c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f009 f976 	bl	800a5f4 <osMessageQueueGetCount>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d008      	beq.n	8001320 <draw_bargraph+0x3c>
			osStatus_t status; //storing status for debugging purposes
			status = osMessageQueueGet(drawbuf_queue, &draw_buffer, NULL, 0);
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <draw_bargraph+0x8c>)
 8001310:	6818      	ldr	r0, [r3, #0]
 8001312:	f107 010e 	add.w	r1, r7, #14
 8001316:	2300      	movs	r3, #0
 8001318:	2200      	movs	r2, #0
 800131a:	f009 f8f9 	bl	800a510 <osMessageQueueGet>
 800131e:	6138      	str	r0, [r7, #16]
			UNUSED(status);
		}

		if(polarity) bargraph_output(draw_buffer & 0x155); //turn on the corresponding ODD leds according to the display buffer
 8001320:	7dfb      	ldrb	r3, [r7, #23]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d008      	beq.n	8001338 <draw_bargraph+0x54>
 8001326:	89fa      	ldrh	r2, [r7, #14]
 8001328:	f240 1355 	movw	r3, #341	; 0x155
 800132c:	4013      	ands	r3, r2
 800132e:	b29b      	uxth	r3, r3
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fdc1 	bl	8000eb8 <bargraph_output>
 8001336:	e007      	b.n	8001348 <draw_bargraph+0x64>
		else bargraph_output(draw_buffer & 0x2AA); //turn on the corresponding EVEN leds according to the display buffer
 8001338:	89fa      	ldrh	r2, [r7, #14]
 800133a:	f240 23aa 	movw	r3, #682	; 0x2aa
 800133e:	4013      	ands	r3, r2
 8001340:	b29b      	uxth	r3, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fdb8 	bl	8000eb8 <bargraph_output>
		polarity = !polarity;
 8001348:	7dfb      	ldrb	r3, [r7, #23]
 800134a:	2b00      	cmp	r3, #0
 800134c:	bf14      	ite	ne
 800134e:	2301      	movne	r3, #1
 8001350:	2300      	moveq	r3, #0
 8001352:	b2db      	uxtb	r3, r3
 8001354:	f083 0301 	eor.w	r3, r3, #1
 8001358:	b2db      	uxtb	r3, r3
 800135a:	75fb      	strb	r3, [r7, #23]
 800135c:	7dfb      	ldrb	r3, [r7, #23]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	75fb      	strb	r3, [r7, #23]

		//delay for the next screen update
		osDelay(BARGRAPH_UPDATE_DELAY);
 8001364:	2002      	movs	r0, #2
 8001366:	f008 fe13 	bl	8009f90 <osDelay>
		if(osMessageQueueGetCount(drawbuf_queue) > 0) {
 800136a:	e7c8      	b.n	80012fe <draw_bargraph+0x1a>
 800136c:	20000378 	.word	0x20000378
 8001370:	20000370 	.word	0x20000370

08001374 <monitor_init>:
//perform an ADC DMA read
//return type is os status e.g. osOK
static uint32_t do_adc_dma(ADC_HandleTypeDef *hadc, uint16_t *buffer, uint32_t len, uint32_t timeout);

// ================== PUBLIC FUNCTION DEFS ==================
osMessageQueueId_t monitor_init() {
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	monitor_util_flags = osEventFlagsNew(NULL); //create the monitor signaling flag
 8001378:	2000      	movs	r0, #0
 800137a:	f008 fe37 	bl	8009fec <osEventFlagsNew>
 800137e:	4602      	mov	r2, r0
 8001380:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <monitor_init+0x34>)
 8001382:	601a      	str	r2, [r3, #0]
	soc_buf = osMessageQueueNew(1, sizeof(float), NULL); //creating the SOC buffer/queue
 8001384:	2200      	movs	r2, #0
 8001386:	2104      	movs	r1, #4
 8001388:	2001      	movs	r0, #1
 800138a:	f008 ffc7 	bl	800a31c <osMessageQueueNew>
 800138e:	4602      	mov	r2, r0
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <monitor_init+0x38>)
 8001392:	601a      	str	r2, [r3, #0]

	osEventFlagsSet(monitor_util_flags, ADC_READY_FLAG); //adc is now ready since everything is initialized
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <monitor_init+0x34>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2102      	movs	r1, #2
 800139a:	4618      	mov	r0, r3
 800139c:	f008 fe78 	bl	800a090 <osEventFlagsSet>

	return soc_buf;
 80013a0:	4b02      	ldr	r3, [pc, #8]	; (80013ac <monitor_init+0x38>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000380 	.word	0x20000380
 80013ac:	20000384 	.word	0x20000384

080013b0 <monitor_start>:

//initialize and start the monitor thread function
void monitor_start(ADC_HandleTypeDef *hadc) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08c      	sub	sp, #48	; 0x30
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	const osThreadAttr_t monitor_attributes = {
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	2224      	movs	r2, #36	; 0x24
 80013be:	2100      	movs	r1, #0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f00c fff2 	bl	800e3aa <memset>
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <monitor_start+0x40>)
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013ce:	623b      	str	r3, [r7, #32]
 80013d0:	2320      	movs	r3, #32
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
			.name = "monitor",
			.priority = (osPriority_t) osPriorityAboveNormal,
			.stack_size = 2048
	};
	monitor_handle = osThreadNew(run_monitor, (void*)hadc, &monitor_attributes);
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	461a      	mov	r2, r3
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	4805      	ldr	r0, [pc, #20]	; (80013f4 <monitor_start+0x44>)
 80013de:	f008 fcc9 	bl	8009d74 <osThreadNew>
 80013e2:	4602      	mov	r2, r0
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <monitor_start+0x48>)
 80013e6:	601a      	str	r2, [r3, #0]
}
 80013e8:	bf00      	nop
 80013ea:	3730      	adds	r7, #48	; 0x30
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	0800feac 	.word	0x0800feac
 80013f4:	080015d9 	.word	0x080015d9
 80013f8:	20000388 	.word	0x20000388
 80013fc:	00000000 	.word	0x00000000

08001400 <v_sys_check>:

bool v_sys_check(float min_voltage, ADC_HandleTypeDef *hadc) {
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b08f      	sub	sp, #60	; 0x3c
 8001404:	af00      	add	r7, sp, #0
 8001406:	ed87 0a01 	vstr	s0, [r7, #4]
 800140a:	6038      	str	r0, [r7, #0]
	uint16_t adc_results[ADC_OVERSAMPLES];
	uint32_t adc_status;

	//floor the min_voltage to SANE_VOLTAGE_LOWER_LIMIT
	min_voltage = min_voltage < SANE_VOLTAGE_LOWER_LIMIT ? SANE_VOLTAGE_LOWER_LIMIT : min_voltage;
 800140c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001410:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001414:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141c:	d501      	bpl.n	8001422 <v_sys_check+0x22>
 800141e:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <v_sys_check+0xe8>)
 8001420:	e000      	b.n	8001424 <v_sys_check+0x24>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	607b      	str	r3, [r7, #4]

	//read the ADC via DMA
	adc_status = do_adc_dma(hadc, adc_results, ADC_OVERSAMPLES, ADC_READ_TIMEOUT);
 8001426:	f107 0108 	add.w	r1, r7, #8
 800142a:	2364      	movs	r3, #100	; 0x64
 800142c:	2210      	movs	r2, #16
 800142e:	6838      	ldr	r0, [r7, #0]
 8001430:	f000 fa1c 	bl	800186c <do_adc_dma>
 8001434:	62f8      	str	r0, [r7, #44]	; 0x2c
	if(adc_status & (1<<31)) return false; //if we timed out or something weird happened, fail the check
 8001436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001438:	2b00      	cmp	r3, #0
 800143a:	da01      	bge.n	8001440 <v_sys_check+0x40>
 800143c:	2300      	movs	r3, #0
 800143e:	e049      	b.n	80014d4 <v_sys_check+0xd4>

	//compute the system voltage from the average of the ADC readings
	uint32_t adc_sum = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	637b      	str	r3, [r7, #52]	; 0x34
	float v_sys = 0;
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int i = 0; i < ADC_OVERSAMPLES; i++) {
 800144a:	2300      	movs	r3, #0
 800144c:	633b      	str	r3, [r7, #48]	; 0x30
 800144e:	e00d      	b.n	800146c <v_sys_check+0x6c>
		adc_sum += adc_results[i];
 8001450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001458:	4413      	add	r3, r2
 800145a:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800145e:	461a      	mov	r2, r3
 8001460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001462:	4413      	add	r3, r2
 8001464:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i = 0; i < ADC_OVERSAMPLES; i++) {
 8001466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001468:	3301      	adds	r3, #1
 800146a:	633b      	str	r3, [r7, #48]	; 0x30
 800146c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800146e:	2b0f      	cmp	r3, #15
 8001470:	ddee      	ble.n	8001450 <v_sys_check+0x50>
	}
	v_sys = adc_sum * DIVIDER_RATIO / ADC_OVERSAMPLES;
 8001472:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001474:	f7fe fffe 	bl	8000474 <__aeabi_ui2d>
 8001478:	a319      	add	r3, pc, #100	; (adr r3, 80014e0 <v_sys_check+0xe0>)
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	f7ff f873 	bl	8000568 <__aeabi_dmul>
 8001482:	4603      	mov	r3, r0
 8001484:	460c      	mov	r4, r1
 8001486:	4618      	mov	r0, r3
 8001488:	4621      	mov	r1, r4
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <v_sys_check+0xec>)
 8001490:	f7ff f994 	bl	80007bc <__aeabi_ddiv>
 8001494:	4603      	mov	r3, r0
 8001496:	460c      	mov	r4, r1
 8001498:	4618      	mov	r0, r3
 800149a:	4621      	mov	r1, r4
 800149c:	f7ff fb3c 	bl	8000b18 <__aeabi_d2f>
 80014a0:	4603      	mov	r3, r0
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28

	//if the measured system voltage is sane
	return (v_sys > min_voltage) && (v_sys < SANE_VOLTAGE_UPPER_LIMIT);
 80014a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80014a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b4:	dd0a      	ble.n	80014cc <v_sys_check+0xcc>
 80014b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80014ba:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80014f0 <v_sys_check+0xf0>
 80014be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c6:	d501      	bpl.n	80014cc <v_sys_check+0xcc>
 80014c8:	2301      	movs	r3, #1
 80014ca:	e000      	b.n	80014ce <v_sys_check+0xce>
 80014cc:	2300      	movs	r3, #0
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	b2db      	uxtb	r3, r3
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	373c      	adds	r7, #60	; 0x3c
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd90      	pop	{r4, r7, pc}
 80014dc:	f3af 8000 	nop.w
 80014e0:	de129a61 	.word	0xde129a61
 80014e4:	3f822f58 	.word	0x3f822f58
 80014e8:	41200000 	.word	0x41200000
 80014ec:	40300000 	.word	0x40300000
 80014f0:	420c0000 	.word	0x420c0000

080014f4 <monitor_soc_low>:

bool monitor_soc_low(bool clear_flag) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
	bool result = osEventFlagsGet(monitor_util_flags) & SOC_LOW_FLAG;
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <monitor_soc_low+0x48>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f008 fe60 	bl	800a1c8 <osEventFlagsGet>
 8001508:	4603      	mov	r3, r0
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	2b00      	cmp	r3, #0
 8001510:	bf14      	ite	ne
 8001512:	2301      	movne	r3, #1
 8001514:	2300      	moveq	r3, #0
 8001516:	73fb      	strb	r3, [r7, #15]
	if(result && clear_flag) osEventFlagsClear(monitor_util_flags, SOC_LOW_FLAG);
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d008      	beq.n	8001530 <monitor_soc_low+0x3c>
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <monitor_soc_low+0x3c>
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <monitor_soc_low+0x48>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2104      	movs	r1, #4
 800152a:	4618      	mov	r0, r3
 800152c:	f008 fe08 	bl	800a140 <osEventFlagsClear>
	return result;
 8001530:	7bfb      	ldrb	r3, [r7, #15]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000380 	.word	0x20000380

08001540 <monitor_soc_crit>:

bool monitor_soc_crit(bool clear_flag) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
	bool result = osEventFlagsGet(monitor_util_flags) & SOC_CRIT_FLAG;
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <monitor_soc_crit+0x48>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f008 fe3a 	bl	800a1c8 <osEventFlagsGet>
 8001554:	4603      	mov	r3, r0
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b00      	cmp	r3, #0
 800155c:	bf14      	ite	ne
 800155e:	2301      	movne	r3, #1
 8001560:	2300      	moveq	r3, #0
 8001562:	73fb      	strb	r3, [r7, #15]
	if(result && clear_flag) osEventFlagsClear(monitor_util_flags, SOC_CRIT_FLAG);
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d008      	beq.n	800157c <monitor_soc_crit+0x3c>
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <monitor_soc_crit+0x3c>
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <monitor_soc_crit+0x48>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2108      	movs	r1, #8
 8001576:	4618      	mov	r0, r3
 8001578:	f008 fde2 	bl	800a140 <osEventFlagsClear>
	return result;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000380 	.word	0x20000380

0800158c <monitor_read_fail>:

bool monitor_read_fail(bool clear_flag) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
	bool result = osEventFlagsGet(monitor_util_flags) & SOC_MEASURE_FAIL;
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <monitor_read_fail+0x48>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f008 fe14 	bl	800a1c8 <osEventFlagsGet>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	bf14      	ite	ne
 80015aa:	2301      	movne	r3, #1
 80015ac:	2300      	moveq	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]
	if(result && clear_flag) osEventFlagsClear(monitor_util_flags, SOC_MEASURE_FAIL);
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d008      	beq.n	80015c8 <monitor_read_fail+0x3c>
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <monitor_read_fail+0x3c>
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <monitor_read_fail+0x48>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2110      	movs	r1, #16
 80015c2:	4618      	mov	r0, r3
 80015c4:	f008 fdbc 	bl	800a140 <osEventFlagsClear>
	return result;
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000380 	.word	0x20000380

080015d8 <run_monitor>:

//return the free stack space of the monitor thread
uint32_t monitor_stack_space() {return osThreadGetStackSpace(monitor_handle);}

// ==================== PRIVATE FUNCTION DEFINITIONS =====================
static void run_monitor(void* argument) {
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
 80015de:	af00      	add	r7, sp, #0
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	6018      	str	r0, [r3, #0]
	ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef*) argument;
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
	float sample_buffer[SAMPLE_BUFFER_LEN]; //buffer to compute the moving average voltage reading
	float mav_voltage = 0, soc = 0; //moving average of system voltage measurement
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	f207 4254 	addw	r2, r7, #1108	; 0x454
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
	uint16_t buffer_pointer = 0; //for our circular buffer
 8001600:	2300      	movs	r3, #0
 8001602:	f8a7 3452 	strh.w	r3, [r7, #1106]	; 0x452
	uint8_t read_fail_counter = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	f887 3451 	strb.w	r3, [r7, #1105]	; 0x451
	bool soc_low_asserted = false;
 800160c:	2300      	movs	r3, #0
 800160e:	f887 3450 	strb.w	r3, [r7, #1104]	; 0x450

	//initialize all values of the sample buffer array
	for(int i = 0; i < SAMPLE_BUFFER_LEN; i++) {
 8001612:	2300      	movs	r3, #0
 8001614:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 8001618:	e00c      	b.n	8001634 <run_monitor+0x5c>
		sample_buffer[i] = MAV_INIT_VALUE;
 800161a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800161e:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	4a8a      	ldr	r2, [pc, #552]	; (8001850 <run_monitor+0x278>)
 8001628:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < SAMPLE_BUFFER_LEN; i++) {
 800162a:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800162e:	3301      	adds	r3, #1
 8001630:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 8001634:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8001638:	2bff      	cmp	r3, #255	; 0xff
 800163a:	ddee      	ble.n	800161a <run_monitor+0x42>
		uint32_t adc_status;
		uint16_t adc_results[ADC_OVERSAMPLES];
		float adc_voltage;

		//attempt to read the ADC
		adc_status = do_adc_dma(hadc, adc_results, ADC_OVERSAMPLES, ADC_READ_TIMEOUT);
 800163c:	f107 010c 	add.w	r1, r7, #12
 8001640:	2364      	movs	r3, #100	; 0x64
 8001642:	2210      	movs	r2, #16
 8001644:	f8d7 043c 	ldr.w	r0, [r7, #1084]	; 0x43c
 8001648:	f000 f910 	bl	800186c <do_adc_dma>
 800164c:	f8c7 0438 	str.w	r0, [r7, #1080]	; 0x438

		//compute the ADC voltage (will be invalid if the adc timed out, but whatev, we'll handle that)
		uint32_t adc_sum = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
		for(int i = 0; i < ADC_OVERSAMPLES; i++) {
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 800165c:	e010      	b.n	8001680 <run_monitor+0xa8>
			adc_sum += adc_results[i];
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8001666:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800166a:	461a      	mov	r2, r3
 800166c:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8001670:	4413      	add	r3, r2
 8001672:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
		for(int i = 0; i < ADC_OVERSAMPLES; i++) {
 8001676:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 800167a:	3301      	adds	r3, #1
 800167c:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 8001680:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8001684:	2b0f      	cmp	r3, #15
 8001686:	ddea      	ble.n	800165e <run_monitor+0x86>
		}
		adc_voltage = adc_sum * DIVIDER_RATIO / ADC_OVERSAMPLES;
 8001688:	f8d7 0448 	ldr.w	r0, [r7, #1096]	; 0x448
 800168c:	f7fe fef2 	bl	8000474 <__aeabi_ui2d>
 8001690:	a36d      	add	r3, pc, #436	; (adr r3, 8001848 <run_monitor+0x270>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	f7fe ff67 	bl	8000568 <__aeabi_dmul>
 800169a:	4603      	mov	r3, r0
 800169c:	460c      	mov	r4, r1
 800169e:	4618      	mov	r0, r3
 80016a0:	4621      	mov	r1, r4
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4b6b      	ldr	r3, [pc, #428]	; (8001854 <run_monitor+0x27c>)
 80016a8:	f7ff f888 	bl	80007bc <__aeabi_ddiv>
 80016ac:	4603      	mov	r3, r0
 80016ae:	460c      	mov	r4, r1
 80016b0:	4618      	mov	r0, r3
 80016b2:	4621      	mov	r1, r4
 80016b4:	f7ff fa30 	bl	8000b18 <__aeabi_d2f>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f207 4234 	addw	r2, r7, #1076	; 0x434
 80016be:	6013      	str	r3, [r2, #0]

		//if the ADC read was successful and the voltage is sane
		if(((adc_status & (1<<31)) == 0) && (adc_voltage < SANE_VOLTAGE_UPPER_LIMIT) && (adc_voltage > SANE_VOLTAGE_LOWER_LIMIT)) {
 80016c0:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f2c0 80ac 	blt.w	8001822 <run_monitor+0x24a>
 80016ca:	f207 4334 	addw	r3, r7, #1076	; 0x434
 80016ce:	edd3 7a00 	vldr	s15, [r3]
 80016d2:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001858 <run_monitor+0x280>
 80016d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016de:	f140 80a0 	bpl.w	8001822 <run_monitor+0x24a>
 80016e2:	f207 4334 	addw	r3, r7, #1076	; 0x434
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80016ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f6:	f340 8094 	ble.w	8001822 <run_monitor+0x24a>

			//divide the ADC voltage by SAMPLE_BUFFER_LENGTH and store it at the current pointer location
			float scaled_voltage = adc_voltage / (float)SAMPLE_BUFFER_LEN;
 80016fa:	f207 4334 	addw	r3, r7, #1076	; 0x434
 80016fe:	ed93 7a00 	vldr	s14, [r3]
 8001702:	eddf 6a56 	vldr	s13, [pc, #344]	; 800185c <run_monitor+0x284>
 8001706:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800170a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800170e:	edc3 7a00 	vstr	s15, [r3]
			sample_buffer[buffer_pointer] = scaled_voltage;
 8001712:	f8b7 3452 	ldrh.w	r3, [r7, #1106]	; 0x452
 8001716:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	601a      	str	r2, [r3, #0]

			//sum up the entire contents of the sample buffer
			mav_voltage = 0;
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	f207 4254 	addw	r2, r7, #1108	; 0x454
 800172e:	6013      	str	r3, [r2, #0]
			for(int i = 0; i < SAMPLE_BUFFER_LEN; i++) {
 8001730:	2300      	movs	r3, #0
 8001732:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8001736:	e016      	b.n	8001766 <run_monitor+0x18e>
				mav_voltage += sample_buffer[i];
 8001738:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800173c:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	f207 4354 	addw	r3, r7, #1108	; 0x454
 800174c:	ed93 7a00 	vldr	s14, [r3]
 8001750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001754:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8001758:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < SAMPLE_BUFFER_LEN; i++) {
 800175c:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8001760:	3301      	adds	r3, #1
 8001762:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8001766:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800176a:	2bff      	cmp	r3, #255	; 0xff
 800176c:	dde4      	ble.n	8001738 <run_monitor+0x160>
			}

			//compute the SOC from 0 to 1 and store that in the soc queue
			soc = (mav_voltage - MIN_VOLTAGE)/(MAX_VOLTAGE - MIN_VOLTAGE);
 800176e:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 800177a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800177e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001860 <run_monitor+0x288>
 8001782:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001786:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800178a:	edc3 7a00 	vstr	s15, [r3]
			osMessageQueueReset(soc_buf);
 800178e:	4b35      	ldr	r3, [pc, #212]	; (8001864 <run_monitor+0x28c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f008 ff60 	bl	800a658 <osMessageQueueReset>
			osMessageQueuePut(soc_buf, &soc, 0, 0);
 8001798:	4b32      	ldr	r3, [pc, #200]	; (8001864 <run_monitor+0x28c>)
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80017a0:	2300      	movs	r3, #0
 80017a2:	2200      	movs	r2, #0
 80017a4:	f008 fe40 	bl	800a428 <osMessageQueuePut>


			//check if that sum meets the thresholds for low and critical levels (and assert those flags if appropriate)
			if(mav_voltage < SOC_VOLTAGE_CRITICAL) {
 80017a8:	f207 4354 	addw	r3, r7, #1108	; 0x454
 80017ac:	edd3 7a00 	vldr	s15, [r3]
 80017b0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80017b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017bc:	d506      	bpl.n	80017cc <run_monitor+0x1f4>
				osEventFlagsSet(monitor_util_flags, SOC_CRIT_FLAG);
 80017be:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <run_monitor+0x290>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2108      	movs	r1, #8
 80017c4:	4618      	mov	r0, r3
 80017c6:	f008 fc63 	bl	800a090 <osEventFlagsSet>
 80017ca:	e01a      	b.n	8001802 <run_monitor+0x22a>
			}
			else if(mav_voltage < SOC_VOLTAGE_LOW && !soc_low_asserted) {
 80017cc:	f207 4354 	addw	r3, r7, #1108	; 0x454
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80017d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e0:	d50f      	bpl.n	8001802 <run_monitor+0x22a>
 80017e2:	f897 3450 	ldrb.w	r3, [r7, #1104]	; 0x450
 80017e6:	f083 0301 	eor.w	r3, r3, #1
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <run_monitor+0x22a>
				osEventFlagsSet(monitor_util_flags, SOC_LOW_FLAG);
 80017f0:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <run_monitor+0x290>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2104      	movs	r1, #4
 80017f6:	4618      	mov	r0, r3
 80017f8:	f008 fc4a 	bl	800a090 <osEventFlagsSet>
				soc_low_asserted = true; //latch this so we only trigger once
 80017fc:	2301      	movs	r3, #1
 80017fe:	f887 3450 	strb.w	r3, [r7, #1104]	; 0x450
			}

			//increment/wrap around the buffer pointer
			buffer_pointer = (buffer_pointer >= (SAMPLE_BUFFER_LEN-1)) ? 0 : buffer_pointer+1;
 8001802:	f8b7 3452 	ldrh.w	r3, [r7, #1106]	; 0x452
 8001806:	2bfe      	cmp	r3, #254	; 0xfe
 8001808:	d804      	bhi.n	8001814 <run_monitor+0x23c>
 800180a:	f8b7 3452 	ldrh.w	r3, [r7, #1106]	; 0x452
 800180e:	3301      	adds	r3, #1
 8001810:	b29b      	uxth	r3, r3
 8001812:	e000      	b.n	8001816 <run_monitor+0x23e>
 8001814:	2300      	movs	r3, #0
 8001816:	f8a7 3452 	strh.w	r3, [r7, #1106]	; 0x452

			//reset the read fail counter
			read_fail_counter = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	f887 3451 	strb.w	r3, [r7, #1105]	; 0x451
		if(((adc_status & (1<<31)) == 0) && (adc_voltage < SANE_VOLTAGE_UPPER_LIMIT) && (adc_voltage > SANE_VOLTAGE_LOWER_LIMIT)) {
 8001820:	e00e      	b.n	8001840 <run_monitor+0x268>
		}
		//if the ADC read was unsuccessful or the voltage is insane
		else {
			//increment the read fail counter
			read_fail_counter++;
 8001822:	f897 3451 	ldrb.w	r3, [r7, #1105]	; 0x451
 8001826:	3301      	adds	r3, #1
 8001828:	f887 3451 	strb.w	r3, [r7, #1105]	; 0x451

			//if the read fail counter exceeds the fail threshold, assert the appropriate flag
			if(read_fail_counter >= ADC_MAX_READ_FAILS) osEventFlagsSet(monitor_util_flags, SOC_MEASURE_FAIL);
 800182c:	f897 3451 	ldrb.w	r3, [r7, #1105]	; 0x451
 8001830:	2b07      	cmp	r3, #7
 8001832:	d905      	bls.n	8001840 <run_monitor+0x268>
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <run_monitor+0x290>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2110      	movs	r1, #16
 800183a:	4618      	mov	r0, r3
 800183c:	f008 fc28 	bl	800a090 <osEventFlagsSet>
		}

		osDelay(MONITOR_UPDATE_DELAY);
 8001840:	200a      	movs	r0, #10
 8001842:	f008 fba5 	bl	8009f90 <osDelay>
	while(1) {
 8001846:	e6f9      	b.n	800163c <run_monitor+0x64>
 8001848:	de129a61 	.word	0xde129a61
 800184c:	3f822f58 	.word	0x3f822f58
 8001850:	3dd80000 	.word	0x3dd80000
 8001854:	40300000 	.word	0x40300000
 8001858:	420c0000 	.word	0x420c0000
 800185c:	43800000 	.word	0x43800000
 8001860:	41199998 	.word	0x41199998
 8001864:	20000384 	.word	0x20000384
 8001868:	20000380 	.word	0x20000380

0800186c <do_adc_dma>:
	}

	osThreadExit(); //exit gracefully if the function somehow gets here?
}

static uint32_t do_adc_dma(ADC_HandleTypeDef *hadc, uint16_t *buffer, uint32_t len, uint32_t timeout) {
 800186c:	b590      	push	{r4, r7, lr}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	603b      	str	r3, [r7, #0]
	uint32_t start_tick = HAL_GetTick();
 800187a:	f001 fa97 	bl	8002dac <HAL_GetTick>
 800187e:	61f8      	str	r0, [r7, #28]
	uint32_t status; //see if our event flag wait timed out or not
	uint32_t dma_timeout; //computed after the resource is released

	//wait for the ADC to be free, then lock it out (subject to a timeout)
	status = osEventFlagsWait(monitor_util_flags, ADC_READY_FLAG, osFlagsWaitAny, timeout);
 8001880:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <do_adc_dma+0x80>)
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	2200      	movs	r2, #0
 8001888:	2102      	movs	r1, #2
 800188a:	f008 fcd1 	bl	800a230 <osEventFlagsWait>
 800188e:	61b8      	str	r0, [r7, #24]
	if(status & (1<<31)) return status;
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	2b00      	cmp	r3, #0
 8001894:	da01      	bge.n	800189a <do_adc_dma+0x2e>
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	e024      	b.n	80018e4 <do_adc_dma+0x78>
	dma_timeout = (timeout + start_tick) - HAL_GetTick(); //how much remaining time the DMA read should take to meet the timeout
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	18d4      	adds	r4, r2, r3
 80018a0:	f001 fa84 	bl	8002dac <HAL_GetTick>
 80018a4:	4603      	mov	r3, r0
 80018a6:	1ae3      	subs	r3, r4, r3
 80018a8:	617b      	str	r3, [r7, #20]

	//read adc via DMA and wait till it's done
	osEventFlagsClear(monitor_util_flags, DMA_COMPLETE_FLAG); //clear the DMA complete flag before starting the next DMA request (just to make sure)
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <do_adc_dma+0x80>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2101      	movs	r1, #1
 80018b0:	4618      	mov	r0, r3
 80018b2:	f008 fc45 	bl	800a140 <osEventFlagsClear>
	HAL_ADC_Stop_DMA(hadc); //clear the appropriate DMA bits
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f001 fbbe 	bl	8003038 <HAL_ADC_Stop_DMA>
	HAL_ADC_Start_DMA(hadc, (uint32_t*)buffer, len); //restart the DMA request
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	68b9      	ldr	r1, [r7, #8]
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f001 fae5 	bl	8002e90 <HAL_ADC_Start_DMA>
	status = osEventFlagsWait(monitor_util_flags, DMA_COMPLETE_FLAG, osFlagsWaitAny, dma_timeout); //wait for DMA to be complete
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <do_adc_dma+0x80>)
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	2200      	movs	r2, #0
 80018ce:	2101      	movs	r1, #1
 80018d0:	f008 fcae 	bl	800a230 <osEventFlagsWait>
 80018d4:	61b8      	str	r0, [r7, #24]

	//release the ADC resource
	osEventFlagsSet(monitor_util_flags, ADC_READY_FLAG);
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <do_adc_dma+0x80>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2102      	movs	r1, #2
 80018dc:	4618      	mov	r0, r3
 80018de:	f008 fbd7 	bl	800a090 <osEventFlagsSet>
	return status; //return whether the DMA completed successfully or whether it timed out
 80018e2:	69bb      	ldr	r3, [r7, #24]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3724      	adds	r7, #36	; 0x24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd90      	pop	{r4, r7, pc}
 80018ec:	20000380 	.word	0x20000380

080018f0 <HAL_ADC_ConvCpltCallback>:

// ======================== ISRs =========================

//service the interrupt that gets called when the ADC DMA request completes
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	//just set the DMA completion event flag here
	osEventFlagsSet(monitor_util_flags, DMA_COMPLETE_FLAG);
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <HAL_ADC_ConvCpltCallback+0x1c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2101      	movs	r1, #1
 80018fe:	4618      	mov	r0, r3
 8001900:	f008 fbc6 	bl	800a090 <osEventFlagsSet>
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000380 	.word	0x20000380

08001910 <buzzer_init>:
static void do_buzz_warn_low();
static void do_buzz_warn_critical();
static void do_buzz_shutdown();

//============= PUBLIC FUNCTION DEFINITIONS =============
void buzzer_init() {
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0
	//initialize the signal flags for the buzzer thread
	buzzer_action_flags= osEventFlagsNew(NULL);
 8001916:	2000      	movs	r0, #0
 8001918:	f008 fb68 	bl	8009fec <osEventFlagsNew>
 800191c:	4602      	mov	r2, r0
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <buzzer_init+0x54>)
 8001920:	601a      	str	r2, [r3, #0]
	osEventFlagsSet(buzzer_action_flags, BIT_BOOT_UP); //set the boot up bit right away
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <buzzer_init+0x54>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2101      	movs	r1, #1
 8001928:	4618      	mov	r0, r3
 800192a:	f008 fbb1 	bl	800a090 <osEventFlagsSet>

	//initialize the main buzzer thread
	const osThreadAttr_t buzzer_atributes = {
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	2224      	movs	r2, #36	; 0x24
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f00c fd38 	bl	800e3aa <memset>
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <buzzer_init+0x58>)
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	2320      	movs	r3, #32
 8001946:	61fb      	str	r3, [r7, #28]
			.name = "buzzer",
			.priority = (osPriority_t) osPriorityAboveNormal,
			.stack_size = 350 //possibly shrink this a little
	};
	buzzer_handle = osThreadNew(buzzer_thread, NULL, &buzzer_atributes);
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	461a      	mov	r2, r3
 800194c:	2100      	movs	r1, #0
 800194e:	4807      	ldr	r0, [pc, #28]	; (800196c <buzzer_init+0x5c>)
 8001950:	f008 fa10 	bl	8009d74 <osThreadNew>
 8001954:	4602      	mov	r2, r0
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <buzzer_init+0x60>)
 8001958:	601a      	str	r2, [r3, #0]
}
 800195a:	bf00      	nop
 800195c:	3728      	adds	r7, #40	; 0x28
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000390 	.word	0x20000390
 8001968:	0800feb4 	.word	0x0800feb4
 800196c:	080019d5 	.word	0x080019d5
 8001970:	2000038c 	.word	0x2000038c

08001974 <buzz_done_init>:

//just set the action flag for the buzzer thread and return
void buzz_done_init() { osEventFlagsSet(buzzer_action_flags, BIT_DONE_INIT); }
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <buzz_done_init+0x14>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2102      	movs	r1, #2
 800197e:	4618      	mov	r0, r3
 8001980:	f008 fb86 	bl	800a090 <osEventFlagsSet>
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000390 	.word	0x20000390

0800198c <buzz_warn_low>:
void buzz_warn_low() {osEventFlagsSet(buzzer_action_flags, BIT_WARN_LOW); }
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <buzz_warn_low+0x14>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2104      	movs	r1, #4
 8001996:	4618      	mov	r0, r3
 8001998:	f008 fb7a 	bl	800a090 <osEventFlagsSet>
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000390 	.word	0x20000390

080019a4 <buzz_warn_critical>:
void buzz_warn_critical() {osEventFlagsSet(buzzer_action_flags, BIT_WARN_CRIT); }
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <buzz_warn_critical+0x14>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2108      	movs	r1, #8
 80019ae:	4618      	mov	r0, r3
 80019b0:	f008 fb6e 	bl	800a090 <osEventFlagsSet>
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000390 	.word	0x20000390

080019bc <buzz_shutdown>:
void buzz_shutdown() {osEventFlagsSet(buzzer_action_flags, BIT_SHUTDOWN); }
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <buzz_shutdown+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2110      	movs	r1, #16
 80019c6:	4618      	mov	r0, r3
 80019c8:	f008 fb62 	bl	800a090 <osEventFlagsSet>
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000390 	.word	0x20000390

080019d4 <buzzer_thread>:


//====================== PRIVATE FUNCTION DEFINITIONS ======================

//buzzer main thread function
static void buzzer_thread(void* argument) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	while(1) {
		//suspend this thread until any flag is set (and don't clear the set flag)
		osEventFlagsWait(buzzer_action_flags, BIT_ALL_FLAGS, osFlagsNoClear, osWaitForever);
 80019dc:	4b33      	ldr	r3, [pc, #204]	; (8001aac <buzzer_thread+0xd8>)
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	f04f 33ff 	mov.w	r3, #4294967295
 80019e4:	2202      	movs	r2, #2
 80019e6:	211f      	movs	r1, #31
 80019e8:	f008 fc22 	bl	800a230 <osEventFlagsWait>

		//if a flag bit is set, run the appropriate buzzer routine
		//order of the conditionals indicates the priority of the buzz routines
		//each routine will fully complete before going to another routine
		if(osEventFlagsGet(buzzer_action_flags) & BIT_WARN_CRIT) {
 80019ec:	4b2f      	ldr	r3, [pc, #188]	; (8001aac <buzzer_thread+0xd8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f008 fbe9 	bl	800a1c8 <osEventFlagsGet>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d008      	beq.n	8001a12 <buzzer_thread+0x3e>
			do_buzz_warn_critical();
 8001a00:	f000 f90e 	bl	8001c20 <do_buzz_warn_critical>
			osEventFlagsClear(buzzer_action_flags, BIT_WARN_CRIT); //clear the flag manually
 8001a04:	4b29      	ldr	r3, [pc, #164]	; (8001aac <buzzer_thread+0xd8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2108      	movs	r1, #8
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f008 fb98 	bl	800a140 <osEventFlagsClear>
 8001a10:	e7e4      	b.n	80019dc <buzzer_thread+0x8>
		}
		else if (osEventFlagsGet(buzzer_action_flags) & BIT_WARN_LOW) {
 8001a12:	4b26      	ldr	r3, [pc, #152]	; (8001aac <buzzer_thread+0xd8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f008 fbd6 	bl	800a1c8 <osEventFlagsGet>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d008      	beq.n	8001a38 <buzzer_thread+0x64>
			do_buzz_warn_low();
 8001a26:	f000 f8c3 	bl	8001bb0 <do_buzz_warn_low>
			osEventFlagsClear(buzzer_action_flags, BIT_WARN_LOW);
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <buzzer_thread+0xd8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2104      	movs	r1, #4
 8001a30:	4618      	mov	r0, r3
 8001a32:	f008 fb85 	bl	800a140 <osEventFlagsClear>
 8001a36:	e7d1      	b.n	80019dc <buzzer_thread+0x8>
		}
		else if (osEventFlagsGet(buzzer_action_flags) & BIT_DONE_INIT) {
 8001a38:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <buzzer_thread+0xd8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f008 fbc3 	bl	800a1c8 <osEventFlagsGet>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d008      	beq.n	8001a5e <buzzer_thread+0x8a>
			do_buzz_done_init();
 8001a4c:	f000 f86a 	bl	8001b24 <do_buzz_done_init>
			osEventFlagsClear(buzzer_action_flags, BIT_DONE_INIT);
 8001a50:	4b16      	ldr	r3, [pc, #88]	; (8001aac <buzzer_thread+0xd8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2102      	movs	r1, #2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f008 fb72 	bl	800a140 <osEventFlagsClear>
 8001a5c:	e7be      	b.n	80019dc <buzzer_thread+0x8>
		}
		else if (osEventFlagsGet(buzzer_action_flags) & BIT_BOOT_UP) {
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <buzzer_thread+0xd8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f008 fbb0 	bl	800a1c8 <osEventFlagsGet>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d008      	beq.n	8001a84 <buzzer_thread+0xb0>
			do_buzz_boot_up();
 8001a72:	f000 f81d 	bl	8001ab0 <do_buzz_boot_up>
			osEventFlagsClear(buzzer_action_flags, BIT_BOOT_UP);
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <buzzer_thread+0xd8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f008 fb5f 	bl	800a140 <osEventFlagsClear>
 8001a82:	e7ab      	b.n	80019dc <buzzer_thread+0x8>
		}
		else if (osEventFlagsGet(buzzer_action_flags) & BIT_SHUTDOWN) {
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <buzzer_thread+0xd8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f008 fb9d 	bl	800a1c8 <osEventFlagsGet>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0a1      	beq.n	80019dc <buzzer_thread+0x8>
			do_buzz_shutdown();
 8001a98:	f000 f8ea 	bl	8001c70 <do_buzz_shutdown>
			osEventFlagsClear(buzzer_action_flags, BIT_SHUTDOWN);
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <buzzer_thread+0xd8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2110      	movs	r1, #16
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f008 fb4c 	bl	800a140 <osEventFlagsClear>
		osEventFlagsWait(buzzer_action_flags, BIT_ALL_FLAGS, osFlagsNoClear, osWaitForever);
 8001aa8:	e798      	b.n	80019dc <buzzer_thread+0x8>
 8001aaa:	bf00      	nop
 8001aac:	20000390 	.word	0x20000390

08001ab0 <do_buzz_boot_up>:
	}
	//gracefully exiting if it somehow gets here
	osThreadExit();
}

static void do_buzz_boot_up() {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	TIME_PERIOD(1000);
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <do_buzz_boot_up+0x70>)
 8001ab6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	4818      	ldr	r0, [pc, #96]	; (8001b20 <do_buzz_boot_up+0x70>)
 8001abe:	f004 fa2f 	bl	8005f20 <HAL_TIM_Base_Init>
	START();
 8001ac2:	2108      	movs	r1, #8
 8001ac4:	4816      	ldr	r0, [pc, #88]	; (8001b20 <do_buzz_boot_up+0x70>)
 8001ac6:	f004 faaf 	bl	8006028 <HAL_TIM_OC_Start>
	osDelay(BOOT_BUZZ_DELAY);
 8001aca:	2096      	movs	r0, #150	; 0x96
 8001acc:	f008 fa60 	bl	8009f90 <osDelay>

	TIME_PERIOD(800); //major 3rd from base
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <do_buzz_boot_up+0x70>)
 8001ad2:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	4811      	ldr	r0, [pc, #68]	; (8001b20 <do_buzz_boot_up+0x70>)
 8001ada:	f004 fa21 	bl	8005f20 <HAL_TIM_Base_Init>
	osDelay(BOOT_BUZZ_DELAY);
 8001ade:	2096      	movs	r0, #150	; 0x96
 8001ae0:	f008 fa56 	bl	8009f90 <osDelay>

	TIME_PERIOD(666); //perfect 5th from base
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <do_buzz_boot_up+0x70>)
 8001ae6:	f240 229a 	movw	r2, #666	; 0x29a
 8001aea:	60da      	str	r2, [r3, #12]
 8001aec:	480c      	ldr	r0, [pc, #48]	; (8001b20 <do_buzz_boot_up+0x70>)
 8001aee:	f004 fa17 	bl	8005f20 <HAL_TIM_Base_Init>
	osDelay(BOOT_BUZZ_DELAY);
 8001af2:	2096      	movs	r0, #150	; 0x96
 8001af4:	f008 fa4c 	bl	8009f90 <osDelay>

	TIME_PERIOD(500); //perfect octave from base
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <do_buzz_boot_up+0x70>)
 8001afa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001afe:	60da      	str	r2, [r3, #12]
 8001b00:	4807      	ldr	r0, [pc, #28]	; (8001b20 <do_buzz_boot_up+0x70>)
 8001b02:	f004 fa0d 	bl	8005f20 <HAL_TIM_Base_Init>
	osDelay(BOOT_BUZZ_DELAY);
 8001b06:	2096      	movs	r0, #150	; 0x96
 8001b08:	f008 fa42 	bl	8009f90 <osDelay>

	STOP();
 8001b0c:	2108      	movs	r1, #8
 8001b0e:	4804      	ldr	r0, [pc, #16]	; (8001b20 <do_buzz_boot_up+0x70>)
 8001b10:	f004 fabc 	bl	800608c <HAL_TIM_OC_Stop>
	osDelay(250); //chill for a bit before returning
 8001b14:	20fa      	movs	r0, #250	; 0xfa
 8001b16:	f008 fa3b 	bl	8009f90 <osDelay>
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200091f4 	.word	0x200091f4

08001b24 <do_buzz_done_init>:

static void do_buzz_done_init() {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
	for(int i = 0; i < 1; i++) {
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	e035      	b.n	8001b9c <do_buzz_done_init+0x78>
		TIME_PERIOD(1000);
 8001b30:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <do_buzz_done_init+0x88>)
 8001b32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b36:	60da      	str	r2, [r3, #12]
 8001b38:	481c      	ldr	r0, [pc, #112]	; (8001bac <do_buzz_done_init+0x88>)
 8001b3a:	f004 f9f1 	bl	8005f20 <HAL_TIM_Base_Init>
		START();
 8001b3e:	2108      	movs	r1, #8
 8001b40:	481a      	ldr	r0, [pc, #104]	; (8001bac <do_buzz_done_init+0x88>)
 8001b42:	f004 fa71 	bl	8006028 <HAL_TIM_OC_Start>
		osDelay(INIT_DONE_DELAY);
 8001b46:	2032      	movs	r0, #50	; 0x32
 8001b48:	f008 fa22 	bl	8009f90 <osDelay>

		TIME_PERIOD(800); //major third above base note
 8001b4c:	4b17      	ldr	r3, [pc, #92]	; (8001bac <do_buzz_done_init+0x88>)
 8001b4e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001b52:	60da      	str	r2, [r3, #12]
 8001b54:	4815      	ldr	r0, [pc, #84]	; (8001bac <do_buzz_done_init+0x88>)
 8001b56:	f004 f9e3 	bl	8005f20 <HAL_TIM_Base_Init>
		osDelay(INIT_DONE_DELAY);
 8001b5a:	2032      	movs	r0, #50	; 0x32
 8001b5c:	f008 fa18 	bl	8009f90 <osDelay>

		TIME_PERIOD(666); //perfect fifth from base note
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <do_buzz_done_init+0x88>)
 8001b62:	f240 229a 	movw	r2, #666	; 0x29a
 8001b66:	60da      	str	r2, [r3, #12]
 8001b68:	4810      	ldr	r0, [pc, #64]	; (8001bac <do_buzz_done_init+0x88>)
 8001b6a:	f004 f9d9 	bl	8005f20 <HAL_TIM_Base_Init>
		osDelay(INIT_DONE_DELAY);
 8001b6e:	2032      	movs	r0, #50	; 0x32
 8001b70:	f008 fa0e 	bl	8009f90 <osDelay>

		TIME_PERIOD(500); //octave from base note
 8001b74:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <do_buzz_done_init+0x88>)
 8001b76:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b7a:	60da      	str	r2, [r3, #12]
 8001b7c:	480b      	ldr	r0, [pc, #44]	; (8001bac <do_buzz_done_init+0x88>)
 8001b7e:	f004 f9cf 	bl	8005f20 <HAL_TIM_Base_Init>
		osDelay(INIT_DONE_DELAY);
 8001b82:	2032      	movs	r0, #50	; 0x32
 8001b84:	f008 fa04 	bl	8009f90 <osDelay>

		STOP();
 8001b88:	2108      	movs	r1, #8
 8001b8a:	4808      	ldr	r0, [pc, #32]	; (8001bac <do_buzz_done_init+0x88>)
 8001b8c:	f004 fa7e 	bl	800608c <HAL_TIM_OC_Stop>
		osDelay(INIT_DONE_PAUSE);
 8001b90:	2096      	movs	r0, #150	; 0x96
 8001b92:	f008 f9fd 	bl	8009f90 <osDelay>
	for(int i = 0; i < 1; i++) {
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	ddc6      	ble.n	8001b30 <do_buzz_done_init+0xc>
	}
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200091f4 	.word	0x200091f4

08001bb0 <do_buzz_warn_low>:

static void do_buzz_warn_low() {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++) {
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	e028      	b.n	8001c0e <do_buzz_warn_low+0x5e>
		TIME_PERIOD(125);
 8001bbc:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <do_buzz_warn_low+0x6c>)
 8001bbe:	227d      	movs	r2, #125	; 0x7d
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	4816      	ldr	r0, [pc, #88]	; (8001c1c <do_buzz_warn_low+0x6c>)
 8001bc4:	f004 f9ac 	bl	8005f20 <HAL_TIM_Base_Init>
		START();
 8001bc8:	2108      	movs	r1, #8
 8001bca:	4814      	ldr	r0, [pc, #80]	; (8001c1c <do_buzz_warn_low+0x6c>)
 8001bcc:	f004 fa2c 	bl	8006028 <HAL_TIM_OC_Start>
		osDelay(WARN_BUZZ_TIME);
 8001bd0:	204b      	movs	r0, #75	; 0x4b
 8001bd2:	f008 f9dd 	bl	8009f90 <osDelay>
		TIME_PERIOD(188);
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <do_buzz_warn_low+0x6c>)
 8001bd8:	22bc      	movs	r2, #188	; 0xbc
 8001bda:	60da      	str	r2, [r3, #12]
 8001bdc:	480f      	ldr	r0, [pc, #60]	; (8001c1c <do_buzz_warn_low+0x6c>)
 8001bde:	f004 f99f 	bl	8005f20 <HAL_TIM_Base_Init>
		osDelay(WARN_BUZZ_TIME);
 8001be2:	204b      	movs	r0, #75	; 0x4b
 8001be4:	f008 f9d4 	bl	8009f90 <osDelay>
		TIME_PERIOD(250);
 8001be8:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <do_buzz_warn_low+0x6c>)
 8001bea:	22fa      	movs	r2, #250	; 0xfa
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	480b      	ldr	r0, [pc, #44]	; (8001c1c <do_buzz_warn_low+0x6c>)
 8001bf0:	f004 f996 	bl	8005f20 <HAL_TIM_Base_Init>
		osDelay(WARN_BUZZ_TIME);
 8001bf4:	204b      	movs	r0, #75	; 0x4b
 8001bf6:	f008 f9cb 	bl	8009f90 <osDelay>
		STOP();
 8001bfa:	2108      	movs	r1, #8
 8001bfc:	4807      	ldr	r0, [pc, #28]	; (8001c1c <do_buzz_warn_low+0x6c>)
 8001bfe:	f004 fa45 	bl	800608c <HAL_TIM_OC_Stop>

		osDelay(WARN_OFF_TIME);
 8001c02:	20fa      	movs	r0, #250	; 0xfa
 8001c04:	f008 f9c4 	bl	8009f90 <osDelay>
	for(int i = 0; i < 8; i++) {
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b07      	cmp	r3, #7
 8001c12:	ddd3      	ble.n	8001bbc <do_buzz_warn_low+0xc>
	}

}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	200091f4 	.word	0x200091f4

08001c20 <do_buzz_warn_critical>:

static void do_buzz_warn_critical() {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++) {
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	e017      	b.n	8001c5c <do_buzz_warn_critical+0x3c>
		TIME_PERIOD(250); //125 before, making 250 to make testing less annoying
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <do_buzz_warn_critical+0x4c>)
 8001c2e:	22fa      	movs	r2, #250	; 0xfa
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	480e      	ldr	r0, [pc, #56]	; (8001c6c <do_buzz_warn_critical+0x4c>)
 8001c34:	f004 f974 	bl	8005f20 <HAL_TIM_Base_Init>
		START();
 8001c38:	2108      	movs	r1, #8
 8001c3a:	480c      	ldr	r0, [pc, #48]	; (8001c6c <do_buzz_warn_critical+0x4c>)
 8001c3c:	f004 f9f4 	bl	8006028 <HAL_TIM_OC_Start>
		osDelay(CRITIAL_ON_TIME);
 8001c40:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001c44:	f008 f9a4 	bl	8009f90 <osDelay>

		STOP();
 8001c48:	2108      	movs	r1, #8
 8001c4a:	4808      	ldr	r0, [pc, #32]	; (8001c6c <do_buzz_warn_critical+0x4c>)
 8001c4c:	f004 fa1e 	bl	800608c <HAL_TIM_OC_Stop>
		osDelay(CRITICAL_OFF_TIME);
 8001c50:	2064      	movs	r0, #100	; 0x64
 8001c52:	f008 f99d 	bl	8009f90 <osDelay>
	for(int i = 0; i < 8; i++) {
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b07      	cmp	r3, #7
 8001c60:	dde4      	ble.n	8001c2c <do_buzz_warn_critical+0xc>
	}
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200091f4 	.word	0x200091f4

08001c70 <do_buzz_shutdown>:

static void do_buzz_shutdown() {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
	TIME_PERIOD(500);
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <do_buzz_shutdown+0x70>)
 8001c76:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	4818      	ldr	r0, [pc, #96]	; (8001ce0 <do_buzz_shutdown+0x70>)
 8001c7e:	f004 f94f 	bl	8005f20 <HAL_TIM_Base_Init>
	START();
 8001c82:	2108      	movs	r1, #8
 8001c84:	4816      	ldr	r0, [pc, #88]	; (8001ce0 <do_buzz_shutdown+0x70>)
 8001c86:	f004 f9cf 	bl	8006028 <HAL_TIM_OC_Start>
	osDelay(BOOT_BUZZ_DELAY);
 8001c8a:	2096      	movs	r0, #150	; 0x96
 8001c8c:	f008 f980 	bl	8009f90 <osDelay>

	TIME_PERIOD(666); //major 3rd from base
 8001c90:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <do_buzz_shutdown+0x70>)
 8001c92:	f240 229a 	movw	r2, #666	; 0x29a
 8001c96:	60da      	str	r2, [r3, #12]
 8001c98:	4811      	ldr	r0, [pc, #68]	; (8001ce0 <do_buzz_shutdown+0x70>)
 8001c9a:	f004 f941 	bl	8005f20 <HAL_TIM_Base_Init>
	osDelay(BOOT_BUZZ_DELAY);
 8001c9e:	2096      	movs	r0, #150	; 0x96
 8001ca0:	f008 f976 	bl	8009f90 <osDelay>

	TIME_PERIOD(800); //perfect 5th from base
 8001ca4:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <do_buzz_shutdown+0x70>)
 8001ca6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	480c      	ldr	r0, [pc, #48]	; (8001ce0 <do_buzz_shutdown+0x70>)
 8001cae:	f004 f937 	bl	8005f20 <HAL_TIM_Base_Init>
	osDelay(BOOT_BUZZ_DELAY);
 8001cb2:	2096      	movs	r0, #150	; 0x96
 8001cb4:	f008 f96c 	bl	8009f90 <osDelay>

	TIME_PERIOD(1000); //perfect octave from base
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <do_buzz_shutdown+0x70>)
 8001cba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cbe:	60da      	str	r2, [r3, #12]
 8001cc0:	4807      	ldr	r0, [pc, #28]	; (8001ce0 <do_buzz_shutdown+0x70>)
 8001cc2:	f004 f92d 	bl	8005f20 <HAL_TIM_Base_Init>
	osDelay(BOOT_BUZZ_DELAY);
 8001cc6:	2096      	movs	r0, #150	; 0x96
 8001cc8:	f008 f962 	bl	8009f90 <osDelay>

	STOP();
 8001ccc:	2108      	movs	r1, #8
 8001cce:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <do_buzz_shutdown+0x70>)
 8001cd0:	f004 f9dc 	bl	800608c <HAL_TIM_OC_Stop>
	osDelay(250); //chill for a bit before returning
 8001cd4:	20fa      	movs	r0, #250	; 0xfa
 8001cd6:	f008 f95b 	bl	8009f90 <osDelay>
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200091f4 	.word	0x200091f4

08001ce4 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <shutdown>:
osMessageQueueId_t soc_buf;

#define ADC_OVERSAMPLES 16
volatile uint16_t adc_results[ADC_OVERSAMPLES];

void shutdown() {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
	//remember to de-init the filesystem
	pushbutton_led_off();
 8001d00:	f000 fba4 	bl	800244c <pushbutton_led_off>
	buzz_shutdown();
 8001d04:	f7ff fe5a 	bl	80019bc <buzz_shutdown>
	//turn off the headlights and taillights
	HAL_GPIO_WritePin(FET_DRV_GPIO_Port, FET_DRV_Pin, GPIO_PIN_RESET); //logic rail should be enabled long enough to finish buzz
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2104      	movs	r1, #4
 8001d0c:	4804      	ldr	r0, [pc, #16]	; (8001d20 <shutdown+0x24>)
 8001d0e:	f002 faeb 	bl	80042e8 <HAL_GPIO_WritePin>
	osDelay(1000);
 8001d12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d16:	f008 f93b 	bl	8009f90 <osDelay>
	HAL_DeInit();
 8001d1a:	f000 ffff 	bl	8002d1c <HAL_DeInit>
	while(true);
 8001d1e:	e7fe      	b.n	8001d1e <shutdown+0x22>
 8001d20:	40020800 	.word	0x40020800

08001d24 <doStateMachine>:
}

//basically our main code goes here
void doStateMachine(void *argument) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
	//initialize the pushbutton "module"
	//and store the pointer to its event flags
	pb_flags = pushbutton_init();
 8001d2c:	f000 fb2e 	bl	800238c <pushbutton_init>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b4d      	ldr	r3, [pc, #308]	; (8001e68 <doStateMachine+0x144>)
 8001d34:	601a      	str	r2, [r3, #0]
	soc_buf = monitor_init();
 8001d36:	f7ff fb1d 	bl	8001374 <monitor_init>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	4b4b      	ldr	r3, [pc, #300]	; (8001e6c <doStateMachine+0x148>)
 8001d3e:	601a      	str	r2, [r3, #0]
	buzzer_init(); //buzz that we've booted and start the buzzer thread
 8001d40:	f7ff fde6 	bl	8001910 <buzzer_init>
	pushbutton_led_fade(); //fade the LED button on the precharge animation
 8001d44:	f000 fb8e 	bl	8002464 <pushbutton_led_fade>

	osEventFlagsWait(pb_flags, BUTTON_LONG_PRESSED, osFlagsWaitAny, osWaitForever); //precharge for 3 seconds
 8001d48:	4b47      	ldr	r3, [pc, #284]	; (8001e68 <doStateMachine+0x144>)
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d50:	2200      	movs	r2, #0
 8001d52:	2108      	movs	r1, #8
 8001d54:	f008 fa6c 	bl	800a230 <osEventFlagsWait>
	if(!v_sys_check(20, &hadc1)) shutdown(); //only start the main thread if the voltage is above 20V
 8001d58:	4845      	ldr	r0, [pc, #276]	; (8001e70 <doStateMachine+0x14c>)
 8001d5a:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001d5e:	f7ff fb4f 	bl	8001400 <v_sys_check>
 8001d62:	4603      	mov	r3, r0
 8001d64:	f083 0301 	eor.w	r3, r3, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <doStateMachine+0x4e>
 8001d6e:	f7ff ffc5 	bl	8001cfc <shutdown>

	HAL_GPIO_WritePin(FET_DRV_GPIO_Port, FET_DRV_Pin, GPIO_PIN_SET); //enable the high side FETs to latch power on
 8001d72:	2201      	movs	r2, #1
 8001d74:	2104      	movs	r1, #4
 8001d76:	483f      	ldr	r0, [pc, #252]	; (8001e74 <doStateMachine+0x150>)
 8001d78:	f002 fab6 	bl	80042e8 <HAL_GPIO_WritePin>

	monitor_start(&hadc1); //start the battery monitor
 8001d7c:	483c      	ldr	r0, [pc, #240]	; (8001e70 <doStateMachine+0x14c>)
 8001d7e:	f7ff fb17 	bl	80013b0 <monitor_start>
	bargraph_init(soc_buf); //start the bargraph and pass it the ID of the SOC buffer
 8001d82:	4b3a      	ldr	r3, [pc, #232]	; (8001e6c <doStateMachine+0x148>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff f91a 	bl	8000fc0 <bargraph_init>

	buzz_done_init(); //finished all the initialization and fully powered up
 8001d8c:	f7ff fdf2 	bl	8001974 <buzz_done_init>
	pushbutton_led_on();
 8001d90:	f000 fb50 	bl	8002434 <pushbutton_led_on>
	osEventFlagsClear(pb_flags, BUTTON_FLAGS_ALL); //clear all button flags so the board isn't shut down immediately
 8001d94:	4b34      	ldr	r3, [pc, #208]	; (8001e68 <doStateMachine+0x144>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	210f      	movs	r1, #15
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f008 f9d0 	bl	800a140 <osEventFlagsClear>

	uint32_t shutdown_tick = -1; //basically never shut down unless SOC critical or monitor failure
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295
 8001da4:	60fb      	str	r3, [r7, #12]
	bool shutdown_latched = false; //flag that says we latched a shutdown signal
 8001da6:	2300      	movs	r3, #0
 8001da8:	72fb      	strb	r3, [r7, #11]

	while(1) {
		//do datalogging
		//handle the remote control input
		if(pushbutton_bumped(true)) bargraph_draw_soc(); //report SOC on short button press
 8001daa:	2001      	movs	r0, #1
 8001dac:	f000 fb98 	bl	80024e0 <pushbutton_bumped>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <doStateMachine+0x96>
 8001db6:	f7ff f959 	bl	800106c <bargraph_draw_soc>
		if(pushbutton_short_pressed(true)) pushbutton_led_flash(); //alert the user that a continued hold will shut down the board
 8001dba:	2001      	movs	r0, #1
 8001dbc:	f000 fbb6 	bl	800252c <pushbutton_short_pressed>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <doStateMachine+0xa6>
 8001dc6:	f000 fb59 	bl	800247c <pushbutton_led_flash>
		if(pushbutton_long_pressed(true)) shutdown(); //shutdown the board on long-press
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f000 fbd4 	bl	8002578 <pushbutton_long_pressed>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <doStateMachine+0xb6>
 8001dd6:	f7ff ff91 	bl	8001cfc <shutdown>
		if(pushbutton_released(true)) pushbutton_led_on(); //light the LED solid when the button is released (in case of flashing)
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f000 fb5a 	bl	8002494 <pushbutton_released>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <doStateMachine+0xc6>
 8001de6:	f000 fb25 	bl	8002434 <pushbutton_led_on>

		if(monitor_soc_crit(true) && !shutdown_latched) { //splitting this and the following so we can store separate log messages
 8001dea:	2001      	movs	r0, #1
 8001dec:	f7ff fba8 	bl	8001540 <monitor_soc_crit>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d010      	beq.n	8001e18 <doStateMachine+0xf4>
 8001df6:	7afb      	ldrb	r3, [r7, #11]
 8001df8:	f083 0301 	eor.w	r3, r3, #1
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00a      	beq.n	8001e18 <doStateMachine+0xf4>
			buzz_warn_critical();
 8001e02:	f7ff fdcf 	bl	80019a4 <buzz_warn_critical>
			shutdown_tick = HAL_GetTick() + 10000;
 8001e06:	f000 ffd1 	bl	8002dac <HAL_GetTick>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001e10:	3310      	adds	r3, #16
 8001e12:	60fb      	str	r3, [r7, #12]
			shutdown_latched = true;
 8001e14:	2301      	movs	r3, #1
 8001e16:	72fb      	strb	r3, [r7, #11]
		}
		if(monitor_read_fail(true) && !shutdown_latched) {
 8001e18:	2001      	movs	r0, #1
 8001e1a:	f7ff fbb7 	bl	800158c <monitor_read_fail>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d010      	beq.n	8001e46 <doStateMachine+0x122>
 8001e24:	7afb      	ldrb	r3, [r7, #11]
 8001e26:	f083 0301 	eor.w	r3, r3, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00a      	beq.n	8001e46 <doStateMachine+0x122>
			buzz_warn_critical();
 8001e30:	f7ff fdb8 	bl	80019a4 <buzz_warn_critical>
			shutdown_tick = HAL_GetTick() + 10000;
 8001e34:	f000 ffba 	bl	8002dac <HAL_GetTick>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001e3e:	3310      	adds	r3, #16
 8001e40:	60fb      	str	r3, [r7, #12]
			shutdown_latched = true;
 8001e42:	2301      	movs	r3, #1
 8001e44:	72fb      	strb	r3, [r7, #11]
		}
		if(monitor_soc_low(true)) buzz_warn_low();
 8001e46:	2001      	movs	r0, #1
 8001e48:	f7ff fb54 	bl	80014f4 <monitor_soc_low>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <doStateMachine+0x132>
 8001e52:	f7ff fd9b 	bl	800198c <buzz_warn_low>
		if(HAL_GetTick() > shutdown_tick) shutdown();
 8001e56:	f000 ffa9 	bl	8002dac <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d2a3      	bcs.n	8001daa <doStateMachine+0x86>
 8001e62:	f7ff ff4b 	bl	8001cfc <shutdown>
		if(pushbutton_bumped(true)) bargraph_draw_soc(); //report SOC on short button press
 8001e66:	e7a0      	b.n	8001daa <doStateMachine+0x86>
 8001e68:	200090e0 	.word	0x200090e0
 8001e6c:	200090e4 	.word	0x200090e4
 8001e70:	2000912c 	.word	0x2000912c
 8001e74:	40020800 	.word	0x40020800

08001e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e7c:	f000 ff2c 	bl	8002cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e80:	f000 f824 	bl	8001ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e84:	f000 f9ce 	bl	8002224 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e88:	f000 f9ac 	bl	80021e4 <MX_DMA_Init>
  MX_TIM2_Init();
 8001e8c:	f000 f8da 	bl	8002044 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001e90:	f000 f94e 	bl	8002130 <MX_TIM5_Init>
  MX_ADC1_Init();
 8001e94:	f000 f884 	bl	8001fa0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11);
 8001e98:	4808      	ldr	r0, [pc, #32]	; (8001ebc <main+0x44>)
 8001e9a:	f004 f86c 	bl	8005f76 <HAL_TIM_Base_Start_IT>
  MX_USB_DEVICE_Init();
 8001e9e:	f00b fd65 	bl	800d96c <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ea2:	f007 fefd 	bl	8009ca0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of state_machine */
  state_machineHandle = osThreadNew(doStateMachine, NULL, &state_machine_attributes);
 8001ea6:	4a06      	ldr	r2, [pc, #24]	; (8001ec0 <main+0x48>)
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4806      	ldr	r0, [pc, #24]	; (8001ec4 <main+0x4c>)
 8001eac:	f007 ff62 	bl	8009d74 <osThreadNew>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <main+0x50>)
 8001eb4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001eb6:	f007 ff27 	bl	8009d08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001eba:	e7fe      	b.n	8001eba <main+0x42>
 8001ebc:	20009238 	.word	0x20009238
 8001ec0:	0800ff30 	.word	0x0800ff30
 8001ec4:	08001d25 	.word	0x08001d25
 8001ec8:	20009234 	.word	0x20009234

08001ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b094      	sub	sp, #80	; 0x50
 8001ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ed2:	f107 0320 	add.w	r3, r7, #32
 8001ed6:	2230      	movs	r2, #48	; 0x30
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f00c fa65 	bl	800e3aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	4b28      	ldr	r3, [pc, #160]	; (8001f98 <SystemClock_Config+0xcc>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	4a27      	ldr	r2, [pc, #156]	; (8001f98 <SystemClock_Config+0xcc>)
 8001efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efe:	6413      	str	r3, [r2, #64]	; 0x40
 8001f00:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <SystemClock_Config+0xcc>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <SystemClock_Config+0xd0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f18:	4a20      	ldr	r2, [pc, #128]	; (8001f9c <SystemClock_Config+0xd0>)
 8001f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <SystemClock_Config+0xd0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001f30:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f36:	2302      	movs	r3, #2
 8001f38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f40:	2304      	movs	r3, #4
 8001f42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001f44:	23c0      	movs	r3, #192	; 0xc0
 8001f46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001f48:	2306      	movs	r3, #6
 8001f4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001f4c:	2308      	movs	r3, #8
 8001f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f50:	f107 0320 	add.w	r3, r7, #32
 8001f54:	4618      	mov	r0, r3
 8001f56:	f003 fb63 	bl	8005620 <HAL_RCC_OscConfig>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001f60:	f000 fa0c 	bl	800237c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f64:	230f      	movs	r3, #15
 8001f66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f7a:	f107 030c 	add.w	r3, r7, #12
 8001f7e:	2102      	movs	r1, #2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 fdbd 	bl	8005b00 <HAL_RCC_ClockConfig>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001f8c:	f000 f9f6 	bl	800237c <Error_Handler>
  }
}
 8001f90:	bf00      	nop
 8001f92:	3750      	adds	r7, #80	; 0x50
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40007000 	.word	0x40007000

08001fa0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fa6:	463b      	mov	r3, r7
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001fb2:	4b21      	ldr	r3, [pc, #132]	; (8002038 <MX_ADC1_Init+0x98>)
 8001fb4:	4a21      	ldr	r2, [pc, #132]	; (800203c <MX_ADC1_Init+0x9c>)
 8001fb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001fb8:	4b1f      	ldr	r3, [pc, #124]	; (8002038 <MX_ADC1_Init+0x98>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fbe:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <MX_ADC1_Init+0x98>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001fc4:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <MX_ADC1_Init+0x98>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fca:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <MX_ADC1_Init+0x98>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fd0:	4b19      	ldr	r3, [pc, #100]	; (8002038 <MX_ADC1_Init+0x98>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fd8:	4b17      	ldr	r3, [pc, #92]	; (8002038 <MX_ADC1_Init+0x98>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fde:	4b16      	ldr	r3, [pc, #88]	; (8002038 <MX_ADC1_Init+0x98>)
 8001fe0:	4a17      	ldr	r2, [pc, #92]	; (8002040 <MX_ADC1_Init+0xa0>)
 8001fe2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fe4:	4b14      	ldr	r3, [pc, #80]	; (8002038 <MX_ADC1_Init+0x98>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001fea:	4b13      	ldr	r3, [pc, #76]	; (8002038 <MX_ADC1_Init+0x98>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ff0:	4b11      	ldr	r3, [pc, #68]	; (8002038 <MX_ADC1_Init+0x98>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <MX_ADC1_Init+0x98>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ffe:	480e      	ldr	r0, [pc, #56]	; (8002038 <MX_ADC1_Init+0x98>)
 8002000:	f000 ff02 	bl	8002e08 <HAL_ADC_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800200a:	f000 f9b7 	bl	800237c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800200e:	230a      	movs	r3, #10
 8002010:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002012:	2301      	movs	r3, #1
 8002014:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002016:	2300      	movs	r3, #0
 8002018:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800201a:	463b      	mov	r3, r7
 800201c:	4619      	mov	r1, r3
 800201e:	4806      	ldr	r0, [pc, #24]	; (8002038 <MX_ADC1_Init+0x98>)
 8002020:	f001 f868 	bl	80030f4 <HAL_ADC_ConfigChannel>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800202a:	f000 f9a7 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	2000912c 	.word	0x2000912c
 800203c:	40012000 	.word	0x40012000
 8002040:	0f000001 	.word	0x0f000001

08002044 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08e      	sub	sp, #56	; 0x38
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800204a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002058:	f107 0320 	add.w	r3, r7, #32
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
 8002070:	615a      	str	r2, [r3, #20]
 8002072:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002074:	4b2d      	ldr	r3, [pc, #180]	; (800212c <MX_TIM2_Init+0xe8>)
 8002076:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800207a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 800207c:	4b2b      	ldr	r3, [pc, #172]	; (800212c <MX_TIM2_Init+0xe8>)
 800207e:	2240      	movs	r2, #64	; 0x40
 8002080:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002082:	4b2a      	ldr	r3, [pc, #168]	; (800212c <MX_TIM2_Init+0xe8>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002088:	4b28      	ldr	r3, [pc, #160]	; (800212c <MX_TIM2_Init+0xe8>)
 800208a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800208e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002090:	4b26      	ldr	r3, [pc, #152]	; (800212c <MX_TIM2_Init+0xe8>)
 8002092:	2200      	movs	r2, #0
 8002094:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002096:	4b25      	ldr	r3, [pc, #148]	; (800212c <MX_TIM2_Init+0xe8>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800209c:	4823      	ldr	r0, [pc, #140]	; (800212c <MX_TIM2_Init+0xe8>)
 800209e:	f003 ff3f 	bl	8005f20 <HAL_TIM_Base_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80020a8:	f000 f968 	bl	800237c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020b6:	4619      	mov	r1, r3
 80020b8:	481c      	ldr	r0, [pc, #112]	; (800212c <MX_TIM2_Init+0xe8>)
 80020ba:	f004 fabb 	bl	8006634 <HAL_TIM_ConfigClockSource>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80020c4:	f000 f95a 	bl	800237c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80020c8:	4818      	ldr	r0, [pc, #96]	; (800212c <MX_TIM2_Init+0xe8>)
 80020ca:	f003 ff78 	bl	8005fbe <HAL_TIM_OC_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80020d4:	f000 f952 	bl	800237c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d8:	2300      	movs	r3, #0
 80020da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020dc:	2300      	movs	r3, #0
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020e0:	f107 0320 	add.w	r3, r7, #32
 80020e4:	4619      	mov	r1, r3
 80020e6:	4811      	ldr	r0, [pc, #68]	; (800212c <MX_TIM2_Init+0xe8>)
 80020e8:	f004 fe50 	bl	8006d8c <HAL_TIMEx_MasterConfigSynchronization>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80020f2:	f000 f943 	bl	800237c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80020f6:	2330      	movs	r3, #48	; 0x30
 80020f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002106:	1d3b      	adds	r3, r7, #4
 8002108:	2208      	movs	r2, #8
 800210a:	4619      	mov	r1, r3
 800210c:	4807      	ldr	r0, [pc, #28]	; (800212c <MX_TIM2_Init+0xe8>)
 800210e:	f004 f96b 	bl	80063e8 <HAL_TIM_OC_ConfigChannel>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002118:	f000 f930 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800211c:	4803      	ldr	r0, [pc, #12]	; (800212c <MX_TIM2_Init+0xe8>)
 800211e:	f000 fc75 	bl	8002a0c <HAL_TIM_MspPostInit>

}
 8002122:	bf00      	nop
 8002124:	3738      	adds	r7, #56	; 0x38
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	200091f4 	.word	0x200091f4

08002130 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	; 0x28
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002136:	f107 0320 	add.w	r3, r7, #32
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]
 8002148:	609a      	str	r2, [r3, #8]
 800214a:	60da      	str	r2, [r3, #12]
 800214c:	611a      	str	r2, [r3, #16]
 800214e:	615a      	str	r2, [r3, #20]
 8002150:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002152:	4b22      	ldr	r3, [pc, #136]	; (80021dc <MX_TIM5_Init+0xac>)
 8002154:	4a22      	ldr	r2, [pc, #136]	; (80021e0 <MX_TIM5_Init+0xb0>)
 8002156:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63;
 8002158:	4b20      	ldr	r3, [pc, #128]	; (80021dc <MX_TIM5_Init+0xac>)
 800215a:	223f      	movs	r2, #63	; 0x3f
 800215c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215e:	4b1f      	ldr	r3, [pc, #124]	; (80021dc <MX_TIM5_Init+0xac>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8002164:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <MX_TIM5_Init+0xac>)
 8002166:	f240 32e7 	movw	r2, #999	; 0x3e7
 800216a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800216c:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <MX_TIM5_Init+0xac>)
 800216e:	2200      	movs	r2, #0
 8002170:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002172:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <MX_TIM5_Init+0xac>)
 8002174:	2200      	movs	r2, #0
 8002176:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002178:	4818      	ldr	r0, [pc, #96]	; (80021dc <MX_TIM5_Init+0xac>)
 800217a:	f003 ffcf 	bl	800611c <HAL_TIM_PWM_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002184:	f000 f8fa 	bl	800237c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002188:	2300      	movs	r3, #0
 800218a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800218c:	2300      	movs	r3, #0
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002190:	f107 0320 	add.w	r3, r7, #32
 8002194:	4619      	mov	r1, r3
 8002196:	4811      	ldr	r0, [pc, #68]	; (80021dc <MX_TIM5_Init+0xac>)
 8002198:	f004 fdf8 	bl	8006d8c <HAL_TIMEx_MasterConfigSynchronization>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80021a2:	f000 f8eb 	bl	800237c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021a6:	2360      	movs	r3, #96	; 0x60
 80021a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 127;
 80021aa:	237f      	movs	r3, #127	; 0x7f
 80021ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	2200      	movs	r2, #0
 80021ba:	4619      	mov	r1, r3
 80021bc:	4807      	ldr	r0, [pc, #28]	; (80021dc <MX_TIM5_Init+0xac>)
 80021be:	f004 f973 	bl	80064a8 <HAL_TIM_PWM_ConfigChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80021c8:	f000 f8d8 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80021cc:	4803      	ldr	r0, [pc, #12]	; (80021dc <MX_TIM5_Init+0xac>)
 80021ce:	f000 fc1d 	bl	8002a0c <HAL_TIM_MspPostInit>

}
 80021d2:	bf00      	nop
 80021d4:	3728      	adds	r7, #40	; 0x28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200090ec 	.word	0x200090ec
 80021e0:	40000c00 	.word	0x40000c00

080021e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	607b      	str	r3, [r7, #4]
 80021ee:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <MX_DMA_Init+0x3c>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4a0b      	ldr	r2, [pc, #44]	; (8002220 <MX_DMA_Init+0x3c>)
 80021f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <MX_DMA_Init+0x3c>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 6, 0);
 8002206:	2200      	movs	r2, #0
 8002208:	2106      	movs	r1, #6
 800220a:	2038      	movs	r0, #56	; 0x38
 800220c:	f001 faca 	bl	80037a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002210:	2038      	movs	r0, #56	; 0x38
 8002212:	f001 fae3 	bl	80037dc <HAL_NVIC_EnableIRQ>

}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40023800 	.word	0x40023800

08002224 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	; 0x28
 8002228:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	609a      	str	r2, [r3, #8]
 8002236:	60da      	str	r2, [r3, #12]
 8002238:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	4b42      	ldr	r3, [pc, #264]	; (8002348 <MX_GPIO_Init+0x124>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a41      	ldr	r2, [pc, #260]	; (8002348 <MX_GPIO_Init+0x124>)
 8002244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b3f      	ldr	r3, [pc, #252]	; (8002348 <MX_GPIO_Init+0x124>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b3b      	ldr	r3, [pc, #236]	; (8002348 <MX_GPIO_Init+0x124>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a3a      	ldr	r2, [pc, #232]	; (8002348 <MX_GPIO_Init+0x124>)
 8002260:	f043 0304 	orr.w	r3, r3, #4
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b38      	ldr	r3, [pc, #224]	; (8002348 <MX_GPIO_Init+0x124>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	4b34      	ldr	r3, [pc, #208]	; (8002348 <MX_GPIO_Init+0x124>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a33      	ldr	r2, [pc, #204]	; (8002348 <MX_GPIO_Init+0x124>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b31      	ldr	r3, [pc, #196]	; (8002348 <MX_GPIO_Init+0x124>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	607b      	str	r3, [r7, #4]
 8002292:	4b2d      	ldr	r3, [pc, #180]	; (8002348 <MX_GPIO_Init+0x124>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a2c      	ldr	r2, [pc, #176]	; (8002348 <MX_GPIO_Init+0x124>)
 8002298:	f043 0302 	orr.w	r3, r3, #2
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <MX_GPIO_Init+0x124>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FET_DRV_Pin|LED2_Pin|LED5_Pin|LED4_Pin
 80022aa:	2200      	movs	r2, #0
 80022ac:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 80022b0:	4826      	ldr	r0, [pc, #152]	; (800234c <MX_GPIO_Init+0x128>)
 80022b2:	f002 f819 	bl	80042e8 <HAL_GPIO_WritePin>
                          |LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED0_Pin|LED3_Pin|CC_CHAN_2_Pin
 80022b6:	2200      	movs	r2, #0
 80022b8:	f44f 4163 	mov.w	r1, #58112	; 0xe300
 80022bc:	4824      	ldr	r0, [pc, #144]	; (8002350 <MX_GPIO_Init+0x12c>)
 80022be:	f002 f813 	bl	80042e8 <HAL_GPIO_WritePin>
                          |CC_CHAN_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED6_Pin|LED9_Pin|LED8_Pin, GPIO_PIN_RESET);
 80022c2:	2200      	movs	r2, #0
 80022c4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80022c8:	4822      	ldr	r0, [pc, #136]	; (8002354 <MX_GPIO_Init+0x130>)
 80022ca:	f002 f80d 	bl	80042e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FET_DRV_Pin LED2_Pin LED5_Pin LED4_Pin
                           LED7_Pin */
  GPIO_InitStruct.Pin = FET_DRV_Pin|LED2_Pin|LED5_Pin|LED4_Pin
 80022ce:	f44f 7371 	mov.w	r3, #964	; 0x3c4
 80022d2:	617b      	str	r3, [r7, #20]
                          |LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d4:	2301      	movs	r3, #1
 80022d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022dc:	2300      	movs	r3, #0
 80022de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	4619      	mov	r1, r3
 80022e6:	4819      	ldr	r0, [pc, #100]	; (800234c <MX_GPIO_Init+0x128>)
 80022e8:	f001 fe64 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB_IN_Pin */
  GPIO_InitStruct.Pin = PB_IN_Pin;
 80022ec:	2308      	movs	r3, #8
 80022ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022f4:	2301      	movs	r3, #1
 80022f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB_IN_GPIO_Port, &GPIO_InitStruct);
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	4619      	mov	r1, r3
 80022fe:	4813      	ldr	r0, [pc, #76]	; (800234c <MX_GPIO_Init+0x128>)
 8002300:	f001 fe58 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED0_Pin LED3_Pin CC_CHAN_2_Pin
                           CC_CHAN_1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED0_Pin|LED3_Pin|CC_CHAN_2_Pin
 8002304:	f44f 4363 	mov.w	r3, #58112	; 0xe300
 8002308:	617b      	str	r3, [r7, #20]
                          |CC_CHAN_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230a:	2301      	movs	r3, #1
 800230c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002312:	2300      	movs	r3, #0
 8002314:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002316:	f107 0314 	add.w	r3, r7, #20
 800231a:	4619      	mov	r1, r3
 800231c:	480c      	ldr	r0, [pc, #48]	; (8002350 <MX_GPIO_Init+0x12c>)
 800231e:	f001 fe49 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED6_Pin LED9_Pin LED8_Pin */
  GPIO_InitStruct.Pin = LED6_Pin|LED9_Pin|LED8_Pin;
 8002322:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002328:	2301      	movs	r3, #1
 800232a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002330:	2300      	movs	r3, #0
 8002332:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002334:	f107 0314 	add.w	r3, r7, #20
 8002338:	4619      	mov	r1, r3
 800233a:	4806      	ldr	r0, [pc, #24]	; (8002354 <MX_GPIO_Init+0x130>)
 800233c:	f001 fe3a 	bl	8003fb4 <HAL_GPIO_Init>

}
 8002340:	bf00      	nop
 8002342:	3728      	adds	r7, #40	; 0x28
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40023800 	.word	0x40023800
 800234c:	40020800 	.word	0x40020800
 8002350:	40020400 	.word	0x40020400
 8002354:	40020000 	.word	0x40020000

08002358 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a04      	ldr	r2, [pc, #16]	; (8002378 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d101      	bne.n	800236e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800236a:	f000 fd0b 	bl	8002d84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40014800 	.word	0x40014800

0800237c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <pushbutton_init>:
static void do_led_fade();
static void do_led_flash();


//============= PUBLIC FUNCTION DEFINITIONS =============
osEventFlagsId_t pushbutton_init() {
 800238c:	b580      	push	{r7, lr}
 800238e:	b092      	sub	sp, #72	; 0x48
 8002390:	af00      	add	r7, sp, #0
	//initialize the signal flags for the LED thread and the pushbutton status flags
	led_action_flags = osEventFlagsNew(NULL);
 8002392:	2000      	movs	r0, #0
 8002394:	f007 fe2a 	bl	8009fec <osEventFlagsNew>
 8002398:	4602      	mov	r2, r0
 800239a:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <pushbutton_init+0x88>)
 800239c:	601a      	str	r2, [r3, #0]
	pushbutton_flags = osEventFlagsNew(NULL);
 800239e:	2000      	movs	r0, #0
 80023a0:	f007 fe24 	bl	8009fec <osEventFlagsNew>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b1c      	ldr	r3, [pc, #112]	; (8002418 <pushbutton_init+0x8c>)
 80023a8:	601a      	str	r2, [r3, #0]

	//initialize the led thread
	const osThreadAttr_t led_attributes = {
 80023aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ae:	2224      	movs	r2, #36	; 0x24
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f00b fff9 	bl	800e3aa <memset>
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <pushbutton_init+0x90>)
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
 80023bc:	f44f 7390 	mov.w	r3, #288	; 0x120
 80023c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80023c2:	2318      	movs	r3, #24
 80023c4:	63fb      	str	r3, [r7, #60]	; 0x3c
			.name = "led",
			.priority = (osPriority_t) osPriorityNormal,
			.stack_size = 288
	};
	led_thread_handle = osThreadNew(led_thread, NULL, &led_attributes);
 80023c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ca:	461a      	mov	r2, r3
 80023cc:	2100      	movs	r1, #0
 80023ce:	4814      	ldr	r0, [pc, #80]	; (8002420 <pushbutton_init+0x94>)
 80023d0:	f007 fcd0 	bl	8009d74 <osThreadNew>
 80023d4:	4602      	mov	r2, r0
 80023d6:	4b13      	ldr	r3, [pc, #76]	; (8002424 <pushbutton_init+0x98>)
 80023d8:	601a      	str	r2, [r3, #0]

	//initialize the main button thread
	const osThreadAttr_t button_attributes = {
 80023da:	463b      	mov	r3, r7
 80023dc:	2224      	movs	r2, #36	; 0x24
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f00b ffe2 	bl	800e3aa <memset>
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <pushbutton_init+0x9c>)
 80023e8:	603b      	str	r3, [r7, #0]
 80023ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	2320      	movs	r3, #32
 80023f2:	61bb      	str	r3, [r7, #24]
			.name = "button",
			.priority = (osPriority_t) osPriorityAboveNormal,
			.stack_size = 256
	};
	button_thread_handle = osThreadNew(button_thread, NULL, &button_attributes);
 80023f4:	463b      	mov	r3, r7
 80023f6:	461a      	mov	r2, r3
 80023f8:	2100      	movs	r1, #0
 80023fa:	480c      	ldr	r0, [pc, #48]	; (800242c <pushbutton_init+0xa0>)
 80023fc:	f007 fcba 	bl	8009d74 <osThreadNew>
 8002400:	4602      	mov	r2, r0
 8002402:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <pushbutton_init+0xa4>)
 8002404:	601a      	str	r2, [r3, #0]

	//return the ID of the pushbutton event flags
	return pushbutton_flags;
 8002406:	4b04      	ldr	r3, [pc, #16]	; (8002418 <pushbutton_init+0x8c>)
 8002408:	681b      	ldr	r3, [r3, #0]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3748      	adds	r7, #72	; 0x48
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000394 	.word	0x20000394
 8002418:	200090e8 	.word	0x200090e8
 800241c:	0800fecc 	.word	0x0800fecc
 8002420:	080026a9 	.word	0x080026a9
 8002424:	20000398 	.word	0x20000398
 8002428:	0800fed0 	.word	0x0800fed0
 800242c:	080025c5 	.word	0x080025c5
 8002430:	2000039c 	.word	0x2000039c

08002434 <pushbutton_led_on>:

void pushbutton_led_on() {osEventFlagsSet(led_action_flags, BIT_LED_ON); }
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
 8002438:	4b03      	ldr	r3, [pc, #12]	; (8002448 <pushbutton_led_on+0x14>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2101      	movs	r1, #1
 800243e:	4618      	mov	r0, r3
 8002440:	f007 fe26 	bl	800a090 <osEventFlagsSet>
 8002444:	bf00      	nop
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000394 	.word	0x20000394

0800244c <pushbutton_led_off>:
void pushbutton_led_off() {osEventFlagsSet(led_action_flags, BIT_LED_OFF); }
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
 8002450:	4b03      	ldr	r3, [pc, #12]	; (8002460 <pushbutton_led_off+0x14>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2102      	movs	r1, #2
 8002456:	4618      	mov	r0, r3
 8002458:	f007 fe1a 	bl	800a090 <osEventFlagsSet>
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000394 	.word	0x20000394

08002464 <pushbutton_led_fade>:
void pushbutton_led_fade() {osEventFlagsSet(led_action_flags, BIT_LED_FADE); }
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <pushbutton_led_fade+0x14>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2104      	movs	r1, #4
 800246e:	4618      	mov	r0, r3
 8002470:	f007 fe0e 	bl	800a090 <osEventFlagsSet>
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20000394 	.word	0x20000394

0800247c <pushbutton_led_flash>:
void pushbutton_led_flash() {osEventFlagsSet(led_action_flags, BIT_LED_FLASH); }
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <pushbutton_led_flash+0x14>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2108      	movs	r1, #8
 8002486:	4618      	mov	r0, r3
 8002488:	f007 fe02 	bl	800a090 <osEventFlagsSet>
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20000394 	.word	0x20000394

08002494 <pushbutton_released>:

bool pushbutton_released(bool clear_flag) {
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
	bool result = osEventFlagsGet(pushbutton_flags) & BUTTON_RELEASED;
 800249e:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <pushbutton_released+0x48>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f007 fe90 	bl	800a1c8 <osEventFlagsGet>
 80024a8:	4603      	mov	r3, r0
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	bf14      	ite	ne
 80024b2:	2301      	movne	r3, #1
 80024b4:	2300      	moveq	r3, #0
 80024b6:	73fb      	strb	r3, [r7, #15]
	if(result && clear_flag) osEventFlagsClear(pushbutton_flags, BUTTON_RELEASED);
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d008      	beq.n	80024d0 <pushbutton_released+0x3c>
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <pushbutton_released+0x3c>
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <pushbutton_released+0x48>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2101      	movs	r1, #1
 80024ca:	4618      	mov	r0, r3
 80024cc:	f007 fe38 	bl	800a140 <osEventFlagsClear>
	return result;
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	200090e8 	.word	0x200090e8

080024e0 <pushbutton_bumped>:

bool pushbutton_bumped(bool clear_flag) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	71fb      	strb	r3, [r7, #7]
	bool result = osEventFlagsGet(pushbutton_flags) & BUTTON_BUMPED;
 80024ea:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <pushbutton_bumped+0x48>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f007 fe6a 	bl	800a1c8 <osEventFlagsGet>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	bf14      	ite	ne
 80024fe:	2301      	movne	r3, #1
 8002500:	2300      	moveq	r3, #0
 8002502:	73fb      	strb	r3, [r7, #15]
	if(result && clear_flag) osEventFlagsClear(pushbutton_flags, BUTTON_BUMPED);
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d008      	beq.n	800251c <pushbutton_bumped+0x3c>
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <pushbutton_bumped+0x3c>
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <pushbutton_bumped+0x48>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2102      	movs	r1, #2
 8002516:	4618      	mov	r0, r3
 8002518:	f007 fe12 	bl	800a140 <osEventFlagsClear>
	return result;
 800251c:	7bfb      	ldrb	r3, [r7, #15]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	200090e8 	.word	0x200090e8

0800252c <pushbutton_short_pressed>:

bool pushbutton_short_pressed(bool clear_flag) {
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
	bool result = osEventFlagsGet(pushbutton_flags) & BUTTON_SHORT_PRESSED;
 8002536:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <pushbutton_short_pressed+0x48>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f007 fe44 	bl	800a1c8 <osEventFlagsGet>
 8002540:	4603      	mov	r3, r0
 8002542:	f003 0304 	and.w	r3, r3, #4
 8002546:	2b00      	cmp	r3, #0
 8002548:	bf14      	ite	ne
 800254a:	2301      	movne	r3, #1
 800254c:	2300      	moveq	r3, #0
 800254e:	73fb      	strb	r3, [r7, #15]
	if(result && clear_flag) osEventFlagsClear(pushbutton_flags, BUTTON_SHORT_PRESSED);
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d008      	beq.n	8002568 <pushbutton_short_pressed+0x3c>
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <pushbutton_short_pressed+0x3c>
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <pushbutton_short_pressed+0x48>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2104      	movs	r1, #4
 8002562:	4618      	mov	r0, r3
 8002564:	f007 fdec 	bl	800a140 <osEventFlagsClear>
	return result;
 8002568:	7bfb      	ldrb	r3, [r7, #15]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	200090e8 	.word	0x200090e8

08002578 <pushbutton_long_pressed>:

bool pushbutton_long_pressed(bool clear_flag) {
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
	bool result = osEventFlagsGet(pushbutton_flags) & BUTTON_LONG_PRESSED;
 8002582:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <pushbutton_long_pressed+0x48>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f007 fe1e 	bl	800a1c8 <osEventFlagsGet>
 800258c:	4603      	mov	r3, r0
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf14      	ite	ne
 8002596:	2301      	movne	r3, #1
 8002598:	2300      	moveq	r3, #0
 800259a:	73fb      	strb	r3, [r7, #15]
	if(result && clear_flag) osEventFlagsClear(pushbutton_flags, BUTTON_LONG_PRESSED);
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d008      	beq.n	80025b4 <pushbutton_long_pressed+0x3c>
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <pushbutton_long_pressed+0x3c>
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <pushbutton_long_pressed+0x48>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2108      	movs	r1, #8
 80025ae:	4618      	mov	r0, r3
 80025b0:	f007 fdc6 	bl	800a140 <osEventFlagsClear>
	return result;
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	200090e8 	.word	0x200090e8

080025c4 <button_thread>:
uint32_t led_stack_space() {
	return osThreadGetStackSpace(led_thread_handle);
}

//====================== PRIVATE FUNCTION DEFINITIONS ======================
static void button_thread(void* argument) {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
	bool short_press, long_press; //flags that tell us if we've set the appropriate event flags yet
	uint32_t push_time; //timestamp of when the button was pressed

	while(1) {
		//button pressed -> gpio state will be high
		GPIO_PinState current_button_state = HAL_GPIO_ReadPin(PB_IN_GPIO_Port, PB_IN_Pin);
 80025cc:	2108      	movs	r1, #8
 80025ce:	4834      	ldr	r0, [pc, #208]	; (80026a0 <button_thread+0xdc>)
 80025d0:	f001 fe72 	bl	80042b8 <HAL_GPIO_ReadPin>
 80025d4:	4603      	mov	r3, r0
 80025d6:	73fb      	strb	r3, [r7, #15]

		//if the button has settled, record the state
		if(current_button_state == last_state) {
 80025d8:	7bfa      	ldrb	r2, [r7, #15]
 80025da:	7dfb      	ldrb	r3, [r7, #23]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d158      	bne.n	8002692 <button_thread+0xce>

			if(current_button_state == GPIO_PIN_SET) { //button is pressed
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d138      	bne.n	8002658 <button_thread+0x94>
				if(!last_button) push_time = HAL_GetTick(); //store the time if it was just pressed
 80025e6:	7dbb      	ldrb	r3, [r7, #22]
 80025e8:	f083 0301 	eor.w	r3, r3, #1
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <button_thread+0x34>
 80025f2:	f000 fbdb 	bl	8002dac <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

				//check for short or long presses
				if(!short_press && ((HAL_GetTick() - push_time) > BUTTON_SHORT_PRESS_TIME)) {
 80025f8:	7d7b      	ldrb	r3, [r7, #21]
 80025fa:	f083 0301 	eor.w	r3, r3, #1
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00f      	beq.n	8002624 <button_thread+0x60>
 8002604:	f000 fbd2 	bl	8002dac <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002612:	d907      	bls.n	8002624 <button_thread+0x60>
					osEventFlagsSet(pushbutton_flags, BUTTON_SHORT_PRESSED);
 8002614:	4b23      	ldr	r3, [pc, #140]	; (80026a4 <button_thread+0xe0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2104      	movs	r1, #4
 800261a:	4618      	mov	r0, r3
 800261c:	f007 fd38 	bl	800a090 <osEventFlagsSet>
					short_press = true;
 8002620:	2301      	movs	r3, #1
 8002622:	757b      	strb	r3, [r7, #21]
				}
				if(!long_press && ((HAL_GetTick() - push_time) > BUTTON_LONG_PRESS_TIME)) {
 8002624:	7d3b      	ldrb	r3, [r7, #20]
 8002626:	f083 0301 	eor.w	r3, r3, #1
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d010      	beq.n	8002652 <button_thread+0x8e>
 8002630:	f000 fbbc 	bl	8002dac <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800263e:	4293      	cmp	r3, r2
 8002640:	d907      	bls.n	8002652 <button_thread+0x8e>
					osEventFlagsSet(pushbutton_flags, BUTTON_LONG_PRESSED);
 8002642:	4b18      	ldr	r3, [pc, #96]	; (80026a4 <button_thread+0xe0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2108      	movs	r1, #8
 8002648:	4618      	mov	r0, r3
 800264a:	f007 fd21 	bl	800a090 <osEventFlagsSet>
					long_press = true;
 800264e:	2301      	movs	r3, #1
 8002650:	753b      	strb	r3, [r7, #20]
				}

				//remember the button state
				last_button = true;
 8002652:	2301      	movs	r3, #1
 8002654:	75bb      	strb	r3, [r7, #22]
 8002656:	e01c      	b.n	8002692 <button_thread+0xce>
			}

			else { //button is released
				if(last_button) {//button was just released
 8002658:	7dbb      	ldrb	r3, [r7, #22]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d017      	beq.n	800268e <button_thread+0xca>
					//if the button was pressed for less than the "short press time"
					if((HAL_GetTick() - push_time) < BUTTON_SHORT_PRESS_TIME)
 800265e:	f000 fba5 	bl	8002dac <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800266c:	d205      	bcs.n	800267a <button_thread+0xb6>
						osEventFlagsSet(pushbutton_flags, BUTTON_BUMPED); //set the event flag for a "bump"
 800266e:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <button_thread+0xe0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2102      	movs	r1, #2
 8002674:	4618      	mov	r0, r3
 8002676:	f007 fd0b 	bl	800a090 <osEventFlagsSet>

					//also set the event flag for releasing the button
					osEventFlagsSet(pushbutton_flags, BUTTON_RELEASED);
 800267a:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <button_thread+0xe0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2101      	movs	r1, #1
 8002680:	4618      	mov	r0, r3
 8002682:	f007 fd05 	bl	800a090 <osEventFlagsSet>

					//reset some of our local flags for short and long presses
					short_press = false;
 8002686:	2300      	movs	r3, #0
 8002688:	757b      	strb	r3, [r7, #21]
					long_press = false;
 800268a:	2300      	movs	r3, #0
 800268c:	753b      	strb	r3, [r7, #20]
				}
				last_button = false;
 800268e:	2300      	movs	r3, #0
 8002690:	75bb      	strb	r3, [r7, #22]
			}

		}

		last_state = current_button_state; //updating the debounce memory (pin state)
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	75fb      	strb	r3, [r7, #23]
		osDelay(BUTTON_BOUNCE_TIME);
 8002696:	2019      	movs	r0, #25
 8002698:	f007 fc7a 	bl	8009f90 <osDelay>
	while(1) {
 800269c:	e796      	b.n	80025cc <button_thread+0x8>
 800269e:	bf00      	nop
 80026a0:	40020800 	.word	0x40020800
 80026a4:	200090e8 	.word	0x200090e8

080026a8 <led_thread>:
	}
}

static void led_thread(void* argument) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1); //start the PWM timer for the LED
 80026b0:	2100      	movs	r1, #0
 80026b2:	482b      	ldr	r0, [pc, #172]	; (8002760 <led_thread+0xb8>)
 80026b4:	f003 fd5e 	bl	8006174 <HAL_TIM_PWM_Start>

	while(1) {
		//suspend this thread until any flag is set (and don't clear the set flag)
		osEventFlagsWait(led_action_flags, BIT_LED_ALL, osFlagsNoClear, osWaitForever);
 80026b8:	4b2a      	ldr	r3, [pc, #168]	; (8002764 <led_thread+0xbc>)
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	f04f 33ff 	mov.w	r3, #4294967295
 80026c0:	2202      	movs	r2, #2
 80026c2:	210f      	movs	r1, #15
 80026c4:	f007 fdb4 	bl	800a230 <osEventFlagsWait>

		//if a flag bit is set, run the appropriate LED routine
		//order of the conditionals indicates the priority of the flash routines
		//each routine will return pretty much immediately though
		if(osEventFlagsGet(led_action_flags) & BIT_LED_FLASH) {
 80026c8:	4b26      	ldr	r3, [pc, #152]	; (8002764 <led_thread+0xbc>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f007 fd7b 	bl	800a1c8 <osEventFlagsGet>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <led_thread+0x46>
			do_led_flash();
 80026dc:	f000 f89c 	bl	8002818 <do_led_flash>
			osEventFlagsClear(led_action_flags, BIT_LED_FLASH); //clear the flag manually
 80026e0:	4b20      	ldr	r3, [pc, #128]	; (8002764 <led_thread+0xbc>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2108      	movs	r1, #8
 80026e6:	4618      	mov	r0, r3
 80026e8:	f007 fd2a 	bl	800a140 <osEventFlagsClear>
 80026ec:	e7e4      	b.n	80026b8 <led_thread+0x10>
		}
		else if (osEventFlagsGet(led_action_flags) & BIT_LED_FADE) {
 80026ee:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <led_thread+0xbc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f007 fd68 	bl	800a1c8 <osEventFlagsGet>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d008      	beq.n	8002714 <led_thread+0x6c>
			osEventFlagsClear(led_action_flags, BIT_LED_FADE); //clearing this before so the break function works
 8002702:	4b18      	ldr	r3, [pc, #96]	; (8002764 <led_thread+0xbc>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2104      	movs	r1, #4
 8002708:	4618      	mov	r0, r3
 800270a:	f007 fd19 	bl	800a140 <osEventFlagsClear>
			do_led_fade();
 800270e:	f000 f847 	bl	80027a0 <do_led_fade>
 8002712:	e7d1      	b.n	80026b8 <led_thread+0x10>
		}
		else if (osEventFlagsGet(led_action_flags) & BIT_LED_ON) {
 8002714:	4b13      	ldr	r3, [pc, #76]	; (8002764 <led_thread+0xbc>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f007 fd55 	bl	800a1c8 <osEventFlagsGet>
 800271e:	4603      	mov	r3, r0
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <led_thread+0x92>
			do_led_on();
 8002728:	f000 f81e 	bl	8002768 <do_led_on>
			osEventFlagsClear(led_action_flags, BIT_LED_ON);
 800272c:	4b0d      	ldr	r3, [pc, #52]	; (8002764 <led_thread+0xbc>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2101      	movs	r1, #1
 8002732:	4618      	mov	r0, r3
 8002734:	f007 fd04 	bl	800a140 <osEventFlagsClear>
 8002738:	e7be      	b.n	80026b8 <led_thread+0x10>
		}
		else if (osEventFlagsGet(led_action_flags) & BIT_LED_OFF) {
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <led_thread+0xbc>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f007 fd42 	bl	800a1c8 <osEventFlagsGet>
 8002744:	4603      	mov	r3, r0
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0b4      	beq.n	80026b8 <led_thread+0x10>
			do_led_off();
 800274e:	f000 f819 	bl	8002784 <do_led_off>
			osEventFlagsClear(led_action_flags, BIT_LED_OFF);
 8002752:	4b04      	ldr	r3, [pc, #16]	; (8002764 <led_thread+0xbc>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2102      	movs	r1, #2
 8002758:	4618      	mov	r0, r3
 800275a:	f007 fcf1 	bl	800a140 <osEventFlagsClear>
		osEventFlagsWait(led_action_flags, BIT_LED_ALL, osFlagsNoClear, osWaitForever);
 800275e:	e7ab      	b.n	80026b8 <led_thread+0x10>
 8002760:	200090ec 	.word	0x200090ec
 8002764:	20000394 	.word	0x20000394

08002768 <do_led_on>:
	//gracefully exiting if it somehow gets here
	osThreadExit();
}

//helper functions for the LED threads
static void do_led_on() {
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
	htim5.Instance->CCR1 = UINT32_MAX; //just max out counter register to force the channel on
 800276c:	4b04      	ldr	r3, [pc, #16]	; (8002780 <do_led_on+0x18>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f04f 32ff 	mov.w	r2, #4294967295
 8002774:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002776:	bf00      	nop
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	200090ec 	.word	0x200090ec

08002784 <do_led_off>:

static void do_led_off() {
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
	htim5.Instance->CCR1 = 0; //set counter register to zero to force the channel off
 8002788:	4b04      	ldr	r3, [pc, #16]	; (800279c <do_led_off+0x18>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2200      	movs	r2, #0
 800278e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	200090ec 	.word	0x200090ec

080027a0 <do_led_fade>:

static void do_led_fade() {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
	//reset the LED PWM peripheral to normal PWM mode
	//necessary if called after configuring peripheral for flashing the LED
	htim5.Init.Period = PWM_PERIOD;
 80027a6:	4b1a      	ldr	r3, [pc, #104]	; (8002810 <do_led_fade+0x70>)
 80027a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027ac:	60da      	str	r2, [r3, #12]
	htim5.Instance->CCR1 = 0;
 80027ae:	4b18      	ldr	r3, [pc, #96]	; (8002810 <do_led_fade+0x70>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2200      	movs	r2, #0
 80027b4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Init(&htim5);
 80027b6:	4816      	ldr	r0, [pc, #88]	; (8002810 <do_led_fade+0x70>)
 80027b8:	f003 fcb0 	bl	800611c <HAL_TIM_PWM_Init>
	int count_amount;

	//run the fade forever until we want to swap to a different event
	while(1) {
		//set the direction that we're gonna be counting
		if(htim5.Instance->CCR1 > 1000) count_amount = -COUNT_STEP;
 80027bc:	4b14      	ldr	r3, [pc, #80]	; (8002810 <do_led_fade+0x70>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027c6:	d903      	bls.n	80027d0 <do_led_fade+0x30>
 80027c8:	f06f 0318 	mvn.w	r3, #24
 80027cc:	607b      	str	r3, [r7, #4]
 80027ce:	e006      	b.n	80027de <do_led_fade+0x3e>
		else if (htim5.Instance->CCR1 < COUNT_STEP) count_amount = COUNT_STEP;
 80027d0:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <do_led_fade+0x70>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d6:	2b18      	cmp	r3, #24
 80027d8:	d801      	bhi.n	80027de <do_led_fade+0x3e>
 80027da:	2319      	movs	r3, #25
 80027dc:	607b      	str	r3, [r7, #4]

		htim5.Instance->CCR1 += count_amount; //increment compare value for the PWM module
 80027de:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <do_led_fade+0x70>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <do_led_fade+0x70>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	440a      	add	r2, r1
 80027ec:	635a      	str	r2, [r3, #52]	; 0x34
		osDelay(FADE_DELAY);
 80027ee:	200a      	movs	r0, #10
 80027f0:	f007 fbce 	bl	8009f90 <osDelay>

		//exit the loop if there's any of event flag that's asserted
		if(osEventFlagsGet(led_action_flags)) break;
 80027f4:	4b07      	ldr	r3, [pc, #28]	; (8002814 <do_led_fade+0x74>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f007 fce5 	bl	800a1c8 <osEventFlagsGet>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d100      	bne.n	8002806 <do_led_fade+0x66>
		if(htim5.Instance->CCR1 > 1000) count_amount = -COUNT_STEP;
 8002804:	e7da      	b.n	80027bc <do_led_fade+0x1c>
		if(osEventFlagsGet(led_action_flags)) break;
 8002806:	bf00      	nop
	}
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	200090ec 	.word	0x200090ec
 8002814:	20000394 	.word	0x20000394

08002818 <do_led_flash>:

static void do_led_flash() {
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
	htim5.Init.Period = BLINK_PERIOD; //slow the PWM timer waaaaay down
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <do_led_flash+0x1c>)
 800281e:	4a06      	ldr	r2, [pc, #24]	; (8002838 <do_led_flash+0x20>)
 8002820:	60da      	str	r2, [r3, #12]
	htim5.Instance->CCR1 = BLINK_PERIOD>>1; //set the duty cycle to 50%
 8002822:	4b04      	ldr	r3, [pc, #16]	; (8002834 <do_led_flash+0x1c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a05      	ldr	r2, [pc, #20]	; (800283c <do_led_flash+0x24>)
 8002828:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Init(&htim5);
 800282a:	4802      	ldr	r0, [pc, #8]	; (8002834 <do_led_flash+0x1c>)
 800282c:	f003 fc76 	bl	800611c <HAL_TIM_PWM_Init>
}
 8002830:	bf00      	nop
 8002832:	bd80      	pop	{r7, pc}
 8002834:	200090ec 	.word	0x200090ec
 8002838:	00051615 	.word	0x00051615
 800283c:	00028b0a 	.word	0x00028b0a

08002840 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]
 800284a:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_MspInit+0x54>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	4a11      	ldr	r2, [pc, #68]	; (8002894 <HAL_MspInit+0x54>)
 8002850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002854:	6453      	str	r3, [r2, #68]	; 0x44
 8002856:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <HAL_MspInit+0x54>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285e:	607b      	str	r3, [r7, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	603b      	str	r3, [r7, #0]
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_MspInit+0x54>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <HAL_MspInit+0x54>)
 800286c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002870:	6413      	str	r3, [r2, #64]	; 0x40
 8002872:	4b08      	ldr	r3, [pc, #32]	; (8002894 <HAL_MspInit+0x54>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800287e:	2200      	movs	r2, #0
 8002880:	210f      	movs	r1, #15
 8002882:	f06f 0001 	mvn.w	r0, #1
 8002886:	f000 ff8d 	bl	80037a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40023800 	.word	0x40023800

08002898 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08a      	sub	sp, #40	; 0x28
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a0:	f107 0314 	add.w	r3, r7, #20
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	60da      	str	r2, [r3, #12]
 80028ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a2f      	ldr	r2, [pc, #188]	; (8002974 <HAL_ADC_MspInit+0xdc>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d157      	bne.n	800296a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	4b2e      	ldr	r3, [pc, #184]	; (8002978 <HAL_ADC_MspInit+0xe0>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	4a2d      	ldr	r2, [pc, #180]	; (8002978 <HAL_ADC_MspInit+0xe0>)
 80028c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ca:	4b2b      	ldr	r3, [pc, #172]	; (8002978 <HAL_ADC_MspInit+0xe0>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	4b27      	ldr	r3, [pc, #156]	; (8002978 <HAL_ADC_MspInit+0xe0>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	4a26      	ldr	r2, [pc, #152]	; (8002978 <HAL_ADC_MspInit+0xe0>)
 80028e0:	f043 0304 	orr.w	r3, r3, #4
 80028e4:	6313      	str	r3, [r2, #48]	; 0x30
 80028e6:	4b24      	ldr	r3, [pc, #144]	; (8002978 <HAL_ADC_MspInit+0xe0>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028f2:	2301      	movs	r3, #1
 80028f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028f6:	2303      	movs	r3, #3
 80028f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028fe:	f107 0314 	add.w	r3, r7, #20
 8002902:	4619      	mov	r1, r3
 8002904:	481d      	ldr	r0, [pc, #116]	; (800297c <HAL_ADC_MspInit+0xe4>)
 8002906:	f001 fb55 	bl	8003fb4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800290a:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <HAL_ADC_MspInit+0xe8>)
 800290c:	4a1d      	ldr	r2, [pc, #116]	; (8002984 <HAL_ADC_MspInit+0xec>)
 800290e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002910:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <HAL_ADC_MspInit+0xe8>)
 8002912:	2200      	movs	r2, #0
 8002914:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002916:	4b1a      	ldr	r3, [pc, #104]	; (8002980 <HAL_ADC_MspInit+0xe8>)
 8002918:	2200      	movs	r2, #0
 800291a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800291c:	4b18      	ldr	r3, [pc, #96]	; (8002980 <HAL_ADC_MspInit+0xe8>)
 800291e:	2200      	movs	r2, #0
 8002920:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002922:	4b17      	ldr	r3, [pc, #92]	; (8002980 <HAL_ADC_MspInit+0xe8>)
 8002924:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002928:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800292a:	4b15      	ldr	r3, [pc, #84]	; (8002980 <HAL_ADC_MspInit+0xe8>)
 800292c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002930:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002932:	4b13      	ldr	r3, [pc, #76]	; (8002980 <HAL_ADC_MspInit+0xe8>)
 8002934:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002938:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800293a:	4b11      	ldr	r3, [pc, #68]	; (8002980 <HAL_ADC_MspInit+0xe8>)
 800293c:	2200      	movs	r2, #0
 800293e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002940:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <HAL_ADC_MspInit+0xe8>)
 8002942:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002946:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002948:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <HAL_ADC_MspInit+0xe8>)
 800294a:	2200      	movs	r2, #0
 800294c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800294e:	480c      	ldr	r0, [pc, #48]	; (8002980 <HAL_ADC_MspInit+0xe8>)
 8002950:	f000 ff52 	bl	80037f8 <HAL_DMA_Init>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800295a:	f7ff fd0f 	bl	800237c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a07      	ldr	r2, [pc, #28]	; (8002980 <HAL_ADC_MspInit+0xe8>)
 8002962:	639a      	str	r2, [r3, #56]	; 0x38
 8002964:	4a06      	ldr	r2, [pc, #24]	; (8002980 <HAL_ADC_MspInit+0xe8>)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800296a:	bf00      	nop
 800296c:	3728      	adds	r7, #40	; 0x28
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40012000 	.word	0x40012000
 8002978:	40023800 	.word	0x40023800
 800297c:	40020800 	.word	0x40020800
 8002980:	20009194 	.word	0x20009194
 8002984:	40026410 	.word	0x40026410

08002988 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002998:	d10d      	bne.n	80029b6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_TIM_Base_MspInit+0x3c>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	4a08      	ldr	r2, [pc, #32]	; (80029c4 <HAL_TIM_Base_MspInit+0x3c>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6413      	str	r3, [r2, #64]	; 0x40
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_TIM_Base_MspInit+0x3c>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800

080029c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a0b      	ldr	r2, [pc, #44]	; (8002a04 <HAL_TIM_PWM_MspInit+0x3c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d10d      	bne.n	80029f6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <HAL_TIM_PWM_MspInit+0x40>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	4a09      	ldr	r2, [pc, #36]	; (8002a08 <HAL_TIM_PWM_MspInit+0x40>)
 80029e4:	f043 0308 	orr.w	r3, r3, #8
 80029e8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ea:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <HAL_TIM_PWM_MspInit+0x40>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40000c00 	.word	0x40000c00
 8002a08:	40023800 	.word	0x40023800

08002a0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08a      	sub	sp, #40	; 0x28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 0314 	add.w	r3, r7, #20
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2c:	d11f      	bne.n	8002a6e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	4b22      	ldr	r3, [pc, #136]	; (8002abc <HAL_TIM_MspPostInit+0xb0>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	4a21      	ldr	r2, [pc, #132]	; (8002abc <HAL_TIM_MspPostInit+0xb0>)
 8002a38:	f043 0302 	orr.w	r3, r3, #2
 8002a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3e:	4b1f      	ldr	r3, [pc, #124]	; (8002abc <HAL_TIM_MspPostInit+0xb0>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8002a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a50:	2302      	movs	r3, #2
 8002a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002a60:	f107 0314 	add.w	r3, r7, #20
 8002a64:	4619      	mov	r1, r3
 8002a66:	4816      	ldr	r0, [pc, #88]	; (8002ac0 <HAL_TIM_MspPostInit+0xb4>)
 8002a68:	f001 faa4 	bl	8003fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002a6c:	e022      	b.n	8002ab4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM5)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a14      	ldr	r2, [pc, #80]	; (8002ac4 <HAL_TIM_MspPostInit+0xb8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d11d      	bne.n	8002ab4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <HAL_TIM_MspPostInit+0xb0>)
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a80:	4a0e      	ldr	r2, [pc, #56]	; (8002abc <HAL_TIM_MspPostInit+0xb0>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	6313      	str	r3, [r2, #48]	; 0x30
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <HAL_TIM_MspPostInit+0xb0>)
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PB_LED_Pin;
 8002a94:	2301      	movs	r3, #1
 8002a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PB_LED_GPIO_Port, &GPIO_InitStruct);
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	4619      	mov	r1, r3
 8002aae:	4806      	ldr	r0, [pc, #24]	; (8002ac8 <HAL_TIM_MspPostInit+0xbc>)
 8002ab0:	f001 fa80 	bl	8003fb4 <HAL_GPIO_Init>
}
 8002ab4:	bf00      	nop
 8002ab6:	3728      	adds	r7, #40	; 0x28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40020400 	.word	0x40020400
 8002ac4:	40000c00 	.word	0x40000c00
 8002ac8:	40020000 	.word	0x40020000

08002acc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08c      	sub	sp, #48	; 0x30
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8002adc:	2200      	movs	r2, #0
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	201a      	movs	r0, #26
 8002ae2:	f000 fe5f 	bl	80037a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002ae6:	201a      	movs	r0, #26
 8002ae8:	f000 fe78 	bl	80037dc <HAL_NVIC_EnableIRQ>
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <HAL_InitTick+0xa0>)
 8002af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af4:	4a1d      	ldr	r2, [pc, #116]	; (8002b6c <HAL_InitTick+0xa0>)
 8002af6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002afa:	6453      	str	r3, [r2, #68]	; 0x44
 8002afc:	4b1b      	ldr	r3, [pc, #108]	; (8002b6c <HAL_InitTick+0xa0>)
 8002afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b08:	f107 0210 	add.w	r2, r7, #16
 8002b0c:	f107 0314 	add.w	r3, r7, #20
 8002b10:	4611      	mov	r1, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f003 f9d2 	bl	8005ebc <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002b18:	f003 f9bc 	bl	8005e94 <HAL_RCC_GetPCLK2Freq>
 8002b1c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b20:	4a13      	ldr	r2, [pc, #76]	; (8002b70 <HAL_InitTick+0xa4>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	0c9b      	lsrs	r3, r3, #18
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8002b2c:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <HAL_InitTick+0xa8>)
 8002b2e:	4a12      	ldr	r2, [pc, #72]	; (8002b78 <HAL_InitTick+0xac>)
 8002b30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000 / 1000) - 1;
 8002b32:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <HAL_InitTick+0xa8>)
 8002b34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b38:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8002b3a:	4a0e      	ldr	r2, [pc, #56]	; (8002b74 <HAL_InitTick+0xa8>)
 8002b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <HAL_InitTick+0xa8>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b46:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_InitTick+0xa8>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8002b4c:	4809      	ldr	r0, [pc, #36]	; (8002b74 <HAL_InitTick+0xa8>)
 8002b4e:	f003 f9e7 	bl	8005f20 <HAL_TIM_Base_Init>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d104      	bne.n	8002b62 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8002b58:	4806      	ldr	r0, [pc, #24]	; (8002b74 <HAL_InitTick+0xa8>)
 8002b5a:	f003 fa0c 	bl	8005f76 <HAL_TIM_Base_Start_IT>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	e000      	b.n	8002b64 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3730      	adds	r7, #48	; 0x30
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	431bde83 	.word	0x431bde83
 8002b74:	20009238 	.word	0x20009238
 8002b78:	40014800 	.word	0x40014800

08002b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b8e:	e7fe      	b.n	8002b8e <HardFault_Handler+0x4>

08002b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b94:	e7fe      	b.n	8002b94 <MemManage_Handler+0x4>

08002b96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b96:	b480      	push	{r7}
 8002b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b9a:	e7fe      	b.n	8002b9a <BusFault_Handler+0x4>

08002b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ba0:	e7fe      	b.n	8002ba0 <UsageFault_Handler+0x4>

08002ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002bb4:	4802      	ldr	r0, [pc, #8]	; (8002bc0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002bb6:	f003 fb0f 	bl	80061d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20009238 	.word	0x20009238

08002bc4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002bc8:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <DMA2_Stream0_IRQHandler+0x10>)
 8002bca:	f000 ff8b 	bl	8003ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20009194 	.word	0x20009194

08002bd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002bdc:	4802      	ldr	r0, [pc, #8]	; (8002be8 <OTG_FS_IRQHandler+0x10>)
 8002bde:	f001 fcec 	bl	80045ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	2000a78c 	.word	0x2000a78c

08002bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bf4:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <_sbrk+0x5c>)
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <_sbrk+0x60>)
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c00:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <_sbrk+0x64>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d102      	bne.n	8002c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c08:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <_sbrk+0x64>)
 8002c0a:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <_sbrk+0x68>)
 8002c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <_sbrk+0x64>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4413      	add	r3, r2
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d207      	bcs.n	8002c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c1c:	f00b fb80 	bl	800e320 <__errno>
 8002c20:	4602      	mov	r2, r0
 8002c22:	230c      	movs	r3, #12
 8002c24:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002c26:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2a:	e009      	b.n	8002c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c2c:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <_sbrk+0x64>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c32:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <_sbrk+0x64>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4413      	add	r3, r2
 8002c3a:	4a05      	ldr	r2, [pc, #20]	; (8002c50 <_sbrk+0x64>)
 8002c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	20018000 	.word	0x20018000
 8002c4c:	00000800 	.word	0x00000800
 8002c50:	200003a0 	.word	0x200003a0
 8002c54:	2000ab98 	.word	0x2000ab98

08002c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c5c:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <SystemInit+0x28>)
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c62:	4a07      	ldr	r2, [pc, #28]	; (8002c80 <SystemInit+0x28>)
 8002c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c6c:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <SystemInit+0x28>)
 8002c6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c72:	609a      	str	r2, [r3, #8]
#endif
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cbc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c8a:	e003      	b.n	8002c94 <LoopCopyDataInit>

08002c8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c92:	3104      	adds	r1, #4

08002c94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c94:	480b      	ldr	r0, [pc, #44]	; (8002cc4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c96:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c9c:	d3f6      	bcc.n	8002c8c <CopyDataInit>
  ldr  r2, =_sbss
 8002c9e:	4a0b      	ldr	r2, [pc, #44]	; (8002ccc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ca0:	e002      	b.n	8002ca8 <LoopFillZerobss>

08002ca2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ca2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ca4:	f842 3b04 	str.w	r3, [r2], #4

08002ca8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ca8:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002caa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002cac:	d3f9      	bcc.n	8002ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cae:	f7ff ffd3 	bl	8002c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cb2:	f00b fb3b 	bl	800e32c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cb6:	f7ff f8df 	bl	8001e78 <main>
  bx  lr    
 8002cba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cbc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002cc0:	080101b0 	.word	0x080101b0
  ldr  r0, =_sdata
 8002cc4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002cc8:	20000354 	.word	0x20000354
  ldr  r2, =_sbss
 8002ccc:	20000354 	.word	0x20000354
  ldr  r3, = _ebss
 8002cd0:	2000ab98 	.word	0x2000ab98

08002cd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cd4:	e7fe      	b.n	8002cd4 <ADC_IRQHandler>
	...

08002cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cdc:	4b0e      	ldr	r3, [pc, #56]	; (8002d18 <HAL_Init+0x40>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0d      	ldr	r2, [pc, #52]	; (8002d18 <HAL_Init+0x40>)
 8002ce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ce6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <HAL_Init+0x40>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <HAL_Init+0x40>)
 8002cee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <HAL_Init+0x40>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a07      	ldr	r2, [pc, #28]	; (8002d18 <HAL_Init+0x40>)
 8002cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d00:	2003      	movs	r0, #3
 8002d02:	f000 fd44 	bl	800378e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d06:	2000      	movs	r0, #0
 8002d08:	f7ff fee0 	bl	8002acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d0c:	f7ff fd98 	bl	8002840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40023c00 	.word	0x40023c00

08002d1c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8002d20:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <HAL_DeInit+0x54>)
 8002d22:	f04f 32ff 	mov.w	r2, #4294967295
 8002d26:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8002d28:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <HAL_DeInit+0x54>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8002d2e:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <HAL_DeInit+0x54>)
 8002d30:	f04f 32ff 	mov.w	r2, #4294967295
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8002d36:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <HAL_DeInit+0x54>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <HAL_DeInit+0x54>)
 8002d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d42:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8002d44:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <HAL_DeInit+0x54>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8002d4a:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <HAL_DeInit+0x54>)
 8002d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d50:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8002d52:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <HAL_DeInit+0x54>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8002d58:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_DeInit+0x54>)
 8002d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d5e:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8002d60:	4b03      	ldr	r3, [pc, #12]	; (8002d70 <HAL_DeInit+0x54>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8002d66:	f000 f805 	bl	8002d74 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40023800 	.word	0x40023800

08002d74 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d88:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <HAL_IncTick+0x20>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HAL_IncTick+0x24>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4413      	add	r3, r2
 8002d94:	4a04      	ldr	r2, [pc, #16]	; (8002da8 <HAL_IncTick+0x24>)
 8002d96:	6013      	str	r3, [r2, #0]
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	20000008 	.word	0x20000008
 8002da8:	20009278 	.word	0x20009278

08002dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return uwTick;
 8002db0:	4b03      	ldr	r3, [pc, #12]	; (8002dc0 <HAL_GetTick+0x14>)
 8002db2:	681b      	ldr	r3, [r3, #0]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	20009278 	.word	0x20009278

08002dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dcc:	f7ff ffee 	bl	8002dac <HAL_GetTick>
 8002dd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ddc:	d005      	beq.n	8002dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dde:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <HAL_Delay+0x40>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4413      	add	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dea:	bf00      	nop
 8002dec:	f7ff ffde 	bl	8002dac <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d8f7      	bhi.n	8002dec <HAL_Delay+0x28>
  {
  }
}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20000008 	.word	0x20000008

08002e08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e033      	b.n	8002e86 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d109      	bne.n	8002e3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff fd36 	bl	8002898 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f003 0310 	and.w	r3, r3, #16
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d118      	bne.n	8002e78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e4e:	f023 0302 	bic.w	r3, r3, #2
 8002e52:	f043 0202 	orr.w	r2, r3, #2
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fa6c 	bl	8003338 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f023 0303 	bic.w	r3, r3, #3
 8002e6e:	f043 0201 	orr.w	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40
 8002e76:	e001      	b.n	8002e7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_ADC_Start_DMA+0x1e>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e0b1      	b.n	8003012 <HAL_ADC_Start_DMA+0x182>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d018      	beq.n	8002ef6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ed4:	4b51      	ldr	r3, [pc, #324]	; (800301c <HAL_ADC_Start_DMA+0x18c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a51      	ldr	r2, [pc, #324]	; (8003020 <HAL_ADC_Start_DMA+0x190>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	0c9a      	lsrs	r2, r3, #18
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	4413      	add	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002ee8:	e002      	b.n	8002ef0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	3b01      	subs	r3, #1
 8002eee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f9      	bne.n	8002eea <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	f040 8085 	bne.w	8003010 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d007      	beq.n	8002f38 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f44:	d106      	bne.n	8002f54 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4a:	f023 0206 	bic.w	r2, r3, #6
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	645a      	str	r2, [r3, #68]	; 0x44
 8002f52:	e002      	b.n	8002f5a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f62:	4b30      	ldr	r3, [pc, #192]	; (8003024 <HAL_ADC_Start_DMA+0x194>)
 8002f64:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6a:	4a2f      	ldr	r2, [pc, #188]	; (8003028 <HAL_ADC_Start_DMA+0x198>)
 8002f6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f72:	4a2e      	ldr	r2, [pc, #184]	; (800302c <HAL_ADC_Start_DMA+0x19c>)
 8002f74:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	4a2d      	ldr	r2, [pc, #180]	; (8003030 <HAL_ADC_Start_DMA+0x1a0>)
 8002f7c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f86:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002f96:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fa6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	334c      	adds	r3, #76	; 0x4c
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f000 fccc 	bl	8003954 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10f      	bne.n	8002fe8 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d11c      	bne.n	8003010 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fe4:	609a      	str	r2, [r3, #8]
 8002fe6:	e013      	b.n	8003010 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a11      	ldr	r2, [pc, #68]	; (8003034 <HAL_ADC_Start_DMA+0x1a4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d10e      	bne.n	8003010 <HAL_ADC_Start_DMA+0x180>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d107      	bne.n	8003010 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800300e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000000 	.word	0x20000000
 8003020:	431bde83 	.word	0x431bde83
 8003024:	40012300 	.word	0x40012300
 8003028:	08003531 	.word	0x08003531
 800302c:	080035eb 	.word	0x080035eb
 8003030:	08003607 	.word	0x08003607
 8003034:	40012000 	.word	0x40012000

08003038 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800304a:	2b01      	cmp	r3, #1
 800304c:	d101      	bne.n	8003052 <HAL_ADC_Stop_DMA+0x1a>
 800304e:	2302      	movs	r3, #2
 8003050:	e038      	b.n	80030c4 <HAL_ADC_Stop_DMA+0x8c>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0201 	bic.w	r2, r2, #1
 8003068:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d120      	bne.n	80030ba <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003086:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308c:	4618      	mov	r0, r3
 800308e:	f000 fcb9 	bl	8003a04 <HAL_DMA_Abort>
 8003092:	4603      	mov	r3, r0
 8003094:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80030a4:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	f043 0201 	orr.w	r2, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x1c>
 800310c:	2302      	movs	r3, #2
 800310e:	e105      	b.n	800331c <HAL_ADC_ConfigChannel+0x228>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b09      	cmp	r3, #9
 800311e:	d925      	bls.n	800316c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68d9      	ldr	r1, [r3, #12]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	b29b      	uxth	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	3b1e      	subs	r3, #30
 8003136:	2207      	movs	r2, #7
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43da      	mvns	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	400a      	ands	r2, r1
 8003144:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68d9      	ldr	r1, [r3, #12]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	b29b      	uxth	r3, r3
 8003156:	4618      	mov	r0, r3
 8003158:	4603      	mov	r3, r0
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	4403      	add	r3, r0
 800315e:	3b1e      	subs	r3, #30
 8003160:	409a      	lsls	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	60da      	str	r2, [r3, #12]
 800316a:	e022      	b.n	80031b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6919      	ldr	r1, [r3, #16]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	b29b      	uxth	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	4613      	mov	r3, r2
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	4413      	add	r3, r2
 8003180:	2207      	movs	r2, #7
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43da      	mvns	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	400a      	ands	r2, r1
 800318e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6919      	ldr	r1, [r3, #16]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	4618      	mov	r0, r3
 80031a2:	4603      	mov	r3, r0
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4403      	add	r3, r0
 80031a8:	409a      	lsls	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b06      	cmp	r3, #6
 80031b8:	d824      	bhi.n	8003204 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	3b05      	subs	r3, #5
 80031cc:	221f      	movs	r2, #31
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43da      	mvns	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	400a      	ands	r2, r1
 80031da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	4618      	mov	r0, r3
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	3b05      	subs	r3, #5
 80031f6:	fa00 f203 	lsl.w	r2, r0, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	635a      	str	r2, [r3, #52]	; 0x34
 8003202:	e04c      	b.n	800329e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b0c      	cmp	r3, #12
 800320a:	d824      	bhi.n	8003256 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	3b23      	subs	r3, #35	; 0x23
 800321e:	221f      	movs	r2, #31
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43da      	mvns	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	400a      	ands	r2, r1
 800322c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	b29b      	uxth	r3, r3
 800323a:	4618      	mov	r0, r3
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	3b23      	subs	r3, #35	; 0x23
 8003248:	fa00 f203 	lsl.w	r2, r0, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	631a      	str	r2, [r3, #48]	; 0x30
 8003254:	e023      	b.n	800329e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	3b41      	subs	r3, #65	; 0x41
 8003268:	221f      	movs	r2, #31
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43da      	mvns	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	400a      	ands	r2, r1
 8003276:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	b29b      	uxth	r3, r3
 8003284:	4618      	mov	r0, r3
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	3b41      	subs	r3, #65	; 0x41
 8003292:	fa00 f203 	lsl.w	r2, r0, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800329e:	4b22      	ldr	r3, [pc, #136]	; (8003328 <HAL_ADC_ConfigChannel+0x234>)
 80032a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a21      	ldr	r2, [pc, #132]	; (800332c <HAL_ADC_ConfigChannel+0x238>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d109      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x1cc>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b12      	cmp	r3, #18
 80032b2:	d105      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a19      	ldr	r2, [pc, #100]	; (800332c <HAL_ADC_ConfigChannel+0x238>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d123      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x21e>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b10      	cmp	r3, #16
 80032d0:	d003      	beq.n	80032da <HAL_ADC_ConfigChannel+0x1e6>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b11      	cmp	r3, #17
 80032d8:	d11b      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b10      	cmp	r3, #16
 80032ec:	d111      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032ee:	4b10      	ldr	r3, [pc, #64]	; (8003330 <HAL_ADC_ConfigChannel+0x23c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a10      	ldr	r2, [pc, #64]	; (8003334 <HAL_ADC_ConfigChannel+0x240>)
 80032f4:	fba2 2303 	umull	r2, r3, r2, r3
 80032f8:	0c9a      	lsrs	r2, r3, #18
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003304:	e002      	b.n	800330c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	3b01      	subs	r3, #1
 800330a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f9      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	40012300 	.word	0x40012300
 800332c:	40012000 	.word	0x40012000
 8003330:	20000000 	.word	0x20000000
 8003334:	431bde83 	.word	0x431bde83

08003338 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003340:	4b79      	ldr	r3, [pc, #484]	; (8003528 <ADC_Init+0x1f0>)
 8003342:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	431a      	orrs	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800336c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6859      	ldr	r1, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	021a      	lsls	r2, r3, #8
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003390:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6859      	ldr	r1, [r3, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6899      	ldr	r1, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ca:	4a58      	ldr	r2, [pc, #352]	; (800352c <ADC_Init+0x1f4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d022      	beq.n	8003416 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6899      	ldr	r1, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003400:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6899      	ldr	r1, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	e00f      	b.n	8003436 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003424:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003434:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0202 	bic.w	r2, r2, #2
 8003444:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6899      	ldr	r1, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	7e1b      	ldrb	r3, [r3, #24]
 8003450:	005a      	lsls	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d01b      	beq.n	800349c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003472:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003482:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6859      	ldr	r1, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	3b01      	subs	r3, #1
 8003490:	035a      	lsls	r2, r3, #13
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]
 800349a:	e007      	b.n	80034ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80034ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	051a      	lsls	r2, r3, #20
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6899      	ldr	r1, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034ee:	025a      	lsls	r2, r3, #9
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003506:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6899      	ldr	r1, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	029a      	lsls	r2, r3, #10
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	609a      	str	r2, [r3, #8]
}
 800351c:	bf00      	nop
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	40012300 	.word	0x40012300
 800352c:	0f000001 	.word	0x0f000001

08003530 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003546:	2b00      	cmp	r3, #0
 8003548:	d13c      	bne.n	80035c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d12b      	bne.n	80035bc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003568:	2b00      	cmp	r3, #0
 800356a:	d127      	bne.n	80035bc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003576:	2b00      	cmp	r3, #0
 8003578:	d006      	beq.n	8003588 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003584:	2b00      	cmp	r3, #0
 8003586:	d119      	bne.n	80035bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0220 	bic.w	r2, r2, #32
 8003596:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d105      	bne.n	80035bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	f043 0201 	orr.w	r2, r3, #1
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f7fe f997 	bl	80018f0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80035c2:	e00e      	b.n	80035e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	f003 0310 	and.w	r3, r3, #16
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f7ff fd85 	bl	80030e0 <HAL_ADC_ErrorCallback>
}
 80035d6:	e004      	b.n	80035e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	4798      	blx	r3
}
 80035e2:	bf00      	nop
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b084      	sub	sp, #16
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f7ff fd67 	bl	80030cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035fe:	bf00      	nop
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b084      	sub	sp, #16
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003612:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2240      	movs	r2, #64	; 0x40
 8003618:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	f043 0204 	orr.w	r2, r3, #4
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f7ff fd5a 	bl	80030e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800362c:	bf00      	nop
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003644:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <__NVIC_SetPriorityGrouping+0x44>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003650:	4013      	ands	r3, r2
 8003652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800365c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003666:	4a04      	ldr	r2, [pc, #16]	; (8003678 <__NVIC_SetPriorityGrouping+0x44>)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	60d3      	str	r3, [r2, #12]
}
 800366c:	bf00      	nop
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	e000ed00 	.word	0xe000ed00

0800367c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003680:	4b04      	ldr	r3, [pc, #16]	; (8003694 <__NVIC_GetPriorityGrouping+0x18>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	0a1b      	lsrs	r3, r3, #8
 8003686:	f003 0307 	and.w	r3, r3, #7
}
 800368a:	4618      	mov	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	e000ed00 	.word	0xe000ed00

08003698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	db0b      	blt.n	80036c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	f003 021f 	and.w	r2, r3, #31
 80036b0:	4907      	ldr	r1, [pc, #28]	; (80036d0 <__NVIC_EnableIRQ+0x38>)
 80036b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b6:	095b      	lsrs	r3, r3, #5
 80036b8:	2001      	movs	r0, #1
 80036ba:	fa00 f202 	lsl.w	r2, r0, r2
 80036be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	e000e100 	.word	0xe000e100

080036d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	6039      	str	r1, [r7, #0]
 80036de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	db0a      	blt.n	80036fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	490c      	ldr	r1, [pc, #48]	; (8003720 <__NVIC_SetPriority+0x4c>)
 80036ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f2:	0112      	lsls	r2, r2, #4
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	440b      	add	r3, r1
 80036f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036fc:	e00a      	b.n	8003714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	b2da      	uxtb	r2, r3
 8003702:	4908      	ldr	r1, [pc, #32]	; (8003724 <__NVIC_SetPriority+0x50>)
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	3b04      	subs	r3, #4
 800370c:	0112      	lsls	r2, r2, #4
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	440b      	add	r3, r1
 8003712:	761a      	strb	r2, [r3, #24]
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	e000e100 	.word	0xe000e100
 8003724:	e000ed00 	.word	0xe000ed00

08003728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003728:	b480      	push	{r7}
 800372a:	b089      	sub	sp, #36	; 0x24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f1c3 0307 	rsb	r3, r3, #7
 8003742:	2b04      	cmp	r3, #4
 8003744:	bf28      	it	cs
 8003746:	2304      	movcs	r3, #4
 8003748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	3304      	adds	r3, #4
 800374e:	2b06      	cmp	r3, #6
 8003750:	d902      	bls.n	8003758 <NVIC_EncodePriority+0x30>
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	3b03      	subs	r3, #3
 8003756:	e000      	b.n	800375a <NVIC_EncodePriority+0x32>
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800375c:	f04f 32ff 	mov.w	r2, #4294967295
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43da      	mvns	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	401a      	ands	r2, r3
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003770:	f04f 31ff 	mov.w	r1, #4294967295
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	fa01 f303 	lsl.w	r3, r1, r3
 800377a:	43d9      	mvns	r1, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003780:	4313      	orrs	r3, r2
         );
}
 8003782:	4618      	mov	r0, r3
 8003784:	3724      	adds	r7, #36	; 0x24
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff ff4c 	bl	8003634 <__NVIC_SetPriorityGrouping>
}
 800379c:	bf00      	nop
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
 80037b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037b6:	f7ff ff61 	bl	800367c <__NVIC_GetPriorityGrouping>
 80037ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	68b9      	ldr	r1, [r7, #8]
 80037c0:	6978      	ldr	r0, [r7, #20]
 80037c2:	f7ff ffb1 	bl	8003728 <NVIC_EncodePriority>
 80037c6:	4602      	mov	r2, r0
 80037c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037cc:	4611      	mov	r1, r2
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff ff80 	bl	80036d4 <__NVIC_SetPriority>
}
 80037d4:	bf00      	nop
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff ff54 	bl	8003698 <__NVIC_EnableIRQ>
}
 80037f0:	bf00      	nop
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003804:	f7ff fad2 	bl	8002dac <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e099      	b.n	8003948 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0201 	bic.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003834:	e00f      	b.n	8003856 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003836:	f7ff fab9 	bl	8002dac <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b05      	cmp	r3, #5
 8003842:	d908      	bls.n	8003856 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2203      	movs	r2, #3
 800384e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e078      	b.n	8003948 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1e8      	bne.n	8003836 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	4b38      	ldr	r3, [pc, #224]	; (8003950 <HAL_DMA_Init+0x158>)
 8003870:	4013      	ands	r3, r2
 8003872:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003882:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800388e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800389a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d107      	bne.n	80038c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b8:	4313      	orrs	r3, r2
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	4313      	orrs	r3, r2
 80038be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f023 0307 	bic.w	r3, r3, #7
 80038d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	4313      	orrs	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d117      	bne.n	800391a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00e      	beq.n	800391a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 fadf 	bl	8003ec0 <DMA_CheckFifoParam>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d008      	beq.n	800391a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2240      	movs	r2, #64	; 0x40
 800390c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003916:	2301      	movs	r3, #1
 8003918:	e016      	b.n	8003948 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fa96 	bl	8003e54 <DMA_CalcBaseAndBitshift>
 8003928:	4603      	mov	r3, r0
 800392a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	223f      	movs	r2, #63	; 0x3f
 8003932:	409a      	lsls	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	f010803f 	.word	0xf010803f

08003954 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_DMA_Start_IT+0x26>
 8003976:	2302      	movs	r3, #2
 8003978:	e040      	b.n	80039fc <HAL_DMA_Start_IT+0xa8>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b01      	cmp	r3, #1
 800398c:	d12f      	bne.n	80039ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2202      	movs	r2, #2
 8003992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68b9      	ldr	r1, [r7, #8]
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 fa28 	bl	8003df8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ac:	223f      	movs	r2, #63	; 0x3f
 80039ae:	409a      	lsls	r2, r3
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0216 	orr.w	r2, r2, #22
 80039c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d007      	beq.n	80039dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0208 	orr.w	r2, r2, #8
 80039da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	e005      	b.n	80039fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039f6:	2302      	movs	r3, #2
 80039f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a12:	f7ff f9cb 	bl	8002dac <HAL_GetTick>
 8003a16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d008      	beq.n	8003a36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2280      	movs	r2, #128	; 0x80
 8003a28:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e052      	b.n	8003adc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0216 	bic.w	r2, r2, #22
 8003a44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695a      	ldr	r2, [r3, #20]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d103      	bne.n	8003a66 <HAL_DMA_Abort+0x62>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d007      	beq.n	8003a76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0208 	bic.w	r2, r2, #8
 8003a74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0201 	bic.w	r2, r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a86:	e013      	b.n	8003ab0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a88:	f7ff f990 	bl	8002dac <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b05      	cmp	r3, #5
 8003a94:	d90c      	bls.n	8003ab0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2203      	movs	r2, #3
 8003aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e015      	b.n	8003adc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e4      	bne.n	8003a88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac2:	223f      	movs	r2, #63	; 0x3f
 8003ac4:	409a      	lsls	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003af0:	4b92      	ldr	r3, [pc, #584]	; (8003d3c <HAL_DMA_IRQHandler+0x258>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a92      	ldr	r2, [pc, #584]	; (8003d40 <HAL_DMA_IRQHandler+0x25c>)
 8003af6:	fba2 2303 	umull	r2, r3, r2, r3
 8003afa:	0a9b      	lsrs	r3, r3, #10
 8003afc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0e:	2208      	movs	r2, #8
 8003b10:	409a      	lsls	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4013      	ands	r3, r2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d01a      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d013      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0204 	bic.w	r2, r2, #4
 8003b36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b48:	f043 0201 	orr.w	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b54:	2201      	movs	r2, #1
 8003b56:	409a      	lsls	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d012      	beq.n	8003b86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00b      	beq.n	8003b86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b72:	2201      	movs	r2, #1
 8003b74:	409a      	lsls	r2, r3
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7e:	f043 0202 	orr.w	r2, r3, #2
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8a:	2204      	movs	r2, #4
 8003b8c:	409a      	lsls	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4013      	ands	r3, r2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d012      	beq.n	8003bbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00b      	beq.n	8003bbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba8:	2204      	movs	r2, #4
 8003baa:	409a      	lsls	r2, r3
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb4:	f043 0204 	orr.w	r2, r3, #4
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc0:	2210      	movs	r2, #16
 8003bc2:	409a      	lsls	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d043      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d03c      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bde:	2210      	movs	r2, #16
 8003be0:	409a      	lsls	r2, r3
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d018      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d108      	bne.n	8003c14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d024      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	4798      	blx	r3
 8003c12:	e01f      	b.n	8003c54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d01b      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	4798      	blx	r3
 8003c24:	e016      	b.n	8003c54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d107      	bne.n	8003c44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0208 	bic.w	r2, r2, #8
 8003c42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c58:	2220      	movs	r2, #32
 8003c5a:	409a      	lsls	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 808e 	beq.w	8003d82 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0310 	and.w	r3, r3, #16
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 8086 	beq.w	8003d82 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	409a      	lsls	r2, r3
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b05      	cmp	r3, #5
 8003c8c:	d136      	bne.n	8003cfc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0216 	bic.w	r2, r2, #22
 8003c9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695a      	ldr	r2, [r3, #20]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d103      	bne.n	8003cbe <HAL_DMA_IRQHandler+0x1da>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0208 	bic.w	r2, r2, #8
 8003ccc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd2:	223f      	movs	r2, #63	; 0x3f
 8003cd4:	409a      	lsls	r2, r3
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d07d      	beq.n	8003dee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	4798      	blx	r3
        }
        return;
 8003cfa:	e078      	b.n	8003dee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d01c      	beq.n	8003d44 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d108      	bne.n	8003d2a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d030      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	4798      	blx	r3
 8003d28:	e02b      	b.n	8003d82 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d027      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	4798      	blx	r3
 8003d3a:	e022      	b.n	8003d82 <HAL_DMA_IRQHandler+0x29e>
 8003d3c:	20000000 	.word	0x20000000
 8003d40:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10f      	bne.n	8003d72 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0210 	bic.w	r2, r2, #16
 8003d60:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d032      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d022      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2205      	movs	r2, #5
 8003d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0201 	bic.w	r2, r2, #1
 8003dac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	3301      	adds	r3, #1
 8003db2:	60bb      	str	r3, [r7, #8]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d307      	bcc.n	8003dca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1f2      	bne.n	8003dae <HAL_DMA_IRQHandler+0x2ca>
 8003dc8:	e000      	b.n	8003dcc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003dca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	4798      	blx	r3
 8003dec:	e000      	b.n	8003df0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003dee:	bf00      	nop
    }
  }
}
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop

08003df8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	2b40      	cmp	r3, #64	; 0x40
 8003e24:	d108      	bne.n	8003e38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e36:	e007      	b.n	8003e48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	60da      	str	r2, [r3, #12]
}
 8003e48:	bf00      	nop
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	3b10      	subs	r3, #16
 8003e64:	4a14      	ldr	r2, [pc, #80]	; (8003eb8 <DMA_CalcBaseAndBitshift+0x64>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	091b      	lsrs	r3, r3, #4
 8003e6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e6e:	4a13      	ldr	r2, [pc, #76]	; (8003ebc <DMA_CalcBaseAndBitshift+0x68>)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d909      	bls.n	8003e96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e8a:	f023 0303 	bic.w	r3, r3, #3
 8003e8e:	1d1a      	adds	r2, r3, #4
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	659a      	str	r2, [r3, #88]	; 0x58
 8003e94:	e007      	b.n	8003ea6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e9e:	f023 0303 	bic.w	r3, r3, #3
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	aaaaaaab 	.word	0xaaaaaaab
 8003ebc:	0800ff6c 	.word	0x0800ff6c

08003ec0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d11f      	bne.n	8003f1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d855      	bhi.n	8003f8c <DMA_CheckFifoParam+0xcc>
 8003ee0:	a201      	add	r2, pc, #4	; (adr r2, 8003ee8 <DMA_CheckFifoParam+0x28>)
 8003ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee6:	bf00      	nop
 8003ee8:	08003ef9 	.word	0x08003ef9
 8003eec:	08003f0b 	.word	0x08003f0b
 8003ef0:	08003ef9 	.word	0x08003ef9
 8003ef4:	08003f8d 	.word	0x08003f8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d045      	beq.n	8003f90 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f08:	e042      	b.n	8003f90 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f12:	d13f      	bne.n	8003f94 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f18:	e03c      	b.n	8003f94 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f22:	d121      	bne.n	8003f68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d836      	bhi.n	8003f98 <DMA_CheckFifoParam+0xd8>
 8003f2a:	a201      	add	r2, pc, #4	; (adr r2, 8003f30 <DMA_CheckFifoParam+0x70>)
 8003f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f30:	08003f41 	.word	0x08003f41
 8003f34:	08003f47 	.word	0x08003f47
 8003f38:	08003f41 	.word	0x08003f41
 8003f3c:	08003f59 	.word	0x08003f59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	73fb      	strb	r3, [r7, #15]
      break;
 8003f44:	e02f      	b.n	8003fa6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d024      	beq.n	8003f9c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f56:	e021      	b.n	8003f9c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f60:	d11e      	bne.n	8003fa0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f66:	e01b      	b.n	8003fa0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d902      	bls.n	8003f74 <DMA_CheckFifoParam+0xb4>
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	d003      	beq.n	8003f7a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f72:	e018      	b.n	8003fa6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	73fb      	strb	r3, [r7, #15]
      break;
 8003f78:	e015      	b.n	8003fa6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00e      	beq.n	8003fa4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	73fb      	strb	r3, [r7, #15]
      break;
 8003f8a:	e00b      	b.n	8003fa4 <DMA_CheckFifoParam+0xe4>
      break;
 8003f8c:	bf00      	nop
 8003f8e:	e00a      	b.n	8003fa6 <DMA_CheckFifoParam+0xe6>
      break;
 8003f90:	bf00      	nop
 8003f92:	e008      	b.n	8003fa6 <DMA_CheckFifoParam+0xe6>
      break;
 8003f94:	bf00      	nop
 8003f96:	e006      	b.n	8003fa6 <DMA_CheckFifoParam+0xe6>
      break;
 8003f98:	bf00      	nop
 8003f9a:	e004      	b.n	8003fa6 <DMA_CheckFifoParam+0xe6>
      break;
 8003f9c:	bf00      	nop
 8003f9e:	e002      	b.n	8003fa6 <DMA_CheckFifoParam+0xe6>
      break;   
 8003fa0:	bf00      	nop
 8003fa2:	e000      	b.n	8003fa6 <DMA_CheckFifoParam+0xe6>
      break;
 8003fa4:	bf00      	nop
    }
  } 
  
  return status; 
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b089      	sub	sp, #36	; 0x24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61fb      	str	r3, [r7, #28]
 8003fce:	e159      	b.n	8004284 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	f040 8148 	bne.w	800427e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d00b      	beq.n	800400e <HAL_GPIO_Init+0x5a>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d007      	beq.n	800400e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004002:	2b11      	cmp	r3, #17
 8004004:	d003      	beq.n	800400e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b12      	cmp	r3, #18
 800400c:	d130      	bne.n	8004070 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	2203      	movs	r2, #3
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	43db      	mvns	r3, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	4013      	ands	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4313      	orrs	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004044:	2201      	movs	r2, #1
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	43db      	mvns	r3, r3
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4013      	ands	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	f003 0201 	and.w	r2, r3, #1
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	4313      	orrs	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	2203      	movs	r2, #3
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	43db      	mvns	r3, r3
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4013      	ands	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4313      	orrs	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d003      	beq.n	80040b0 <HAL_GPIO_Init+0xfc>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b12      	cmp	r3, #18
 80040ae:	d123      	bne.n	80040f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	08da      	lsrs	r2, r3, #3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3208      	adds	r2, #8
 80040b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	220f      	movs	r2, #15
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	43db      	mvns	r3, r3
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4013      	ands	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	08da      	lsrs	r2, r3, #3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3208      	adds	r2, #8
 80040f2:	69b9      	ldr	r1, [r7, #24]
 80040f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	2203      	movs	r2, #3
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	43db      	mvns	r3, r3
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	4013      	ands	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f003 0203 	and.w	r2, r3, #3
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4313      	orrs	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 80a2 	beq.w	800427e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	4b56      	ldr	r3, [pc, #344]	; (8004298 <HAL_GPIO_Init+0x2e4>)
 8004140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004142:	4a55      	ldr	r2, [pc, #340]	; (8004298 <HAL_GPIO_Init+0x2e4>)
 8004144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004148:	6453      	str	r3, [r2, #68]	; 0x44
 800414a:	4b53      	ldr	r3, [pc, #332]	; (8004298 <HAL_GPIO_Init+0x2e4>)
 800414c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004156:	4a51      	ldr	r2, [pc, #324]	; (800429c <HAL_GPIO_Init+0x2e8>)
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	089b      	lsrs	r3, r3, #2
 800415c:	3302      	adds	r3, #2
 800415e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	220f      	movs	r2, #15
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43db      	mvns	r3, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4013      	ands	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a48      	ldr	r2, [pc, #288]	; (80042a0 <HAL_GPIO_Init+0x2ec>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d019      	beq.n	80041b6 <HAL_GPIO_Init+0x202>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a47      	ldr	r2, [pc, #284]	; (80042a4 <HAL_GPIO_Init+0x2f0>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d013      	beq.n	80041b2 <HAL_GPIO_Init+0x1fe>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a46      	ldr	r2, [pc, #280]	; (80042a8 <HAL_GPIO_Init+0x2f4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d00d      	beq.n	80041ae <HAL_GPIO_Init+0x1fa>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a45      	ldr	r2, [pc, #276]	; (80042ac <HAL_GPIO_Init+0x2f8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d007      	beq.n	80041aa <HAL_GPIO_Init+0x1f6>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a44      	ldr	r2, [pc, #272]	; (80042b0 <HAL_GPIO_Init+0x2fc>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d101      	bne.n	80041a6 <HAL_GPIO_Init+0x1f2>
 80041a2:	2304      	movs	r3, #4
 80041a4:	e008      	b.n	80041b8 <HAL_GPIO_Init+0x204>
 80041a6:	2307      	movs	r3, #7
 80041a8:	e006      	b.n	80041b8 <HAL_GPIO_Init+0x204>
 80041aa:	2303      	movs	r3, #3
 80041ac:	e004      	b.n	80041b8 <HAL_GPIO_Init+0x204>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e002      	b.n	80041b8 <HAL_GPIO_Init+0x204>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <HAL_GPIO_Init+0x204>
 80041b6:	2300      	movs	r3, #0
 80041b8:	69fa      	ldr	r2, [r7, #28]
 80041ba:	f002 0203 	and.w	r2, r2, #3
 80041be:	0092      	lsls	r2, r2, #2
 80041c0:	4093      	lsls	r3, r2
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041c8:	4934      	ldr	r1, [pc, #208]	; (800429c <HAL_GPIO_Init+0x2e8>)
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	089b      	lsrs	r3, r3, #2
 80041ce:	3302      	adds	r3, #2
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041d6:	4b37      	ldr	r3, [pc, #220]	; (80042b4 <HAL_GPIO_Init+0x300>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	43db      	mvns	r3, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4013      	ands	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041fa:	4a2e      	ldr	r2, [pc, #184]	; (80042b4 <HAL_GPIO_Init+0x300>)
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004200:	4b2c      	ldr	r3, [pc, #176]	; (80042b4 <HAL_GPIO_Init+0x300>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	43db      	mvns	r3, r3
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	4013      	ands	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004224:	4a23      	ldr	r2, [pc, #140]	; (80042b4 <HAL_GPIO_Init+0x300>)
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800422a:	4b22      	ldr	r3, [pc, #136]	; (80042b4 <HAL_GPIO_Init+0x300>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	43db      	mvns	r3, r3
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	4013      	ands	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	4313      	orrs	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800424e:	4a19      	ldr	r2, [pc, #100]	; (80042b4 <HAL_GPIO_Init+0x300>)
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004254:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <HAL_GPIO_Init+0x300>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	43db      	mvns	r3, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4013      	ands	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004278:	4a0e      	ldr	r2, [pc, #56]	; (80042b4 <HAL_GPIO_Init+0x300>)
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	3301      	adds	r3, #1
 8004282:	61fb      	str	r3, [r7, #28]
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	2b0f      	cmp	r3, #15
 8004288:	f67f aea2 	bls.w	8003fd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800428c:	bf00      	nop
 800428e:	3724      	adds	r7, #36	; 0x24
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	40023800 	.word	0x40023800
 800429c:	40013800 	.word	0x40013800
 80042a0:	40020000 	.word	0x40020000
 80042a4:	40020400 	.word	0x40020400
 80042a8:	40020800 	.word	0x40020800
 80042ac:	40020c00 	.word	0x40020c00
 80042b0:	40021000 	.word	0x40021000
 80042b4:	40013c00 	.word	0x40013c00

080042b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	460b      	mov	r3, r1
 80042c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	887b      	ldrh	r3, [r7, #2]
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042d0:	2301      	movs	r3, #1
 80042d2:	73fb      	strb	r3, [r7, #15]
 80042d4:	e001      	b.n	80042da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042d6:	2300      	movs	r3, #0
 80042d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042da:	7bfb      	ldrb	r3, [r7, #15]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	460b      	mov	r3, r1
 80042f2:	807b      	strh	r3, [r7, #2]
 80042f4:	4613      	mov	r3, r2
 80042f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042f8:	787b      	ldrb	r3, [r7, #1]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042fe:	887a      	ldrh	r2, [r7, #2]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004304:	e003      	b.n	800430e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004306:	887b      	ldrh	r3, [r7, #2]
 8004308:	041a      	lsls	r2, r3, #16
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	619a      	str	r2, [r3, #24]
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800431a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800431c:	b08f      	sub	sp, #60	; 0x3c
 800431e:	af0a      	add	r7, sp, #40	; 0x28
 8004320:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e10f      	b.n	800454c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d106      	bne.n	800434c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f009 fcee 	bl	800dd28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2203      	movs	r2, #3
 8004350:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435c:	2b00      	cmp	r3, #0
 800435e:	d102      	bne.n	8004366 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f002 fea5 	bl	80070ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	603b      	str	r3, [r7, #0]
 8004376:	687e      	ldr	r6, [r7, #4]
 8004378:	466d      	mov	r5, sp
 800437a:	f106 0410 	add.w	r4, r6, #16
 800437e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004380:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004382:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004384:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004386:	e894 0003 	ldmia.w	r4, {r0, r1}
 800438a:	e885 0003 	stmia.w	r5, {r0, r1}
 800438e:	1d33      	adds	r3, r6, #4
 8004390:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004392:	6838      	ldr	r0, [r7, #0]
 8004394:	f002 fd7c 	bl	8006e90 <USB_CoreInit>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d005      	beq.n	80043aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2202      	movs	r2, #2
 80043a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e0d0      	b.n	800454c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2100      	movs	r1, #0
 80043b0:	4618      	mov	r0, r3
 80043b2:	f002 fe93 	bl	80070dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043b6:	2300      	movs	r3, #0
 80043b8:	73fb      	strb	r3, [r7, #15]
 80043ba:	e04a      	b.n	8004452 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80043bc:	7bfa      	ldrb	r2, [r7, #15]
 80043be:	6879      	ldr	r1, [r7, #4]
 80043c0:	4613      	mov	r3, r2
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	1a9b      	subs	r3, r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	333d      	adds	r3, #61	; 0x3d
 80043cc:	2201      	movs	r2, #1
 80043ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80043d0:	7bfa      	ldrb	r2, [r7, #15]
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	1a9b      	subs	r3, r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	333c      	adds	r3, #60	; 0x3c
 80043e0:	7bfa      	ldrb	r2, [r7, #15]
 80043e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80043e4:	7bfa      	ldrb	r2, [r7, #15]
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	b298      	uxth	r0, r3
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	3342      	adds	r3, #66	; 0x42
 80043f8:	4602      	mov	r2, r0
 80043fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80043fc:	7bfa      	ldrb	r2, [r7, #15]
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	4613      	mov	r3, r2
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	1a9b      	subs	r3, r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	333f      	adds	r3, #63	; 0x3f
 800440c:	2200      	movs	r2, #0
 800440e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004410:	7bfa      	ldrb	r2, [r7, #15]
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	4613      	mov	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	3344      	adds	r3, #68	; 0x44
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004424:	7bfa      	ldrb	r2, [r7, #15]
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	4613      	mov	r3, r2
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	1a9b      	subs	r3, r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	3348      	adds	r3, #72	; 0x48
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004438:	7bfa      	ldrb	r2, [r7, #15]
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	4613      	mov	r3, r2
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	1a9b      	subs	r3, r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	3350      	adds	r3, #80	; 0x50
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800444c:	7bfb      	ldrb	r3, [r7, #15]
 800444e:	3301      	adds	r3, #1
 8004450:	73fb      	strb	r3, [r7, #15]
 8004452:	7bfa      	ldrb	r2, [r7, #15]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	429a      	cmp	r2, r3
 800445a:	d3af      	bcc.n	80043bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800445c:	2300      	movs	r3, #0
 800445e:	73fb      	strb	r3, [r7, #15]
 8004460:	e044      	b.n	80044ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004462:	7bfa      	ldrb	r2, [r7, #15]
 8004464:	6879      	ldr	r1, [r7, #4]
 8004466:	4613      	mov	r3, r2
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	1a9b      	subs	r3, r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	440b      	add	r3, r1
 8004470:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004474:	2200      	movs	r2, #0
 8004476:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004478:	7bfa      	ldrb	r2, [r7, #15]
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	4613      	mov	r3, r2
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	1a9b      	subs	r3, r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800448a:	7bfa      	ldrb	r2, [r7, #15]
 800448c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800448e:	7bfa      	ldrb	r2, [r7, #15]
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	4613      	mov	r3, r2
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	1a9b      	subs	r3, r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	440b      	add	r3, r1
 800449c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80044a0:	2200      	movs	r2, #0
 80044a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044a4:	7bfa      	ldrb	r2, [r7, #15]
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	4613      	mov	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	1a9b      	subs	r3, r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	440b      	add	r3, r1
 80044b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80044ba:	7bfa      	ldrb	r2, [r7, #15]
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	4613      	mov	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	1a9b      	subs	r3, r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	440b      	add	r3, r1
 80044c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044d0:	7bfa      	ldrb	r2, [r7, #15]
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	4613      	mov	r3, r2
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	3301      	adds	r3, #1
 80044ea:	73fb      	strb	r3, [r7, #15]
 80044ec:	7bfa      	ldrb	r2, [r7, #15]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d3b5      	bcc.n	8004462 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	603b      	str	r3, [r7, #0]
 80044fc:	687e      	ldr	r6, [r7, #4]
 80044fe:	466d      	mov	r5, sp
 8004500:	f106 0410 	add.w	r4, r6, #16
 8004504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800450a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800450c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004510:	e885 0003 	stmia.w	r5, {r0, r1}
 8004514:	1d33      	adds	r3, r6, #4
 8004516:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004518:	6838      	ldr	r0, [r7, #0]
 800451a:	f002 fe09 	bl	8007130 <USB_DevInit>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d005      	beq.n	8004530 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e00d      	b.n	800454c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4618      	mov	r0, r3
 8004546:	f003 fe51 	bl	80081ec <USB_DevDisconnect>

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004554 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_PCD_Start+0x1c>
 800456c:	2302      	movs	r3, #2
 800456e:	e020      	b.n	80045b2 <HAL_PCD_Start+0x5e>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457c:	2b01      	cmp	r3, #1
 800457e:	d109      	bne.n	8004594 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004584:	2b01      	cmp	r3, #1
 8004586:	d005      	beq.n	8004594 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f002 fd7d 	bl	8007098 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f003 fe01 	bl	80081aa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80045ba:	b590      	push	{r4, r7, lr}
 80045bc:	b08d      	sub	sp, #52	; 0x34
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f003 febf 	bl	8008354 <USB_GetMode>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f040 839d 	bne.w	8004d18 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f003 fe23 	bl	800822e <USB_ReadInterrupts>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 8393 	beq.w	8004d16 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f003 fe1a 	bl	800822e <USB_ReadInterrupts>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b02      	cmp	r3, #2
 8004602:	d107      	bne.n	8004614 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695a      	ldr	r2, [r3, #20]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f002 0202 	and.w	r2, r2, #2
 8004612:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f003 fe08 	bl	800822e <USB_ReadInterrupts>
 800461e:	4603      	mov	r3, r0
 8004620:	f003 0310 	and.w	r3, r3, #16
 8004624:	2b10      	cmp	r3, #16
 8004626:	d161      	bne.n	80046ec <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0210 	bic.w	r2, r2, #16
 8004636:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004638:	6a3b      	ldr	r3, [r7, #32]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	f003 020f 	and.w	r2, r3, #15
 8004644:	4613      	mov	r3, r2
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	1a9b      	subs	r3, r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	4413      	add	r3, r2
 8004654:	3304      	adds	r3, #4
 8004656:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	0c5b      	lsrs	r3, r3, #17
 800465c:	f003 030f 	and.w	r3, r3, #15
 8004660:	2b02      	cmp	r3, #2
 8004662:	d124      	bne.n	80046ae <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800466a:	4013      	ands	r3, r2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d035      	beq.n	80046dc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	091b      	lsrs	r3, r3, #4
 8004678:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800467a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800467e:	b29b      	uxth	r3, r3
 8004680:	461a      	mov	r2, r3
 8004682:	6a38      	ldr	r0, [r7, #32]
 8004684:	f003 fc6e 	bl	8007f64 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	68da      	ldr	r2, [r3, #12]
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	091b      	lsrs	r3, r3, #4
 8004690:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004694:	441a      	add	r2, r3
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	699a      	ldr	r2, [r3, #24]
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	091b      	lsrs	r3, r3, #4
 80046a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046a6:	441a      	add	r2, r3
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	619a      	str	r2, [r3, #24]
 80046ac:	e016      	b.n	80046dc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	0c5b      	lsrs	r3, r3, #17
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	2b06      	cmp	r3, #6
 80046b8:	d110      	bne.n	80046dc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80046c0:	2208      	movs	r2, #8
 80046c2:	4619      	mov	r1, r3
 80046c4:	6a38      	ldr	r0, [r7, #32]
 80046c6:	f003 fc4d 	bl	8007f64 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	091b      	lsrs	r3, r3, #4
 80046d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046d6:	441a      	add	r2, r3
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699a      	ldr	r2, [r3, #24]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0210 	orr.w	r2, r2, #16
 80046ea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f003 fd9c 	bl	800822e <USB_ReadInterrupts>
 80046f6:	4603      	mov	r3, r0
 80046f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004700:	d16e      	bne.n	80047e0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004702:	2300      	movs	r3, #0
 8004704:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f003 fda2 	bl	8008254 <USB_ReadDevAllOutEpInterrupt>
 8004710:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004712:	e062      	b.n	80047da <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d057      	beq.n	80047ce <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	4611      	mov	r1, r2
 8004728:	4618      	mov	r0, r3
 800472a:	f003 fdc7 	bl	80082bc <USB_ReadDevOutEPInterrupt>
 800472e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00c      	beq.n	8004754 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	4413      	add	r3, r2
 8004742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004746:	461a      	mov	r2, r3
 8004748:	2301      	movs	r3, #1
 800474a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800474c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fdb0 	bl	80052b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00c      	beq.n	8004778 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	4413      	add	r3, r2
 8004766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476a:	461a      	mov	r2, r3
 800476c:	2308      	movs	r3, #8
 800476e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004770:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 feaa 	bl	80054cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f003 0310 	and.w	r3, r3, #16
 800477e:	2b00      	cmp	r3, #0
 8004780:	d008      	beq.n	8004794 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478e:	461a      	mov	r2, r3
 8004790:	2310      	movs	r3, #16
 8004792:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b00      	cmp	r3, #0
 800479c:	d008      	beq.n	80047b0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047aa:	461a      	mov	r2, r3
 80047ac:	2320      	movs	r3, #32
 80047ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c6:	461a      	mov	r2, r3
 80047c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047cc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	3301      	adds	r3, #1
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80047d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d6:	085b      	lsrs	r3, r3, #1
 80047d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80047da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d199      	bne.n	8004714 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f003 fd22 	bl	800822e <USB_ReadInterrupts>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047f4:	f040 80c0 	bne.w	8004978 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f003 fd43 	bl	8008288 <USB_ReadDevAllInEpInterrupt>
 8004802:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004808:	e0b2      	b.n	8004970 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 80a7 	beq.w	8004964 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800481c:	b2d2      	uxtb	r2, r2
 800481e:	4611      	mov	r1, r2
 8004820:	4618      	mov	r0, r3
 8004822:	f003 fd69 	bl	80082f8 <USB_ReadDevInEPInterrupt>
 8004826:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d057      	beq.n	80048e2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	f003 030f 	and.w	r3, r3, #15
 8004838:	2201      	movs	r2, #1
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	43db      	mvns	r3, r3
 800484c:	69f9      	ldr	r1, [r7, #28]
 800484e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004852:	4013      	ands	r3, r2
 8004854:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	4413      	add	r3, r2
 800485e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004862:	461a      	mov	r2, r3
 8004864:	2301      	movs	r3, #1
 8004866:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d132      	bne.n	80048d6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004874:	4613      	mov	r3, r2
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	3348      	adds	r3, #72	; 0x48
 8004880:	6819      	ldr	r1, [r3, #0]
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004886:	4613      	mov	r3, r2
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4403      	add	r3, r0
 8004890:	3344      	adds	r3, #68	; 0x44
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4419      	add	r1, r3
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489a:	4613      	mov	r3, r2
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	1a9b      	subs	r3, r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4403      	add	r3, r0
 80048a4:	3348      	adds	r3, #72	; 0x48
 80048a6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d113      	bne.n	80048d6 <HAL_PCD_IRQHandler+0x31c>
 80048ae:	6879      	ldr	r1, [r7, #4]
 80048b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b2:	4613      	mov	r3, r2
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	1a9b      	subs	r3, r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	440b      	add	r3, r1
 80048bc:	3350      	adds	r3, #80	; 0x50
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d108      	bne.n	80048d6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6818      	ldr	r0, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048ce:	461a      	mov	r2, r3
 80048d0:	2101      	movs	r1, #1
 80048d2:	f003 fd71 	bl	80083b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	4619      	mov	r1, r3
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f009 faa4 	bl	800de2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f003 0308 	and.w	r3, r3, #8
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d008      	beq.n	80048fe <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f8:	461a      	mov	r2, r3
 80048fa:	2308      	movs	r3, #8
 80048fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	2b00      	cmp	r3, #0
 8004906:	d008      	beq.n	800491a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004914:	461a      	mov	r2, r3
 8004916:	2310      	movs	r3, #16
 8004918:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004930:	461a      	mov	r2, r3
 8004932:	2340      	movs	r3, #64	; 0x40
 8004934:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d008      	beq.n	8004952 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494c:	461a      	mov	r2, r3
 800494e:	2302      	movs	r3, #2
 8004950:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800495c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fc1b 	bl	800519a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	3301      	adds	r3, #1
 8004968:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	085b      	lsrs	r3, r3, #1
 800496e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004972:	2b00      	cmp	r3, #0
 8004974:	f47f af49 	bne.w	800480a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4618      	mov	r0, r3
 800497e:	f003 fc56 	bl	800822e <USB_ReadInterrupts>
 8004982:	4603      	mov	r3, r0
 8004984:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004988:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800498c:	d122      	bne.n	80049d4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	69fa      	ldr	r2, [r7, #28]
 8004998:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800499c:	f023 0301 	bic.w	r3, r3, #1
 80049a0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d108      	bne.n	80049be <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80049b4:	2100      	movs	r1, #0
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fe26 	bl	8005608 <HAL_PCDEx_LPM_Callback>
 80049bc:	e002      	b.n	80049c4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f009 faaa 	bl	800df18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695a      	ldr	r2, [r3, #20]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80049d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f003 fc28 	bl	800822e <USB_ReadInterrupts>
 80049de:	4603      	mov	r3, r0
 80049e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049e8:	d112      	bne.n	8004a10 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d102      	bne.n	8004a00 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f009 fa66 	bl	800decc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695a      	ldr	r2, [r3, #20]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004a0e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f003 fc0a 	bl	800822e <USB_ReadInterrupts>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a24:	f040 80c7 	bne.w	8004bb6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	69fa      	ldr	r2, [r7, #28]
 8004a32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a36:	f023 0301 	bic.w	r3, r3, #1
 8004a3a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2110      	movs	r1, #16
 8004a42:	4618      	mov	r0, r3
 8004a44:	f002 fcd8 	bl	80073f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a48:	2300      	movs	r3, #0
 8004a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a4c:	e056      	b.n	8004afc <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a60:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a72:	0151      	lsls	r1, r2, #5
 8004a74:	69fa      	ldr	r2, [r7, #28]
 8004a76:	440a      	add	r2, r1
 8004a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a80:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a92:	0151      	lsls	r1, r2, #5
 8004a94:	69fa      	ldr	r2, [r7, #28]
 8004a96:	440a      	add	r2, r1
 8004a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004aa0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ab4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ac6:	0151      	lsls	r1, r2, #5
 8004ac8:	69fa      	ldr	r2, [r7, #28]
 8004aca:	440a      	add	r2, r1
 8004acc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ad0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ad4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ae6:	0151      	lsls	r1, r2, #5
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	440a      	add	r2, r1
 8004aec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004af0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004af4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af8:	3301      	adds	r3, #1
 8004afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d3a3      	bcc.n	8004a4e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b14:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004b18:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d016      	beq.n	8004b50 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b2c:	69fa      	ldr	r2, [r7, #28]
 8004b2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b32:	f043 030b 	orr.w	r3, r3, #11
 8004b36:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b48:	f043 030b 	orr.w	r3, r3, #11
 8004b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b4e:	e015      	b.n	8004b7c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	69fa      	ldr	r2, [r7, #28]
 8004b5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b62:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004b66:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	69fa      	ldr	r2, [r7, #28]
 8004b72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b76:	f043 030b 	orr.w	r3, r3, #11
 8004b7a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	69fa      	ldr	r2, [r7, #28]
 8004b86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b8a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004b8e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6818      	ldr	r0, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	f003 fc09 	bl	80083b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695a      	ldr	r2, [r3, #20]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004bb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f003 fb37 	bl	800822e <USB_ReadInterrupts>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bca:	d124      	bne.n	8004c16 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f003 fbcd 	bl	8008370 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f002 fc6d 	bl	80074ba <USB_GetDevSpeed>
 8004be0:	4603      	mov	r3, r0
 8004be2:	461a      	mov	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681c      	ldr	r4, [r3, #0]
 8004bec:	f001 f946 	bl	8005e7c <HAL_RCC_GetHCLKFreq>
 8004bf0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f002 f9aa 	bl	8006f54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f009 f93a 	bl	800de7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695a      	ldr	r2, [r3, #20]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004c14:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f003 fb07 	bl	800822e <USB_ReadInterrupts>
 8004c20:	4603      	mov	r3, r0
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	d10a      	bne.n	8004c40 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f009 f917 	bl	800de5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695a      	ldr	r2, [r3, #20]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f002 0208 	and.w	r2, r2, #8
 8004c3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f003 faf2 	bl	800822e <USB_ReadInterrupts>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c54:	d10f      	bne.n	8004c76 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	4619      	mov	r1, r3
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f009 f979 	bl	800df58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	695a      	ldr	r2, [r3, #20]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004c74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f003 fad7 	bl	800822e <USB_ReadInterrupts>
 8004c80:	4603      	mov	r3, r0
 8004c82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c8a:	d10f      	bne.n	8004cac <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	4619      	mov	r1, r3
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f009 f94c 	bl	800df34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695a      	ldr	r2, [r3, #20]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004caa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f003 fabc 	bl	800822e <USB_ReadInterrupts>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc0:	d10a      	bne.n	8004cd8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f009 f95a 	bl	800df7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695a      	ldr	r2, [r3, #20]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004cd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f003 faa6 	bl	800822e <USB_ReadInterrupts>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	d115      	bne.n	8004d18 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	f003 0304 	and.w	r3, r3, #4
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f009 f94a 	bl	800df98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6859      	ldr	r1, [r3, #4]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	605a      	str	r2, [r3, #4]
 8004d14:	e000      	b.n	8004d18 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004d16:	bf00      	nop
    }
  }
}
 8004d18:	3734      	adds	r7, #52	; 0x34
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd90      	pop	{r4, r7, pc}

08004d1e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b082      	sub	sp, #8
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	460b      	mov	r3, r1
 8004d28:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d101      	bne.n	8004d38 <HAL_PCD_SetAddress+0x1a>
 8004d34:	2302      	movs	r3, #2
 8004d36:	e013      	b.n	8004d60 <HAL_PCD_SetAddress+0x42>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	78fa      	ldrb	r2, [r7, #3]
 8004d44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	78fa      	ldrb	r2, [r7, #3]
 8004d4e:	4611      	mov	r1, r2
 8004d50:	4618      	mov	r0, r3
 8004d52:	f003 fa04 	bl	800815e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	4608      	mov	r0, r1
 8004d72:	4611      	mov	r1, r2
 8004d74:	461a      	mov	r2, r3
 8004d76:	4603      	mov	r3, r0
 8004d78:	70fb      	strb	r3, [r7, #3]
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	803b      	strh	r3, [r7, #0]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	da0f      	bge.n	8004dae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d8e:	78fb      	ldrb	r3, [r7, #3]
 8004d90:	f003 020f 	and.w	r2, r3, #15
 8004d94:	4613      	mov	r3, r2
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	1a9b      	subs	r3, r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	3338      	adds	r3, #56	; 0x38
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	4413      	add	r3, r2
 8004da2:	3304      	adds	r3, #4
 8004da4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2201      	movs	r2, #1
 8004daa:	705a      	strb	r2, [r3, #1]
 8004dac:	e00f      	b.n	8004dce <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dae:	78fb      	ldrb	r3, [r7, #3]
 8004db0:	f003 020f 	and.w	r2, r3, #15
 8004db4:	4613      	mov	r3, r2
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004dce:	78fb      	ldrb	r3, [r7, #3]
 8004dd0:	f003 030f 	and.w	r3, r3, #15
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004dda:	883a      	ldrh	r2, [r7, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	78ba      	ldrb	r2, [r7, #2]
 8004de4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	785b      	ldrb	r3, [r3, #1]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d004      	beq.n	8004df8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004df8:	78bb      	ldrb	r3, [r7, #2]
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d102      	bne.n	8004e04 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_PCD_EP_Open+0xaa>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e00e      	b.n	8004e30 <HAL_PCD_EP_Open+0xc8>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68f9      	ldr	r1, [r7, #12]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f002 fb6f 	bl	8007504 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004e2e:	7afb      	ldrb	r3, [r7, #11]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	460b      	mov	r3, r1
 8004e42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	da0f      	bge.n	8004e6c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e4c:	78fb      	ldrb	r3, [r7, #3]
 8004e4e:	f003 020f 	and.w	r2, r3, #15
 8004e52:	4613      	mov	r3, r2
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	1a9b      	subs	r3, r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	3338      	adds	r3, #56	; 0x38
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	4413      	add	r3, r2
 8004e60:	3304      	adds	r3, #4
 8004e62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2201      	movs	r2, #1
 8004e68:	705a      	strb	r2, [r3, #1]
 8004e6a:	e00f      	b.n	8004e8c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e6c:	78fb      	ldrb	r3, [r7, #3]
 8004e6e:	f003 020f 	and.w	r2, r3, #15
 8004e72:	4613      	mov	r3, r2
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	1a9b      	subs	r3, r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	4413      	add	r3, r2
 8004e82:	3304      	adds	r3, #4
 8004e84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004e8c:	78fb      	ldrb	r3, [r7, #3]
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d101      	bne.n	8004ea6 <HAL_PCD_EP_Close+0x6e>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e00e      	b.n	8004ec4 <HAL_PCD_EP_Close+0x8c>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68f9      	ldr	r1, [r7, #12]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f002 fbad 	bl	8007614 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	607a      	str	r2, [r7, #4]
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004edc:	7afb      	ldrb	r3, [r7, #11]
 8004ede:	f003 020f 	and.w	r2, r3, #15
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2200      	movs	r2, #0
 8004f06:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f0e:	7afb      	ldrb	r3, [r7, #11]
 8004f10:	f003 030f 	and.w	r3, r3, #15
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d102      	bne.n	8004f28 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f28:	7afb      	ldrb	r3, [r7, #11]
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d109      	bne.n	8004f46 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6818      	ldr	r0, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	6979      	ldr	r1, [r7, #20]
 8004f40:	f002 fe88 	bl	8007c54 <USB_EP0StartXfer>
 8004f44:	e008      	b.n	8004f58 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6818      	ldr	r0, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	461a      	mov	r2, r3
 8004f52:	6979      	ldr	r1, [r7, #20]
 8004f54:	f002 fc3a 	bl	80077cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f6e:	78fb      	ldrb	r3, [r7, #3]
 8004f70:	f003 020f 	and.w	r2, r3, #15
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	4613      	mov	r3, r2
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	1a9b      	subs	r3, r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	440b      	add	r3, r1
 8004f80:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004f84:	681b      	ldr	r3, [r3, #0]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b086      	sub	sp, #24
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	603b      	str	r3, [r7, #0]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fa2:	7afb      	ldrb	r3, [r7, #11]
 8004fa4:	f003 020f 	and.w	r2, r3, #15
 8004fa8:	4613      	mov	r3, r2
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	1a9b      	subs	r3, r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	3338      	adds	r3, #56	; 0x38
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fd2:	7afb      	ldrb	r3, [r7, #11]
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d102      	bne.n	8004fec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004fec:	7afb      	ldrb	r3, [r7, #11]
 8004fee:	f003 030f 	and.w	r3, r3, #15
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d109      	bne.n	800500a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6818      	ldr	r0, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	461a      	mov	r2, r3
 8005002:	6979      	ldr	r1, [r7, #20]
 8005004:	f002 fe26 	bl	8007c54 <USB_EP0StartXfer>
 8005008:	e008      	b.n	800501c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6818      	ldr	r0, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	b2db      	uxtb	r3, r3
 8005014:	461a      	mov	r2, r3
 8005016:	6979      	ldr	r1, [r7, #20]
 8005018:	f002 fbd8 	bl	80077cc <USB_EPStartXfer>
  }

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b084      	sub	sp, #16
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	460b      	mov	r3, r1
 8005030:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005032:	78fb      	ldrb	r3, [r7, #3]
 8005034:	f003 020f 	and.w	r2, r3, #15
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	429a      	cmp	r2, r3
 800503e:	d901      	bls.n	8005044 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e050      	b.n	80050e6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005044:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005048:	2b00      	cmp	r3, #0
 800504a:	da0f      	bge.n	800506c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800504c:	78fb      	ldrb	r3, [r7, #3]
 800504e:	f003 020f 	and.w	r2, r3, #15
 8005052:	4613      	mov	r3, r2
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	1a9b      	subs	r3, r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	3338      	adds	r3, #56	; 0x38
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	4413      	add	r3, r2
 8005060:	3304      	adds	r3, #4
 8005062:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2201      	movs	r2, #1
 8005068:	705a      	strb	r2, [r3, #1]
 800506a:	e00d      	b.n	8005088 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800506c:	78fa      	ldrb	r2, [r7, #3]
 800506e:	4613      	mov	r3, r2
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	1a9b      	subs	r3, r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	4413      	add	r3, r2
 800507e:	3304      	adds	r3, #4
 8005080:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2201      	movs	r2, #1
 800508c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800508e:	78fb      	ldrb	r3, [r7, #3]
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	b2da      	uxtb	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d101      	bne.n	80050a8 <HAL_PCD_EP_SetStall+0x82>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e01e      	b.n	80050e6 <HAL_PCD_EP_SetStall+0xc0>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68f9      	ldr	r1, [r7, #12]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f002 ff7d 	bl	8007fb6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10a      	bne.n	80050dc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	b2d9      	uxtb	r1, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80050d6:	461a      	mov	r2, r3
 80050d8:	f003 f96e 	bl	80083b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b084      	sub	sp, #16
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	460b      	mov	r3, r1
 80050f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80050fa:	78fb      	ldrb	r3, [r7, #3]
 80050fc:	f003 020f 	and.w	r2, r3, #15
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	429a      	cmp	r2, r3
 8005106:	d901      	bls.n	800510c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e042      	b.n	8005192 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800510c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005110:	2b00      	cmp	r3, #0
 8005112:	da0f      	bge.n	8005134 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005114:	78fb      	ldrb	r3, [r7, #3]
 8005116:	f003 020f 	and.w	r2, r3, #15
 800511a:	4613      	mov	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	1a9b      	subs	r3, r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	3338      	adds	r3, #56	; 0x38
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	4413      	add	r3, r2
 8005128:	3304      	adds	r3, #4
 800512a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2201      	movs	r2, #1
 8005130:	705a      	strb	r2, [r3, #1]
 8005132:	e00f      	b.n	8005154 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	f003 020f 	and.w	r2, r3, #15
 800513a:	4613      	mov	r3, r2
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	1a9b      	subs	r3, r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	4413      	add	r3, r2
 800514a:	3304      	adds	r3, #4
 800514c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800515a:	78fb      	ldrb	r3, [r7, #3]
 800515c:	f003 030f 	and.w	r3, r3, #15
 8005160:	b2da      	uxtb	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_PCD_EP_ClrStall+0x86>
 8005170:	2302      	movs	r3, #2
 8005172:	e00e      	b.n	8005192 <HAL_PCD_EP_ClrStall+0xa4>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68f9      	ldr	r1, [r7, #12]
 8005182:	4618      	mov	r0, r3
 8005184:	f002 ff85 	bl	8008092 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b08a      	sub	sp, #40	; 0x28
 800519e:	af02      	add	r7, sp, #8
 80051a0:	6078      	str	r0, [r7, #4]
 80051a2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	4613      	mov	r3, r2
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	1a9b      	subs	r3, r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	3338      	adds	r3, #56	; 0x38
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	4413      	add	r3, r2
 80051be:	3304      	adds	r3, #4
 80051c0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	699a      	ldr	r2, [r3, #24]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d901      	bls.n	80051d2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e06c      	b.n	80052ac <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	695a      	ldr	r2, [r3, #20]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	69fa      	ldr	r2, [r7, #28]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d902      	bls.n	80051ee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	3303      	adds	r3, #3
 80051f2:	089b      	lsrs	r3, r3, #2
 80051f4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051f6:	e02b      	b.n	8005250 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	695a      	ldr	r2, [r3, #20]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	429a      	cmp	r2, r3
 800520c:	d902      	bls.n	8005214 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	3303      	adds	r3, #3
 8005218:	089b      	lsrs	r3, r3, #2
 800521a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	68d9      	ldr	r1, [r3, #12]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	b2da      	uxtb	r2, r3
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800522c:	b2db      	uxtb	r3, r3
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	4603      	mov	r3, r0
 8005232:	6978      	ldr	r0, [r7, #20]
 8005234:	f002 fe61 	bl	8007efa <USB_WritePacket>

    ep->xfer_buff  += len;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	441a      	add	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	699a      	ldr	r2, [r3, #24]
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	441a      	add	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	b29b      	uxth	r3, r3
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	429a      	cmp	r2, r3
 8005264:	d809      	bhi.n	800527a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800526e:	429a      	cmp	r2, r3
 8005270:	d203      	bcs.n	800527a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1be      	bne.n	80051f8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	695a      	ldr	r2, [r3, #20]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	429a      	cmp	r2, r3
 8005284:	d811      	bhi.n	80052aa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	f003 030f 	and.w	r3, r3, #15
 800528c:	2201      	movs	r2, #1
 800528e:	fa02 f303 	lsl.w	r3, r2, r3
 8005292:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	43db      	mvns	r3, r3
 80052a0:	6939      	ldr	r1, [r7, #16]
 80052a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052a6:	4013      	ands	r3, r2
 80052a8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3720      	adds	r7, #32
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	333c      	adds	r3, #60	; 0x3c
 80052cc:	3304      	adds	r3, #4
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	f040 80a0 	bne.w	800542c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d015      	beq.n	8005322 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4a72      	ldr	r2, [pc, #456]	; (80054c4 <PCD_EP_OutXfrComplete_int+0x210>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	f240 80dd 	bls.w	80054ba <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 80d7 	beq.w	80054ba <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005318:	461a      	mov	r2, r3
 800531a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800531e:	6093      	str	r3, [r2, #8]
 8005320:	e0cb      	b.n	80054ba <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	f003 0320 	and.w	r3, r3, #32
 8005328:	2b00      	cmp	r3, #0
 800532a:	d009      	beq.n	8005340 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005338:	461a      	mov	r2, r3
 800533a:	2320      	movs	r3, #32
 800533c:	6093      	str	r3, [r2, #8]
 800533e:	e0bc      	b.n	80054ba <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005346:	2b00      	cmp	r3, #0
 8005348:	f040 80b7 	bne.w	80054ba <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4a5d      	ldr	r2, [pc, #372]	; (80054c4 <PCD_EP_OutXfrComplete_int+0x210>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d90f      	bls.n	8005374 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	4413      	add	r3, r2
 8005366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536a:	461a      	mov	r2, r3
 800536c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005370:	6093      	str	r3, [r2, #8]
 8005372:	e0a2      	b.n	80054ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005374:	6879      	ldr	r1, [r7, #4]
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	4613      	mov	r3, r2
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	1a9b      	subs	r3, r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	440b      	add	r3, r1
 8005382:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005386:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	0159      	lsls	r1, r3, #5
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	440b      	add	r3, r1
 8005390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800539a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	4613      	mov	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	1a9b      	subs	r3, r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4403      	add	r3, r0
 80053aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80053ae:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80053b0:	6879      	ldr	r1, [r7, #4]
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	4613      	mov	r3, r2
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	1a9b      	subs	r3, r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	440b      	add	r3, r1
 80053be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80053c2:	6819      	ldr	r1, [r3, #0]
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	4613      	mov	r3, r2
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4403      	add	r3, r0
 80053d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4419      	add	r1, r3
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	4613      	mov	r3, r2
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	1a9b      	subs	r3, r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4403      	add	r3, r0
 80053e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80053ec:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d114      	bne.n	800541e <PCD_EP_OutXfrComplete_int+0x16a>
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	4613      	mov	r3, r2
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	1a9b      	subs	r3, r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d108      	bne.n	800541e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6818      	ldr	r0, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005416:	461a      	mov	r2, r3
 8005418:	2101      	movs	r1, #1
 800541a:	f002 ffcd 	bl	80083b8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	b2db      	uxtb	r3, r3
 8005422:	4619      	mov	r1, r3
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f008 fce5 	bl	800ddf4 <HAL_PCD_DataOutStageCallback>
 800542a:	e046      	b.n	80054ba <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4a26      	ldr	r2, [pc, #152]	; (80054c8 <PCD_EP_OutXfrComplete_int+0x214>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d124      	bne.n	800547e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	4413      	add	r3, r2
 8005446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544a:	461a      	mov	r2, r3
 800544c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005450:	6093      	str	r3, [r2, #8]
 8005452:	e032      	b.n	80054ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f003 0320 	and.w	r3, r3, #32
 800545a:	2b00      	cmp	r3, #0
 800545c:	d008      	beq.n	8005470 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546a:	461a      	mov	r2, r3
 800546c:	2320      	movs	r3, #32
 800546e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	4619      	mov	r1, r3
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f008 fcbc 	bl	800ddf4 <HAL_PCD_DataOutStageCallback>
 800547c:	e01d      	b.n	80054ba <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d114      	bne.n	80054ae <PCD_EP_OutXfrComplete_int+0x1fa>
 8005484:	6879      	ldr	r1, [r7, #4]
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	4613      	mov	r3, r2
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	1a9b      	subs	r3, r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	440b      	add	r3, r1
 8005492:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d108      	bne.n	80054ae <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80054a6:	461a      	mov	r2, r3
 80054a8:	2100      	movs	r1, #0
 80054aa:	f002 ff85 	bl	80083b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	4619      	mov	r1, r3
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f008 fc9d 	bl	800ddf4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	4f54300a 	.word	0x4f54300a
 80054c8:	4f54310a 	.word	0x4f54310a

080054cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	333c      	adds	r3, #60	; 0x3c
 80054e4:	3304      	adds	r3, #4
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4a15      	ldr	r2, [pc, #84]	; (8005554 <PCD_EP_OutSetupPacket_int+0x88>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d90e      	bls.n	8005520 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005508:	2b00      	cmp	r3, #0
 800550a:	d009      	beq.n	8005520 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005518:	461a      	mov	r2, r3
 800551a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800551e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f008 fc55 	bl	800ddd0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4a0a      	ldr	r2, [pc, #40]	; (8005554 <PCD_EP_OutSetupPacket_int+0x88>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d90c      	bls.n	8005548 <PCD_EP_OutSetupPacket_int+0x7c>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d108      	bne.n	8005548 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005540:	461a      	mov	r2, r3
 8005542:	2101      	movs	r1, #1
 8005544:	f002 ff38 	bl	80083b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3718      	adds	r7, #24
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	4f54300a 	.word	0x4f54300a

08005558 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	460b      	mov	r3, r1
 8005562:	70fb      	strb	r3, [r7, #3]
 8005564:	4613      	mov	r3, r2
 8005566:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005570:	78fb      	ldrb	r3, [r7, #3]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d107      	bne.n	8005586 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005576:	883b      	ldrh	r3, [r7, #0]
 8005578:	0419      	lsls	r1, r3, #16
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	430a      	orrs	r2, r1
 8005582:	629a      	str	r2, [r3, #40]	; 0x28
 8005584:	e028      	b.n	80055d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558c:	0c1b      	lsrs	r3, r3, #16
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	4413      	add	r3, r2
 8005592:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005594:	2300      	movs	r3, #0
 8005596:	73fb      	strb	r3, [r7, #15]
 8005598:	e00d      	b.n	80055b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	3340      	adds	r3, #64	; 0x40
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	0c1b      	lsrs	r3, r3, #16
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	4413      	add	r3, r2
 80055ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	3301      	adds	r3, #1
 80055b4:	73fb      	strb	r3, [r7, #15]
 80055b6:	7bfa      	ldrb	r2, [r7, #15]
 80055b8:	78fb      	ldrb	r3, [r7, #3]
 80055ba:	3b01      	subs	r3, #1
 80055bc:	429a      	cmp	r2, r3
 80055be:	d3ec      	bcc.n	800559a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80055c0:	883b      	ldrh	r3, [r7, #0]
 80055c2:	0418      	lsls	r0, r3, #16
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6819      	ldr	r1, [r3, #0]
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	3b01      	subs	r3, #1
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	4302      	orrs	r2, r0
 80055d0:	3340      	adds	r3, #64	; 0x40
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	440b      	add	r3, r1
 80055d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
 80055ee:	460b      	mov	r3, r1
 80055f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	887a      	ldrh	r2, [r7, #2]
 80055f8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e25b      	b.n	8005aea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d075      	beq.n	800572a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800563e:	4ba3      	ldr	r3, [pc, #652]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f003 030c 	and.w	r3, r3, #12
 8005646:	2b04      	cmp	r3, #4
 8005648:	d00c      	beq.n	8005664 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800564a:	4ba0      	ldr	r3, [pc, #640]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005652:	2b08      	cmp	r3, #8
 8005654:	d112      	bne.n	800567c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005656:	4b9d      	ldr	r3, [pc, #628]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800565e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005662:	d10b      	bne.n	800567c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005664:	4b99      	ldr	r3, [pc, #612]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d05b      	beq.n	8005728 <HAL_RCC_OscConfig+0x108>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d157      	bne.n	8005728 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e236      	b.n	8005aea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005684:	d106      	bne.n	8005694 <HAL_RCC_OscConfig+0x74>
 8005686:	4b91      	ldr	r3, [pc, #580]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a90      	ldr	r2, [pc, #576]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 800568c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	e01d      	b.n	80056d0 <HAL_RCC_OscConfig+0xb0>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800569c:	d10c      	bne.n	80056b8 <HAL_RCC_OscConfig+0x98>
 800569e:	4b8b      	ldr	r3, [pc, #556]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a8a      	ldr	r2, [pc, #552]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80056a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	4b88      	ldr	r3, [pc, #544]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a87      	ldr	r2, [pc, #540]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80056b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	e00b      	b.n	80056d0 <HAL_RCC_OscConfig+0xb0>
 80056b8:	4b84      	ldr	r3, [pc, #528]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a83      	ldr	r2, [pc, #524]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80056be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	4b81      	ldr	r3, [pc, #516]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a80      	ldr	r2, [pc, #512]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80056ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d013      	beq.n	8005700 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d8:	f7fd fb68 	bl	8002dac <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056e0:	f7fd fb64 	bl	8002dac <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b64      	cmp	r3, #100	; 0x64
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e1fb      	b.n	8005aea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056f2:	4b76      	ldr	r3, [pc, #472]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0f0      	beq.n	80056e0 <HAL_RCC_OscConfig+0xc0>
 80056fe:	e014      	b.n	800572a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005700:	f7fd fb54 	bl	8002dac <HAL_GetTick>
 8005704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005708:	f7fd fb50 	bl	8002dac <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b64      	cmp	r3, #100	; 0x64
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e1e7      	b.n	8005aea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800571a:	4b6c      	ldr	r3, [pc, #432]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1f0      	bne.n	8005708 <HAL_RCC_OscConfig+0xe8>
 8005726:	e000      	b.n	800572a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d063      	beq.n	80057fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005736:	4b65      	ldr	r3, [pc, #404]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 030c 	and.w	r3, r3, #12
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00b      	beq.n	800575a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005742:	4b62      	ldr	r3, [pc, #392]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800574a:	2b08      	cmp	r3, #8
 800574c:	d11c      	bne.n	8005788 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800574e:	4b5f      	ldr	r3, [pc, #380]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d116      	bne.n	8005788 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800575a:	4b5c      	ldr	r3, [pc, #368]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d005      	beq.n	8005772 <HAL_RCC_OscConfig+0x152>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d001      	beq.n	8005772 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e1bb      	b.n	8005aea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005772:	4b56      	ldr	r3, [pc, #344]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	4952      	ldr	r1, [pc, #328]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005782:	4313      	orrs	r3, r2
 8005784:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005786:	e03a      	b.n	80057fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d020      	beq.n	80057d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005790:	4b4f      	ldr	r3, [pc, #316]	; (80058d0 <HAL_RCC_OscConfig+0x2b0>)
 8005792:	2201      	movs	r2, #1
 8005794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005796:	f7fd fb09 	bl	8002dac <HAL_GetTick>
 800579a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800579c:	e008      	b.n	80057b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800579e:	f7fd fb05 	bl	8002dac <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d901      	bls.n	80057b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e19c      	b.n	8005aea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057b0:	4b46      	ldr	r3, [pc, #280]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0f0      	beq.n	800579e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057bc:	4b43      	ldr	r3, [pc, #268]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	4940      	ldr	r1, [pc, #256]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	600b      	str	r3, [r1, #0]
 80057d0:	e015      	b.n	80057fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057d2:	4b3f      	ldr	r3, [pc, #252]	; (80058d0 <HAL_RCC_OscConfig+0x2b0>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d8:	f7fd fae8 	bl	8002dac <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057e0:	f7fd fae4 	bl	8002dac <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e17b      	b.n	8005aea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057f2:	4b36      	ldr	r3, [pc, #216]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1f0      	bne.n	80057e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d030      	beq.n	800586c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d016      	beq.n	8005840 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005812:	4b30      	ldr	r3, [pc, #192]	; (80058d4 <HAL_RCC_OscConfig+0x2b4>)
 8005814:	2201      	movs	r2, #1
 8005816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005818:	f7fd fac8 	bl	8002dac <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005820:	f7fd fac4 	bl	8002dac <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e15b      	b.n	8005aea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005832:	4b26      	ldr	r3, [pc, #152]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0f0      	beq.n	8005820 <HAL_RCC_OscConfig+0x200>
 800583e:	e015      	b.n	800586c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005840:	4b24      	ldr	r3, [pc, #144]	; (80058d4 <HAL_RCC_OscConfig+0x2b4>)
 8005842:	2200      	movs	r2, #0
 8005844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005846:	f7fd fab1 	bl	8002dac <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800584c:	e008      	b.n	8005860 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800584e:	f7fd faad 	bl	8002dac <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e144      	b.n	8005aea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005860:	4b1a      	ldr	r3, [pc, #104]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1f0      	bne.n	800584e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0304 	and.w	r3, r3, #4
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 80a0 	beq.w	80059ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800587a:	2300      	movs	r3, #0
 800587c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800587e:	4b13      	ldr	r3, [pc, #76]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10f      	bne.n	80058aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800588a:	2300      	movs	r3, #0
 800588c:	60bb      	str	r3, [r7, #8]
 800588e:	4b0f      	ldr	r3, [pc, #60]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	4a0e      	ldr	r2, [pc, #56]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005898:	6413      	str	r3, [r2, #64]	; 0x40
 800589a:	4b0c      	ldr	r3, [pc, #48]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a2:	60bb      	str	r3, [r7, #8]
 80058a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058a6:	2301      	movs	r3, #1
 80058a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058aa:	4b0b      	ldr	r3, [pc, #44]	; (80058d8 <HAL_RCC_OscConfig+0x2b8>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d121      	bne.n	80058fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058b6:	4b08      	ldr	r3, [pc, #32]	; (80058d8 <HAL_RCC_OscConfig+0x2b8>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a07      	ldr	r2, [pc, #28]	; (80058d8 <HAL_RCC_OscConfig+0x2b8>)
 80058bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058c2:	f7fd fa73 	bl	8002dac <HAL_GetTick>
 80058c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058c8:	e011      	b.n	80058ee <HAL_RCC_OscConfig+0x2ce>
 80058ca:	bf00      	nop
 80058cc:	40023800 	.word	0x40023800
 80058d0:	42470000 	.word	0x42470000
 80058d4:	42470e80 	.word	0x42470e80
 80058d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058dc:	f7fd fa66 	bl	8002dac <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e0fd      	b.n	8005aea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ee:	4b81      	ldr	r3, [pc, #516]	; (8005af4 <HAL_RCC_OscConfig+0x4d4>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0f0      	beq.n	80058dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d106      	bne.n	8005910 <HAL_RCC_OscConfig+0x2f0>
 8005902:	4b7d      	ldr	r3, [pc, #500]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005906:	4a7c      	ldr	r2, [pc, #496]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005908:	f043 0301 	orr.w	r3, r3, #1
 800590c:	6713      	str	r3, [r2, #112]	; 0x70
 800590e:	e01c      	b.n	800594a <HAL_RCC_OscConfig+0x32a>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	2b05      	cmp	r3, #5
 8005916:	d10c      	bne.n	8005932 <HAL_RCC_OscConfig+0x312>
 8005918:	4b77      	ldr	r3, [pc, #476]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 800591a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591c:	4a76      	ldr	r2, [pc, #472]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 800591e:	f043 0304 	orr.w	r3, r3, #4
 8005922:	6713      	str	r3, [r2, #112]	; 0x70
 8005924:	4b74      	ldr	r3, [pc, #464]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005928:	4a73      	ldr	r2, [pc, #460]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 800592a:	f043 0301 	orr.w	r3, r3, #1
 800592e:	6713      	str	r3, [r2, #112]	; 0x70
 8005930:	e00b      	b.n	800594a <HAL_RCC_OscConfig+0x32a>
 8005932:	4b71      	ldr	r3, [pc, #452]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005936:	4a70      	ldr	r2, [pc, #448]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	6713      	str	r3, [r2, #112]	; 0x70
 800593e:	4b6e      	ldr	r3, [pc, #440]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005942:	4a6d      	ldr	r2, [pc, #436]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005944:	f023 0304 	bic.w	r3, r3, #4
 8005948:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d015      	beq.n	800597e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005952:	f7fd fa2b 	bl	8002dac <HAL_GetTick>
 8005956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005958:	e00a      	b.n	8005970 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800595a:	f7fd fa27 	bl	8002dac <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	f241 3288 	movw	r2, #5000	; 0x1388
 8005968:	4293      	cmp	r3, r2
 800596a:	d901      	bls.n	8005970 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e0bc      	b.n	8005aea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005970:	4b61      	ldr	r3, [pc, #388]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0ee      	beq.n	800595a <HAL_RCC_OscConfig+0x33a>
 800597c:	e014      	b.n	80059a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800597e:	f7fd fa15 	bl	8002dac <HAL_GetTick>
 8005982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005984:	e00a      	b.n	800599c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005986:	f7fd fa11 	bl	8002dac <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	f241 3288 	movw	r2, #5000	; 0x1388
 8005994:	4293      	cmp	r3, r2
 8005996:	d901      	bls.n	800599c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e0a6      	b.n	8005aea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800599c:	4b56      	ldr	r3, [pc, #344]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 800599e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1ee      	bne.n	8005986 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059a8:	7dfb      	ldrb	r3, [r7, #23]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d105      	bne.n	80059ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059ae:	4b52      	ldr	r3, [pc, #328]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	4a51      	ldr	r2, [pc, #324]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 80059b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 8092 	beq.w	8005ae8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059c4:	4b4c      	ldr	r3, [pc, #304]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f003 030c 	and.w	r3, r3, #12
 80059cc:	2b08      	cmp	r3, #8
 80059ce:	d05c      	beq.n	8005a8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d141      	bne.n	8005a5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059d8:	4b48      	ldr	r3, [pc, #288]	; (8005afc <HAL_RCC_OscConfig+0x4dc>)
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059de:	f7fd f9e5 	bl	8002dac <HAL_GetTick>
 80059e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059e4:	e008      	b.n	80059f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059e6:	f7fd f9e1 	bl	8002dac <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e078      	b.n	8005aea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059f8:	4b3f      	ldr	r3, [pc, #252]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1f0      	bne.n	80059e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	69da      	ldr	r2, [r3, #28]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a12:	019b      	lsls	r3, r3, #6
 8005a14:	431a      	orrs	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1a:	085b      	lsrs	r3, r3, #1
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	041b      	lsls	r3, r3, #16
 8005a20:	431a      	orrs	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a26:	061b      	lsls	r3, r3, #24
 8005a28:	4933      	ldr	r1, [pc, #204]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a2e:	4b33      	ldr	r3, [pc, #204]	; (8005afc <HAL_RCC_OscConfig+0x4dc>)
 8005a30:	2201      	movs	r2, #1
 8005a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a34:	f7fd f9ba 	bl	8002dac <HAL_GetTick>
 8005a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a3c:	f7fd f9b6 	bl	8002dac <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e04d      	b.n	8005aea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a4e:	4b2a      	ldr	r3, [pc, #168]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0f0      	beq.n	8005a3c <HAL_RCC_OscConfig+0x41c>
 8005a5a:	e045      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a5c:	4b27      	ldr	r3, [pc, #156]	; (8005afc <HAL_RCC_OscConfig+0x4dc>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a62:	f7fd f9a3 	bl	8002dac <HAL_GetTick>
 8005a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a68:	e008      	b.n	8005a7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a6a:	f7fd f99f 	bl	8002dac <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e036      	b.n	8005aea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a7c:	4b1e      	ldr	r3, [pc, #120]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1f0      	bne.n	8005a6a <HAL_RCC_OscConfig+0x44a>
 8005a88:	e02e      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e029      	b.n	8005aea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a96:	4b18      	ldr	r3, [pc, #96]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d11c      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d115      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005abe:	4013      	ands	r3, r2
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d10d      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d106      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d001      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e000      	b.n	8005aea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	40007000 	.word	0x40007000
 8005af8:	40023800 	.word	0x40023800
 8005afc:	42470060 	.word	0x42470060

08005b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e0cc      	b.n	8005cae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b14:	4b68      	ldr	r3, [pc, #416]	; (8005cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 030f 	and.w	r3, r3, #15
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d90c      	bls.n	8005b3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b22:	4b65      	ldr	r3, [pc, #404]	; (8005cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	b2d2      	uxtb	r2, r2
 8005b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b2a:	4b63      	ldr	r3, [pc, #396]	; (8005cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 030f 	and.w	r3, r3, #15
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d001      	beq.n	8005b3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e0b8      	b.n	8005cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d020      	beq.n	8005b8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d005      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b54:	4b59      	ldr	r3, [pc, #356]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	4a58      	ldr	r2, [pc, #352]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005b5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0308 	and.w	r3, r3, #8
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d005      	beq.n	8005b78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b6c:	4b53      	ldr	r3, [pc, #332]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	4a52      	ldr	r2, [pc, #328]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005b72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b78:	4b50      	ldr	r3, [pc, #320]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	494d      	ldr	r1, [pc, #308]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d044      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d107      	bne.n	8005bae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b9e:	4b47      	ldr	r3, [pc, #284]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d119      	bne.n	8005bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e07f      	b.n	8005cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d003      	beq.n	8005bbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bba:	2b03      	cmp	r3, #3
 8005bbc:	d107      	bne.n	8005bce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bbe:	4b3f      	ldr	r3, [pc, #252]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d109      	bne.n	8005bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e06f      	b.n	8005cae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bce:	4b3b      	ldr	r3, [pc, #236]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e067      	b.n	8005cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bde:	4b37      	ldr	r3, [pc, #220]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f023 0203 	bic.w	r2, r3, #3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	4934      	ldr	r1, [pc, #208]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bf0:	f7fd f8dc 	bl	8002dac <HAL_GetTick>
 8005bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bf6:	e00a      	b.n	8005c0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bf8:	f7fd f8d8 	bl	8002dac <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e04f      	b.n	8005cae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c0e:	4b2b      	ldr	r3, [pc, #172]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f003 020c 	and.w	r2, r3, #12
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d1eb      	bne.n	8005bf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c20:	4b25      	ldr	r3, [pc, #148]	; (8005cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 030f 	and.w	r3, r3, #15
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d20c      	bcs.n	8005c48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c2e:	4b22      	ldr	r3, [pc, #136]	; (8005cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	b2d2      	uxtb	r2, r2
 8005c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c36:	4b20      	ldr	r3, [pc, #128]	; (8005cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 030f 	and.w	r3, r3, #15
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d001      	beq.n	8005c48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e032      	b.n	8005cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d008      	beq.n	8005c66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c54:	4b19      	ldr	r3, [pc, #100]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	4916      	ldr	r1, [pc, #88]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0308 	and.w	r3, r3, #8
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d009      	beq.n	8005c86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c72:	4b12      	ldr	r3, [pc, #72]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	490e      	ldr	r1, [pc, #56]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c86:	f000 f821 	bl	8005ccc <HAL_RCC_GetSysClockFreq>
 8005c8a:	4601      	mov	r1, r0
 8005c8c:	4b0b      	ldr	r3, [pc, #44]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	091b      	lsrs	r3, r3, #4
 8005c92:	f003 030f 	and.w	r3, r3, #15
 8005c96:	4a0a      	ldr	r2, [pc, #40]	; (8005cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c98:	5cd3      	ldrb	r3, [r2, r3]
 8005c9a:	fa21 f303 	lsr.w	r3, r1, r3
 8005c9e:	4a09      	ldr	r2, [pc, #36]	; (8005cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ca2:	4b09      	ldr	r3, [pc, #36]	; (8005cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fc ff10 	bl	8002acc <HAL_InitTick>

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	40023c00 	.word	0x40023c00
 8005cbc:	40023800 	.word	0x40023800
 8005cc0:	0800ff54 	.word	0x0800ff54
 8005cc4:	20000000 	.word	0x20000000
 8005cc8:	20000004 	.word	0x20000004

08005ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	607b      	str	r3, [r7, #4]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	2300      	movs	r3, #0
 8005cdc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ce2:	4b63      	ldr	r3, [pc, #396]	; (8005e70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 030c 	and.w	r3, r3, #12
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d007      	beq.n	8005cfe <HAL_RCC_GetSysClockFreq+0x32>
 8005cee:	2b08      	cmp	r3, #8
 8005cf0:	d008      	beq.n	8005d04 <HAL_RCC_GetSysClockFreq+0x38>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f040 80b4 	bne.w	8005e60 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005cf8:	4b5e      	ldr	r3, [pc, #376]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005cfa:	60bb      	str	r3, [r7, #8]
       break;
 8005cfc:	e0b3      	b.n	8005e66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cfe:	4b5e      	ldr	r3, [pc, #376]	; (8005e78 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005d00:	60bb      	str	r3, [r7, #8]
      break;
 8005d02:	e0b0      	b.n	8005e66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d04:	4b5a      	ldr	r3, [pc, #360]	; (8005e70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d0e:	4b58      	ldr	r3, [pc, #352]	; (8005e70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d04a      	beq.n	8005db0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d1a:	4b55      	ldr	r3, [pc, #340]	; (8005e70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	099b      	lsrs	r3, r3, #6
 8005d20:	f04f 0400 	mov.w	r4, #0
 8005d24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005d28:	f04f 0200 	mov.w	r2, #0
 8005d2c:	ea03 0501 	and.w	r5, r3, r1
 8005d30:	ea04 0602 	and.w	r6, r4, r2
 8005d34:	4629      	mov	r1, r5
 8005d36:	4632      	mov	r2, r6
 8005d38:	f04f 0300 	mov.w	r3, #0
 8005d3c:	f04f 0400 	mov.w	r4, #0
 8005d40:	0154      	lsls	r4, r2, #5
 8005d42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005d46:	014b      	lsls	r3, r1, #5
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4622      	mov	r2, r4
 8005d4c:	1b49      	subs	r1, r1, r5
 8005d4e:	eb62 0206 	sbc.w	r2, r2, r6
 8005d52:	f04f 0300 	mov.w	r3, #0
 8005d56:	f04f 0400 	mov.w	r4, #0
 8005d5a:	0194      	lsls	r4, r2, #6
 8005d5c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005d60:	018b      	lsls	r3, r1, #6
 8005d62:	1a5b      	subs	r3, r3, r1
 8005d64:	eb64 0402 	sbc.w	r4, r4, r2
 8005d68:	f04f 0100 	mov.w	r1, #0
 8005d6c:	f04f 0200 	mov.w	r2, #0
 8005d70:	00e2      	lsls	r2, r4, #3
 8005d72:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005d76:	00d9      	lsls	r1, r3, #3
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4614      	mov	r4, r2
 8005d7c:	195b      	adds	r3, r3, r5
 8005d7e:	eb44 0406 	adc.w	r4, r4, r6
 8005d82:	f04f 0100 	mov.w	r1, #0
 8005d86:	f04f 0200 	mov.w	r2, #0
 8005d8a:	0262      	lsls	r2, r4, #9
 8005d8c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005d90:	0259      	lsls	r1, r3, #9
 8005d92:	460b      	mov	r3, r1
 8005d94:	4614      	mov	r4, r2
 8005d96:	4618      	mov	r0, r3
 8005d98:	4621      	mov	r1, r4
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f04f 0400 	mov.w	r4, #0
 8005da0:	461a      	mov	r2, r3
 8005da2:	4623      	mov	r3, r4
 8005da4:	f7fa ff08 	bl	8000bb8 <__aeabi_uldivmod>
 8005da8:	4603      	mov	r3, r0
 8005daa:	460c      	mov	r4, r1
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	e049      	b.n	8005e44 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005db0:	4b2f      	ldr	r3, [pc, #188]	; (8005e70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	099b      	lsrs	r3, r3, #6
 8005db6:	f04f 0400 	mov.w	r4, #0
 8005dba:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005dbe:	f04f 0200 	mov.w	r2, #0
 8005dc2:	ea03 0501 	and.w	r5, r3, r1
 8005dc6:	ea04 0602 	and.w	r6, r4, r2
 8005dca:	4629      	mov	r1, r5
 8005dcc:	4632      	mov	r2, r6
 8005dce:	f04f 0300 	mov.w	r3, #0
 8005dd2:	f04f 0400 	mov.w	r4, #0
 8005dd6:	0154      	lsls	r4, r2, #5
 8005dd8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005ddc:	014b      	lsls	r3, r1, #5
 8005dde:	4619      	mov	r1, r3
 8005de0:	4622      	mov	r2, r4
 8005de2:	1b49      	subs	r1, r1, r5
 8005de4:	eb62 0206 	sbc.w	r2, r2, r6
 8005de8:	f04f 0300 	mov.w	r3, #0
 8005dec:	f04f 0400 	mov.w	r4, #0
 8005df0:	0194      	lsls	r4, r2, #6
 8005df2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005df6:	018b      	lsls	r3, r1, #6
 8005df8:	1a5b      	subs	r3, r3, r1
 8005dfa:	eb64 0402 	sbc.w	r4, r4, r2
 8005dfe:	f04f 0100 	mov.w	r1, #0
 8005e02:	f04f 0200 	mov.w	r2, #0
 8005e06:	00e2      	lsls	r2, r4, #3
 8005e08:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005e0c:	00d9      	lsls	r1, r3, #3
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4614      	mov	r4, r2
 8005e12:	195b      	adds	r3, r3, r5
 8005e14:	eb44 0406 	adc.w	r4, r4, r6
 8005e18:	f04f 0100 	mov.w	r1, #0
 8005e1c:	f04f 0200 	mov.w	r2, #0
 8005e20:	02a2      	lsls	r2, r4, #10
 8005e22:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005e26:	0299      	lsls	r1, r3, #10
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4614      	mov	r4, r2
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	4621      	mov	r1, r4
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f04f 0400 	mov.w	r4, #0
 8005e36:	461a      	mov	r2, r3
 8005e38:	4623      	mov	r3, r4
 8005e3a:	f7fa febd 	bl	8000bb8 <__aeabi_uldivmod>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	460c      	mov	r4, r1
 8005e42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e44:	4b0a      	ldr	r3, [pc, #40]	; (8005e70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	0c1b      	lsrs	r3, r3, #16
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	3301      	adds	r3, #1
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e5c:	60bb      	str	r3, [r7, #8]
      break;
 8005e5e:	e002      	b.n	8005e66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e60:	4b04      	ldr	r3, [pc, #16]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005e62:	60bb      	str	r3, [r7, #8]
      break;
 8005e64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e66:	68bb      	ldr	r3, [r7, #8]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e70:	40023800 	.word	0x40023800
 8005e74:	00f42400 	.word	0x00f42400
 8005e78:	007a1200 	.word	0x007a1200

08005e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e80:	4b03      	ldr	r3, [pc, #12]	; (8005e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e82:	681b      	ldr	r3, [r3, #0]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	20000000 	.word	0x20000000

08005e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e98:	f7ff fff0 	bl	8005e7c <HAL_RCC_GetHCLKFreq>
 8005e9c:	4601      	mov	r1, r0
 8005e9e:	4b05      	ldr	r3, [pc, #20]	; (8005eb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	0b5b      	lsrs	r3, r3, #13
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	4a03      	ldr	r2, [pc, #12]	; (8005eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005eaa:	5cd3      	ldrb	r3, [r2, r3]
 8005eac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	40023800 	.word	0x40023800
 8005eb8:	0800ff64 	.word	0x0800ff64

08005ebc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	220f      	movs	r2, #15
 8005eca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ecc:	4b12      	ldr	r3, [pc, #72]	; (8005f18 <HAL_RCC_GetClockConfig+0x5c>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f003 0203 	and.w	r2, r3, #3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005ed8:	4b0f      	ldr	r3, [pc, #60]	; (8005f18 <HAL_RCC_GetClockConfig+0x5c>)
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ee4:	4b0c      	ldr	r3, [pc, #48]	; (8005f18 <HAL_RCC_GetClockConfig+0x5c>)
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005ef0:	4b09      	ldr	r3, [pc, #36]	; (8005f18 <HAL_RCC_GetClockConfig+0x5c>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	08db      	lsrs	r3, r3, #3
 8005ef6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005efe:	4b07      	ldr	r3, [pc, #28]	; (8005f1c <HAL_RCC_GetClockConfig+0x60>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 020f 	and.w	r2, r3, #15
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	601a      	str	r2, [r3, #0]
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40023800 	.word	0x40023800
 8005f1c:	40023c00 	.word	0x40023c00

08005f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e01d      	b.n	8005f6e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d106      	bne.n	8005f4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7fc fd1e 	bl	8002988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4610      	mov	r0, r2
 8005f60:	f000 fc48 	bl	80067f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b085      	sub	sp, #20
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68da      	ldr	r2, [r3, #12]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f042 0201 	orr.w	r2, r2, #1
 8005f8c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f003 0307 	and.w	r3, r3, #7
 8005f98:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2b06      	cmp	r3, #6
 8005f9e:	d007      	beq.n	8005fb0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f042 0201 	orr.w	r2, r2, #1
 8005fae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b082      	sub	sp, #8
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e01d      	b.n	800600c <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d106      	bne.n	8005fea <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f815 	bl	8006014 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2202      	movs	r2, #2
 8005fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	f000 fbf9 	bl	80067f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2201      	movs	r2, #1
 8006038:	6839      	ldr	r1, [r7, #0]
 800603a:	4618      	mov	r0, r3
 800603c:	f000 fe80 	bl	8006d40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a10      	ldr	r2, [pc, #64]	; (8006088 <HAL_TIM_OC_Start+0x60>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d107      	bne.n	800605a <HAL_TIM_OC_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006058:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2b06      	cmp	r3, #6
 800606a:	d007      	beq.n	800607c <HAL_TIM_OC_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f042 0201 	orr.w	r2, r2, #1
 800607a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	40010000 	.word	0x40010000

0800608c <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2200      	movs	r2, #0
 800609c:	6839      	ldr	r1, [r7, #0]
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 fe4e 	bl	8006d40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a1b      	ldr	r2, [pc, #108]	; (8006118 <HAL_TIM_OC_Stop+0x8c>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d117      	bne.n	80060de <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6a1a      	ldr	r2, [r3, #32]
 80060b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80060b8:	4013      	ands	r3, r2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10f      	bne.n	80060de <HAL_TIM_OC_Stop+0x52>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6a1a      	ldr	r2, [r3, #32]
 80060c4:	f240 4344 	movw	r3, #1092	; 0x444
 80060c8:	4013      	ands	r3, r2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d107      	bne.n	80060de <HAL_TIM_OC_Stop+0x52>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6a1a      	ldr	r2, [r3, #32]
 80060e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80060e8:	4013      	ands	r3, r2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10f      	bne.n	800610e <HAL_TIM_OC_Stop+0x82>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6a1a      	ldr	r2, [r3, #32]
 80060f4:	f240 4344 	movw	r3, #1092	; 0x444
 80060f8:	4013      	ands	r3, r2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d107      	bne.n	800610e <HAL_TIM_OC_Stop+0x82>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 0201 	bic.w	r2, r2, #1
 800610c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	40010000 	.word	0x40010000

0800611c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e01d      	b.n	800616a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d106      	bne.n	8006148 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7fc fc40 	bl	80029c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3304      	adds	r3, #4
 8006158:	4619      	mov	r1, r3
 800615a:	4610      	mov	r0, r2
 800615c:	f000 fb4a 	bl	80067f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
	...

08006174 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2201      	movs	r2, #1
 8006184:	6839      	ldr	r1, [r7, #0]
 8006186:	4618      	mov	r0, r3
 8006188:	f000 fdda 	bl	8006d40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a10      	ldr	r2, [pc, #64]	; (80061d4 <HAL_TIM_PWM_Start+0x60>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d107      	bne.n	80061a6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f003 0307 	and.w	r3, r3, #7
 80061b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2b06      	cmp	r3, #6
 80061b6:	d007      	beq.n	80061c8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0201 	orr.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	40010000 	.word	0x40010000

080061d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d122      	bne.n	8006234 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d11b      	bne.n	8006234 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f06f 0202 	mvn.w	r2, #2
 8006204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 facb 	bl	80067b6 <HAL_TIM_IC_CaptureCallback>
 8006220:	e005      	b.n	800622e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fabd 	bl	80067a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 face 	bl	80067ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f003 0304 	and.w	r3, r3, #4
 800623e:	2b04      	cmp	r3, #4
 8006240:	d122      	bne.n	8006288 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b04      	cmp	r3, #4
 800624e:	d11b      	bne.n	8006288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f06f 0204 	mvn.w	r2, #4
 8006258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2202      	movs	r2, #2
 800625e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 faa1 	bl	80067b6 <HAL_TIM_IC_CaptureCallback>
 8006274:	e005      	b.n	8006282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fa93 	bl	80067a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 faa4 	bl	80067ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	f003 0308 	and.w	r3, r3, #8
 8006292:	2b08      	cmp	r3, #8
 8006294:	d122      	bne.n	80062dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f003 0308 	and.w	r3, r3, #8
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d11b      	bne.n	80062dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f06f 0208 	mvn.w	r2, #8
 80062ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2204      	movs	r2, #4
 80062b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	f003 0303 	and.w	r3, r3, #3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fa77 	bl	80067b6 <HAL_TIM_IC_CaptureCallback>
 80062c8:	e005      	b.n	80062d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fa69 	bl	80067a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fa7a 	bl	80067ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	f003 0310 	and.w	r3, r3, #16
 80062e6:	2b10      	cmp	r3, #16
 80062e8:	d122      	bne.n	8006330 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f003 0310 	and.w	r3, r3, #16
 80062f4:	2b10      	cmp	r3, #16
 80062f6:	d11b      	bne.n	8006330 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f06f 0210 	mvn.w	r2, #16
 8006300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2208      	movs	r2, #8
 8006306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fa4d 	bl	80067b6 <HAL_TIM_IC_CaptureCallback>
 800631c:	e005      	b.n	800632a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fa3f 	bl	80067a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fa50 	bl	80067ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b01      	cmp	r3, #1
 800633c:	d10e      	bne.n	800635c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	2b01      	cmp	r3, #1
 800634a:	d107      	bne.n	800635c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f06f 0201 	mvn.w	r2, #1
 8006354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7fb fffe 	bl	8002358 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006366:	2b80      	cmp	r3, #128	; 0x80
 8006368:	d10e      	bne.n	8006388 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006374:	2b80      	cmp	r3, #128	; 0x80
 8006376:	d107      	bne.n	8006388 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fd7a 	bl	8006e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006392:	2b40      	cmp	r3, #64	; 0x40
 8006394:	d10e      	bne.n	80063b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a0:	2b40      	cmp	r3, #64	; 0x40
 80063a2:	d107      	bne.n	80063b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fa15 	bl	80067de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	f003 0320 	and.w	r3, r3, #32
 80063be:	2b20      	cmp	r3, #32
 80063c0:	d10e      	bne.n	80063e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	f003 0320 	and.w	r3, r3, #32
 80063cc:	2b20      	cmp	r3, #32
 80063ce:	d107      	bne.n	80063e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f06f 0220 	mvn.w	r2, #32
 80063d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fd44 	bl	8006e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063e0:	bf00      	nop
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <HAL_TIM_OC_ConfigChannel+0x1a>
 80063fe:	2302      	movs	r3, #2
 8006400:	e04e      	b.n	80064a0 <HAL_TIM_OC_ConfigChannel+0xb8>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2202      	movs	r2, #2
 800640e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b0c      	cmp	r3, #12
 8006416:	d839      	bhi.n	800648c <HAL_TIM_OC_ConfigChannel+0xa4>
 8006418:	a201      	add	r2, pc, #4	; (adr r2, 8006420 <HAL_TIM_OC_ConfigChannel+0x38>)
 800641a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641e:	bf00      	nop
 8006420:	08006455 	.word	0x08006455
 8006424:	0800648d 	.word	0x0800648d
 8006428:	0800648d 	.word	0x0800648d
 800642c:	0800648d 	.word	0x0800648d
 8006430:	08006463 	.word	0x08006463
 8006434:	0800648d 	.word	0x0800648d
 8006438:	0800648d 	.word	0x0800648d
 800643c:	0800648d 	.word	0x0800648d
 8006440:	08006471 	.word	0x08006471
 8006444:	0800648d 	.word	0x0800648d
 8006448:	0800648d 	.word	0x0800648d
 800644c:	0800648d 	.word	0x0800648d
 8006450:	0800647f 	.word	0x0800647f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68b9      	ldr	r1, [r7, #8]
 800645a:	4618      	mov	r0, r3
 800645c:	f000 fa4a 	bl	80068f4 <TIM_OC1_SetConfig>
      break;
 8006460:	e015      	b.n	800648e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68b9      	ldr	r1, [r7, #8]
 8006468:	4618      	mov	r0, r3
 800646a:	f000 faa9 	bl	80069c0 <TIM_OC2_SetConfig>
      break;
 800646e:	e00e      	b.n	800648e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68b9      	ldr	r1, [r7, #8]
 8006476:	4618      	mov	r0, r3
 8006478:	f000 fb0e 	bl	8006a98 <TIM_OC3_SetConfig>
      break;
 800647c:	e007      	b.n	800648e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68b9      	ldr	r1, [r7, #8]
 8006484:	4618      	mov	r0, r3
 8006486:	f000 fb71 	bl	8006b6c <TIM_OC4_SetConfig>
      break;
 800648a:	e000      	b.n	800648e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800648c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d101      	bne.n	80064c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80064be:	2302      	movs	r3, #2
 80064c0:	e0b4      	b.n	800662c <HAL_TIM_PWM_ConfigChannel+0x184>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2202      	movs	r2, #2
 80064ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b0c      	cmp	r3, #12
 80064d6:	f200 809f 	bhi.w	8006618 <HAL_TIM_PWM_ConfigChannel+0x170>
 80064da:	a201      	add	r2, pc, #4	; (adr r2, 80064e0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80064dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e0:	08006515 	.word	0x08006515
 80064e4:	08006619 	.word	0x08006619
 80064e8:	08006619 	.word	0x08006619
 80064ec:	08006619 	.word	0x08006619
 80064f0:	08006555 	.word	0x08006555
 80064f4:	08006619 	.word	0x08006619
 80064f8:	08006619 	.word	0x08006619
 80064fc:	08006619 	.word	0x08006619
 8006500:	08006597 	.word	0x08006597
 8006504:	08006619 	.word	0x08006619
 8006508:	08006619 	.word	0x08006619
 800650c:	08006619 	.word	0x08006619
 8006510:	080065d7 	.word	0x080065d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68b9      	ldr	r1, [r7, #8]
 800651a:	4618      	mov	r0, r3
 800651c:	f000 f9ea 	bl	80068f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	699a      	ldr	r2, [r3, #24]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0208 	orr.w	r2, r2, #8
 800652e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	699a      	ldr	r2, [r3, #24]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f022 0204 	bic.w	r2, r2, #4
 800653e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6999      	ldr	r1, [r3, #24]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	691a      	ldr	r2, [r3, #16]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	619a      	str	r2, [r3, #24]
      break;
 8006552:	e062      	b.n	800661a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68b9      	ldr	r1, [r7, #8]
 800655a:	4618      	mov	r0, r3
 800655c:	f000 fa30 	bl	80069c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699a      	ldr	r2, [r3, #24]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800656e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699a      	ldr	r2, [r3, #24]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800657e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6999      	ldr	r1, [r3, #24]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	021a      	lsls	r2, r3, #8
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	619a      	str	r2, [r3, #24]
      break;
 8006594:	e041      	b.n	800661a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68b9      	ldr	r1, [r7, #8]
 800659c:	4618      	mov	r0, r3
 800659e:	f000 fa7b 	bl	8006a98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	69da      	ldr	r2, [r3, #28]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f042 0208 	orr.w	r2, r2, #8
 80065b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	69da      	ldr	r2, [r3, #28]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0204 	bic.w	r2, r2, #4
 80065c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	69d9      	ldr	r1, [r3, #28]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	691a      	ldr	r2, [r3, #16]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	61da      	str	r2, [r3, #28]
      break;
 80065d4:	e021      	b.n	800661a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 fac5 	bl	8006b6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	69da      	ldr	r2, [r3, #28]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69da      	ldr	r2, [r3, #28]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69d9      	ldr	r1, [r3, #28]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	021a      	lsls	r2, r3, #8
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	61da      	str	r2, [r3, #28]
      break;
 8006616:	e000      	b.n	800661a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006618:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006644:	2b01      	cmp	r3, #1
 8006646:	d101      	bne.n	800664c <HAL_TIM_ConfigClockSource+0x18>
 8006648:	2302      	movs	r3, #2
 800664a:	e0a6      	b.n	800679a <HAL_TIM_ConfigClockSource+0x166>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2202      	movs	r2, #2
 8006658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800666a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006672:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b40      	cmp	r3, #64	; 0x40
 8006682:	d067      	beq.n	8006754 <HAL_TIM_ConfigClockSource+0x120>
 8006684:	2b40      	cmp	r3, #64	; 0x40
 8006686:	d80b      	bhi.n	80066a0 <HAL_TIM_ConfigClockSource+0x6c>
 8006688:	2b10      	cmp	r3, #16
 800668a:	d073      	beq.n	8006774 <HAL_TIM_ConfigClockSource+0x140>
 800668c:	2b10      	cmp	r3, #16
 800668e:	d802      	bhi.n	8006696 <HAL_TIM_ConfigClockSource+0x62>
 8006690:	2b00      	cmp	r3, #0
 8006692:	d06f      	beq.n	8006774 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006694:	e078      	b.n	8006788 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006696:	2b20      	cmp	r3, #32
 8006698:	d06c      	beq.n	8006774 <HAL_TIM_ConfigClockSource+0x140>
 800669a:	2b30      	cmp	r3, #48	; 0x30
 800669c:	d06a      	beq.n	8006774 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800669e:	e073      	b.n	8006788 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80066a0:	2b70      	cmp	r3, #112	; 0x70
 80066a2:	d00d      	beq.n	80066c0 <HAL_TIM_ConfigClockSource+0x8c>
 80066a4:	2b70      	cmp	r3, #112	; 0x70
 80066a6:	d804      	bhi.n	80066b2 <HAL_TIM_ConfigClockSource+0x7e>
 80066a8:	2b50      	cmp	r3, #80	; 0x50
 80066aa:	d033      	beq.n	8006714 <HAL_TIM_ConfigClockSource+0xe0>
 80066ac:	2b60      	cmp	r3, #96	; 0x60
 80066ae:	d041      	beq.n	8006734 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80066b0:	e06a      	b.n	8006788 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80066b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b6:	d066      	beq.n	8006786 <HAL_TIM_ConfigClockSource+0x152>
 80066b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066bc:	d017      	beq.n	80066ee <HAL_TIM_ConfigClockSource+0xba>
      break;
 80066be:	e063      	b.n	8006788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6818      	ldr	r0, [r3, #0]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	6899      	ldr	r1, [r3, #8]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f000 fb16 	bl	8006d00 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	609a      	str	r2, [r3, #8]
      break;
 80066ec:	e04c      	b.n	8006788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6818      	ldr	r0, [r3, #0]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	6899      	ldr	r1, [r3, #8]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	685a      	ldr	r2, [r3, #4]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	f000 faff 	bl	8006d00 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006710:	609a      	str	r2, [r3, #8]
      break;
 8006712:	e039      	b.n	8006788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6818      	ldr	r0, [r3, #0]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	6859      	ldr	r1, [r3, #4]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	461a      	mov	r2, r3
 8006722:	f000 fa73 	bl	8006c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2150      	movs	r1, #80	; 0x50
 800672c:	4618      	mov	r0, r3
 800672e:	f000 facc 	bl	8006cca <TIM_ITRx_SetConfig>
      break;
 8006732:	e029      	b.n	8006788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6818      	ldr	r0, [r3, #0]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	6859      	ldr	r1, [r3, #4]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	461a      	mov	r2, r3
 8006742:	f000 fa92 	bl	8006c6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2160      	movs	r1, #96	; 0x60
 800674c:	4618      	mov	r0, r3
 800674e:	f000 fabc 	bl	8006cca <TIM_ITRx_SetConfig>
      break;
 8006752:	e019      	b.n	8006788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6818      	ldr	r0, [r3, #0]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	6859      	ldr	r1, [r3, #4]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	461a      	mov	r2, r3
 8006762:	f000 fa53 	bl	8006c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2140      	movs	r1, #64	; 0x40
 800676c:	4618      	mov	r0, r3
 800676e:	f000 faac 	bl	8006cca <TIM_ITRx_SetConfig>
      break;
 8006772:	e009      	b.n	8006788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4619      	mov	r1, r3
 800677e:	4610      	mov	r0, r2
 8006780:	f000 faa3 	bl	8006cca <TIM_ITRx_SetConfig>
      break;
 8006784:	e000      	b.n	8006788 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006786:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b083      	sub	sp, #12
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067be:	bf00      	nop
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067de:	b480      	push	{r7}
 80067e0:	b083      	sub	sp, #12
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067e6:	bf00      	nop
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
	...

080067f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a34      	ldr	r2, [pc, #208]	; (80068d8 <TIM_Base_SetConfig+0xe4>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d00f      	beq.n	800682c <TIM_Base_SetConfig+0x38>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006812:	d00b      	beq.n	800682c <TIM_Base_SetConfig+0x38>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a31      	ldr	r2, [pc, #196]	; (80068dc <TIM_Base_SetConfig+0xe8>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d007      	beq.n	800682c <TIM_Base_SetConfig+0x38>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a30      	ldr	r2, [pc, #192]	; (80068e0 <TIM_Base_SetConfig+0xec>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d003      	beq.n	800682c <TIM_Base_SetConfig+0x38>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a2f      	ldr	r2, [pc, #188]	; (80068e4 <TIM_Base_SetConfig+0xf0>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d108      	bne.n	800683e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a25      	ldr	r2, [pc, #148]	; (80068d8 <TIM_Base_SetConfig+0xe4>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d01b      	beq.n	800687e <TIM_Base_SetConfig+0x8a>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800684c:	d017      	beq.n	800687e <TIM_Base_SetConfig+0x8a>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a22      	ldr	r2, [pc, #136]	; (80068dc <TIM_Base_SetConfig+0xe8>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d013      	beq.n	800687e <TIM_Base_SetConfig+0x8a>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a21      	ldr	r2, [pc, #132]	; (80068e0 <TIM_Base_SetConfig+0xec>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d00f      	beq.n	800687e <TIM_Base_SetConfig+0x8a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a20      	ldr	r2, [pc, #128]	; (80068e4 <TIM_Base_SetConfig+0xf0>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d00b      	beq.n	800687e <TIM_Base_SetConfig+0x8a>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a1f      	ldr	r2, [pc, #124]	; (80068e8 <TIM_Base_SetConfig+0xf4>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d007      	beq.n	800687e <TIM_Base_SetConfig+0x8a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a1e      	ldr	r2, [pc, #120]	; (80068ec <TIM_Base_SetConfig+0xf8>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d003      	beq.n	800687e <TIM_Base_SetConfig+0x8a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a1d      	ldr	r2, [pc, #116]	; (80068f0 <TIM_Base_SetConfig+0xfc>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d108      	bne.n	8006890 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	4313      	orrs	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	4313      	orrs	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	689a      	ldr	r2, [r3, #8]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a08      	ldr	r2, [pc, #32]	; (80068d8 <TIM_Base_SetConfig+0xe4>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d103      	bne.n	80068c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	691a      	ldr	r2, [r3, #16]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	615a      	str	r2, [r3, #20]
}
 80068ca:	bf00      	nop
 80068cc:	3714      	adds	r7, #20
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	40010000 	.word	0x40010000
 80068dc:	40000400 	.word	0x40000400
 80068e0:	40000800 	.word	0x40000800
 80068e4:	40000c00 	.word	0x40000c00
 80068e8:	40014000 	.word	0x40014000
 80068ec:	40014400 	.word	0x40014400
 80068f0:	40014800 	.word	0x40014800

080068f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	f023 0201 	bic.w	r2, r3, #1
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0303 	bic.w	r3, r3, #3
 800692a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f023 0302 	bic.w	r3, r3, #2
 800693c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	4313      	orrs	r3, r2
 8006946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a1c      	ldr	r2, [pc, #112]	; (80069bc <TIM_OC1_SetConfig+0xc8>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d10c      	bne.n	800696a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	f023 0308 	bic.w	r3, r3, #8
 8006956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	4313      	orrs	r3, r2
 8006960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f023 0304 	bic.w	r3, r3, #4
 8006968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a13      	ldr	r2, [pc, #76]	; (80069bc <TIM_OC1_SetConfig+0xc8>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d111      	bne.n	8006996 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	4313      	orrs	r3, r2
 800698a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	4313      	orrs	r3, r2
 8006994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	621a      	str	r2, [r3, #32]
}
 80069b0:	bf00      	nop
 80069b2:	371c      	adds	r7, #28
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	40010000 	.word	0x40010000

080069c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	f023 0210 	bic.w	r2, r3, #16
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	021b      	lsls	r3, r3, #8
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f023 0320 	bic.w	r3, r3, #32
 8006a0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	011b      	lsls	r3, r3, #4
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a1e      	ldr	r2, [pc, #120]	; (8006a94 <TIM_OC2_SetConfig+0xd4>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d10d      	bne.n	8006a3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	011b      	lsls	r3, r3, #4
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a15      	ldr	r2, [pc, #84]	; (8006a94 <TIM_OC2_SetConfig+0xd4>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d113      	bne.n	8006a6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	621a      	str	r2, [r3, #32]
}
 8006a86:	bf00      	nop
 8006a88:	371c      	adds	r7, #28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	40010000 	.word	0x40010000

08006a98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 0303 	bic.w	r3, r3, #3
 8006ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	021b      	lsls	r3, r3, #8
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a1d      	ldr	r2, [pc, #116]	; (8006b68 <TIM_OC3_SetConfig+0xd0>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d10d      	bne.n	8006b12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006afc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	021b      	lsls	r3, r3, #8
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a14      	ldr	r2, [pc, #80]	; (8006b68 <TIM_OC3_SetConfig+0xd0>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d113      	bne.n	8006b42 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	011b      	lsls	r3, r3, #4
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	011b      	lsls	r3, r3, #4
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	621a      	str	r2, [r3, #32]
}
 8006b5c:	bf00      	nop
 8006b5e:	371c      	adds	r7, #28
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	40010000 	.word	0x40010000

08006b6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	021b      	lsls	r3, r3, #8
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	031b      	lsls	r3, r3, #12
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a10      	ldr	r2, [pc, #64]	; (8006c08 <TIM_OC4_SetConfig+0x9c>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d109      	bne.n	8006be0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	019b      	lsls	r3, r3, #6
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	621a      	str	r2, [r3, #32]
}
 8006bfa:	bf00      	nop
 8006bfc:	371c      	adds	r7, #28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	40010000 	.word	0x40010000

08006c0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	f023 0201 	bic.w	r2, r3, #1
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	011b      	lsls	r3, r3, #4
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f023 030a 	bic.w	r3, r3, #10
 8006c48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	621a      	str	r2, [r3, #32]
}
 8006c5e:	bf00      	nop
 8006c60:	371c      	adds	r7, #28
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b087      	sub	sp, #28
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	60f8      	str	r0, [r7, #12]
 8006c72:	60b9      	str	r1, [r7, #8]
 8006c74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	f023 0210 	bic.w	r2, r3, #16
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	031b      	lsls	r3, r3, #12
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ca6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	011b      	lsls	r3, r3, #4
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	621a      	str	r2, [r3, #32]
}
 8006cbe:	bf00      	nop
 8006cc0:	371c      	adds	r7, #28
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b085      	sub	sp, #20
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	f043 0307 	orr.w	r3, r3, #7
 8006cec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	609a      	str	r2, [r3, #8]
}
 8006cf4:	bf00      	nop
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
 8006d0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	021a      	lsls	r2, r3, #8
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	431a      	orrs	r2, r3
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	609a      	str	r2, [r3, #8]
}
 8006d34:	bf00      	nop
 8006d36:	371c      	adds	r7, #28
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b087      	sub	sp, #28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	f003 031f 	and.w	r3, r3, #31
 8006d52:	2201      	movs	r2, #1
 8006d54:	fa02 f303 	lsl.w	r3, r2, r3
 8006d58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6a1a      	ldr	r2, [r3, #32]
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	43db      	mvns	r3, r3
 8006d62:	401a      	ands	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6a1a      	ldr	r2, [r3, #32]
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	f003 031f 	and.w	r3, r3, #31
 8006d72:	6879      	ldr	r1, [r7, #4]
 8006d74:	fa01 f303 	lsl.w	r3, r1, r3
 8006d78:	431a      	orrs	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	621a      	str	r2, [r3, #32]
}
 8006d7e:	bf00      	nop
 8006d80:	371c      	adds	r7, #28
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
	...

08006d8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d101      	bne.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006da0:	2302      	movs	r3, #2
 8006da2:	e050      	b.n	8006e46 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2202      	movs	r2, #2
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a1c      	ldr	r2, [pc, #112]	; (8006e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d018      	beq.n	8006e1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df0:	d013      	beq.n	8006e1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a18      	ldr	r2, [pc, #96]	; (8006e58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d00e      	beq.n	8006e1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a16      	ldr	r2, [pc, #88]	; (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d009      	beq.n	8006e1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a15      	ldr	r2, [pc, #84]	; (8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d004      	beq.n	8006e1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a13      	ldr	r2, [pc, #76]	; (8006e64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d10c      	bne.n	8006e34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	40010000 	.word	0x40010000
 8006e58:	40000400 	.word	0x40000400
 8006e5c:	40000800 	.word	0x40000800
 8006e60:	40000c00 	.word	0x40000c00
 8006e64:	40014000 	.word	0x40014000

08006e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e90:	b084      	sub	sp, #16
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	f107 001c 	add.w	r0, r7, #28
 8006e9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d122      	bne.n	8006eee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d105      	bne.n	8006ee2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f001 fac6 	bl	8008474 <USB_CoreReset>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	73fb      	strb	r3, [r7, #15]
 8006eec:	e01a      	b.n	8006f24 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f001 faba 	bl	8008474 <USB_CoreReset>
 8006f00:	4603      	mov	r3, r0
 8006f02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d106      	bne.n	8006f18 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	639a      	str	r2, [r3, #56]	; 0x38
 8006f16:	e005      	b.n	8006f24 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d10b      	bne.n	8006f42 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f043 0206 	orr.w	r2, r3, #6
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f043 0220 	orr.w	r2, r3, #32
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f4e:	b004      	add	sp, #16
 8006f50:	4770      	bx	lr
	...

08006f54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b087      	sub	sp, #28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006f62:	79fb      	ldrb	r3, [r7, #7]
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d165      	bne.n	8007034 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	4a41      	ldr	r2, [pc, #260]	; (8007070 <USB_SetTurnaroundTime+0x11c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d906      	bls.n	8006f7e <USB_SetTurnaroundTime+0x2a>
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	4a40      	ldr	r2, [pc, #256]	; (8007074 <USB_SetTurnaroundTime+0x120>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d802      	bhi.n	8006f7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006f78:	230f      	movs	r3, #15
 8006f7a:	617b      	str	r3, [r7, #20]
 8006f7c:	e062      	b.n	8007044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	4a3c      	ldr	r2, [pc, #240]	; (8007074 <USB_SetTurnaroundTime+0x120>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d906      	bls.n	8006f94 <USB_SetTurnaroundTime+0x40>
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	4a3b      	ldr	r2, [pc, #236]	; (8007078 <USB_SetTurnaroundTime+0x124>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d802      	bhi.n	8006f94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006f8e:	230e      	movs	r3, #14
 8006f90:	617b      	str	r3, [r7, #20]
 8006f92:	e057      	b.n	8007044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	4a38      	ldr	r2, [pc, #224]	; (8007078 <USB_SetTurnaroundTime+0x124>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d906      	bls.n	8006faa <USB_SetTurnaroundTime+0x56>
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	4a37      	ldr	r2, [pc, #220]	; (800707c <USB_SetTurnaroundTime+0x128>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d802      	bhi.n	8006faa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006fa4:	230d      	movs	r3, #13
 8006fa6:	617b      	str	r3, [r7, #20]
 8006fa8:	e04c      	b.n	8007044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	4a33      	ldr	r2, [pc, #204]	; (800707c <USB_SetTurnaroundTime+0x128>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d906      	bls.n	8006fc0 <USB_SetTurnaroundTime+0x6c>
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	4a32      	ldr	r2, [pc, #200]	; (8007080 <USB_SetTurnaroundTime+0x12c>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d802      	bhi.n	8006fc0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006fba:	230c      	movs	r3, #12
 8006fbc:	617b      	str	r3, [r7, #20]
 8006fbe:	e041      	b.n	8007044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	4a2f      	ldr	r2, [pc, #188]	; (8007080 <USB_SetTurnaroundTime+0x12c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d906      	bls.n	8006fd6 <USB_SetTurnaroundTime+0x82>
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	4a2e      	ldr	r2, [pc, #184]	; (8007084 <USB_SetTurnaroundTime+0x130>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d802      	bhi.n	8006fd6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006fd0:	230b      	movs	r3, #11
 8006fd2:	617b      	str	r3, [r7, #20]
 8006fd4:	e036      	b.n	8007044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	4a2a      	ldr	r2, [pc, #168]	; (8007084 <USB_SetTurnaroundTime+0x130>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d906      	bls.n	8006fec <USB_SetTurnaroundTime+0x98>
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	4a29      	ldr	r2, [pc, #164]	; (8007088 <USB_SetTurnaroundTime+0x134>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d802      	bhi.n	8006fec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006fe6:	230a      	movs	r3, #10
 8006fe8:	617b      	str	r3, [r7, #20]
 8006fea:	e02b      	b.n	8007044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	4a26      	ldr	r2, [pc, #152]	; (8007088 <USB_SetTurnaroundTime+0x134>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d906      	bls.n	8007002 <USB_SetTurnaroundTime+0xae>
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	4a25      	ldr	r2, [pc, #148]	; (800708c <USB_SetTurnaroundTime+0x138>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d802      	bhi.n	8007002 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006ffc:	2309      	movs	r3, #9
 8006ffe:	617b      	str	r3, [r7, #20]
 8007000:	e020      	b.n	8007044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	4a21      	ldr	r2, [pc, #132]	; (800708c <USB_SetTurnaroundTime+0x138>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d906      	bls.n	8007018 <USB_SetTurnaroundTime+0xc4>
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	4a20      	ldr	r2, [pc, #128]	; (8007090 <USB_SetTurnaroundTime+0x13c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d802      	bhi.n	8007018 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007012:	2308      	movs	r3, #8
 8007014:	617b      	str	r3, [r7, #20]
 8007016:	e015      	b.n	8007044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	4a1d      	ldr	r2, [pc, #116]	; (8007090 <USB_SetTurnaroundTime+0x13c>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d906      	bls.n	800702e <USB_SetTurnaroundTime+0xda>
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	4a1c      	ldr	r2, [pc, #112]	; (8007094 <USB_SetTurnaroundTime+0x140>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d802      	bhi.n	800702e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007028:	2307      	movs	r3, #7
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	e00a      	b.n	8007044 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800702e:	2306      	movs	r3, #6
 8007030:	617b      	str	r3, [r7, #20]
 8007032:	e007      	b.n	8007044 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007034:	79fb      	ldrb	r3, [r7, #7]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d102      	bne.n	8007040 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800703a:	2309      	movs	r3, #9
 800703c:	617b      	str	r3, [r7, #20]
 800703e:	e001      	b.n	8007044 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007040:	2309      	movs	r3, #9
 8007042:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	68da      	ldr	r2, [r3, #12]
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	029b      	lsls	r3, r3, #10
 8007058:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800705c:	431a      	orrs	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	371c      	adds	r7, #28
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	00d8acbf 	.word	0x00d8acbf
 8007074:	00e4e1bf 	.word	0x00e4e1bf
 8007078:	00f423ff 	.word	0x00f423ff
 800707c:	0106737f 	.word	0x0106737f
 8007080:	011a499f 	.word	0x011a499f
 8007084:	01312cff 	.word	0x01312cff
 8007088:	014ca43f 	.word	0x014ca43f
 800708c:	016e35ff 	.word	0x016e35ff
 8007090:	01a6ab1f 	.word	0x01a6ab1f
 8007094:	01e847ff 	.word	0x01e847ff

08007098 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f043 0201 	orr.w	r2, r3, #1
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b083      	sub	sp, #12
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f023 0201 	bic.w	r2, r3, #1
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070f4:	78fb      	ldrb	r3, [r7, #3]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d106      	bne.n	8007108 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	60da      	str	r2, [r3, #12]
 8007106:	e00b      	b.n	8007120 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007108:	78fb      	ldrb	r3, [r7, #3]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d106      	bne.n	800711c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	60da      	str	r2, [r3, #12]
 800711a:	e001      	b.n	8007120 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e003      	b.n	8007128 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007120:	2032      	movs	r0, #50	; 0x32
 8007122:	f7fb fe4f 	bl	8002dc4 <HAL_Delay>

  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3708      	adds	r7, #8
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007130:	b084      	sub	sp, #16
 8007132:	b580      	push	{r7, lr}
 8007134:	b086      	sub	sp, #24
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800713e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800714a:	2300      	movs	r3, #0
 800714c:	613b      	str	r3, [r7, #16]
 800714e:	e009      	b.n	8007164 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	3340      	adds	r3, #64	; 0x40
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	2200      	movs	r2, #0
 800715c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	3301      	adds	r3, #1
 8007162:	613b      	str	r3, [r7, #16]
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	2b0e      	cmp	r3, #14
 8007168:	d9f2      	bls.n	8007150 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800716a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800716c:	2b00      	cmp	r3, #0
 800716e:	d11c      	bne.n	80071aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800717e:	f043 0302 	orr.w	r3, r3, #2
 8007182:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007188:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007194:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	639a      	str	r2, [r3, #56]	; 0x38
 80071a8:	e00b      	b.n	80071c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071c8:	461a      	mov	r2, r3
 80071ca:	2300      	movs	r3, #0
 80071cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d4:	4619      	mov	r1, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071dc:	461a      	mov	r2, r3
 80071de:	680b      	ldr	r3, [r1, #0]
 80071e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d10c      	bne.n	8007202 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80071e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d104      	bne.n	80071f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80071ee:	2100      	movs	r1, #0
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f949 	bl	8007488 <USB_SetDevSpeed>
 80071f6:	e008      	b.n	800720a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80071f8:	2101      	movs	r1, #1
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f944 	bl	8007488 <USB_SetDevSpeed>
 8007200:	e003      	b.n	800720a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007202:	2103      	movs	r1, #3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f93f 	bl	8007488 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800720a:	2110      	movs	r1, #16
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f8f3 	bl	80073f8 <USB_FlushTxFifo>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d001      	beq.n	800721c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f911 	bl	8007444 <USB_FlushRxFifo>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007232:	461a      	mov	r2, r3
 8007234:	2300      	movs	r3, #0
 8007236:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800723e:	461a      	mov	r2, r3
 8007240:	2300      	movs	r3, #0
 8007242:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800724a:	461a      	mov	r2, r3
 800724c:	2300      	movs	r3, #0
 800724e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007250:	2300      	movs	r3, #0
 8007252:	613b      	str	r3, [r7, #16]
 8007254:	e043      	b.n	80072de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	4413      	add	r3, r2
 800725e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007268:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800726c:	d118      	bne.n	80072a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10a      	bne.n	800728a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	4413      	add	r3, r2
 800727c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007280:	461a      	mov	r2, r3
 8007282:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007286:	6013      	str	r3, [r2, #0]
 8007288:	e013      	b.n	80072b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	015a      	lsls	r2, r3, #5
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	4413      	add	r3, r2
 8007292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007296:	461a      	mov	r2, r3
 8007298:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800729c:	6013      	str	r3, [r2, #0]
 800729e:	e008      	b.n	80072b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ac:	461a      	mov	r2, r3
 80072ae:	2300      	movs	r3, #0
 80072b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072be:	461a      	mov	r2, r3
 80072c0:	2300      	movs	r3, #0
 80072c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d0:	461a      	mov	r2, r3
 80072d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	3301      	adds	r3, #1
 80072dc:	613b      	str	r3, [r7, #16]
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d3b7      	bcc.n	8007256 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072e6:	2300      	movs	r3, #0
 80072e8:	613b      	str	r3, [r7, #16]
 80072ea:	e043      	b.n	8007374 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	015a      	lsls	r2, r3, #5
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007302:	d118      	bne.n	8007336 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10a      	bne.n	8007320 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4413      	add	r3, r2
 8007312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007316:	461a      	mov	r2, r3
 8007318:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800731c:	6013      	str	r3, [r2, #0]
 800731e:	e013      	b.n	8007348 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	015a      	lsls	r2, r3, #5
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	4413      	add	r3, r2
 8007328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800732c:	461a      	mov	r2, r3
 800732e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007332:	6013      	str	r3, [r2, #0]
 8007334:	e008      	b.n	8007348 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	4413      	add	r3, r2
 800733e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007342:	461a      	mov	r2, r3
 8007344:	2300      	movs	r3, #0
 8007346:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	015a      	lsls	r2, r3, #5
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	4413      	add	r3, r2
 8007350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007354:	461a      	mov	r2, r3
 8007356:	2300      	movs	r3, #0
 8007358:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	4413      	add	r3, r2
 8007362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007366:	461a      	mov	r2, r3
 8007368:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800736c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	3301      	adds	r3, #1
 8007372:	613b      	str	r3, [r7, #16]
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	429a      	cmp	r2, r3
 800737a:	d3b7      	bcc.n	80072ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800738a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800738e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800739c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800739e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d105      	bne.n	80073b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	f043 0210 	orr.w	r2, r3, #16
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	699a      	ldr	r2, [r3, #24]
 80073b4:	4b0f      	ldr	r3, [pc, #60]	; (80073f4 <USB_DevInit+0x2c4>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80073bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d005      	beq.n	80073ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	f043 0208 	orr.w	r2, r3, #8
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80073ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d107      	bne.n	80073e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073dc:	f043 0304 	orr.w	r3, r3, #4
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80073e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073f0:	b004      	add	sp, #16
 80073f2:	4770      	bx	lr
 80073f4:	803c3800 	.word	0x803c3800

080073f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007402:	2300      	movs	r3, #0
 8007404:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	019b      	lsls	r3, r3, #6
 800740a:	f043 0220 	orr.w	r2, r3, #32
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3301      	adds	r3, #1
 8007416:	60fb      	str	r3, [r7, #12]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	4a09      	ldr	r2, [pc, #36]	; (8007440 <USB_FlushTxFifo+0x48>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d901      	bls.n	8007424 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	e006      	b.n	8007432 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	f003 0320 	and.w	r3, r3, #32
 800742c:	2b20      	cmp	r3, #32
 800742e:	d0f0      	beq.n	8007412 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	00030d40 	.word	0x00030d40

08007444 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800744c:	2300      	movs	r3, #0
 800744e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2210      	movs	r2, #16
 8007454:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	3301      	adds	r3, #1
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4a09      	ldr	r2, [pc, #36]	; (8007484 <USB_FlushRxFifo+0x40>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d901      	bls.n	8007468 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	e006      	b.n	8007476 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	f003 0310 	and.w	r3, r3, #16
 8007470:	2b10      	cmp	r3, #16
 8007472:	d0f0      	beq.n	8007456 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	00030d40 	.word	0x00030d40

08007488 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	460b      	mov	r3, r1
 8007492:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	78fb      	ldrb	r3, [r7, #3]
 80074a2:	68f9      	ldr	r1, [r7, #12]
 80074a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074a8:	4313      	orrs	r3, r2
 80074aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b087      	sub	sp, #28
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f003 0306 	and.w	r3, r3, #6
 80074d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d102      	bne.n	80074e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80074da:	2300      	movs	r3, #0
 80074dc:	75fb      	strb	r3, [r7, #23]
 80074de:	e00a      	b.n	80074f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d002      	beq.n	80074ec <USB_GetDevSpeed+0x32>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2b06      	cmp	r3, #6
 80074ea:	d102      	bne.n	80074f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80074ec:	2302      	movs	r3, #2
 80074ee:	75fb      	strb	r3, [r7, #23]
 80074f0:	e001      	b.n	80074f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80074f2:	230f      	movs	r3, #15
 80074f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80074f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	371c      	adds	r7, #28
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	785b      	ldrb	r3, [r3, #1]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d13a      	bne.n	8007596 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007526:	69da      	ldr	r2, [r3, #28]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	f003 030f 	and.w	r3, r3, #15
 8007530:	2101      	movs	r1, #1
 8007532:	fa01 f303 	lsl.w	r3, r1, r3
 8007536:	b29b      	uxth	r3, r3
 8007538:	68f9      	ldr	r1, [r7, #12]
 800753a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800753e:	4313      	orrs	r3, r2
 8007540:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	015a      	lsls	r2, r3, #5
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	4413      	add	r3, r2
 800754a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d155      	bne.n	8007604 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	015a      	lsls	r2, r3, #5
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4413      	add	r3, r2
 8007560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	78db      	ldrb	r3, [r3, #3]
 8007572:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007574:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	059b      	lsls	r3, r3, #22
 800757a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800757c:	4313      	orrs	r3, r2
 800757e:	68ba      	ldr	r2, [r7, #8]
 8007580:	0151      	lsls	r1, r2, #5
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	440a      	add	r2, r1
 8007586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800758a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800758e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007592:	6013      	str	r3, [r2, #0]
 8007594:	e036      	b.n	8007604 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800759c:	69da      	ldr	r2, [r3, #28]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	f003 030f 	and.w	r3, r3, #15
 80075a6:	2101      	movs	r1, #1
 80075a8:	fa01 f303 	lsl.w	r3, r1, r3
 80075ac:	041b      	lsls	r3, r3, #16
 80075ae:	68f9      	ldr	r1, [r7, #12]
 80075b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075b4:	4313      	orrs	r3, r2
 80075b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d11a      	bne.n	8007604 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	78db      	ldrb	r3, [r3, #3]
 80075e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80075ea:	430b      	orrs	r3, r1
 80075ec:	4313      	orrs	r3, r2
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	0151      	lsls	r1, r2, #5
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	440a      	add	r2, r1
 80075f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007602:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3714      	adds	r7, #20
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
	...

08007614 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	785b      	ldrb	r3, [r3, #1]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d161      	bne.n	80076f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	4413      	add	r3, r2
 8007638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007642:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007646:	d11f      	bne.n	8007688 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	015a      	lsls	r2, r3, #5
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	4413      	add	r3, r2
 8007650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	0151      	lsls	r1, r2, #5
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	440a      	add	r2, r1
 800765e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007662:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007666:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	015a      	lsls	r2, r3, #5
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	4413      	add	r3, r2
 8007670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	0151      	lsls	r1, r2, #5
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	440a      	add	r2, r1
 800767e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007682:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007686:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800768e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	f003 030f 	and.w	r3, r3, #15
 8007698:	2101      	movs	r1, #1
 800769a:	fa01 f303 	lsl.w	r3, r1, r3
 800769e:	b29b      	uxth	r3, r3
 80076a0:	43db      	mvns	r3, r3
 80076a2:	68f9      	ldr	r1, [r7, #12]
 80076a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076a8:	4013      	ands	r3, r2
 80076aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b2:	69da      	ldr	r2, [r3, #28]
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	f003 030f 	and.w	r3, r3, #15
 80076bc:	2101      	movs	r1, #1
 80076be:	fa01 f303 	lsl.w	r3, r1, r3
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	43db      	mvns	r3, r3
 80076c6:	68f9      	ldr	r1, [r7, #12]
 80076c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076cc:	4013      	ands	r3, r2
 80076ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	015a      	lsls	r2, r3, #5
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	0159      	lsls	r1, r3, #5
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	440b      	add	r3, r1
 80076e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ea:	4619      	mov	r1, r3
 80076ec:	4b35      	ldr	r3, [pc, #212]	; (80077c4 <USB_DeactivateEndpoint+0x1b0>)
 80076ee:	4013      	ands	r3, r2
 80076f0:	600b      	str	r3, [r1, #0]
 80076f2:	e060      	b.n	80077b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007706:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800770a:	d11f      	bne.n	800774c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	4413      	add	r3, r2
 8007714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	0151      	lsls	r1, r2, #5
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	440a      	add	r2, r1
 8007722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007726:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800772a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4413      	add	r3, r2
 8007734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	0151      	lsls	r1, r2, #5
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	440a      	add	r2, r1
 8007742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007746:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800774a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007752:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	f003 030f 	and.w	r3, r3, #15
 800775c:	2101      	movs	r1, #1
 800775e:	fa01 f303 	lsl.w	r3, r1, r3
 8007762:	041b      	lsls	r3, r3, #16
 8007764:	43db      	mvns	r3, r3
 8007766:	68f9      	ldr	r1, [r7, #12]
 8007768:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800776c:	4013      	ands	r3, r2
 800776e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007776:	69da      	ldr	r2, [r3, #28]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	f003 030f 	and.w	r3, r3, #15
 8007780:	2101      	movs	r1, #1
 8007782:	fa01 f303 	lsl.w	r3, r1, r3
 8007786:	041b      	lsls	r3, r3, #16
 8007788:	43db      	mvns	r3, r3
 800778a:	68f9      	ldr	r1, [r7, #12]
 800778c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007790:	4013      	ands	r3, r2
 8007792:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	4413      	add	r3, r2
 800779c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	0159      	lsls	r1, r3, #5
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	440b      	add	r3, r1
 80077aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ae:	4619      	mov	r1, r3
 80077b0:	4b05      	ldr	r3, [pc, #20]	; (80077c8 <USB_DeactivateEndpoint+0x1b4>)
 80077b2:	4013      	ands	r3, r2
 80077b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	ec337800 	.word	0xec337800
 80077c8:	eff37800 	.word	0xeff37800

080077cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b08a      	sub	sp, #40	; 0x28
 80077d0:	af02      	add	r7, sp, #8
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	4613      	mov	r3, r2
 80077d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	785b      	ldrb	r3, [r3, #1]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	f040 815c 	bne.w	8007aa6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d132      	bne.n	800785c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	015a      	lsls	r2, r3, #5
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	4413      	add	r3, r2
 80077fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	0151      	lsls	r1, r2, #5
 8007808:	69fa      	ldr	r2, [r7, #28]
 800780a:	440a      	add	r2, r1
 800780c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007810:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007814:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007818:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	015a      	lsls	r2, r3, #5
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	4413      	add	r3, r2
 8007822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	0151      	lsls	r1, r2, #5
 800782c:	69fa      	ldr	r2, [r7, #28]
 800782e:	440a      	add	r2, r1
 8007830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007834:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007838:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	015a      	lsls	r2, r3, #5
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	4413      	add	r3, r2
 8007842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	69ba      	ldr	r2, [r7, #24]
 800784a:	0151      	lsls	r1, r2, #5
 800784c:	69fa      	ldr	r2, [r7, #28]
 800784e:	440a      	add	r2, r1
 8007850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007854:	0cdb      	lsrs	r3, r3, #19
 8007856:	04db      	lsls	r3, r3, #19
 8007858:	6113      	str	r3, [r2, #16]
 800785a:	e074      	b.n	8007946 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	015a      	lsls	r2, r3, #5
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	4413      	add	r3, r2
 8007864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	69ba      	ldr	r2, [r7, #24]
 800786c:	0151      	lsls	r1, r2, #5
 800786e:	69fa      	ldr	r2, [r7, #28]
 8007870:	440a      	add	r2, r1
 8007872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007876:	0cdb      	lsrs	r3, r3, #19
 8007878:	04db      	lsls	r3, r3, #19
 800787a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	015a      	lsls	r2, r3, #5
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	4413      	add	r3, r2
 8007884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	69ba      	ldr	r2, [r7, #24]
 800788c:	0151      	lsls	r1, r2, #5
 800788e:	69fa      	ldr	r2, [r7, #28]
 8007890:	440a      	add	r2, r1
 8007892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007896:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800789a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800789e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ac:	691a      	ldr	r2, [r3, #16]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	6959      	ldr	r1, [r3, #20]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	440b      	add	r3, r1
 80078b8:	1e59      	subs	r1, r3, #1
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	fbb1 f3f3 	udiv	r3, r1, r3
 80078c2:	04d9      	lsls	r1, r3, #19
 80078c4:	4b9d      	ldr	r3, [pc, #628]	; (8007b3c <USB_EPStartXfer+0x370>)
 80078c6:	400b      	ands	r3, r1
 80078c8:	69b9      	ldr	r1, [r7, #24]
 80078ca:	0148      	lsls	r0, r1, #5
 80078cc:	69f9      	ldr	r1, [r7, #28]
 80078ce:	4401      	add	r1, r0
 80078d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80078d4:	4313      	orrs	r3, r2
 80078d6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e4:	691a      	ldr	r2, [r3, #16]
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078ee:	69b9      	ldr	r1, [r7, #24]
 80078f0:	0148      	lsls	r0, r1, #5
 80078f2:	69f9      	ldr	r1, [r7, #28]
 80078f4:	4401      	add	r1, r0
 80078f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80078fa:	4313      	orrs	r3, r2
 80078fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	78db      	ldrb	r3, [r3, #3]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d11f      	bne.n	8007946 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	015a      	lsls	r2, r3, #5
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	4413      	add	r3, r2
 800790e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	0151      	lsls	r1, r2, #5
 8007918:	69fa      	ldr	r2, [r7, #28]
 800791a:	440a      	add	r2, r1
 800791c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007920:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007924:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	015a      	lsls	r2, r3, #5
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	4413      	add	r3, r2
 800792e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	69ba      	ldr	r2, [r7, #24]
 8007936:	0151      	lsls	r1, r2, #5
 8007938:	69fa      	ldr	r2, [r7, #28]
 800793a:	440a      	add	r2, r1
 800793c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007940:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007944:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007946:	79fb      	ldrb	r3, [r7, #7]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d14b      	bne.n	80079e4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d009      	beq.n	8007968 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	4413      	add	r3, r2
 800795c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007960:	461a      	mov	r2, r3
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	78db      	ldrb	r3, [r3, #3]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d128      	bne.n	80079c2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800797c:	2b00      	cmp	r3, #0
 800797e:	d110      	bne.n	80079a2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	015a      	lsls	r2, r3, #5
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	4413      	add	r3, r2
 8007988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	0151      	lsls	r1, r2, #5
 8007992:	69fa      	ldr	r2, [r7, #28]
 8007994:	440a      	add	r2, r1
 8007996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800799a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800799e:	6013      	str	r3, [r2, #0]
 80079a0:	e00f      	b.n	80079c2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	015a      	lsls	r2, r3, #5
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	4413      	add	r3, r2
 80079aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	69ba      	ldr	r2, [r7, #24]
 80079b2:	0151      	lsls	r1, r2, #5
 80079b4:	69fa      	ldr	r2, [r7, #28]
 80079b6:	440a      	add	r2, r1
 80079b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079c0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	015a      	lsls	r2, r3, #5
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	4413      	add	r3, r2
 80079ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	69ba      	ldr	r2, [r7, #24]
 80079d2:	0151      	lsls	r1, r2, #5
 80079d4:	69fa      	ldr	r2, [r7, #28]
 80079d6:	440a      	add	r2, r1
 80079d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079e0:	6013      	str	r3, [r2, #0]
 80079e2:	e12f      	b.n	8007c44 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	69ba      	ldr	r2, [r7, #24]
 80079f4:	0151      	lsls	r1, r2, #5
 80079f6:	69fa      	ldr	r2, [r7, #28]
 80079f8:	440a      	add	r2, r1
 80079fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a02:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	78db      	ldrb	r3, [r3, #3]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d015      	beq.n	8007a38 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	695b      	ldr	r3, [r3, #20]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f000 8117 	beq.w	8007c44 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	f003 030f 	and.w	r3, r3, #15
 8007a26:	2101      	movs	r1, #1
 8007a28:	fa01 f303 	lsl.w	r3, r1, r3
 8007a2c:	69f9      	ldr	r1, [r7, #28]
 8007a2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a32:	4313      	orrs	r3, r2
 8007a34:	634b      	str	r3, [r1, #52]	; 0x34
 8007a36:	e105      	b.n	8007c44 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d110      	bne.n	8007a6a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	0151      	lsls	r1, r2, #5
 8007a5a:	69fa      	ldr	r2, [r7, #28]
 8007a5c:	440a      	add	r2, r1
 8007a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a66:	6013      	str	r3, [r2, #0]
 8007a68:	e00f      	b.n	8007a8a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	015a      	lsls	r2, r3, #5
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	4413      	add	r3, r2
 8007a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	69ba      	ldr	r2, [r7, #24]
 8007a7a:	0151      	lsls	r1, r2, #5
 8007a7c:	69fa      	ldr	r2, [r7, #28]
 8007a7e:	440a      	add	r2, r1
 8007a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a88:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	68d9      	ldr	r1, [r3, #12]
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	781a      	ldrb	r2, [r3, #0]
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	b298      	uxth	r0, r3
 8007a98:	79fb      	ldrb	r3, [r7, #7]
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f000 fa2b 	bl	8007efa <USB_WritePacket>
 8007aa4:	e0ce      	b.n	8007c44 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	015a      	lsls	r2, r3, #5
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	4413      	add	r3, r2
 8007aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	69ba      	ldr	r2, [r7, #24]
 8007ab6:	0151      	lsls	r1, r2, #5
 8007ab8:	69fa      	ldr	r2, [r7, #28]
 8007aba:	440a      	add	r2, r1
 8007abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ac0:	0cdb      	lsrs	r3, r3, #19
 8007ac2:	04db      	lsls	r3, r3, #19
 8007ac4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	015a      	lsls	r2, r3, #5
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	0151      	lsls	r1, r2, #5
 8007ad8:	69fa      	ldr	r2, [r7, #28]
 8007ada:	440a      	add	r2, r1
 8007adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ae0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ae4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ae8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d126      	bne.n	8007b40 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	015a      	lsls	r2, r3, #5
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	4413      	add	r3, r2
 8007afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007afe:	691a      	ldr	r2, [r3, #16]
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b08:	69b9      	ldr	r1, [r7, #24]
 8007b0a:	0148      	lsls	r0, r1, #5
 8007b0c:	69f9      	ldr	r1, [r7, #28]
 8007b0e:	4401      	add	r1, r0
 8007b10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b14:	4313      	orrs	r3, r2
 8007b16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	015a      	lsls	r2, r3, #5
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	4413      	add	r3, r2
 8007b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	69ba      	ldr	r2, [r7, #24]
 8007b28:	0151      	lsls	r1, r2, #5
 8007b2a:	69fa      	ldr	r2, [r7, #28]
 8007b2c:	440a      	add	r2, r1
 8007b2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b36:	6113      	str	r3, [r2, #16]
 8007b38:	e036      	b.n	8007ba8 <USB_EPStartXfer+0x3dc>
 8007b3a:	bf00      	nop
 8007b3c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	695a      	ldr	r2, [r3, #20]
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	4413      	add	r3, r2
 8007b4a:	1e5a      	subs	r2, r3, #1
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b54:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	015a      	lsls	r2, r3, #5
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b62:	691a      	ldr	r2, [r3, #16]
 8007b64:	8afb      	ldrh	r3, [r7, #22]
 8007b66:	04d9      	lsls	r1, r3, #19
 8007b68:	4b39      	ldr	r3, [pc, #228]	; (8007c50 <USB_EPStartXfer+0x484>)
 8007b6a:	400b      	ands	r3, r1
 8007b6c:	69b9      	ldr	r1, [r7, #24]
 8007b6e:	0148      	lsls	r0, r1, #5
 8007b70:	69f9      	ldr	r1, [r7, #28]
 8007b72:	4401      	add	r1, r0
 8007b74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	015a      	lsls	r2, r3, #5
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	4413      	add	r3, r2
 8007b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b88:	691a      	ldr	r2, [r3, #16]
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	8af9      	ldrh	r1, [r7, #22]
 8007b90:	fb01 f303 	mul.w	r3, r1, r3
 8007b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b98:	69b9      	ldr	r1, [r7, #24]
 8007b9a:	0148      	lsls	r0, r1, #5
 8007b9c:	69f9      	ldr	r1, [r7, #28]
 8007b9e:	4401      	add	r1, r0
 8007ba0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007ba8:	79fb      	ldrb	r3, [r7, #7]
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d10d      	bne.n	8007bca <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d009      	beq.n	8007bca <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	68d9      	ldr	r1, [r3, #12]
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	015a      	lsls	r2, r3, #5
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc6:	460a      	mov	r2, r1
 8007bc8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	78db      	ldrb	r3, [r3, #3]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d128      	bne.n	8007c24 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d110      	bne.n	8007c04 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	015a      	lsls	r2, r3, #5
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	69ba      	ldr	r2, [r7, #24]
 8007bf2:	0151      	lsls	r1, r2, #5
 8007bf4:	69fa      	ldr	r2, [r7, #28]
 8007bf6:	440a      	add	r2, r1
 8007bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c00:	6013      	str	r3, [r2, #0]
 8007c02:	e00f      	b.n	8007c24 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	015a      	lsls	r2, r3, #5
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	69ba      	ldr	r2, [r7, #24]
 8007c14:	0151      	lsls	r1, r2, #5
 8007c16:	69fa      	ldr	r2, [r7, #28]
 8007c18:	440a      	add	r2, r1
 8007c1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c22:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	015a      	lsls	r2, r3, #5
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	69ba      	ldr	r2, [r7, #24]
 8007c34:	0151      	lsls	r1, r2, #5
 8007c36:	69fa      	ldr	r2, [r7, #28]
 8007c38:	440a      	add	r2, r1
 8007c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3720      	adds	r7, #32
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	1ff80000 	.word	0x1ff80000

08007c54 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b087      	sub	sp, #28
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	785b      	ldrb	r3, [r3, #1]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	f040 80cd 	bne.w	8007e10 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d132      	bne.n	8007ce4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	015a      	lsls	r2, r3, #5
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	4413      	add	r3, r2
 8007c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	0151      	lsls	r1, r2, #5
 8007c90:	697a      	ldr	r2, [r7, #20]
 8007c92:	440a      	add	r2, r1
 8007c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ca0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	015a      	lsls	r2, r3, #5
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	4413      	add	r3, r2
 8007caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	0151      	lsls	r1, r2, #5
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	440a      	add	r2, r1
 8007cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	015a      	lsls	r2, r3, #5
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	4413      	add	r3, r2
 8007cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	0151      	lsls	r1, r2, #5
 8007cd4:	697a      	ldr	r2, [r7, #20]
 8007cd6:	440a      	add	r2, r1
 8007cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cdc:	0cdb      	lsrs	r3, r3, #19
 8007cde:	04db      	lsls	r3, r3, #19
 8007ce0:	6113      	str	r3, [r2, #16]
 8007ce2:	e04e      	b.n	8007d82 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	015a      	lsls	r2, r3, #5
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	4413      	add	r3, r2
 8007cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	0151      	lsls	r1, r2, #5
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	440a      	add	r2, r1
 8007cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cfe:	0cdb      	lsrs	r3, r3, #19
 8007d00:	04db      	lsls	r3, r3, #19
 8007d02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	015a      	lsls	r2, r3, #5
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	0151      	lsls	r1, r2, #5
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	440a      	add	r2, r1
 8007d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d26:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	695a      	ldr	r2, [r3, #20]
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d903      	bls.n	8007d3c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	689a      	ldr	r2, [r3, #8]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	015a      	lsls	r2, r3, #5
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	0151      	lsls	r1, r2, #5
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	440a      	add	r2, r1
 8007d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d68:	691a      	ldr	r2, [r3, #16]
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d72:	6939      	ldr	r1, [r7, #16]
 8007d74:	0148      	lsls	r0, r1, #5
 8007d76:	6979      	ldr	r1, [r7, #20]
 8007d78:	4401      	add	r1, r0
 8007d7a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007d82:	79fb      	ldrb	r3, [r7, #7]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d11e      	bne.n	8007dc6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d009      	beq.n	8007da4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	015a      	lsls	r2, r3, #5
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	015a      	lsls	r2, r3, #5
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	0151      	lsls	r1, r2, #5
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	440a      	add	r2, r1
 8007dba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007dc2:	6013      	str	r3, [r2, #0]
 8007dc4:	e092      	b.n	8007eec <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	015a      	lsls	r2, r3, #5
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	4413      	add	r3, r2
 8007dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	0151      	lsls	r1, r2, #5
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	440a      	add	r2, r1
 8007ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007de0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007de4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	695b      	ldr	r3, [r3, #20]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d07e      	beq.n	8007eec <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	f003 030f 	and.w	r3, r3, #15
 8007dfe:	2101      	movs	r1, #1
 8007e00:	fa01 f303 	lsl.w	r3, r1, r3
 8007e04:	6979      	ldr	r1, [r7, #20]
 8007e06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	634b      	str	r3, [r1, #52]	; 0x34
 8007e0e:	e06d      	b.n	8007eec <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	015a      	lsls	r2, r3, #5
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	4413      	add	r3, r2
 8007e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	0151      	lsls	r1, r2, #5
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	440a      	add	r2, r1
 8007e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e2a:	0cdb      	lsrs	r3, r3, #19
 8007e2c:	04db      	lsls	r3, r3, #19
 8007e2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	015a      	lsls	r2, r3, #5
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	4413      	add	r3, r2
 8007e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	693a      	ldr	r2, [r7, #16]
 8007e40:	0151      	lsls	r1, r2, #5
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	440a      	add	r2, r1
 8007e46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e52:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d003      	beq.n	8007e64 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	689a      	ldr	r2, [r3, #8]
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	015a      	lsls	r2, r3, #5
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	0151      	lsls	r1, r2, #5
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	440a      	add	r2, r1
 8007e7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	015a      	lsls	r2, r3, #5
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e90:	691a      	ldr	r2, [r3, #16]
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e9a:	6939      	ldr	r1, [r7, #16]
 8007e9c:	0148      	lsls	r0, r1, #5
 8007e9e:	6979      	ldr	r1, [r7, #20]
 8007ea0:	4401      	add	r1, r0
 8007ea2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007eaa:	79fb      	ldrb	r3, [r7, #7]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d10d      	bne.n	8007ecc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d009      	beq.n	8007ecc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	68d9      	ldr	r1, [r3, #12]
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	015a      	lsls	r2, r3, #5
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec8:	460a      	mov	r2, r1
 8007eca:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	015a      	lsls	r2, r3, #5
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	0151      	lsls	r1, r2, #5
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	440a      	add	r2, r1
 8007ee2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ee6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007eea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	371c      	adds	r7, #28
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007efa:	b480      	push	{r7}
 8007efc:	b089      	sub	sp, #36	; 0x24
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	60f8      	str	r0, [r7, #12]
 8007f02:	60b9      	str	r1, [r7, #8]
 8007f04:	4611      	mov	r1, r2
 8007f06:	461a      	mov	r2, r3
 8007f08:	460b      	mov	r3, r1
 8007f0a:	71fb      	strb	r3, [r7, #7]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007f18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d11a      	bne.n	8007f56 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007f20:	88bb      	ldrh	r3, [r7, #4]
 8007f22:	3303      	adds	r3, #3
 8007f24:	089b      	lsrs	r3, r3, #2
 8007f26:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007f28:	2300      	movs	r3, #0
 8007f2a:	61bb      	str	r3, [r7, #24]
 8007f2c:	e00f      	b.n	8007f4e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007f2e:	79fb      	ldrb	r3, [r7, #7]
 8007f30:	031a      	lsls	r2, r3, #12
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	4413      	add	r3, r2
 8007f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	3304      	adds	r3, #4
 8007f46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	61bb      	str	r3, [r7, #24]
 8007f4e:	69ba      	ldr	r2, [r7, #24]
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d3eb      	bcc.n	8007f2e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3724      	adds	r7, #36	; 0x24
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b089      	sub	sp, #36	; 0x24
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007f7a:	88fb      	ldrh	r3, [r7, #6]
 8007f7c:	3303      	adds	r3, #3
 8007f7e:	089b      	lsrs	r3, r3, #2
 8007f80:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007f82:	2300      	movs	r3, #0
 8007f84:	61bb      	str	r3, [r7, #24]
 8007f86:	e00b      	b.n	8007fa0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	3304      	adds	r3, #4
 8007f98:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	61bb      	str	r3, [r7, #24]
 8007fa0:	69ba      	ldr	r2, [r7, #24]
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d3ef      	bcc.n	8007f88 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007fa8:	69fb      	ldr	r3, [r7, #28]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3724      	adds	r7, #36	; 0x24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr

08007fb6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b085      	sub	sp, #20
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	785b      	ldrb	r3, [r3, #1]
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d12c      	bne.n	800802c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	015a      	lsls	r2, r3, #5
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	4413      	add	r3, r2
 8007fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	db12      	blt.n	800800a <USB_EPSetStall+0x54>
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00f      	beq.n	800800a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	015a      	lsls	r2, r3, #5
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	0151      	lsls	r1, r2, #5
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	440a      	add	r2, r1
 8008000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008004:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008008:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	015a      	lsls	r2, r3, #5
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	4413      	add	r3, r2
 8008012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	0151      	lsls	r1, r2, #5
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	440a      	add	r2, r1
 8008020:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008024:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008028:	6013      	str	r3, [r2, #0]
 800802a:	e02b      	b.n	8008084 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	015a      	lsls	r2, r3, #5
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	4413      	add	r3, r2
 8008034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	db12      	blt.n	8008064 <USB_EPSetStall+0xae>
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00f      	beq.n	8008064 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	015a      	lsls	r2, r3, #5
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	4413      	add	r3, r2
 800804c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	0151      	lsls	r1, r2, #5
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	440a      	add	r2, r1
 800805a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800805e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008062:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	015a      	lsls	r2, r3, #5
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	4413      	add	r3, r2
 800806c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	0151      	lsls	r1, r2, #5
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	440a      	add	r2, r1
 800807a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800807e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008082:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008092:	b480      	push	{r7}
 8008094:	b085      	sub	sp, #20
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	785b      	ldrb	r3, [r3, #1]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d128      	bne.n	8008100 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	015a      	lsls	r2, r3, #5
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	4413      	add	r3, r2
 80080b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	0151      	lsls	r1, r2, #5
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	440a      	add	r2, r1
 80080c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80080cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	78db      	ldrb	r3, [r3, #3]
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d003      	beq.n	80080de <USB_EPClearStall+0x4c>
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	78db      	ldrb	r3, [r3, #3]
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d138      	bne.n	8008150 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	015a      	lsls	r2, r3, #5
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	4413      	add	r3, r2
 80080e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	0151      	lsls	r1, r2, #5
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	440a      	add	r2, r1
 80080f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080fc:	6013      	str	r3, [r2, #0]
 80080fe:	e027      	b.n	8008150 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	015a      	lsls	r2, r3, #5
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	4413      	add	r3, r2
 8008108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	0151      	lsls	r1, r2, #5
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	440a      	add	r2, r1
 8008116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800811a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800811e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	78db      	ldrb	r3, [r3, #3]
 8008124:	2b03      	cmp	r3, #3
 8008126:	d003      	beq.n	8008130 <USB_EPClearStall+0x9e>
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	78db      	ldrb	r3, [r3, #3]
 800812c:	2b02      	cmp	r3, #2
 800812e:	d10f      	bne.n	8008150 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	015a      	lsls	r2, r3, #5
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	4413      	add	r3, r2
 8008138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	0151      	lsls	r1, r2, #5
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	440a      	add	r2, r1
 8008146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800814a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800814e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800815e:	b480      	push	{r7}
 8008160:	b085      	sub	sp, #20
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	460b      	mov	r3, r1
 8008168:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800817c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008180:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	78fb      	ldrb	r3, [r7, #3]
 800818c:	011b      	lsls	r3, r3, #4
 800818e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008192:	68f9      	ldr	r1, [r7, #12]
 8008194:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008198:	4313      	orrs	r3, r2
 800819a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3714      	adds	r7, #20
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b085      	sub	sp, #20
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081c4:	f023 0303 	bic.w	r3, r3, #3
 80081c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081d8:	f023 0302 	bic.w	r3, r3, #2
 80081dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008206:	f023 0303 	bic.w	r3, r3, #3
 800820a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800821a:	f043 0302 	orr.w	r3, r3, #2
 800821e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3714      	adds	r7, #20
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr

0800822e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800822e:	b480      	push	{r7}
 8008230:	b085      	sub	sp, #20
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	699b      	ldr	r3, [r3, #24]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	4013      	ands	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008246:	68fb      	ldr	r3, [r7, #12]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3714      	adds	r7, #20
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	4013      	ands	r3, r2
 8008276:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	0c1b      	lsrs	r3, r3, #16
}
 800827c:	4618      	mov	r0, r3
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082a4:	69db      	ldr	r3, [r3, #28]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	4013      	ands	r3, r2
 80082aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	b29b      	uxth	r3, r3
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	460b      	mov	r3, r1
 80082c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80082cc:	78fb      	ldrb	r3, [r7, #3]
 80082ce:	015a      	lsls	r2, r3, #5
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	4413      	add	r3, r2
 80082d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	4013      	ands	r3, r2
 80082e8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80082ea:	68bb      	ldr	r3, [r7, #8]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3714      	adds	r7, #20
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b087      	sub	sp, #28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	460b      	mov	r3, r1
 8008302:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800831a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800831c:	78fb      	ldrb	r3, [r7, #3]
 800831e:	f003 030f 	and.w	r3, r3, #15
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	fa22 f303 	lsr.w	r3, r2, r3
 8008328:	01db      	lsls	r3, r3, #7
 800832a:	b2db      	uxtb	r3, r3
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	4313      	orrs	r3, r2
 8008330:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008332:	78fb      	ldrb	r3, [r7, #3]
 8008334:	015a      	lsls	r2, r3, #5
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	4413      	add	r3, r2
 800833a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	693a      	ldr	r2, [r7, #16]
 8008342:	4013      	ands	r3, r2
 8008344:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008346:	68bb      	ldr	r3, [r7, #8]
}
 8008348:	4618      	mov	r0, r3
 800834a:	371c      	adds	r7, #28
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	695b      	ldr	r3, [r3, #20]
 8008360:	f003 0301 	and.w	r3, r3, #1
}
 8008364:	4618      	mov	r0, r3
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800838a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800838e:	f023 0307 	bic.w	r3, r3, #7
 8008392:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3714      	adds	r7, #20
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
	...

080083b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b087      	sub	sp, #28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	460b      	mov	r3, r1
 80083c2:	607a      	str	r2, [r7, #4]
 80083c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	333c      	adds	r3, #60	; 0x3c
 80083ce:	3304      	adds	r3, #4
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	4a26      	ldr	r2, [pc, #152]	; (8008470 <USB_EP0_OutStart+0xb8>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d90a      	bls.n	80083f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083ec:	d101      	bne.n	80083f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80083ee:	2300      	movs	r3, #0
 80083f0:	e037      	b.n	8008462 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f8:	461a      	mov	r2, r3
 80083fa:	2300      	movs	r3, #0
 80083fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800840c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008410:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008420:	f043 0318 	orr.w	r3, r3, #24
 8008424:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	697a      	ldr	r2, [r7, #20]
 8008430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008434:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008438:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800843a:	7afb      	ldrb	r3, [r7, #11]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d10f      	bne.n	8008460 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008446:	461a      	mov	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	697a      	ldr	r2, [r7, #20]
 8008456:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800845a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800845e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	371c      	adds	r7, #28
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	4f54300a 	.word	0x4f54300a

08008474 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800847c:	2300      	movs	r3, #0
 800847e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	3301      	adds	r3, #1
 8008484:	60fb      	str	r3, [r7, #12]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	4a13      	ldr	r2, [pc, #76]	; (80084d8 <USB_CoreReset+0x64>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d901      	bls.n	8008492 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800848e:	2303      	movs	r3, #3
 8008490:	e01b      	b.n	80084ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	691b      	ldr	r3, [r3, #16]
 8008496:	2b00      	cmp	r3, #0
 8008498:	daf2      	bge.n	8008480 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800849a:	2300      	movs	r3, #0
 800849c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	f043 0201 	orr.w	r2, r3, #1
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	3301      	adds	r3, #1
 80084ae:	60fb      	str	r3, [r7, #12]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	4a09      	ldr	r2, [pc, #36]	; (80084d8 <USB_CoreReset+0x64>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d901      	bls.n	80084bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80084b8:	2303      	movs	r3, #3
 80084ba:	e006      	b.n	80084ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	f003 0301 	and.w	r3, r3, #1
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d0f0      	beq.n	80084aa <USB_CoreReset+0x36>

  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	00030d40 	.word	0x00030d40

080084dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	460b      	mov	r3, r1
 80084e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80084e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80084ec:	f005 ff42 	bl	800e374 <malloc>
 80084f0:	4603      	mov	r3, r0
 80084f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d105      	bne.n	8008506 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008502:	2302      	movs	r3, #2
 8008504:	e066      	b.n	80085d4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	7c1b      	ldrb	r3, [r3, #16]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d119      	bne.n	800854a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800851a:	2202      	movs	r2, #2
 800851c:	2181      	movs	r1, #129	; 0x81
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f005 fdaf 	bl	800e082 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800852a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800852e:	2202      	movs	r2, #2
 8008530:	2101      	movs	r1, #1
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f005 fda5 	bl	800e082 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2210      	movs	r2, #16
 8008544:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008548:	e016      	b.n	8008578 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800854a:	2340      	movs	r3, #64	; 0x40
 800854c:	2202      	movs	r2, #2
 800854e:	2181      	movs	r1, #129	; 0x81
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f005 fd96 	bl	800e082 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800855c:	2340      	movs	r3, #64	; 0x40
 800855e:	2202      	movs	r2, #2
 8008560:	2101      	movs	r1, #1
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f005 fd8d 	bl	800e082 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2210      	movs	r2, #16
 8008574:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008578:	2308      	movs	r3, #8
 800857a:	2203      	movs	r2, #3
 800857c:	2182      	movs	r1, #130	; 0x82
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f005 fd7f 	bl	800e082 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	7c1b      	ldrb	r3, [r3, #16]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d109      	bne.n	80085c2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085b8:	2101      	movs	r1, #1
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f005 fe50 	bl	800e260 <USBD_LL_PrepareReceive>
 80085c0:	e007      	b.n	80085d2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085c8:	2340      	movs	r3, #64	; 0x40
 80085ca:	2101      	movs	r1, #1
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f005 fe47 	bl	800e260 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	460b      	mov	r3, r1
 80085e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80085e8:	2300      	movs	r3, #0
 80085ea:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80085ec:	2181      	movs	r1, #129	; 0x81
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f005 fd6d 	bl	800e0ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80085fa:	2101      	movs	r1, #1
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f005 fd66 	bl	800e0ce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800860a:	2182      	movs	r1, #130	; 0x82
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f005 fd5e 	bl	800e0ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00e      	beq.n	800864a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800863c:	4618      	mov	r0, r3
 800863e:	f005 fea1 	bl	800e384 <free>
    pdev->pClassData = NULL;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800864a:	7bfb      	ldrb	r3, [r7, #15]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008664:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008666:	2300      	movs	r3, #0
 8008668:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800866a:	2300      	movs	r3, #0
 800866c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800866e:	2300      	movs	r3, #0
 8008670:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800867a:	2b00      	cmp	r3, #0
 800867c:	d03a      	beq.n	80086f4 <USBD_CDC_Setup+0xa0>
 800867e:	2b20      	cmp	r3, #32
 8008680:	f040 8097 	bne.w	80087b2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	88db      	ldrh	r3, [r3, #6]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d029      	beq.n	80086e0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	b25b      	sxtb	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	da11      	bge.n	80086ba <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80086a2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	88d2      	ldrh	r2, [r2, #6]
 80086a8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80086aa:	6939      	ldr	r1, [r7, #16]
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	88db      	ldrh	r3, [r3, #6]
 80086b0:	461a      	mov	r2, r3
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f001 fa6d 	bl	8009b92 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80086b8:	e082      	b.n	80087c0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	785a      	ldrb	r2, [r3, #1]
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	88db      	ldrh	r3, [r3, #6]
 80086c8:	b2da      	uxtb	r2, r3
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80086d0:	6939      	ldr	r1, [r7, #16]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	88db      	ldrh	r3, [r3, #6]
 80086d6:	461a      	mov	r2, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f001 fa86 	bl	8009bea <USBD_CtlPrepareRx>
    break;
 80086de:	e06f      	b.n	80087c0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	683a      	ldr	r2, [r7, #0]
 80086ea:	7850      	ldrb	r0, [r2, #1]
 80086ec:	2200      	movs	r2, #0
 80086ee:	6839      	ldr	r1, [r7, #0]
 80086f0:	4798      	blx	r3
    break;
 80086f2:	e065      	b.n	80087c0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	785b      	ldrb	r3, [r3, #1]
 80086f8:	2b0b      	cmp	r3, #11
 80086fa:	d84f      	bhi.n	800879c <USBD_CDC_Setup+0x148>
 80086fc:	a201      	add	r2, pc, #4	; (adr r2, 8008704 <USBD_CDC_Setup+0xb0>)
 80086fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008702:	bf00      	nop
 8008704:	08008735 	.word	0x08008735
 8008708:	080087ab 	.word	0x080087ab
 800870c:	0800879d 	.word	0x0800879d
 8008710:	0800879d 	.word	0x0800879d
 8008714:	0800879d 	.word	0x0800879d
 8008718:	0800879d 	.word	0x0800879d
 800871c:	0800879d 	.word	0x0800879d
 8008720:	0800879d 	.word	0x0800879d
 8008724:	0800879d 	.word	0x0800879d
 8008728:	0800879d 	.word	0x0800879d
 800872c:	0800875d 	.word	0x0800875d
 8008730:	08008785 	.word	0x08008785
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800873a:	2b03      	cmp	r3, #3
 800873c:	d107      	bne.n	800874e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800873e:	f107 030c 	add.w	r3, r7, #12
 8008742:	2202      	movs	r2, #2
 8008744:	4619      	mov	r1, r3
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f001 fa23 	bl	8009b92 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800874c:	e030      	b.n	80087b0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f001 f9ad 	bl	8009ab0 <USBD_CtlError>
        ret = USBD_FAIL;
 8008756:	2303      	movs	r3, #3
 8008758:	75fb      	strb	r3, [r7, #23]
      break;
 800875a:	e029      	b.n	80087b0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008762:	2b03      	cmp	r3, #3
 8008764:	d107      	bne.n	8008776 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008766:	f107 030f 	add.w	r3, r7, #15
 800876a:	2201      	movs	r2, #1
 800876c:	4619      	mov	r1, r3
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f001 fa0f 	bl	8009b92 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008774:	e01c      	b.n	80087b0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008776:	6839      	ldr	r1, [r7, #0]
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f001 f999 	bl	8009ab0 <USBD_CtlError>
        ret = USBD_FAIL;
 800877e:	2303      	movs	r3, #3
 8008780:	75fb      	strb	r3, [r7, #23]
      break;
 8008782:	e015      	b.n	80087b0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800878a:	2b03      	cmp	r3, #3
 800878c:	d00f      	beq.n	80087ae <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f001 f98d 	bl	8009ab0 <USBD_CtlError>
        ret = USBD_FAIL;
 8008796:	2303      	movs	r3, #3
 8008798:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800879a:	e008      	b.n	80087ae <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800879c:	6839      	ldr	r1, [r7, #0]
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f001 f986 	bl	8009ab0 <USBD_CtlError>
      ret = USBD_FAIL;
 80087a4:	2303      	movs	r3, #3
 80087a6:	75fb      	strb	r3, [r7, #23]
      break;
 80087a8:	e002      	b.n	80087b0 <USBD_CDC_Setup+0x15c>
      break;
 80087aa:	bf00      	nop
 80087ac:	e008      	b.n	80087c0 <USBD_CDC_Setup+0x16c>
      break;
 80087ae:	bf00      	nop
    }
    break;
 80087b0:	e006      	b.n	80087c0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f001 f97b 	bl	8009ab0 <USBD_CtlError>
    ret = USBD_FAIL;
 80087ba:	2303      	movs	r3, #3
 80087bc:	75fb      	strb	r3, [r7, #23]
    break;
 80087be:	bf00      	nop
  }

  return (uint8_t)ret;
 80087c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3718      	adds	r7, #24
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop

080087cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	460b      	mov	r3, r1
 80087d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d101      	bne.n	80087ee <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e049      	b.n	8008882 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80087f6:	78fa      	ldrb	r2, [r7, #3]
 80087f8:	6879      	ldr	r1, [r7, #4]
 80087fa:	4613      	mov	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	440b      	add	r3, r1
 8008804:	3318      	adds	r3, #24
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d029      	beq.n	8008860 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800880c:	78fa      	ldrb	r2, [r7, #3]
 800880e:	6879      	ldr	r1, [r7, #4]
 8008810:	4613      	mov	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	440b      	add	r3, r1
 800881a:	3318      	adds	r3, #24
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	78f9      	ldrb	r1, [r7, #3]
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	460b      	mov	r3, r1
 8008824:	00db      	lsls	r3, r3, #3
 8008826:	1a5b      	subs	r3, r3, r1
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	4403      	add	r3, r0
 800882c:	3344      	adds	r3, #68	; 0x44
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	fbb2 f1f3 	udiv	r1, r2, r3
 8008834:	fb03 f301 	mul.w	r3, r3, r1
 8008838:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800883a:	2b00      	cmp	r3, #0
 800883c:	d110      	bne.n	8008860 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800883e:	78fa      	ldrb	r2, [r7, #3]
 8008840:	6879      	ldr	r1, [r7, #4]
 8008842:	4613      	mov	r3, r2
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	4413      	add	r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	440b      	add	r3, r1
 800884c:	3318      	adds	r3, #24
 800884e:	2200      	movs	r2, #0
 8008850:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008852:	78f9      	ldrb	r1, [r7, #3]
 8008854:	2300      	movs	r3, #0
 8008856:	2200      	movs	r2, #0
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f005 fce0 	bl	800e21e <USBD_LL_Transmit>
 800885e:	e00f      	b.n	8008880 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	2200      	movs	r2, #0
 8008864:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008876:	68ba      	ldr	r2, [r7, #8]
 8008878:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800887c:	78fa      	ldrb	r2, [r7, #3]
 800887e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b084      	sub	sp, #16
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	460b      	mov	r3, r1
 8008894:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800889c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d101      	bne.n	80088ac <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80088a8:	2303      	movs	r3, #3
 80088aa:	e015      	b.n	80088d8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80088ac:	78fb      	ldrb	r3, [r7, #3]
 80088ae:	4619      	mov	r1, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f005 fcf6 	bl	800e2a2 <USBD_LL_GetRxDataSize>
 80088b6:	4602      	mov	r2, r0
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80088d2:	4611      	mov	r1, r2
 80088d4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088ee:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d015      	beq.n	8008926 <USBD_CDC_EP0_RxReady+0x46>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008900:	2bff      	cmp	r3, #255	; 0xff
 8008902:	d010      	beq.n	8008926 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008912:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800891a:	b292      	uxth	r2, r2
 800891c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	22ff      	movs	r2, #255	; 0xff
 8008922:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2243      	movs	r2, #67	; 0x43
 800893c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800893e:	4b03      	ldr	r3, [pc, #12]	; (800894c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008940:	4618      	mov	r0, r3
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr
 800894c:	20000094 	.word	0x20000094

08008950 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2243      	movs	r2, #67	; 0x43
 800895c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800895e:	4b03      	ldr	r3, [pc, #12]	; (800896c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008960:	4618      	mov	r0, r3
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	20000050 	.word	0x20000050

08008970 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2243      	movs	r2, #67	; 0x43
 800897c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800897e:	4b03      	ldr	r3, [pc, #12]	; (800898c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008980:	4618      	mov	r0, r3
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr
 800898c:	200000d8 	.word	0x200000d8

08008990 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	220a      	movs	r2, #10
 800899c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800899e:	4b03      	ldr	r3, [pc, #12]	; (80089ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	2000000c 	.word	0x2000000c

080089b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d101      	bne.n	80089c4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80089c0:	2303      	movs	r3, #3
 80089c2:	e004      	b.n	80089ce <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	683a      	ldr	r2, [r7, #0]
 80089c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	370c      	adds	r7, #12
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80089da:	b480      	push	{r7}
 80089dc:	b087      	sub	sp, #28
 80089de:	af00      	add	r7, sp, #0
 80089e0:	60f8      	str	r0, [r7, #12]
 80089e2:	60b9      	str	r1, [r7, #8]
 80089e4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089ec:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	68ba      	ldr	r2, [r7, #8]
 80089f2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	371c      	adds	r7, #28
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a1c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	683a      	ldr	r2, [r7, #0]
 8008a22:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3714      	adds	r7, #20
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d101      	bne.n	8008a52 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e016      	b.n	8008a80 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	7c1b      	ldrb	r3, [r3, #16]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d109      	bne.n	8008a6e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a64:	2101      	movs	r1, #1
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f005 fbfa 	bl	800e260 <USBD_LL_PrepareReceive>
 8008a6c:	e007      	b.n	8008a7e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a74:	2340      	movs	r3, #64	; 0x40
 8008a76:	2101      	movs	r1, #1
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f005 fbf1 	bl	800e260 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	4613      	mov	r3, r2
 8008a94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d101      	bne.n	8008aa0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	e025      	b.n	8008aec <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d003      	beq.n	8008ab2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d003      	beq.n	8008ac4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	68ba      	ldr	r2, [r7, #8]
 8008ace:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	79fa      	ldrb	r2, [r7, #7]
 8008ade:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f005 fa67 	bl	800dfb4 <USBD_LL_Init>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3718      	adds	r7, #24
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d101      	bne.n	8008b0c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e010      	b.n	8008b2e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1c:	f107 020e 	add.w	r2, r7, #14
 8008b20:	4610      	mov	r0, r2
 8008b22:	4798      	blx	r3
 8008b24:	4602      	mov	r2, r0
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b082      	sub	sp, #8
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f005 fa84 	bl	800e04c <USBD_LL_Start>
 8008b44:	4603      	mov	r3, r0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3708      	adds	r7, #8
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b083      	sub	sp, #12
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008b70:	2303      	movs	r3, #3
 8008b72:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d009      	beq.n	8008b92 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	78fa      	ldrb	r2, [r7, #3]
 8008b88:	4611      	mov	r1, r2
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	4798      	blx	r3
 8008b8e:	4603      	mov	r3, r0
 8008b90:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d007      	beq.n	8008bc2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	78fa      	ldrb	r2, [r7, #3]
 8008bbc:	4611      	mov	r1, r2
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	4798      	blx	r3
  }

  return USBD_OK;
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3708      	adds	r7, #8
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008bdc:	6839      	ldr	r1, [r7, #0]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f000 ff2c 	bl	8009a3c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008c00:	f003 031f 	and.w	r3, r3, #31
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d00e      	beq.n	8008c26 <USBD_LL_SetupStage+0x5a>
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d302      	bcc.n	8008c12 <USBD_LL_SetupStage+0x46>
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d014      	beq.n	8008c3a <USBD_LL_SetupStage+0x6e>
 8008c10:	e01d      	b.n	8008c4e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c18:	4619      	mov	r1, r3
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fa18 	bl	8009050 <USBD_StdDevReq>
 8008c20:	4603      	mov	r3, r0
 8008c22:	73fb      	strb	r3, [r7, #15]
      break;
 8008c24:	e020      	b.n	8008c68 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fa7c 	bl	800912c <USBD_StdItfReq>
 8008c34:	4603      	mov	r3, r0
 8008c36:	73fb      	strb	r3, [r7, #15]
      break;
 8008c38:	e016      	b.n	8008c68 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c40:	4619      	mov	r1, r3
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fab8 	bl	80091b8 <USBD_StdEPReq>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c4c:	e00c      	b.n	8008c68 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008c54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f005 fa55 	bl	800e10c <USBD_LL_StallEP>
 8008c62:	4603      	mov	r3, r0
 8008c64:	73fb      	strb	r3, [r7, #15]
      break;
 8008c66:	bf00      	nop
  }

  return ret;
 8008c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b086      	sub	sp, #24
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	60f8      	str	r0, [r7, #12]
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	607a      	str	r2, [r7, #4]
 8008c7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008c80:	7afb      	ldrb	r3, [r7, #11]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d137      	bne.n	8008cf6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008c8c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c94:	2b03      	cmp	r3, #3
 8008c96:	d14a      	bne.n	8008d2e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	689a      	ldr	r2, [r3, #8]
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d913      	bls.n	8008ccc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	689a      	ldr	r2, [r3, #8]
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	1ad2      	subs	r2, r2, r3
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	68da      	ldr	r2, [r3, #12]
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	bf28      	it	cs
 8008cbe:	4613      	movcs	r3, r2
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	6879      	ldr	r1, [r7, #4]
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f000 ffad 	bl	8009c24 <USBD_CtlContinueRx>
 8008cca:	e030      	b.n	8008d2e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00a      	beq.n	8008cee <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008cde:	2b03      	cmp	r3, #3
 8008ce0:	d105      	bne.n	8008cee <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f000 ffa9 	bl	8009c46 <USBD_CtlSendStatus>
 8008cf4:	e01b      	b.n	8008d2e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cfc:	699b      	ldr	r3, [r3, #24]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d013      	beq.n	8008d2a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008d08:	2b03      	cmp	r3, #3
 8008d0a:	d10e      	bne.n	8008d2a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d12:	699b      	ldr	r3, [r3, #24]
 8008d14:	7afa      	ldrb	r2, [r7, #11]
 8008d16:	4611      	mov	r1, r2
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	4798      	blx	r3
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008d20:	7dfb      	ldrb	r3, [r7, #23]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d003      	beq.n	8008d2e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008d26:	7dfb      	ldrb	r3, [r7, #23]
 8008d28:	e002      	b.n	8008d30 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	e000      	b.n	8008d30 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b086      	sub	sp, #24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	460b      	mov	r3, r1
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008d46:	7afb      	ldrb	r3, [r7, #11]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d16a      	bne.n	8008e22 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	3314      	adds	r3, #20
 8008d50:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	d155      	bne.n	8008e08 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	689a      	ldr	r2, [r3, #8]
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d914      	bls.n	8008d92 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	689a      	ldr	r2, [r3, #8]
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	1ad2      	subs	r2, r2, r3
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	6879      	ldr	r1, [r7, #4]
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	f000 ff22 	bl	8009bc8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d84:	2300      	movs	r3, #0
 8008d86:	2200      	movs	r2, #0
 8008d88:	2100      	movs	r1, #0
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f005 fa68 	bl	800e260 <USBD_LL_PrepareReceive>
 8008d90:	e03a      	b.n	8008e08 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	68da      	ldr	r2, [r3, #12]
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d11c      	bne.n	8008dd8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	685a      	ldr	r2, [r3, #4]
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d316      	bcc.n	8008dd8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	685a      	ldr	r2, [r3, #4]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d20f      	bcs.n	8008dd8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008db8:	2200      	movs	r2, #0
 8008dba:	2100      	movs	r1, #0
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f000 ff03 	bl	8009bc8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008dca:	2300      	movs	r3, #0
 8008dcc:	2200      	movs	r2, #0
 8008dce:	2100      	movs	r1, #0
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f005 fa45 	bl	800e260 <USBD_LL_PrepareReceive>
 8008dd6:	e017      	b.n	8008e08 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00a      	beq.n	8008dfa <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	d105      	bne.n	8008dfa <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008dfa:	2180      	movs	r1, #128	; 0x80
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f005 f985 	bl	800e10c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f000 ff32 	bl	8009c6c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d123      	bne.n	8008e5a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f7ff fe9b 	bl	8008b4e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008e20:	e01b      	b.n	8008e5a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e28:	695b      	ldr	r3, [r3, #20]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d013      	beq.n	8008e56 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008e34:	2b03      	cmp	r3, #3
 8008e36:	d10e      	bne.n	8008e56 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e3e:	695b      	ldr	r3, [r3, #20]
 8008e40:	7afa      	ldrb	r2, [r7, #11]
 8008e42:	4611      	mov	r1, r2
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	4798      	blx	r3
 8008e48:	4603      	mov	r3, r0
 8008e4a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008e4c:	7dfb      	ldrb	r3, [r7, #23]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d003      	beq.n	8008e5a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008e52:	7dfb      	ldrb	r3, [r7, #23]
 8008e54:	e002      	b.n	8008e5c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008e56:	2303      	movs	r3, #3
 8008e58:	e000      	b.n	8008e5c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008e5a:	2300      	movs	r3, #0
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3718      	adds	r7, #24
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d009      	beq.n	8008ea8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	6852      	ldr	r2, [r2, #4]
 8008ea0:	b2d2      	uxtb	r2, r2
 8008ea2:	4611      	mov	r1, r2
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ea8:	2340      	movs	r3, #64	; 0x40
 8008eaa:	2200      	movs	r2, #0
 8008eac:	2100      	movs	r1, #0
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f005 f8e7 	bl	800e082 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2240      	movs	r2, #64	; 0x40
 8008ec0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ec4:	2340      	movs	r3, #64	; 0x40
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	2180      	movs	r1, #128	; 0x80
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f005 f8d9 	bl	800e082 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2240      	movs	r2, #64	; 0x40
 8008eda:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b083      	sub	sp, #12
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	460b      	mov	r3, r1
 8008ef0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	78fa      	ldrb	r2, [r7, #3]
 8008ef6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	370c      	adds	r7, #12
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr

08008f06 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008f06:	b480      	push	{r7}
 8008f08:	b083      	sub	sp, #12
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2204      	movs	r2, #4
 8008f1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f3e:	2b04      	cmp	r3, #4
 8008f40:	d105      	bne.n	8008f4e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	d10b      	bne.n	8008f86 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f74:	69db      	ldr	r3, [r3, #28]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d005      	beq.n	8008f86 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	460b      	mov	r3, r1
 8008f9a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	370c      	adds	r7, #12
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr

08008faa <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008faa:	b480      	push	{r7}
 8008fac:	b083      	sub	sp, #12
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	370c      	adds	r7, #12
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b082      	sub	sp, #8
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d009      	beq.n	8009008 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	6852      	ldr	r2, [r2, #4]
 8009000:	b2d2      	uxtb	r2, r2
 8009002:	4611      	mov	r1, r2
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	4798      	blx	r3
  }

  return USBD_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009012:	b480      	push	{r7}
 8009014:	b087      	sub	sp, #28
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	3301      	adds	r3, #1
 8009028:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009030:	8a3b      	ldrh	r3, [r7, #16]
 8009032:	021b      	lsls	r3, r3, #8
 8009034:	b21a      	sxth	r2, r3
 8009036:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800903a:	4313      	orrs	r3, r2
 800903c:	b21b      	sxth	r3, r3
 800903e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009040:	89fb      	ldrh	r3, [r7, #14]
}
 8009042:	4618      	mov	r0, r3
 8009044:	371c      	adds	r7, #28
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
	...

08009050 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009066:	2b20      	cmp	r3, #32
 8009068:	d004      	beq.n	8009074 <USBD_StdDevReq+0x24>
 800906a:	2b40      	cmp	r3, #64	; 0x40
 800906c:	d002      	beq.n	8009074 <USBD_StdDevReq+0x24>
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00a      	beq.n	8009088 <USBD_StdDevReq+0x38>
 8009072:	e050      	b.n	8009116 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	6839      	ldr	r1, [r7, #0]
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	4798      	blx	r3
 8009082:	4603      	mov	r3, r0
 8009084:	73fb      	strb	r3, [r7, #15]
    break;
 8009086:	e04b      	b.n	8009120 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	785b      	ldrb	r3, [r3, #1]
 800908c:	2b09      	cmp	r3, #9
 800908e:	d83c      	bhi.n	800910a <USBD_StdDevReq+0xba>
 8009090:	a201      	add	r2, pc, #4	; (adr r2, 8009098 <USBD_StdDevReq+0x48>)
 8009092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009096:	bf00      	nop
 8009098:	080090ed 	.word	0x080090ed
 800909c:	08009101 	.word	0x08009101
 80090a0:	0800910b 	.word	0x0800910b
 80090a4:	080090f7 	.word	0x080090f7
 80090a8:	0800910b 	.word	0x0800910b
 80090ac:	080090cb 	.word	0x080090cb
 80090b0:	080090c1 	.word	0x080090c1
 80090b4:	0800910b 	.word	0x0800910b
 80090b8:	080090e3 	.word	0x080090e3
 80090bc:	080090d5 	.word	0x080090d5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f9ce 	bl	8009464 <USBD_GetDescriptor>
      break;
 80090c8:	e024      	b.n	8009114 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80090ca:	6839      	ldr	r1, [r7, #0]
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 fb33 	bl	8009738 <USBD_SetAddress>
      break;
 80090d2:	e01f      	b.n	8009114 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80090d4:	6839      	ldr	r1, [r7, #0]
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fb70 	bl	80097bc <USBD_SetConfig>
 80090dc:	4603      	mov	r3, r0
 80090de:	73fb      	strb	r3, [r7, #15]
      break;
 80090e0:	e018      	b.n	8009114 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80090e2:	6839      	ldr	r1, [r7, #0]
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fc0d 	bl	8009904 <USBD_GetConfig>
      break;
 80090ea:	e013      	b.n	8009114 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80090ec:	6839      	ldr	r1, [r7, #0]
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fc3c 	bl	800996c <USBD_GetStatus>
      break;
 80090f4:	e00e      	b.n	8009114 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fc6a 	bl	80099d2 <USBD_SetFeature>
      break;
 80090fe:	e009      	b.n	8009114 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8009100:	6839      	ldr	r1, [r7, #0]
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fc79 	bl	80099fa <USBD_ClrFeature>
      break;
 8009108:	e004      	b.n	8009114 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fccf 	bl	8009ab0 <USBD_CtlError>
      break;
 8009112:	bf00      	nop
    }
    break;
 8009114:	e004      	b.n	8009120 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8009116:	6839      	ldr	r1, [r7, #0]
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 fcc9 	bl	8009ab0 <USBD_CtlError>
    break;
 800911e:	bf00      	nop
  }

  return ret;
 8009120:	7bfb      	ldrb	r3, [r7, #15]
}
 8009122:	4618      	mov	r0, r3
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop

0800912c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009136:	2300      	movs	r3, #0
 8009138:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009142:	2b20      	cmp	r3, #32
 8009144:	d003      	beq.n	800914e <USBD_StdItfReq+0x22>
 8009146:	2b40      	cmp	r3, #64	; 0x40
 8009148:	d001      	beq.n	800914e <USBD_StdItfReq+0x22>
 800914a:	2b00      	cmp	r3, #0
 800914c:	d12a      	bne.n	80091a4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009154:	3b01      	subs	r3, #1
 8009156:	2b02      	cmp	r3, #2
 8009158:	d81d      	bhi.n	8009196 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	889b      	ldrh	r3, [r3, #4]
 800915e:	b2db      	uxtb	r3, r3
 8009160:	2b01      	cmp	r3, #1
 8009162:	d813      	bhi.n	800918c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	4798      	blx	r3
 8009172:	4603      	mov	r3, r0
 8009174:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	88db      	ldrh	r3, [r3, #6]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d110      	bne.n	80091a0 <USBD_StdItfReq+0x74>
 800917e:	7bfb      	ldrb	r3, [r7, #15]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d10d      	bne.n	80091a0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 fd5e 	bl	8009c46 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800918a:	e009      	b.n	80091a0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800918c:	6839      	ldr	r1, [r7, #0]
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 fc8e 	bl	8009ab0 <USBD_CtlError>
      break;
 8009194:	e004      	b.n	80091a0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8009196:	6839      	ldr	r1, [r7, #0]
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 fc89 	bl	8009ab0 <USBD_CtlError>
      break;
 800919e:	e000      	b.n	80091a2 <USBD_StdItfReq+0x76>
      break;
 80091a0:	bf00      	nop
    }
    break;
 80091a2:	e004      	b.n	80091ae <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fc82 	bl	8009ab0 <USBD_CtlError>
    break;
 80091ac:	bf00      	nop
  }

  return ret;
 80091ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	889b      	ldrh	r3, [r3, #4]
 80091ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091d4:	2b20      	cmp	r3, #32
 80091d6:	d004      	beq.n	80091e2 <USBD_StdEPReq+0x2a>
 80091d8:	2b40      	cmp	r3, #64	; 0x40
 80091da:	d002      	beq.n	80091e2 <USBD_StdEPReq+0x2a>
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00a      	beq.n	80091f6 <USBD_StdEPReq+0x3e>
 80091e0:	e135      	b.n	800944e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	6839      	ldr	r1, [r7, #0]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	4798      	blx	r3
 80091f0:	4603      	mov	r3, r0
 80091f2:	73fb      	strb	r3, [r7, #15]
    break;
 80091f4:	e130      	b.n	8009458 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	785b      	ldrb	r3, [r3, #1]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d03e      	beq.n	800927c <USBD_StdEPReq+0xc4>
 80091fe:	2b03      	cmp	r3, #3
 8009200:	d002      	beq.n	8009208 <USBD_StdEPReq+0x50>
 8009202:	2b00      	cmp	r3, #0
 8009204:	d077      	beq.n	80092f6 <USBD_StdEPReq+0x13e>
 8009206:	e11c      	b.n	8009442 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800920e:	2b02      	cmp	r3, #2
 8009210:	d002      	beq.n	8009218 <USBD_StdEPReq+0x60>
 8009212:	2b03      	cmp	r3, #3
 8009214:	d015      	beq.n	8009242 <USBD_StdEPReq+0x8a>
 8009216:	e02b      	b.n	8009270 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009218:	7bbb      	ldrb	r3, [r7, #14]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00c      	beq.n	8009238 <USBD_StdEPReq+0x80>
 800921e:	7bbb      	ldrb	r3, [r7, #14]
 8009220:	2b80      	cmp	r3, #128	; 0x80
 8009222:	d009      	beq.n	8009238 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009224:	7bbb      	ldrb	r3, [r7, #14]
 8009226:	4619      	mov	r1, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f004 ff6f 	bl	800e10c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800922e:	2180      	movs	r1, #128	; 0x80
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f004 ff6b 	bl	800e10c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009236:	e020      	b.n	800927a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8009238:	6839      	ldr	r1, [r7, #0]
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fc38 	bl	8009ab0 <USBD_CtlError>
        break;
 8009240:	e01b      	b.n	800927a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	885b      	ldrh	r3, [r3, #2]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d10e      	bne.n	8009268 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800924a:	7bbb      	ldrb	r3, [r7, #14]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00b      	beq.n	8009268 <USBD_StdEPReq+0xb0>
 8009250:	7bbb      	ldrb	r3, [r7, #14]
 8009252:	2b80      	cmp	r3, #128	; 0x80
 8009254:	d008      	beq.n	8009268 <USBD_StdEPReq+0xb0>
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	88db      	ldrh	r3, [r3, #6]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d104      	bne.n	8009268 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800925e:	7bbb      	ldrb	r3, [r7, #14]
 8009260:	4619      	mov	r1, r3
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f004 ff52 	bl	800e10c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fcec 	bl	8009c46 <USBD_CtlSendStatus>

        break;
 800926e:	e004      	b.n	800927a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8009270:	6839      	ldr	r1, [r7, #0]
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 fc1c 	bl	8009ab0 <USBD_CtlError>
        break;
 8009278:	bf00      	nop
      }
      break;
 800927a:	e0e7      	b.n	800944c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009282:	2b02      	cmp	r3, #2
 8009284:	d002      	beq.n	800928c <USBD_StdEPReq+0xd4>
 8009286:	2b03      	cmp	r3, #3
 8009288:	d015      	beq.n	80092b6 <USBD_StdEPReq+0xfe>
 800928a:	e02d      	b.n	80092e8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800928c:	7bbb      	ldrb	r3, [r7, #14]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00c      	beq.n	80092ac <USBD_StdEPReq+0xf4>
 8009292:	7bbb      	ldrb	r3, [r7, #14]
 8009294:	2b80      	cmp	r3, #128	; 0x80
 8009296:	d009      	beq.n	80092ac <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009298:	7bbb      	ldrb	r3, [r7, #14]
 800929a:	4619      	mov	r1, r3
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f004 ff35 	bl	800e10c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80092a2:	2180      	movs	r1, #128	; 0x80
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f004 ff31 	bl	800e10c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80092aa:	e023      	b.n	80092f4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fbfe 	bl	8009ab0 <USBD_CtlError>
        break;
 80092b4:	e01e      	b.n	80092f4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	885b      	ldrh	r3, [r3, #2]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d119      	bne.n	80092f2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80092be:	7bbb      	ldrb	r3, [r7, #14]
 80092c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d004      	beq.n	80092d2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80092c8:	7bbb      	ldrb	r3, [r7, #14]
 80092ca:	4619      	mov	r1, r3
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f004 ff3c 	bl	800e14a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 fcb7 	bl	8009c46 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	6839      	ldr	r1, [r7, #0]
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	4798      	blx	r3
        }
        break;
 80092e6:	e004      	b.n	80092f2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80092e8:	6839      	ldr	r1, [r7, #0]
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 fbe0 	bl	8009ab0 <USBD_CtlError>
        break;
 80092f0:	e000      	b.n	80092f4 <USBD_StdEPReq+0x13c>
        break;
 80092f2:	bf00      	nop
      }
      break;
 80092f4:	e0aa      	b.n	800944c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d002      	beq.n	8009306 <USBD_StdEPReq+0x14e>
 8009300:	2b03      	cmp	r3, #3
 8009302:	d032      	beq.n	800936a <USBD_StdEPReq+0x1b2>
 8009304:	e097      	b.n	8009436 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009306:	7bbb      	ldrb	r3, [r7, #14]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d007      	beq.n	800931c <USBD_StdEPReq+0x164>
 800930c:	7bbb      	ldrb	r3, [r7, #14]
 800930e:	2b80      	cmp	r3, #128	; 0x80
 8009310:	d004      	beq.n	800931c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8009312:	6839      	ldr	r1, [r7, #0]
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 fbcb 	bl	8009ab0 <USBD_CtlError>
          break;
 800931a:	e091      	b.n	8009440 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800931c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009320:	2b00      	cmp	r3, #0
 8009322:	da0b      	bge.n	800933c <USBD_StdEPReq+0x184>
 8009324:	7bbb      	ldrb	r3, [r7, #14]
 8009326:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800932a:	4613      	mov	r3, r2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4413      	add	r3, r2
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	3310      	adds	r3, #16
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	4413      	add	r3, r2
 8009338:	3304      	adds	r3, #4
 800933a:	e00b      	b.n	8009354 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800933c:	7bbb      	ldrb	r3, [r7, #14]
 800933e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009342:	4613      	mov	r3, r2
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	4413      	add	r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	4413      	add	r3, r2
 8009352:	3304      	adds	r3, #4
 8009354:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	2200      	movs	r2, #0
 800935a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	2202      	movs	r2, #2
 8009360:	4619      	mov	r1, r3
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fc15 	bl	8009b92 <USBD_CtlSendData>
        break;
 8009368:	e06a      	b.n	8009440 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800936a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800936e:	2b00      	cmp	r3, #0
 8009370:	da11      	bge.n	8009396 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009372:	7bbb      	ldrb	r3, [r7, #14]
 8009374:	f003 020f 	and.w	r2, r3, #15
 8009378:	6879      	ldr	r1, [r7, #4]
 800937a:	4613      	mov	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	4413      	add	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	440b      	add	r3, r1
 8009384:	3324      	adds	r3, #36	; 0x24
 8009386:	881b      	ldrh	r3, [r3, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d117      	bne.n	80093bc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fb8e 	bl	8009ab0 <USBD_CtlError>
            break;
 8009394:	e054      	b.n	8009440 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009396:	7bbb      	ldrb	r3, [r7, #14]
 8009398:	f003 020f 	and.w	r2, r3, #15
 800939c:	6879      	ldr	r1, [r7, #4]
 800939e:	4613      	mov	r3, r2
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	4413      	add	r3, r2
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	440b      	add	r3, r1
 80093a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80093ac:	881b      	ldrh	r3, [r3, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d104      	bne.n	80093bc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fb7b 	bl	8009ab0 <USBD_CtlError>
            break;
 80093ba:	e041      	b.n	8009440 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	da0b      	bge.n	80093dc <USBD_StdEPReq+0x224>
 80093c4:	7bbb      	ldrb	r3, [r7, #14]
 80093c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093ca:	4613      	mov	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	4413      	add	r3, r2
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	3310      	adds	r3, #16
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	4413      	add	r3, r2
 80093d8:	3304      	adds	r3, #4
 80093da:	e00b      	b.n	80093f4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80093dc:	7bbb      	ldrb	r3, [r7, #14]
 80093de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093e2:	4613      	mov	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	4413      	add	r3, r2
 80093f2:	3304      	adds	r3, #4
 80093f4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80093f6:	7bbb      	ldrb	r3, [r7, #14]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d002      	beq.n	8009402 <USBD_StdEPReq+0x24a>
 80093fc:	7bbb      	ldrb	r3, [r7, #14]
 80093fe:	2b80      	cmp	r3, #128	; 0x80
 8009400:	d103      	bne.n	800940a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	2200      	movs	r2, #0
 8009406:	601a      	str	r2, [r3, #0]
 8009408:	e00e      	b.n	8009428 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800940a:	7bbb      	ldrb	r3, [r7, #14]
 800940c:	4619      	mov	r1, r3
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f004 feba 	bl	800e188 <USBD_LL_IsStallEP>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d003      	beq.n	8009422 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	2201      	movs	r2, #1
 800941e:	601a      	str	r2, [r3, #0]
 8009420:	e002      	b.n	8009428 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	2200      	movs	r2, #0
 8009426:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	2202      	movs	r2, #2
 800942c:	4619      	mov	r1, r3
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fbaf 	bl	8009b92 <USBD_CtlSendData>
          break;
 8009434:	e004      	b.n	8009440 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8009436:	6839      	ldr	r1, [r7, #0]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fb39 	bl	8009ab0 <USBD_CtlError>
        break;
 800943e:	bf00      	nop
      }
      break;
 8009440:	e004      	b.n	800944c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8009442:	6839      	ldr	r1, [r7, #0]
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 fb33 	bl	8009ab0 <USBD_CtlError>
      break;
 800944a:	bf00      	nop
    }
    break;
 800944c:	e004      	b.n	8009458 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800944e:	6839      	ldr	r1, [r7, #0]
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fb2d 	bl	8009ab0 <USBD_CtlError>
    break;
 8009456:	bf00      	nop
  }

  return ret;
 8009458:	7bfb      	ldrb	r3, [r7, #15]
}
 800945a:	4618      	mov	r0, r3
 800945c:	3710      	adds	r7, #16
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
	...

08009464 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800946e:	2300      	movs	r3, #0
 8009470:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009472:	2300      	movs	r3, #0
 8009474:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009476:	2300      	movs	r3, #0
 8009478:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	885b      	ldrh	r3, [r3, #2]
 800947e:	0a1b      	lsrs	r3, r3, #8
 8009480:	b29b      	uxth	r3, r3
 8009482:	3b01      	subs	r3, #1
 8009484:	2b06      	cmp	r3, #6
 8009486:	f200 8128 	bhi.w	80096da <USBD_GetDescriptor+0x276>
 800948a:	a201      	add	r2, pc, #4	; (adr r2, 8009490 <USBD_GetDescriptor+0x2c>)
 800948c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009490:	080094ad 	.word	0x080094ad
 8009494:	080094c5 	.word	0x080094c5
 8009498:	08009505 	.word	0x08009505
 800949c:	080096db 	.word	0x080096db
 80094a0:	080096db 	.word	0x080096db
 80094a4:	0800967b 	.word	0x0800967b
 80094a8:	080096a7 	.word	0x080096a7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	7c12      	ldrb	r2, [r2, #16]
 80094b8:	f107 0108 	add.w	r1, r7, #8
 80094bc:	4610      	mov	r0, r2
 80094be:	4798      	blx	r3
 80094c0:	60f8      	str	r0, [r7, #12]
    break;
 80094c2:	e112      	b.n	80096ea <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	7c1b      	ldrb	r3, [r3, #16]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d10d      	bne.n	80094e8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d4:	f107 0208 	add.w	r2, r7, #8
 80094d8:	4610      	mov	r0, r2
 80094da:	4798      	blx	r3
 80094dc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	3301      	adds	r3, #1
 80094e2:	2202      	movs	r2, #2
 80094e4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80094e6:	e100      	b.n	80096ea <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f0:	f107 0208 	add.w	r2, r7, #8
 80094f4:	4610      	mov	r0, r2
 80094f6:	4798      	blx	r3
 80094f8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	3301      	adds	r3, #1
 80094fe:	2202      	movs	r2, #2
 8009500:	701a      	strb	r2, [r3, #0]
    break;
 8009502:	e0f2      	b.n	80096ea <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	885b      	ldrh	r3, [r3, #2]
 8009508:	b2db      	uxtb	r3, r3
 800950a:	2b05      	cmp	r3, #5
 800950c:	f200 80ac 	bhi.w	8009668 <USBD_GetDescriptor+0x204>
 8009510:	a201      	add	r2, pc, #4	; (adr r2, 8009518 <USBD_GetDescriptor+0xb4>)
 8009512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009516:	bf00      	nop
 8009518:	08009531 	.word	0x08009531
 800951c:	08009565 	.word	0x08009565
 8009520:	08009599 	.word	0x08009599
 8009524:	080095cd 	.word	0x080095cd
 8009528:	08009601 	.word	0x08009601
 800952c:	08009635 	.word	0x08009635
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00b      	beq.n	8009554 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	7c12      	ldrb	r2, [r2, #16]
 8009548:	f107 0108 	add.w	r1, r7, #8
 800954c:	4610      	mov	r0, r2
 800954e:	4798      	blx	r3
 8009550:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009552:	e091      	b.n	8009678 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009554:	6839      	ldr	r1, [r7, #0]
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 faaa 	bl	8009ab0 <USBD_CtlError>
        err++;
 800955c:	7afb      	ldrb	r3, [r7, #11]
 800955e:	3301      	adds	r3, #1
 8009560:	72fb      	strb	r3, [r7, #11]
      break;
 8009562:	e089      	b.n	8009678 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00b      	beq.n	8009588 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	7c12      	ldrb	r2, [r2, #16]
 800957c:	f107 0108 	add.w	r1, r7, #8
 8009580:	4610      	mov	r0, r2
 8009582:	4798      	blx	r3
 8009584:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009586:	e077      	b.n	8009678 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009588:	6839      	ldr	r1, [r7, #0]
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 fa90 	bl	8009ab0 <USBD_CtlError>
        err++;
 8009590:	7afb      	ldrb	r3, [r7, #11]
 8009592:	3301      	adds	r3, #1
 8009594:	72fb      	strb	r3, [r7, #11]
      break;
 8009596:	e06f      	b.n	8009678 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d00b      	beq.n	80095bc <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	7c12      	ldrb	r2, [r2, #16]
 80095b0:	f107 0108 	add.w	r1, r7, #8
 80095b4:	4610      	mov	r0, r2
 80095b6:	4798      	blx	r3
 80095b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095ba:	e05d      	b.n	8009678 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80095bc:	6839      	ldr	r1, [r7, #0]
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 fa76 	bl	8009ab0 <USBD_CtlError>
        err++;
 80095c4:	7afb      	ldrb	r3, [r7, #11]
 80095c6:	3301      	adds	r3, #1
 80095c8:	72fb      	strb	r3, [r7, #11]
      break;
 80095ca:	e055      	b.n	8009678 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00b      	beq.n	80095f0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	7c12      	ldrb	r2, [r2, #16]
 80095e4:	f107 0108 	add.w	r1, r7, #8
 80095e8:	4610      	mov	r0, r2
 80095ea:	4798      	blx	r3
 80095ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095ee:	e043      	b.n	8009678 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80095f0:	6839      	ldr	r1, [r7, #0]
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 fa5c 	bl	8009ab0 <USBD_CtlError>
        err++;
 80095f8:	7afb      	ldrb	r3, [r7, #11]
 80095fa:	3301      	adds	r3, #1
 80095fc:	72fb      	strb	r3, [r7, #11]
      break;
 80095fe:	e03b      	b.n	8009678 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009606:	695b      	ldr	r3, [r3, #20]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d00b      	beq.n	8009624 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009612:	695b      	ldr	r3, [r3, #20]
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	7c12      	ldrb	r2, [r2, #16]
 8009618:	f107 0108 	add.w	r1, r7, #8
 800961c:	4610      	mov	r0, r2
 800961e:	4798      	blx	r3
 8009620:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009622:	e029      	b.n	8009678 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009624:	6839      	ldr	r1, [r7, #0]
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 fa42 	bl	8009ab0 <USBD_CtlError>
        err++;
 800962c:	7afb      	ldrb	r3, [r7, #11]
 800962e:	3301      	adds	r3, #1
 8009630:	72fb      	strb	r3, [r7, #11]
      break;
 8009632:	e021      	b.n	8009678 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800963a:	699b      	ldr	r3, [r3, #24]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00b      	beq.n	8009658 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	7c12      	ldrb	r2, [r2, #16]
 800964c:	f107 0108 	add.w	r1, r7, #8
 8009650:	4610      	mov	r0, r2
 8009652:	4798      	blx	r3
 8009654:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009656:	e00f      	b.n	8009678 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009658:	6839      	ldr	r1, [r7, #0]
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 fa28 	bl	8009ab0 <USBD_CtlError>
        err++;
 8009660:	7afb      	ldrb	r3, [r7, #11]
 8009662:	3301      	adds	r3, #1
 8009664:	72fb      	strb	r3, [r7, #11]
      break;
 8009666:	e007      	b.n	8009678 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8009668:	6839      	ldr	r1, [r7, #0]
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 fa20 	bl	8009ab0 <USBD_CtlError>
      err++;
 8009670:	7afb      	ldrb	r3, [r7, #11]
 8009672:	3301      	adds	r3, #1
 8009674:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8009676:	bf00      	nop
    }
    break;
 8009678:	e037      	b.n	80096ea <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	7c1b      	ldrb	r3, [r3, #16]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d109      	bne.n	8009696 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800968a:	f107 0208 	add.w	r2, r7, #8
 800968e:	4610      	mov	r0, r2
 8009690:	4798      	blx	r3
 8009692:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009694:	e029      	b.n	80096ea <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009696:	6839      	ldr	r1, [r7, #0]
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 fa09 	bl	8009ab0 <USBD_CtlError>
      err++;
 800969e:	7afb      	ldrb	r3, [r7, #11]
 80096a0:	3301      	adds	r3, #1
 80096a2:	72fb      	strb	r3, [r7, #11]
    break;
 80096a4:	e021      	b.n	80096ea <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	7c1b      	ldrb	r3, [r3, #16]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10d      	bne.n	80096ca <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b6:	f107 0208 	add.w	r2, r7, #8
 80096ba:	4610      	mov	r0, r2
 80096bc:	4798      	blx	r3
 80096be:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	3301      	adds	r3, #1
 80096c4:	2207      	movs	r2, #7
 80096c6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80096c8:	e00f      	b.n	80096ea <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80096ca:	6839      	ldr	r1, [r7, #0]
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 f9ef 	bl	8009ab0 <USBD_CtlError>
      err++;
 80096d2:	7afb      	ldrb	r3, [r7, #11]
 80096d4:	3301      	adds	r3, #1
 80096d6:	72fb      	strb	r3, [r7, #11]
    break;
 80096d8:	e007      	b.n	80096ea <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80096da:	6839      	ldr	r1, [r7, #0]
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 f9e7 	bl	8009ab0 <USBD_CtlError>
    err++;
 80096e2:	7afb      	ldrb	r3, [r7, #11]
 80096e4:	3301      	adds	r3, #1
 80096e6:	72fb      	strb	r3, [r7, #11]
    break;
 80096e8:	bf00      	nop
  }

  if (err != 0U)
 80096ea:	7afb      	ldrb	r3, [r7, #11]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d11e      	bne.n	800972e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	88db      	ldrh	r3, [r3, #6]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d016      	beq.n	8009726 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80096f8:	893b      	ldrh	r3, [r7, #8]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00e      	beq.n	800971c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	88da      	ldrh	r2, [r3, #6]
 8009702:	893b      	ldrh	r3, [r7, #8]
 8009704:	4293      	cmp	r3, r2
 8009706:	bf28      	it	cs
 8009708:	4613      	movcs	r3, r2
 800970a:	b29b      	uxth	r3, r3
 800970c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800970e:	893b      	ldrh	r3, [r7, #8]
 8009710:	461a      	mov	r2, r3
 8009712:	68f9      	ldr	r1, [r7, #12]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fa3c 	bl	8009b92 <USBD_CtlSendData>
 800971a:	e009      	b.n	8009730 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800971c:	6839      	ldr	r1, [r7, #0]
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f9c6 	bl	8009ab0 <USBD_CtlError>
 8009724:	e004      	b.n	8009730 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fa8d 	bl	8009c46 <USBD_CtlSendStatus>
 800972c:	e000      	b.n	8009730 <USBD_GetDescriptor+0x2cc>
    return;
 800972e:	bf00      	nop
    }
  }
}
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop

08009738 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	889b      	ldrh	r3, [r3, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d130      	bne.n	80097ac <USBD_SetAddress+0x74>
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	88db      	ldrh	r3, [r3, #6]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d12c      	bne.n	80097ac <USBD_SetAddress+0x74>
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	885b      	ldrh	r3, [r3, #2]
 8009756:	2b7f      	cmp	r3, #127	; 0x7f
 8009758:	d828      	bhi.n	80097ac <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	885b      	ldrh	r3, [r3, #2]
 800975e:	b2db      	uxtb	r3, r3
 8009760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009764:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800976c:	2b03      	cmp	r3, #3
 800976e:	d104      	bne.n	800977a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009770:	6839      	ldr	r1, [r7, #0]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 f99c 	bl	8009ab0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009778:	e01c      	b.n	80097b4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	7bfa      	ldrb	r2, [r7, #15]
 800977e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009782:	7bfb      	ldrb	r3, [r7, #15]
 8009784:	4619      	mov	r1, r3
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f004 fd2a 	bl	800e1e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 fa5a 	bl	8009c46 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009792:	7bfb      	ldrb	r3, [r7, #15]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d004      	beq.n	80097a2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2202      	movs	r2, #2
 800979c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097a0:	e008      	b.n	80097b4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2201      	movs	r2, #1
 80097a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097aa:	e003      	b.n	80097b4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80097ac:	6839      	ldr	r1, [r7, #0]
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 f97e 	bl	8009ab0 <USBD_CtlError>
  }
}
 80097b4:	bf00      	nop
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097c6:	2300      	movs	r3, #0
 80097c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	885b      	ldrh	r3, [r3, #2]
 80097ce:	b2da      	uxtb	r2, r3
 80097d0:	4b4b      	ldr	r3, [pc, #300]	; (8009900 <USBD_SetConfig+0x144>)
 80097d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80097d4:	4b4a      	ldr	r3, [pc, #296]	; (8009900 <USBD_SetConfig+0x144>)
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d905      	bls.n	80097e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 f966 	bl	8009ab0 <USBD_CtlError>
    return USBD_FAIL;
 80097e4:	2303      	movs	r3, #3
 80097e6:	e087      	b.n	80098f8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	d002      	beq.n	80097f8 <USBD_SetConfig+0x3c>
 80097f2:	2b03      	cmp	r3, #3
 80097f4:	d025      	beq.n	8009842 <USBD_SetConfig+0x86>
 80097f6:	e071      	b.n	80098dc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80097f8:	4b41      	ldr	r3, [pc, #260]	; (8009900 <USBD_SetConfig+0x144>)
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d01c      	beq.n	800983a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009800:	4b3f      	ldr	r3, [pc, #252]	; (8009900 <USBD_SetConfig+0x144>)
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	461a      	mov	r2, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800980a:	4b3d      	ldr	r3, [pc, #244]	; (8009900 <USBD_SetConfig+0x144>)
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	4619      	mov	r1, r3
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f7ff f9a7 	bl	8008b64 <USBD_SetClassConfig>
 8009816:	4603      	mov	r3, r0
 8009818:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800981a:	7bfb      	ldrb	r3, [r7, #15]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d004      	beq.n	800982a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009820:	6839      	ldr	r1, [r7, #0]
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 f944 	bl	8009ab0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009828:	e065      	b.n	80098f6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fa0b 	bl	8009c46 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2203      	movs	r2, #3
 8009834:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009838:	e05d      	b.n	80098f6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fa03 	bl	8009c46 <USBD_CtlSendStatus>
    break;
 8009840:	e059      	b.n	80098f6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009842:	4b2f      	ldr	r3, [pc, #188]	; (8009900 <USBD_SetConfig+0x144>)
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d112      	bne.n	8009870 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2202      	movs	r2, #2
 800984e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8009852:	4b2b      	ldr	r3, [pc, #172]	; (8009900 <USBD_SetConfig+0x144>)
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	461a      	mov	r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800985c:	4b28      	ldr	r3, [pc, #160]	; (8009900 <USBD_SetConfig+0x144>)
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	4619      	mov	r1, r3
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f7ff f99a 	bl	8008b9c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 f9ec 	bl	8009c46 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800986e:	e042      	b.n	80098f6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009870:	4b23      	ldr	r3, [pc, #140]	; (8009900 <USBD_SetConfig+0x144>)
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	461a      	mov	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	429a      	cmp	r2, r3
 800987c:	d02a      	beq.n	80098d4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	b2db      	uxtb	r3, r3
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f7ff f988 	bl	8008b9c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800988c:	4b1c      	ldr	r3, [pc, #112]	; (8009900 <USBD_SetConfig+0x144>)
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	461a      	mov	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009896:	4b1a      	ldr	r3, [pc, #104]	; (8009900 <USBD_SetConfig+0x144>)
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	4619      	mov	r1, r3
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f7ff f961 	bl	8008b64 <USBD_SetClassConfig>
 80098a2:	4603      	mov	r3, r0
 80098a4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80098a6:	7bfb      	ldrb	r3, [r7, #15]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00f      	beq.n	80098cc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80098ac:	6839      	ldr	r1, [r7, #0]
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 f8fe 	bl	8009ab0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	4619      	mov	r1, r3
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f7ff f96d 	bl	8008b9c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2202      	movs	r2, #2
 80098c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80098ca:	e014      	b.n	80098f6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f9ba 	bl	8009c46 <USBD_CtlSendStatus>
    break;
 80098d2:	e010      	b.n	80098f6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 f9b6 	bl	8009c46 <USBD_CtlSendStatus>
    break;
 80098da:	e00c      	b.n	80098f6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80098dc:	6839      	ldr	r1, [r7, #0]
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f8e6 	bl	8009ab0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80098e4:	4b06      	ldr	r3, [pc, #24]	; (8009900 <USBD_SetConfig+0x144>)
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	4619      	mov	r1, r3
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7ff f956 	bl	8008b9c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80098f0:	2303      	movs	r3, #3
 80098f2:	73fb      	strb	r3, [r7, #15]
    break;
 80098f4:	bf00      	nop
  }

  return ret;
 80098f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3710      	adds	r7, #16
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	200003a4 	.word	0x200003a4

08009904 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	88db      	ldrh	r3, [r3, #6]
 8009912:	2b01      	cmp	r3, #1
 8009914:	d004      	beq.n	8009920 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009916:	6839      	ldr	r1, [r7, #0]
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 f8c9 	bl	8009ab0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800991e:	e021      	b.n	8009964 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009926:	2b01      	cmp	r3, #1
 8009928:	db17      	blt.n	800995a <USBD_GetConfig+0x56>
 800992a:	2b02      	cmp	r3, #2
 800992c:	dd02      	ble.n	8009934 <USBD_GetConfig+0x30>
 800992e:	2b03      	cmp	r3, #3
 8009930:	d00b      	beq.n	800994a <USBD_GetConfig+0x46>
 8009932:	e012      	b.n	800995a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	3308      	adds	r3, #8
 800993e:	2201      	movs	r2, #1
 8009940:	4619      	mov	r1, r3
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 f925 	bl	8009b92 <USBD_CtlSendData>
      break;
 8009948:	e00c      	b.n	8009964 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	3304      	adds	r3, #4
 800994e:	2201      	movs	r2, #1
 8009950:	4619      	mov	r1, r3
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f91d 	bl	8009b92 <USBD_CtlSendData>
      break;
 8009958:	e004      	b.n	8009964 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800995a:	6839      	ldr	r1, [r7, #0]
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 f8a7 	bl	8009ab0 <USBD_CtlError>
      break;
 8009962:	bf00      	nop
}
 8009964:	bf00      	nop
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800997c:	3b01      	subs	r3, #1
 800997e:	2b02      	cmp	r3, #2
 8009980:	d81e      	bhi.n	80099c0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	88db      	ldrh	r3, [r3, #6]
 8009986:	2b02      	cmp	r3, #2
 8009988:	d004      	beq.n	8009994 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800998a:	6839      	ldr	r1, [r7, #0]
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f88f 	bl	8009ab0 <USBD_CtlError>
      break;
 8009992:	e01a      	b.n	80099ca <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d005      	beq.n	80099b0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	f043 0202 	orr.w	r2, r3, #2
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	330c      	adds	r3, #12
 80099b4:	2202      	movs	r2, #2
 80099b6:	4619      	mov	r1, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 f8ea 	bl	8009b92 <USBD_CtlSendData>
    break;
 80099be:	e004      	b.n	80099ca <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80099c0:	6839      	ldr	r1, [r7, #0]
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 f874 	bl	8009ab0 <USBD_CtlError>
    break;
 80099c8:	bf00      	nop
  }
}
 80099ca:	bf00      	nop
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b082      	sub	sp, #8
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	885b      	ldrh	r3, [r3, #2]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d106      	bne.n	80099f2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 f92a 	bl	8009c46 <USBD_CtlSendStatus>
  }
}
 80099f2:	bf00      	nop
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b082      	sub	sp, #8
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
 8009a02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	d80b      	bhi.n	8009a28 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	885b      	ldrh	r3, [r3, #2]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d10c      	bne.n	8009a32 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 f910 	bl	8009c46 <USBD_CtlSendStatus>
      }
      break;
 8009a26:	e004      	b.n	8009a32 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009a28:	6839      	ldr	r1, [r7, #0]
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 f840 	bl	8009ab0 <USBD_CtlError>
      break;
 8009a30:	e000      	b.n	8009a34 <USBD_ClrFeature+0x3a>
      break;
 8009a32:	bf00      	nop
  }
}
 8009a34:	bf00      	nop
 8009a36:	3708      	adds	r7, #8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	781a      	ldrb	r2, [r3, #0]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	3301      	adds	r3, #1
 8009a56:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	781a      	ldrb	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	3301      	adds	r3, #1
 8009a64:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f7ff fad3 	bl	8009012 <SWAPBYTE>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	461a      	mov	r2, r3
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	3301      	adds	r3, #1
 8009a78:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009a80:	68f8      	ldr	r0, [r7, #12]
 8009a82:	f7ff fac6 	bl	8009012 <SWAPBYTE>
 8009a86:	4603      	mov	r3, r0
 8009a88:	461a      	mov	r2, r3
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	3301      	adds	r3, #1
 8009a92:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	3301      	adds	r3, #1
 8009a98:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f7ff fab9 	bl	8009012 <SWAPBYTE>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	80da      	strh	r2, [r3, #6]
}
 8009aa8:	bf00      	nop
 8009aaa:	3710      	adds	r7, #16
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009aba:	2180      	movs	r1, #128	; 0x80
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f004 fb25 	bl	800e10c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f004 fb21 	bl	800e10c <USBD_LL_StallEP>
}
 8009aca:	bf00      	nop
 8009acc:	3708      	adds	r7, #8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b086      	sub	sp, #24
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	60f8      	str	r0, [r7, #12]
 8009ada:	60b9      	str	r1, [r7, #8]
 8009adc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d036      	beq.n	8009b56 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009aec:	6938      	ldr	r0, [r7, #16]
 8009aee:	f000 f836 	bl	8009b5e <USBD_GetLen>
 8009af2:	4603      	mov	r3, r0
 8009af4:	3301      	adds	r3, #1
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	005b      	lsls	r3, r3, #1
 8009afa:	b29a      	uxth	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009b00:	7dfb      	ldrb	r3, [r7, #23]
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	4413      	add	r3, r2
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	7812      	ldrb	r2, [r2, #0]
 8009b0a:	701a      	strb	r2, [r3, #0]
  idx++;
 8009b0c:	7dfb      	ldrb	r3, [r7, #23]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009b12:	7dfb      	ldrb	r3, [r7, #23]
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	4413      	add	r3, r2
 8009b18:	2203      	movs	r2, #3
 8009b1a:	701a      	strb	r2, [r3, #0]
  idx++;
 8009b1c:	7dfb      	ldrb	r3, [r7, #23]
 8009b1e:	3301      	adds	r3, #1
 8009b20:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009b22:	e013      	b.n	8009b4c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009b24:	7dfb      	ldrb	r3, [r7, #23]
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	4413      	add	r3, r2
 8009b2a:	693a      	ldr	r2, [r7, #16]
 8009b2c:	7812      	ldrb	r2, [r2, #0]
 8009b2e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	3301      	adds	r3, #1
 8009b34:	613b      	str	r3, [r7, #16]
    idx++;
 8009b36:	7dfb      	ldrb	r3, [r7, #23]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009b3c:	7dfb      	ldrb	r3, [r7, #23]
 8009b3e:	68ba      	ldr	r2, [r7, #8]
 8009b40:	4413      	add	r3, r2
 8009b42:	2200      	movs	r2, #0
 8009b44:	701a      	strb	r2, [r3, #0]
    idx++;
 8009b46:	7dfb      	ldrb	r3, [r7, #23]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1e7      	bne.n	8009b24 <USBD_GetString+0x52>
 8009b54:	e000      	b.n	8009b58 <USBD_GetString+0x86>
    return;
 8009b56:	bf00      	nop
  }
}
 8009b58:	3718      	adds	r7, #24
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009b5e:	b480      	push	{r7}
 8009b60:	b085      	sub	sp, #20
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009b66:	2300      	movs	r3, #0
 8009b68:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009b6e:	e005      	b.n	8009b7c <USBD_GetLen+0x1e>
  {
    len++;
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
 8009b72:	3301      	adds	r3, #1
 8009b74:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	3301      	adds	r3, #1
 8009b7a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1f5      	bne.n	8009b70 <USBD_GetLen+0x12>
  }

  return len;
 8009b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3714      	adds	r7, #20
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b084      	sub	sp, #16
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	60f8      	str	r0, [r7, #12]
 8009b9a:	60b9      	str	r1, [r7, #8]
 8009b9c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2202      	movs	r2, #2
 8009ba2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	68ba      	ldr	r2, [r7, #8]
 8009bb6:	2100      	movs	r1, #0
 8009bb8:	68f8      	ldr	r0, [r7, #12]
 8009bba:	f004 fb30 	bl	800e21e <USBD_LL_Transmit>

  return USBD_OK;
 8009bbe:	2300      	movs	r3, #0
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	68ba      	ldr	r2, [r7, #8]
 8009bd8:	2100      	movs	r1, #0
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f004 fb1f 	bl	800e21e <USBD_LL_Transmit>

  return USBD_OK;
 8009be0:	2300      	movs	r3, #0
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3710      	adds	r7, #16
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b084      	sub	sp, #16
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	60f8      	str	r0, [r7, #12]
 8009bf2:	60b9      	str	r1, [r7, #8]
 8009bf4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2203      	movs	r2, #3
 8009bfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	68ba      	ldr	r2, [r7, #8]
 8009c12:	2100      	movs	r1, #0
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f004 fb23 	bl	800e260 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	68ba      	ldr	r2, [r7, #8]
 8009c34:	2100      	movs	r1, #0
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	f004 fb12 	bl	800e260 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3710      	adds	r7, #16
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b082      	sub	sp, #8
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2204      	movs	r2, #4
 8009c52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009c56:	2300      	movs	r3, #0
 8009c58:	2200      	movs	r2, #0
 8009c5a:	2100      	movs	r1, #0
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f004 fade 	bl	800e21e <USBD_LL_Transmit>

  return USBD_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2205      	movs	r2, #5
 8009c78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	2200      	movs	r2, #0
 8009c80:	2100      	movs	r1, #0
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f004 faec 	bl	800e260 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009c92:	b480      	push	{r7}
 8009c94:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009c96:	bf00      	nop
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009ca0:	b480      	push	{r7}
 8009ca2:	b085      	sub	sp, #20
 8009ca4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ca6:	f3ef 8305 	mrs	r3, IPSR
 8009caa:	60bb      	str	r3, [r7, #8]
  return(result);
 8009cac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10f      	bne.n	8009cd2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8009cb6:	607b      	str	r3, [r7, #4]
  return(result);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d105      	bne.n	8009cca <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009cbe:	f3ef 8311 	mrs	r3, BASEPRI
 8009cc2:	603b      	str	r3, [r7, #0]
  return(result);
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d007      	beq.n	8009cda <osKernelInitialize+0x3a>
 8009cca:	4b0e      	ldr	r3, [pc, #56]	; (8009d04 <osKernelInitialize+0x64>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d103      	bne.n	8009cda <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009cd2:	f06f 0305 	mvn.w	r3, #5
 8009cd6:	60fb      	str	r3, [r7, #12]
 8009cd8:	e00c      	b.n	8009cf4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009cda:	4b0a      	ldr	r3, [pc, #40]	; (8009d04 <osKernelInitialize+0x64>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d105      	bne.n	8009cee <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009ce2:	4b08      	ldr	r3, [pc, #32]	; (8009d04 <osKernelInitialize+0x64>)
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	60fb      	str	r3, [r7, #12]
 8009cec:	e002      	b.n	8009cf4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009cee:	f04f 33ff 	mov.w	r3, #4294967295
 8009cf2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3714      	adds	r7, #20
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	200003a8 	.word	0x200003a8

08009d08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d0e:	f3ef 8305 	mrs	r3, IPSR
 8009d12:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d10f      	bne.n	8009d3a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8009d1e:	607b      	str	r3, [r7, #4]
  return(result);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d105      	bne.n	8009d32 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d26:	f3ef 8311 	mrs	r3, BASEPRI
 8009d2a:	603b      	str	r3, [r7, #0]
  return(result);
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d007      	beq.n	8009d42 <osKernelStart+0x3a>
 8009d32:	4b0f      	ldr	r3, [pc, #60]	; (8009d70 <osKernelStart+0x68>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	d103      	bne.n	8009d42 <osKernelStart+0x3a>
    stat = osErrorISR;
 8009d3a:	f06f 0305 	mvn.w	r3, #5
 8009d3e:	60fb      	str	r3, [r7, #12]
 8009d40:	e010      	b.n	8009d64 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009d42:	4b0b      	ldr	r3, [pc, #44]	; (8009d70 <osKernelStart+0x68>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d109      	bne.n	8009d5e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009d4a:	f7ff ffa2 	bl	8009c92 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009d4e:	4b08      	ldr	r3, [pc, #32]	; (8009d70 <osKernelStart+0x68>)
 8009d50:	2202      	movs	r2, #2
 8009d52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009d54:	f002 f89e 	bl	800be94 <vTaskStartScheduler>
      stat = osOK;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	60fb      	str	r3, [r7, #12]
 8009d5c:	e002      	b.n	8009d64 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8009d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009d64:	68fb      	ldr	r3, [r7, #12]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	200003a8 	.word	0x200003a8

08009d74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b090      	sub	sp, #64	; 0x40
 8009d78:	af04      	add	r7, sp, #16
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009d80:	2300      	movs	r3, #0
 8009d82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d84:	f3ef 8305 	mrs	r3, IPSR
 8009d88:	61fb      	str	r3, [r7, #28]
  return(result);
 8009d8a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f040 808f 	bne.w	8009eb0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d92:	f3ef 8310 	mrs	r3, PRIMASK
 8009d96:	61bb      	str	r3, [r7, #24]
  return(result);
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d105      	bne.n	8009daa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d9e:	f3ef 8311 	mrs	r3, BASEPRI
 8009da2:	617b      	str	r3, [r7, #20]
  return(result);
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d003      	beq.n	8009db2 <osThreadNew+0x3e>
 8009daa:	4b44      	ldr	r3, [pc, #272]	; (8009ebc <osThreadNew+0x148>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	d07e      	beq.n	8009eb0 <osThreadNew+0x13c>
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d07b      	beq.n	8009eb0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009db8:	2380      	movs	r3, #128	; 0x80
 8009dba:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009dbc:	2318      	movs	r3, #24
 8009dbe:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8009dc8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d045      	beq.n	8009e5c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d002      	beq.n	8009dde <osThreadNew+0x6a>
        name = attr->name;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	699b      	ldr	r3, [r3, #24]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d002      	beq.n	8009dec <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	699b      	ldr	r3, [r3, #24]
 8009dea:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d008      	beq.n	8009e04 <osThreadNew+0x90>
 8009df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df4:	2b38      	cmp	r3, #56	; 0x38
 8009df6:	d805      	bhi.n	8009e04 <osThreadNew+0x90>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	f003 0301 	and.w	r3, r3, #1
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d001      	beq.n	8009e08 <osThreadNew+0x94>
        return (NULL);
 8009e04:	2300      	movs	r3, #0
 8009e06:	e054      	b.n	8009eb2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	695b      	ldr	r3, [r3, #20]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d003      	beq.n	8009e18 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	695b      	ldr	r3, [r3, #20]
 8009e14:	089b      	lsrs	r3, r3, #2
 8009e16:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00e      	beq.n	8009e3e <osThreadNew+0xca>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	2b6f      	cmp	r3, #111	; 0x6f
 8009e26:	d90a      	bls.n	8009e3e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d006      	beq.n	8009e3e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	695b      	ldr	r3, [r3, #20]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d002      	beq.n	8009e3e <osThreadNew+0xca>
        mem = 1;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	623b      	str	r3, [r7, #32]
 8009e3c:	e010      	b.n	8009e60 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d10c      	bne.n	8009e60 <osThreadNew+0xec>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d108      	bne.n	8009e60 <osThreadNew+0xec>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d104      	bne.n	8009e60 <osThreadNew+0xec>
          mem = 0;
 8009e56:	2300      	movs	r3, #0
 8009e58:	623b      	str	r3, [r7, #32]
 8009e5a:	e001      	b.n	8009e60 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009e60:	6a3b      	ldr	r3, [r7, #32]
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d110      	bne.n	8009e88 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e6e:	9202      	str	r2, [sp, #8]
 8009e70:	9301      	str	r3, [sp, #4]
 8009e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e74:	9300      	str	r3, [sp, #0]
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f001 fd33 	bl	800b8e8 <xTaskCreateStatic>
 8009e82:	4603      	mov	r3, r0
 8009e84:	613b      	str	r3, [r7, #16]
 8009e86:	e013      	b.n	8009eb0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009e88:	6a3b      	ldr	r3, [r7, #32]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d110      	bne.n	8009eb0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e90:	b29a      	uxth	r2, r3
 8009e92:	f107 0310 	add.w	r3, r7, #16
 8009e96:	9301      	str	r3, [sp, #4]
 8009e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ea0:	68f8      	ldr	r0, [r7, #12]
 8009ea2:	f001 fd7b 	bl	800b99c <xTaskCreate>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d001      	beq.n	8009eb0 <osThreadNew+0x13c>
          hTask = NULL;
 8009eac:	2300      	movs	r3, #0
 8009eae:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009eb0:	693b      	ldr	r3, [r7, #16]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3730      	adds	r7, #48	; 0x30
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	200003a8 	.word	0x200003a8

08009ec0 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b088      	sub	sp, #32
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ecc:	f3ef 8305 	mrs	r3, IPSR
 8009ed0:	617b      	str	r3, [r7, #20]
  return(result);
 8009ed2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d10f      	bne.n	8009ef8 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8009edc:	613b      	str	r3, [r7, #16]
  return(result);
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d105      	bne.n	8009ef0 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009ee4:	f3ef 8311 	mrs	r3, BASEPRI
 8009ee8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d007      	beq.n	8009f00 <osThreadSuspend+0x40>
 8009ef0:	4b0c      	ldr	r3, [pc, #48]	; (8009f24 <osThreadSuspend+0x64>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	d103      	bne.n	8009f00 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8009ef8:	f06f 0305 	mvn.w	r3, #5
 8009efc:	61fb      	str	r3, [r7, #28]
 8009efe:	e00b      	b.n	8009f18 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d103      	bne.n	8009f0e <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8009f06:	f06f 0303 	mvn.w	r3, #3
 8009f0a:	61fb      	str	r3, [r7, #28]
 8009f0c:	e004      	b.n	8009f18 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8009f12:	69b8      	ldr	r0, [r7, #24]
 8009f14:	f001 febc 	bl	800bc90 <vTaskSuspend>
  }

  return (stat);
 8009f18:	69fb      	ldr	r3, [r7, #28]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3720      	adds	r7, #32
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	200003a8 	.word	0x200003a8

08009f28 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b088      	sub	sp, #32
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f34:	f3ef 8305 	mrs	r3, IPSR
 8009f38:	617b      	str	r3, [r7, #20]
  return(result);
 8009f3a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d10f      	bne.n	8009f60 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f40:	f3ef 8310 	mrs	r3, PRIMASK
 8009f44:	613b      	str	r3, [r7, #16]
  return(result);
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d105      	bne.n	8009f58 <osThreadResume+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009f4c:	f3ef 8311 	mrs	r3, BASEPRI
 8009f50:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d007      	beq.n	8009f68 <osThreadResume+0x40>
 8009f58:	4b0c      	ldr	r3, [pc, #48]	; (8009f8c <osThreadResume+0x64>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	d103      	bne.n	8009f68 <osThreadResume+0x40>
    stat = osErrorISR;
 8009f60:	f06f 0305 	mvn.w	r3, #5
 8009f64:	61fb      	str	r3, [r7, #28]
 8009f66:	e00b      	b.n	8009f80 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d103      	bne.n	8009f76 <osThreadResume+0x4e>
    stat = osErrorParameter;
 8009f6e:	f06f 0303 	mvn.w	r3, #3
 8009f72:	61fb      	str	r3, [r7, #28]
 8009f74:	e004      	b.n	8009f80 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 8009f76:	2300      	movs	r3, #0
 8009f78:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8009f7a:	69b8      	ldr	r0, [r7, #24]
 8009f7c:	f001 ff2c 	bl	800bdd8 <vTaskResume>
  }

  return (stat);
 8009f80:	69fb      	ldr	r3, [r7, #28]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3720      	adds	r7, #32
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	200003a8 	.word	0x200003a8

08009f90 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b086      	sub	sp, #24
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f98:	f3ef 8305 	mrs	r3, IPSR
 8009f9c:	613b      	str	r3, [r7, #16]
  return(result);
 8009f9e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d10f      	bne.n	8009fc4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fa4:	f3ef 8310 	mrs	r3, PRIMASK
 8009fa8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d105      	bne.n	8009fbc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009fb0:	f3ef 8311 	mrs	r3, BASEPRI
 8009fb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d007      	beq.n	8009fcc <osDelay+0x3c>
 8009fbc:	4b0a      	ldr	r3, [pc, #40]	; (8009fe8 <osDelay+0x58>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d103      	bne.n	8009fcc <osDelay+0x3c>
    stat = osErrorISR;
 8009fc4:	f06f 0305 	mvn.w	r3, #5
 8009fc8:	617b      	str	r3, [r7, #20]
 8009fca:	e007      	b.n	8009fdc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d002      	beq.n	8009fdc <osDelay+0x4c>
      vTaskDelay(ticks);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f001 fe26 	bl	800bc28 <vTaskDelay>
    }
  }

  return (stat);
 8009fdc:	697b      	ldr	r3, [r7, #20]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3718      	adds	r7, #24
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	200003a8 	.word	0x200003a8

08009fec <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b088      	sub	sp, #32
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ff8:	f3ef 8305 	mrs	r3, IPSR
 8009ffc:	617b      	str	r3, [r7, #20]
  return(result);
 8009ffe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 800a000:	2b00      	cmp	r3, #0
 800a002:	d13d      	bne.n	800a080 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a004:	f3ef 8310 	mrs	r3, PRIMASK
 800a008:	613b      	str	r3, [r7, #16]
  return(result);
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d105      	bne.n	800a01c <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a010:	f3ef 8311 	mrs	r3, BASEPRI
 800a014:	60fb      	str	r3, [r7, #12]
  return(result);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d003      	beq.n	800a024 <osEventFlagsNew+0x38>
 800a01c:	4b1b      	ldr	r3, [pc, #108]	; (800a08c <osEventFlagsNew+0xa0>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2b02      	cmp	r3, #2
 800a022:	d02d      	beq.n	800a080 <osEventFlagsNew+0x94>
    mem = -1;
 800a024:	f04f 33ff 	mov.w	r3, #4294967295
 800a028:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d015      	beq.n	800a05c <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d006      	beq.n	800a046 <osEventFlagsNew+0x5a>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	2b1f      	cmp	r3, #31
 800a03e:	d902      	bls.n	800a046 <osEventFlagsNew+0x5a>
        mem = 1;
 800a040:	2301      	movs	r3, #1
 800a042:	61bb      	str	r3, [r7, #24]
 800a044:	e00c      	b.n	800a060 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d108      	bne.n	800a060 <osEventFlagsNew+0x74>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d104      	bne.n	800a060 <osEventFlagsNew+0x74>
          mem = 0;
 800a056:	2300      	movs	r3, #0
 800a058:	61bb      	str	r3, [r7, #24]
 800a05a:	e001      	b.n	800a060 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 800a05c:	2300      	movs	r3, #0
 800a05e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	2b01      	cmp	r3, #1
 800a064:	d106      	bne.n	800a074 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	4618      	mov	r0, r3
 800a06c:	f000 fb5c 	bl	800a728 <xEventGroupCreateStatic>
 800a070:	61f8      	str	r0, [r7, #28]
 800a072:	e005      	b.n	800a080 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d102      	bne.n	800a080 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 800a07a:	f000 fb8a 	bl	800a792 <xEventGroupCreate>
 800a07e:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800a080:	69fb      	ldr	r3, [r7, #28]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3720      	adds	r7, #32
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	200003a8 	.word	0x200003a8

0800a090 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800a090:	b580      	push	{r7, lr}
 800a092:	b088      	sub	sp, #32
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d004      	beq.n	800a0ae <osEventFlagsSet+0x1e>
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d003      	beq.n	800a0b6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800a0ae:	f06f 0303 	mvn.w	r3, #3
 800a0b2:	61fb      	str	r3, [r7, #28]
 800a0b4:	e03a      	b.n	800a12c <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0b6:	f3ef 8305 	mrs	r3, IPSR
 800a0ba:	617b      	str	r3, [r7, #20]
  return(result);
 800a0bc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d10f      	bne.n	800a0e2 <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0c2:	f3ef 8310 	mrs	r3, PRIMASK
 800a0c6:	613b      	str	r3, [r7, #16]
  return(result);
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d105      	bne.n	800a0da <osEventFlagsSet+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a0ce:	f3ef 8311 	mrs	r3, BASEPRI
 800a0d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d021      	beq.n	800a11e <osEventFlagsSet+0x8e>
 800a0da:	4b17      	ldr	r3, [pc, #92]	; (800a138 <osEventFlagsSet+0xa8>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d11d      	bne.n	800a11e <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800a0e6:	f107 0308 	add.w	r3, r7, #8
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	6839      	ldr	r1, [r7, #0]
 800a0ee:	69b8      	ldr	r0, [r7, #24]
 800a0f0:	f000 fd66 	bl	800abc0 <xEventGroupSetBitsFromISR>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d103      	bne.n	800a102 <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 800a0fa:	f06f 0302 	mvn.w	r3, #2
 800a0fe:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800a100:	e013      	b.n	800a12a <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d00e      	beq.n	800a12a <osEventFlagsSet+0x9a>
 800a10c:	4b0b      	ldr	r3, [pc, #44]	; (800a13c <osEventFlagsSet+0xac>)
 800a10e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a112:	601a      	str	r2, [r3, #0]
 800a114:	f3bf 8f4f 	dsb	sy
 800a118:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800a11c:	e005      	b.n	800a12a <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800a11e:	6839      	ldr	r1, [r7, #0]
 800a120:	69b8      	ldr	r0, [r7, #24]
 800a122:	f000 fc88 	bl	800aa36 <xEventGroupSetBits>
 800a126:	61f8      	str	r0, [r7, #28]
 800a128:	e000      	b.n	800a12c <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800a12a:	bf00      	nop
  }

  return (rflags);
 800a12c:	69fb      	ldr	r3, [r7, #28]
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3720      	adds	r7, #32
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	200003a8 	.word	0x200003a8
 800a13c:	e000ed04 	.word	0xe000ed04

0800a140 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 800a140:	b580      	push	{r7, lr}
 800a142:	b088      	sub	sp, #32
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d004      	beq.n	800a15e <osEventFlagsClear+0x1e>
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d003      	beq.n	800a166 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 800a15e:	f06f 0303 	mvn.w	r3, #3
 800a162:	61fb      	str	r3, [r7, #28]
 800a164:	e029      	b.n	800a1ba <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a166:	f3ef 8305 	mrs	r3, IPSR
 800a16a:	617b      	str	r3, [r7, #20]
  return(result);
 800a16c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d10f      	bne.n	800a192 <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a172:	f3ef 8310 	mrs	r3, PRIMASK
 800a176:	613b      	str	r3, [r7, #16]
  return(result);
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d105      	bne.n	800a18a <osEventFlagsClear+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a17e:	f3ef 8311 	mrs	r3, BASEPRI
 800a182:	60fb      	str	r3, [r7, #12]
  return(result);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d012      	beq.n	800a1b0 <osEventFlagsClear+0x70>
 800a18a:	4b0e      	ldr	r3, [pc, #56]	; (800a1c4 <osEventFlagsClear+0x84>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2b02      	cmp	r3, #2
 800a190:	d10e      	bne.n	800a1b0 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800a192:	69b8      	ldr	r0, [r7, #24]
 800a194:	f000 fc2c 	bl	800a9f0 <xEventGroupGetBitsFromISR>
 800a198:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800a19a:	6839      	ldr	r1, [r7, #0]
 800a19c:	69b8      	ldr	r0, [r7, #24]
 800a19e:	f000 fc13 	bl	800a9c8 <xEventGroupClearBitsFromISR>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d108      	bne.n	800a1ba <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 800a1a8:	f06f 0302 	mvn.w	r3, #2
 800a1ac:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800a1ae:	e004      	b.n	800a1ba <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 800a1b0:	6839      	ldr	r1, [r7, #0]
 800a1b2:	69b8      	ldr	r0, [r7, #24]
 800a1b4:	f000 fbd2 	bl	800a95c <xEventGroupClearBits>
 800a1b8:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 800a1ba:	69fb      	ldr	r3, [r7, #28]
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3720      	adds	r7, #32
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	200003a8 	.word	0x200003a8

0800a1c8 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b088      	sub	sp, #32
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if (ef_id == NULL) {
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d102      	bne.n	800a1e0 <osEventFlagsGet+0x18>
    rflags = 0U;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	61fb      	str	r3, [r7, #28]
 800a1de:	e01f      	b.n	800a220 <osEventFlagsGet+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1e0:	f3ef 8305 	mrs	r3, IPSR
 800a1e4:	617b      	str	r3, [r7, #20]
  return(result);
 800a1e6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d10f      	bne.n	800a20c <osEventFlagsGet+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1ec:	f3ef 8310 	mrs	r3, PRIMASK
 800a1f0:	613b      	str	r3, [r7, #16]
  return(result);
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d105      	bne.n	800a204 <osEventFlagsGet+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a1f8:	f3ef 8311 	mrs	r3, BASEPRI
 800a1fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d008      	beq.n	800a216 <osEventFlagsGet+0x4e>
 800a204:	4b09      	ldr	r3, [pc, #36]	; (800a22c <osEventFlagsGet+0x64>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2b02      	cmp	r3, #2
 800a20a:	d104      	bne.n	800a216 <osEventFlagsGet+0x4e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800a20c:	69b8      	ldr	r0, [r7, #24]
 800a20e:	f000 fbef 	bl	800a9f0 <xEventGroupGetBitsFromISR>
 800a212:	61f8      	str	r0, [r7, #28]
 800a214:	e004      	b.n	800a220 <osEventFlagsGet+0x58>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 800a216:	2100      	movs	r1, #0
 800a218:	69b8      	ldr	r0, [r7, #24]
 800a21a:	f000 fb9f 	bl	800a95c <xEventGroupClearBits>
 800a21e:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 800a220:	69fb      	ldr	r3, [r7, #28]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3720      	adds	r7, #32
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	200003a8 	.word	0x200003a8

0800a230 <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800a230:	b580      	push	{r7, lr}
 800a232:	b08e      	sub	sp, #56	; 0x38
 800a234:	af02      	add	r7, sp, #8
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
 800a23c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800a242:	6a3b      	ldr	r3, [r7, #32]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d004      	beq.n	800a252 <osEventFlagsWait+0x22>
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d003      	beq.n	800a25a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800a252:	f06f 0303 	mvn.w	r3, #3
 800a256:	627b      	str	r3, [r7, #36]	; 0x24
 800a258:	e059      	b.n	800a30e <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a25a:	f3ef 8305 	mrs	r3, IPSR
 800a25e:	61fb      	str	r3, [r7, #28]
  return(result);
 800a260:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10f      	bne.n	800a286 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a266:	f3ef 8310 	mrs	r3, PRIMASK
 800a26a:	61bb      	str	r3, [r7, #24]
  return(result);
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d105      	bne.n	800a27e <osEventFlagsWait+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a272:	f3ef 8311 	mrs	r3, BASEPRI
 800a276:	617b      	str	r3, [r7, #20]
  return(result);
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d007      	beq.n	800a28e <osEventFlagsWait+0x5e>
 800a27e:	4b26      	ldr	r3, [pc, #152]	; (800a318 <osEventFlagsWait+0xe8>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2b02      	cmp	r3, #2
 800a284:	d103      	bne.n	800a28e <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 800a286:	f06f 0305 	mvn.w	r3, #5
 800a28a:	627b      	str	r3, [r7, #36]	; 0x24
 800a28c:	e03f      	b.n	800a30e <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f003 0301 	and.w	r3, r3, #1
 800a294:	2b00      	cmp	r3, #0
 800a296:	d002      	beq.n	800a29e <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 800a298:	2301      	movs	r3, #1
 800a29a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a29c:	e001      	b.n	800a2a2 <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f003 0302 	and.w	r3, r3, #2
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d002      	beq.n	800a2b2 <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2b0:	e001      	b.n	800a2b6 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	9300      	str	r3, [sp, #0]
 800a2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2be:	68b9      	ldr	r1, [r7, #8]
 800a2c0:	6a38      	ldr	r0, [r7, #32]
 800a2c2:	f000 fa81 	bl	800a7c8 <xEventGroupWaitBits>
 800a2c6:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f003 0301 	and.w	r3, r3, #1
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00e      	beq.n	800a2f0 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 800a2d2:	68ba      	ldr	r2, [r7, #8]
 800a2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d019      	beq.n	800a30e <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d003      	beq.n	800a2e8 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 800a2e0:	f06f 0301 	mvn.w	r3, #1
 800a2e4:	627b      	str	r3, [r7, #36]	; 0x24
 800a2e6:	e012      	b.n	800a30e <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 800a2e8:	f06f 0302 	mvn.w	r3, #2
 800a2ec:	627b      	str	r3, [r7, #36]	; 0x24
 800a2ee:	e00e      	b.n	800a30e <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800a2f0:	68ba      	ldr	r2, [r7, #8]
 800a2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d109      	bne.n	800a30e <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d003      	beq.n	800a308 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 800a300:	f06f 0301 	mvn.w	r3, #1
 800a304:	627b      	str	r3, [r7, #36]	; 0x24
 800a306:	e002      	b.n	800a30e <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 800a308:	f06f 0302 	mvn.w	r3, #2
 800a30c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 800a30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a310:	4618      	mov	r0, r3
 800a312:	3730      	adds	r7, #48	; 0x30
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	200003a8 	.word	0x200003a8

0800a31c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b08c      	sub	sp, #48	; 0x30
 800a320:	af02      	add	r7, sp, #8
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a328:	2300      	movs	r3, #0
 800a32a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a32c:	f3ef 8305 	mrs	r3, IPSR
 800a330:	61bb      	str	r3, [r7, #24]
  return(result);
 800a332:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a334:	2b00      	cmp	r3, #0
 800a336:	d170      	bne.n	800a41a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a338:	f3ef 8310 	mrs	r3, PRIMASK
 800a33c:	617b      	str	r3, [r7, #20]
  return(result);
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d105      	bne.n	800a350 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a344:	f3ef 8311 	mrs	r3, BASEPRI
 800a348:	613b      	str	r3, [r7, #16]
  return(result);
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d003      	beq.n	800a358 <osMessageQueueNew+0x3c>
 800a350:	4b34      	ldr	r3, [pc, #208]	; (800a424 <osMessageQueueNew+0x108>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2b02      	cmp	r3, #2
 800a356:	d060      	beq.n	800a41a <osMessageQueueNew+0xfe>
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d05d      	beq.n	800a41a <osMessageQueueNew+0xfe>
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d05a      	beq.n	800a41a <osMessageQueueNew+0xfe>
    mem = -1;
 800a364:	f04f 33ff 	mov.w	r3, #4294967295
 800a368:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d029      	beq.n	800a3c4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d012      	beq.n	800a39e <osMessageQueueNew+0x82>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	2b4f      	cmp	r3, #79	; 0x4f
 800a37e:	d90e      	bls.n	800a39e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a384:	2b00      	cmp	r3, #0
 800a386:	d00a      	beq.n	800a39e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	695a      	ldr	r2, [r3, #20]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	68b9      	ldr	r1, [r7, #8]
 800a390:	fb01 f303 	mul.w	r3, r1, r3
 800a394:	429a      	cmp	r2, r3
 800a396:	d302      	bcc.n	800a39e <osMessageQueueNew+0x82>
        mem = 1;
 800a398:	2301      	movs	r3, #1
 800a39a:	623b      	str	r3, [r7, #32]
 800a39c:	e014      	b.n	800a3c8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d110      	bne.n	800a3c8 <osMessageQueueNew+0xac>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	68db      	ldr	r3, [r3, #12]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d10c      	bne.n	800a3c8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d108      	bne.n	800a3c8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	695b      	ldr	r3, [r3, #20]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d104      	bne.n	800a3c8 <osMessageQueueNew+0xac>
          mem = 0;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	623b      	str	r3, [r7, #32]
 800a3c2:	e001      	b.n	800a3c8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a3c8:	6a3b      	ldr	r3, [r7, #32]
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d10c      	bne.n	800a3e8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	691a      	ldr	r2, [r3, #16]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6899      	ldr	r1, [r3, #8]
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	9300      	str	r3, [sp, #0]
 800a3da:	460b      	mov	r3, r1
 800a3dc:	68b9      	ldr	r1, [r7, #8]
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	f000 fd1e 	bl	800ae20 <xQueueGenericCreateStatic>
 800a3e4:	6278      	str	r0, [r7, #36]	; 0x24
 800a3e6:	e008      	b.n	800a3fa <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800a3e8:	6a3b      	ldr	r3, [r7, #32]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d105      	bne.n	800a3fa <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	68b9      	ldr	r1, [r7, #8]
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f000 fd87 	bl	800af06 <xQueueGenericCreate>
 800a3f8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d00c      	beq.n	800a41a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d003      	beq.n	800a40e <osMessageQueueNew+0xf2>
        name = attr->name;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	61fb      	str	r3, [r7, #28]
 800a40c:	e001      	b.n	800a412 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800a40e:	2300      	movs	r3, #0
 800a410:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a412:	69f9      	ldr	r1, [r7, #28]
 800a414:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a416:	f001 fa0b 	bl	800b830 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3728      	adds	r7, #40	; 0x28
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	200003a8 	.word	0x200003a8

0800a428 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a428:	b580      	push	{r7, lr}
 800a42a:	b08a      	sub	sp, #40	; 0x28
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	603b      	str	r3, [r7, #0]
 800a434:	4613      	mov	r3, r2
 800a436:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a43c:	2300      	movs	r3, #0
 800a43e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a440:	f3ef 8305 	mrs	r3, IPSR
 800a444:	61fb      	str	r3, [r7, #28]
  return(result);
 800a446:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d10f      	bne.n	800a46c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a44c:	f3ef 8310 	mrs	r3, PRIMASK
 800a450:	61bb      	str	r3, [r7, #24]
  return(result);
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d105      	bne.n	800a464 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a458:	f3ef 8311 	mrs	r3, BASEPRI
 800a45c:	617b      	str	r3, [r7, #20]
  return(result);
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d02c      	beq.n	800a4be <osMessageQueuePut+0x96>
 800a464:	4b28      	ldr	r3, [pc, #160]	; (800a508 <osMessageQueuePut+0xe0>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2b02      	cmp	r3, #2
 800a46a:	d128      	bne.n	800a4be <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a46c:	6a3b      	ldr	r3, [r7, #32]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d005      	beq.n	800a47e <osMessageQueuePut+0x56>
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d002      	beq.n	800a47e <osMessageQueuePut+0x56>
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d003      	beq.n	800a486 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800a47e:	f06f 0303 	mvn.w	r3, #3
 800a482:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a484:	e039      	b.n	800a4fa <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800a486:	2300      	movs	r3, #0
 800a488:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a48a:	f107 0210 	add.w	r2, r7, #16
 800a48e:	2300      	movs	r3, #0
 800a490:	68b9      	ldr	r1, [r7, #8]
 800a492:	6a38      	ldr	r0, [r7, #32]
 800a494:	f000 fe94 	bl	800b1c0 <xQueueGenericSendFromISR>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d003      	beq.n	800a4a6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800a49e:	f06f 0302 	mvn.w	r3, #2
 800a4a2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a4a4:	e029      	b.n	800a4fa <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d026      	beq.n	800a4fa <osMessageQueuePut+0xd2>
 800a4ac:	4b17      	ldr	r3, [pc, #92]	; (800a50c <osMessageQueuePut+0xe4>)
 800a4ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4b2:	601a      	str	r2, [r3, #0]
 800a4b4:	f3bf 8f4f 	dsb	sy
 800a4b8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a4bc:	e01d      	b.n	800a4fa <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a4be:	6a3b      	ldr	r3, [r7, #32]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d002      	beq.n	800a4ca <osMessageQueuePut+0xa2>
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d103      	bne.n	800a4d2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800a4ca:	f06f 0303 	mvn.w	r3, #3
 800a4ce:	627b      	str	r3, [r7, #36]	; 0x24
 800a4d0:	e014      	b.n	800a4fc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	683a      	ldr	r2, [r7, #0]
 800a4d6:	68b9      	ldr	r1, [r7, #8]
 800a4d8:	6a38      	ldr	r0, [r7, #32]
 800a4da:	f000 fd77 	bl	800afcc <xQueueGenericSend>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d00b      	beq.n	800a4fc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d003      	beq.n	800a4f2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800a4ea:	f06f 0301 	mvn.w	r3, #1
 800a4ee:	627b      	str	r3, [r7, #36]	; 0x24
 800a4f0:	e004      	b.n	800a4fc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800a4f2:	f06f 0302 	mvn.w	r3, #2
 800a4f6:	627b      	str	r3, [r7, #36]	; 0x24
 800a4f8:	e000      	b.n	800a4fc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a4fa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3728      	adds	r7, #40	; 0x28
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	200003a8 	.word	0x200003a8
 800a50c:	e000ed04 	.word	0xe000ed04

0800a510 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a510:	b580      	push	{r7, lr}
 800a512:	b08a      	sub	sp, #40	; 0x28
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	607a      	str	r2, [r7, #4]
 800a51c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a522:	2300      	movs	r3, #0
 800a524:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a526:	f3ef 8305 	mrs	r3, IPSR
 800a52a:	61fb      	str	r3, [r7, #28]
  return(result);
 800a52c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d10f      	bne.n	800a552 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a532:	f3ef 8310 	mrs	r3, PRIMASK
 800a536:	61bb      	str	r3, [r7, #24]
  return(result);
 800a538:	69bb      	ldr	r3, [r7, #24]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d105      	bne.n	800a54a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a53e:	f3ef 8311 	mrs	r3, BASEPRI
 800a542:	617b      	str	r3, [r7, #20]
  return(result);
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d02c      	beq.n	800a5a4 <osMessageQueueGet+0x94>
 800a54a:	4b28      	ldr	r3, [pc, #160]	; (800a5ec <osMessageQueueGet+0xdc>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2b02      	cmp	r3, #2
 800a550:	d128      	bne.n	800a5a4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a552:	6a3b      	ldr	r3, [r7, #32]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d005      	beq.n	800a564 <osMessageQueueGet+0x54>
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d002      	beq.n	800a564 <osMessageQueueGet+0x54>
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d003      	beq.n	800a56c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800a564:	f06f 0303 	mvn.w	r3, #3
 800a568:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a56a:	e038      	b.n	800a5de <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800a56c:	2300      	movs	r3, #0
 800a56e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a570:	f107 0310 	add.w	r3, r7, #16
 800a574:	461a      	mov	r2, r3
 800a576:	68b9      	ldr	r1, [r7, #8]
 800a578:	6a38      	ldr	r0, [r7, #32]
 800a57a:	f000 ff91 	bl	800b4a0 <xQueueReceiveFromISR>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b01      	cmp	r3, #1
 800a582:	d003      	beq.n	800a58c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800a584:	f06f 0302 	mvn.w	r3, #2
 800a588:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a58a:	e028      	b.n	800a5de <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d025      	beq.n	800a5de <osMessageQueueGet+0xce>
 800a592:	4b17      	ldr	r3, [pc, #92]	; (800a5f0 <osMessageQueueGet+0xe0>)
 800a594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a598:	601a      	str	r2, [r3, #0]
 800a59a:	f3bf 8f4f 	dsb	sy
 800a59e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a5a2:	e01c      	b.n	800a5de <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a5a4:	6a3b      	ldr	r3, [r7, #32]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d002      	beq.n	800a5b0 <osMessageQueueGet+0xa0>
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d103      	bne.n	800a5b8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800a5b0:	f06f 0303 	mvn.w	r3, #3
 800a5b4:	627b      	str	r3, [r7, #36]	; 0x24
 800a5b6:	e013      	b.n	800a5e0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a5b8:	683a      	ldr	r2, [r7, #0]
 800a5ba:	68b9      	ldr	r1, [r7, #8]
 800a5bc:	6a38      	ldr	r0, [r7, #32]
 800a5be:	f000 fe93 	bl	800b2e8 <xQueueReceive>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d00b      	beq.n	800a5e0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d003      	beq.n	800a5d6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800a5ce:	f06f 0301 	mvn.w	r3, #1
 800a5d2:	627b      	str	r3, [r7, #36]	; 0x24
 800a5d4:	e004      	b.n	800a5e0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800a5d6:	f06f 0302 	mvn.w	r3, #2
 800a5da:	627b      	str	r3, [r7, #36]	; 0x24
 800a5dc:	e000      	b.n	800a5e0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a5de:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800a5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3728      	adds	r7, #40	; 0x28
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	200003a8 	.word	0x200003a8
 800a5f0:	e000ed04 	.word	0xe000ed04

0800a5f4 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b088      	sub	sp, #32
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d102      	bne.n	800a60c <osMessageQueueGetCount+0x18>
    count = 0U;
 800a606:	2300      	movs	r3, #0
 800a608:	61fb      	str	r3, [r7, #28]
 800a60a:	e01e      	b.n	800a64a <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a60c:	f3ef 8305 	mrs	r3, IPSR
 800a610:	617b      	str	r3, [r7, #20]
  return(result);
 800a612:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a614:	2b00      	cmp	r3, #0
 800a616:	d10f      	bne.n	800a638 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a618:	f3ef 8310 	mrs	r3, PRIMASK
 800a61c:	613b      	str	r3, [r7, #16]
  return(result);
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d105      	bne.n	800a630 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a624:	f3ef 8311 	mrs	r3, BASEPRI
 800a628:	60fb      	str	r3, [r7, #12]
  return(result);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d008      	beq.n	800a642 <osMessageQueueGetCount+0x4e>
 800a630:	4b08      	ldr	r3, [pc, #32]	; (800a654 <osMessageQueueGetCount+0x60>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	2b02      	cmp	r3, #2
 800a636:	d104      	bne.n	800a642 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800a638:	69b8      	ldr	r0, [r7, #24]
 800a63a:	f000 ffcb 	bl	800b5d4 <uxQueueMessagesWaitingFromISR>
 800a63e:	61f8      	str	r0, [r7, #28]
 800a640:	e003      	b.n	800a64a <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800a642:	69b8      	ldr	r0, [r7, #24]
 800a644:	f000 ffa9 	bl	800b59a <uxQueueMessagesWaiting>
 800a648:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800a64a:	69fb      	ldr	r3, [r7, #28]
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3720      	adds	r7, #32
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	200003a8 	.word	0x200003a8

0800a658 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800a658:	b580      	push	{r7, lr}
 800a65a:	b088      	sub	sp, #32
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a664:	f3ef 8305 	mrs	r3, IPSR
 800a668:	617b      	str	r3, [r7, #20]
  return(result);
 800a66a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d10f      	bne.n	800a690 <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a670:	f3ef 8310 	mrs	r3, PRIMASK
 800a674:	613b      	str	r3, [r7, #16]
  return(result);
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d105      	bne.n	800a688 <osMessageQueueReset+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a67c:	f3ef 8311 	mrs	r3, BASEPRI
 800a680:	60fb      	str	r3, [r7, #12]
  return(result);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d007      	beq.n	800a698 <osMessageQueueReset+0x40>
 800a688:	4b0c      	ldr	r3, [pc, #48]	; (800a6bc <osMessageQueueReset+0x64>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2b02      	cmp	r3, #2
 800a68e:	d103      	bne.n	800a698 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 800a690:	f06f 0305 	mvn.w	r3, #5
 800a694:	61fb      	str	r3, [r7, #28]
 800a696:	e00c      	b.n	800a6b2 <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d103      	bne.n	800a6a6 <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 800a69e:	f06f 0303 	mvn.w	r3, #3
 800a6a2:	61fb      	str	r3, [r7, #28]
 800a6a4:	e005      	b.n	800a6b2 <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 800a6aa:	2100      	movs	r1, #0
 800a6ac:	69b8      	ldr	r0, [r7, #24]
 800a6ae:	f000 fb4f 	bl	800ad50 <xQueueGenericReset>
  }

  return (stat);
 800a6b2:	69fb      	ldr	r3, [r7, #28]
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3720      	adds	r7, #32
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	200003a8 	.word	0x200003a8

0800a6c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a6c0:	b480      	push	{r7}
 800a6c2:	b085      	sub	sp, #20
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	4a07      	ldr	r2, [pc, #28]	; (800a6ec <vApplicationGetIdleTaskMemory+0x2c>)
 800a6d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	4a06      	ldr	r2, [pc, #24]	; (800a6f0 <vApplicationGetIdleTaskMemory+0x30>)
 800a6d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2280      	movs	r2, #128	; 0x80
 800a6dc:	601a      	str	r2, [r3, #0]
}
 800a6de:	bf00      	nop
 800a6e0:	3714      	adds	r7, #20
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr
 800a6ea:	bf00      	nop
 800a6ec:	200003ac 	.word	0x200003ac
 800a6f0:	2000041c 	.word	0x2000041c

0800a6f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	4a07      	ldr	r2, [pc, #28]	; (800a720 <vApplicationGetTimerTaskMemory+0x2c>)
 800a704:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	4a06      	ldr	r2, [pc, #24]	; (800a724 <vApplicationGetTimerTaskMemory+0x30>)
 800a70a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a712:	601a      	str	r2, [r3, #0]
}
 800a714:	bf00      	nop
 800a716:	3714      	adds	r7, #20
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr
 800a720:	2000061c 	.word	0x2000061c
 800a724:	2000068c 	.word	0x2000068c

0800a728 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b086      	sub	sp, #24
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d109      	bne.n	800a74a <xEventGroupCreateStatic+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73a:	f383 8811 	msr	BASEPRI, r3
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	f3bf 8f4f 	dsb	sy
 800a746:	613b      	str	r3, [r7, #16]
 800a748:	e7fe      	b.n	800a748 <xEventGroupCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800a74a:	2320      	movs	r3, #32
 800a74c:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	2b20      	cmp	r3, #32
 800a752:	d009      	beq.n	800a768 <xEventGroupCreateStatic+0x40>
 800a754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a758:	f383 8811 	msr	BASEPRI, r3
 800a75c:	f3bf 8f6f 	isb	sy
 800a760:	f3bf 8f4f 	dsb	sy
 800a764:	60fb      	str	r3, [r7, #12]
 800a766:	e7fe      	b.n	800a766 <xEventGroupCreateStatic+0x3e>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00a      	beq.n	800a788 <xEventGroupCreateStatic+0x60>
		{
			pxEventBits->uxEventBits = 0;
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	2200      	movs	r2, #0
 800a776:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	3304      	adds	r3, #4
 800a77c:	4618      	mov	r0, r3
 800a77e:	f000 fa33 	bl	800abe8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	2201      	movs	r2, #1
 800a786:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800a788:	697b      	ldr	r3, [r7, #20]
	}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3718      	adds	r7, #24
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800a792:	b580      	push	{r7, lr}
 800a794:	b082      	sub	sp, #8
 800a796:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800a798:	2020      	movs	r0, #32
 800a79a:	f002 ff11 	bl	800d5c0 <pvPortMalloc>
 800a79e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00a      	beq.n	800a7bc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	3304      	adds	r3, #4
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f000 fa19 	bl	800abe8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800a7bc:	687b      	ldr	r3, [r7, #4]
	}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3708      	adds	r7, #8
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
	...

0800a7c8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b090      	sub	sp, #64	; 0x40
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]
 800a7d4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d109      	bne.n	800a7fc <xEventGroupWaitBits+0x34>
 800a7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ec:	f383 8811 	msr	BASEPRI, r3
 800a7f0:	f3bf 8f6f 	isb	sy
 800a7f4:	f3bf 8f4f 	dsb	sy
 800a7f8:	623b      	str	r3, [r7, #32]
 800a7fa:	e7fe      	b.n	800a7fa <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a802:	2b00      	cmp	r3, #0
 800a804:	d009      	beq.n	800a81a <xEventGroupWaitBits+0x52>
 800a806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80a:	f383 8811 	msr	BASEPRI, r3
 800a80e:	f3bf 8f6f 	isb	sy
 800a812:	f3bf 8f4f 	dsb	sy
 800a816:	61fb      	str	r3, [r7, #28]
 800a818:	e7fe      	b.n	800a818 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d109      	bne.n	800a834 <xEventGroupWaitBits+0x6c>
 800a820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	61bb      	str	r3, [r7, #24]
 800a832:	e7fe      	b.n	800a832 <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a834:	f002 f824 	bl	800c880 <xTaskGetSchedulerState>
 800a838:	4603      	mov	r3, r0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d102      	bne.n	800a844 <xEventGroupWaitBits+0x7c>
 800a83e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a840:	2b00      	cmp	r3, #0
 800a842:	d101      	bne.n	800a848 <xEventGroupWaitBits+0x80>
 800a844:	2301      	movs	r3, #1
 800a846:	e000      	b.n	800a84a <xEventGroupWaitBits+0x82>
 800a848:	2300      	movs	r3, #0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d109      	bne.n	800a862 <xEventGroupWaitBits+0x9a>
 800a84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a852:	f383 8811 	msr	BASEPRI, r3
 800a856:	f3bf 8f6f 	isb	sy
 800a85a:	f3bf 8f4f 	dsb	sy
 800a85e:	617b      	str	r3, [r7, #20]
 800a860:	e7fe      	b.n	800a860 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 800a862:	f001 fb7b 	bl	800bf5c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800a866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800a86c:	683a      	ldr	r2, [r7, #0]
 800a86e:	68b9      	ldr	r1, [r7, #8]
 800a870:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a872:	f000 f983 	bl	800ab7c <prvTestWaitCondition>
 800a876:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800a878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d00e      	beq.n	800a89c <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800a87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a880:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800a882:	2300      	movs	r3, #0
 800a884:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d028      	beq.n	800a8de <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	43db      	mvns	r3, r3
 800a894:	401a      	ands	r2, r3
 800a896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a898:	601a      	str	r2, [r3, #0]
 800a89a:	e020      	b.n	800a8de <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800a89c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d104      	bne.n	800a8ac <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800a8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	633b      	str	r3, [r7, #48]	; 0x30
 800a8aa:	e018      	b.n	800a8de <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d003      	beq.n	800a8ba <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800a8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a8b8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d003      	beq.n	800a8c8 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800a8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a8c6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800a8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ca:	1d18      	adds	r0, r3, #4
 800a8cc:	68ba      	ldr	r2, [r7, #8]
 800a8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	f001 fd59 	bl	800c38c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800a8de:	f001 fb4b 	bl	800bf78 <xTaskResumeAll>
 800a8e2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800a8e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d031      	beq.n	800a94e <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d107      	bne.n	800a900 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 800a8f0:	4b19      	ldr	r3, [pc, #100]	; (800a958 <xEventGroupWaitBits+0x190>)
 800a8f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8f6:	601a      	str	r2, [r3, #0]
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800a900:	f002 f848 	bl	800c994 <uxTaskResetEventItemValue>
 800a904:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800a906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d11a      	bne.n	800a946 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 800a910:	f002 fd3c 	bl	800d38c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800a914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800a91a:	683a      	ldr	r2, [r7, #0]
 800a91c:	68b9      	ldr	r1, [r7, #8]
 800a91e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a920:	f000 f92c 	bl	800ab7c <prvTestWaitCondition>
 800a924:	4603      	mov	r3, r0
 800a926:	2b00      	cmp	r3, #0
 800a928:	d009      	beq.n	800a93e <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d006      	beq.n	800a93e <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	43db      	mvns	r3, r3
 800a938:	401a      	ands	r2, r3
 800a93a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a93c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800a93e:	2301      	movs	r3, #1
 800a940:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800a942:	f002 fd51 	bl	800d3e8 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a948:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a94c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800a94e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a950:	4618      	mov	r0, r3
 800a952:	3740      	adds	r7, #64	; 0x40
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	e000ed04 	.word	0xe000ed04

0800a95c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b086      	sub	sp, #24
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d109      	bne.n	800a984 <xEventGroupClearBits+0x28>
 800a970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a974:	f383 8811 	msr	BASEPRI, r3
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	60fb      	str	r3, [r7, #12]
 800a982:	e7fe      	b.n	800a982 <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d009      	beq.n	800a9a2 <xEventGroupClearBits+0x46>
 800a98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a992:	f383 8811 	msr	BASEPRI, r3
 800a996:	f3bf 8f6f 	isb	sy
 800a99a:	f3bf 8f4f 	dsb	sy
 800a99e:	60bb      	str	r3, [r7, #8]
 800a9a0:	e7fe      	b.n	800a9a0 <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 800a9a2:	f002 fcf3 	bl	800d38c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	43db      	mvns	r3, r3
 800a9b4:	401a      	ands	r2, r3
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800a9ba:	f002 fd15 	bl	800d3e8 <vPortExitCritical>

	return uxReturn;
 800a9be:	693b      	ldr	r3, [r7, #16]
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3718      	adds	r7, #24
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	683a      	ldr	r2, [r7, #0]
 800a9d6:	6879      	ldr	r1, [r7, #4]
 800a9d8:	4804      	ldr	r0, [pc, #16]	; (800a9ec <xEventGroupClearBitsFromISR+0x24>)
 800a9da:	f002 fb8d 	bl	800d0f8 <xTimerPendFunctionCallFromISR>
 800a9de:	60f8      	str	r0, [r7, #12]

		return xReturn;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
	}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	0800ab63 	.word	0x0800ab63

0800a9f0 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b089      	sub	sp, #36	; 0x24
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a9fc:	f3ef 8211 	mrs	r2, BASEPRI
 800aa00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa04:	f383 8811 	msr	BASEPRI, r3
 800aa08:	f3bf 8f6f 	isb	sy
 800aa0c:	f3bf 8f4f 	dsb	sy
 800aa10:	60fa      	str	r2, [r7, #12]
 800aa12:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aa14:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa16:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	617b      	str	r3, [r7, #20]
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	f383 8811 	msr	BASEPRI, r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800aa28:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3724      	adds	r7, #36	; 0x24
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr

0800aa36 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b08e      	sub	sp, #56	; 0x38
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
 800aa3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800aa40:	2300      	movs	r3, #0
 800aa42:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d109      	bne.n	800aa66 <xEventGroupSetBits+0x30>
	__asm volatile
 800aa52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa56:	f383 8811 	msr	BASEPRI, r3
 800aa5a:	f3bf 8f6f 	isb	sy
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	613b      	str	r3, [r7, #16]
 800aa64:	e7fe      	b.n	800aa64 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d009      	beq.n	800aa84 <xEventGroupSetBits+0x4e>
 800aa70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa74:	f383 8811 	msr	BASEPRI, r3
 800aa78:	f3bf 8f6f 	isb	sy
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	60fb      	str	r3, [r7, #12]
 800aa82:	e7fe      	b.n	800aa82 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800aa84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa86:	3304      	adds	r3, #4
 800aa88:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8c:	3308      	adds	r3, #8
 800aa8e:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800aa90:	f001 fa64 	bl	800bf5c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800aa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800aa9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	431a      	orrs	r2, r3
 800aaa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa4:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800aaa6:	e03c      	b.n	800ab22 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 800aaa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800aaae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800aab4:	2300      	movs	r3, #0
 800aab6:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800aabe:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aac6:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d108      	bne.n	800aae4 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800aad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	4013      	ands	r3, r2
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d00b      	beq.n	800aaf6 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 800aade:	2301      	movs	r3, #1
 800aae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aae2:	e008      	b.n	800aaf6 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800aae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	4013      	ands	r3, r2
 800aaec:	69ba      	ldr	r2, [r7, #24]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d101      	bne.n	800aaf6 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800aaf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d010      	beq.n	800ab1e <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d003      	beq.n	800ab0e <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800ab06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800ab0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ab16:	4619      	mov	r1, r3
 800ab18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ab1a:	f001 fcfd 	bl	800c518 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800ab1e:	69fb      	ldr	r3, [r7, #28]
 800ab20:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800ab22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab24:	6a3b      	ldr	r3, [r7, #32]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d1be      	bne.n	800aaa8 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800ab2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab30:	43db      	mvns	r3, r3
 800ab32:	401a      	ands	r2, r3
 800ab34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab36:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800ab38:	f001 fa1e 	bl	800bf78 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800ab3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3e:	681b      	ldr	r3, [r3, #0]
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3738      	adds	r7, #56	; 0x38
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800ab52:	6839      	ldr	r1, [r7, #0]
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f7ff ff6e 	bl	800aa36 <xEventGroupSetBits>
}
 800ab5a:	bf00      	nop
 800ab5c:	3708      	adds	r7, #8
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b082      	sub	sp, #8
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
 800ab6a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800ab6c:	6839      	ldr	r1, [r7, #0]
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7ff fef4 	bl	800a95c <xEventGroupClearBits>
}
 800ab74:	bf00      	nop
 800ab76:	3708      	adds	r7, #8
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b087      	sub	sp, #28
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d107      	bne.n	800aba2 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	4013      	ands	r3, r2
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00a      	beq.n	800abb2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	617b      	str	r3, [r7, #20]
 800aba0:	e007      	b.n	800abb2 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800aba2:	68fa      	ldr	r2, [r7, #12]
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	4013      	ands	r3, r2
 800aba8:	68ba      	ldr	r2, [r7, #8]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d101      	bne.n	800abb2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800abae:	2301      	movs	r3, #1
 800abb0:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800abb2:	697b      	ldr	r3, [r7, #20]
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	371c      	adds	r7, #28
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	68ba      	ldr	r2, [r7, #8]
 800abd0:	68f9      	ldr	r1, [r7, #12]
 800abd2:	4804      	ldr	r0, [pc, #16]	; (800abe4 <xEventGroupSetBitsFromISR+0x24>)
 800abd4:	f002 fa90 	bl	800d0f8 <xTimerPendFunctionCallFromISR>
 800abd8:	6178      	str	r0, [r7, #20]

		return xReturn;
 800abda:	697b      	ldr	r3, [r7, #20]
	}
 800abdc:	4618      	mov	r0, r3
 800abde:	3718      	adds	r7, #24
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	0800ab49 	.word	0x0800ab49

0800abe8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f103 0208 	add.w	r2, r3, #8
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f04f 32ff 	mov.w	r2, #4294967295
 800ac00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f103 0208 	add.w	r2, r3, #8
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f103 0208 	add.w	r2, r3, #8
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ac1c:	bf00      	nop
 800ac1e:	370c      	adds	r7, #12
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2200      	movs	r2, #0
 800ac34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ac36:	bf00      	nop
 800ac38:	370c      	adds	r7, #12
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr

0800ac42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac42:	b480      	push	{r7}
 800ac44:	b085      	sub	sp, #20
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
 800ac4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	689a      	ldr	r2, [r3, #8]
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	683a      	ldr	r2, [r7, #0]
 800ac66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	683a      	ldr	r2, [r7, #0]
 800ac6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	1c5a      	adds	r2, r3, #1
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	601a      	str	r2, [r3, #0]
}
 800ac7e:	bf00      	nop
 800ac80:	3714      	adds	r7, #20
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr

0800ac8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac8a:	b480      	push	{r7}
 800ac8c:	b085      	sub	sp, #20
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
 800ac92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aca0:	d103      	bne.n	800acaa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	60fb      	str	r3, [r7, #12]
 800aca8:	e00c      	b.n	800acc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	3308      	adds	r3, #8
 800acae:	60fb      	str	r3, [r7, #12]
 800acb0:	e002      	b.n	800acb8 <vListInsert+0x2e>
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	60fb      	str	r3, [r7, #12]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	68ba      	ldr	r2, [r7, #8]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d2f6      	bcs.n	800acb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	685a      	ldr	r2, [r3, #4]
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	683a      	ldr	r2, [r7, #0]
 800acd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	683a      	ldr	r2, [r7, #0]
 800acde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	1c5a      	adds	r2, r3, #1
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	601a      	str	r2, [r3, #0]
}
 800acf0:	bf00      	nop
 800acf2:	3714      	adds	r7, #20
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800acfc:	b480      	push	{r7}
 800acfe:	b085      	sub	sp, #20
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	691b      	ldr	r3, [r3, #16]
 800ad08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	6892      	ldr	r2, [r2, #8]
 800ad12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	6852      	ldr	r2, [r2, #4]
 800ad1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d103      	bne.n	800ad30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	689a      	ldr	r2, [r3, #8]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	1e5a      	subs	r2, r3, #1
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3714      	adds	r7, #20
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr

0800ad50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d109      	bne.n	800ad78 <xQueueGenericReset+0x28>
 800ad64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad68:	f383 8811 	msr	BASEPRI, r3
 800ad6c:	f3bf 8f6f 	isb	sy
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	60bb      	str	r3, [r7, #8]
 800ad76:	e7fe      	b.n	800ad76 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800ad78:	f002 fb08 	bl	800d38c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad84:	68f9      	ldr	r1, [r7, #12]
 800ad86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ad88:	fb01 f303 	mul.w	r3, r1, r3
 800ad8c:	441a      	add	r2, r3
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2200      	movs	r2, #0
 800ad96:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ada8:	3b01      	subs	r3, #1
 800adaa:	68f9      	ldr	r1, [r7, #12]
 800adac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800adae:	fb01 f303 	mul.w	r3, r1, r3
 800adb2:	441a      	add	r2, r3
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	22ff      	movs	r2, #255	; 0xff
 800adbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	22ff      	movs	r2, #255	; 0xff
 800adc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d114      	bne.n	800adf8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	691b      	ldr	r3, [r3, #16]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d01a      	beq.n	800ae0c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	3310      	adds	r3, #16
 800adda:	4618      	mov	r0, r3
 800addc:	f001 fb3a 	bl	800c454 <xTaskRemoveFromEventList>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d012      	beq.n	800ae0c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ade6:	4b0d      	ldr	r3, [pc, #52]	; (800ae1c <xQueueGenericReset+0xcc>)
 800ade8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adec:	601a      	str	r2, [r3, #0]
 800adee:	f3bf 8f4f 	dsb	sy
 800adf2:	f3bf 8f6f 	isb	sy
 800adf6:	e009      	b.n	800ae0c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	3310      	adds	r3, #16
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7ff fef3 	bl	800abe8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	3324      	adds	r3, #36	; 0x24
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7ff feee 	bl	800abe8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ae0c:	f002 faec 	bl	800d3e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ae10:	2301      	movs	r3, #1
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3710      	adds	r7, #16
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	e000ed04 	.word	0xe000ed04

0800ae20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b08e      	sub	sp, #56	; 0x38
 800ae24:	af02      	add	r7, sp, #8
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	607a      	str	r2, [r7, #4]
 800ae2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d109      	bne.n	800ae48 <xQueueGenericCreateStatic+0x28>
 800ae34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae46:	e7fe      	b.n	800ae46 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d109      	bne.n	800ae62 <xQueueGenericCreateStatic+0x42>
 800ae4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae52:	f383 8811 	msr	BASEPRI, r3
 800ae56:	f3bf 8f6f 	isb	sy
 800ae5a:	f3bf 8f4f 	dsb	sy
 800ae5e:	627b      	str	r3, [r7, #36]	; 0x24
 800ae60:	e7fe      	b.n	800ae60 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d002      	beq.n	800ae6e <xQueueGenericCreateStatic+0x4e>
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d001      	beq.n	800ae72 <xQueueGenericCreateStatic+0x52>
 800ae6e:	2301      	movs	r3, #1
 800ae70:	e000      	b.n	800ae74 <xQueueGenericCreateStatic+0x54>
 800ae72:	2300      	movs	r3, #0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d109      	bne.n	800ae8c <xQueueGenericCreateStatic+0x6c>
 800ae78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae7c:	f383 8811 	msr	BASEPRI, r3
 800ae80:	f3bf 8f6f 	isb	sy
 800ae84:	f3bf 8f4f 	dsb	sy
 800ae88:	623b      	str	r3, [r7, #32]
 800ae8a:	e7fe      	b.n	800ae8a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d102      	bne.n	800ae98 <xQueueGenericCreateStatic+0x78>
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d101      	bne.n	800ae9c <xQueueGenericCreateStatic+0x7c>
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e000      	b.n	800ae9e <xQueueGenericCreateStatic+0x7e>
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d109      	bne.n	800aeb6 <xQueueGenericCreateStatic+0x96>
 800aea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea6:	f383 8811 	msr	BASEPRI, r3
 800aeaa:	f3bf 8f6f 	isb	sy
 800aeae:	f3bf 8f4f 	dsb	sy
 800aeb2:	61fb      	str	r3, [r7, #28]
 800aeb4:	e7fe      	b.n	800aeb4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aeb6:	2350      	movs	r3, #80	; 0x50
 800aeb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	2b50      	cmp	r3, #80	; 0x50
 800aebe:	d009      	beq.n	800aed4 <xQueueGenericCreateStatic+0xb4>
 800aec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec4:	f383 8811 	msr	BASEPRI, r3
 800aec8:	f3bf 8f6f 	isb	sy
 800aecc:	f3bf 8f4f 	dsb	sy
 800aed0:	61bb      	str	r3, [r7, #24]
 800aed2:	e7fe      	b.n	800aed2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aed4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800aeda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d00d      	beq.n	800aefc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee2:	2201      	movs	r2, #1
 800aee4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aee8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800aeec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeee:	9300      	str	r3, [sp, #0]
 800aef0:	4613      	mov	r3, r2
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	68b9      	ldr	r1, [r7, #8]
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f000 f844 	bl	800af84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800aefe:	4618      	mov	r0, r3
 800af00:	3730      	adds	r7, #48	; 0x30
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800af06:	b580      	push	{r7, lr}
 800af08:	b08a      	sub	sp, #40	; 0x28
 800af0a:	af02      	add	r7, sp, #8
 800af0c:	60f8      	str	r0, [r7, #12]
 800af0e:	60b9      	str	r1, [r7, #8]
 800af10:	4613      	mov	r3, r2
 800af12:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d109      	bne.n	800af2e <xQueueGenericCreate+0x28>
 800af1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1e:	f383 8811 	msr	BASEPRI, r3
 800af22:	f3bf 8f6f 	isb	sy
 800af26:	f3bf 8f4f 	dsb	sy
 800af2a:	613b      	str	r3, [r7, #16]
 800af2c:	e7fe      	b.n	800af2c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d102      	bne.n	800af3a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800af34:	2300      	movs	r3, #0
 800af36:	61fb      	str	r3, [r7, #28]
 800af38:	e004      	b.n	800af44 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	68ba      	ldr	r2, [r7, #8]
 800af3e:	fb02 f303 	mul.w	r3, r2, r3
 800af42:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800af44:	69fb      	ldr	r3, [r7, #28]
 800af46:	3350      	adds	r3, #80	; 0x50
 800af48:	4618      	mov	r0, r3
 800af4a:	f002 fb39 	bl	800d5c0 <pvPortMalloc>
 800af4e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d011      	beq.n	800af7a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800af56:	69bb      	ldr	r3, [r7, #24]
 800af58:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	3350      	adds	r3, #80	; 0x50
 800af5e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	2200      	movs	r2, #0
 800af64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800af68:	79fa      	ldrb	r2, [r7, #7]
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	9300      	str	r3, [sp, #0]
 800af6e:	4613      	mov	r3, r2
 800af70:	697a      	ldr	r2, [r7, #20]
 800af72:	68b9      	ldr	r1, [r7, #8]
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f000 f805 	bl	800af84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800af7a:	69bb      	ldr	r3, [r7, #24]
	}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3720      	adds	r7, #32
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	607a      	str	r2, [r7, #4]
 800af90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d103      	bne.n	800afa0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	69ba      	ldr	r2, [r7, #24]
 800af9c:	601a      	str	r2, [r3, #0]
 800af9e:	e002      	b.n	800afa6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800afa0:	69bb      	ldr	r3, [r7, #24]
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	68ba      	ldr	r2, [r7, #8]
 800afb0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800afb2:	2101      	movs	r1, #1
 800afb4:	69b8      	ldr	r0, [r7, #24]
 800afb6:	f7ff fecb 	bl	800ad50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	78fa      	ldrb	r2, [r7, #3]
 800afbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800afc2:	bf00      	nop
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
	...

0800afcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b08e      	sub	sp, #56	; 0x38
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	607a      	str	r2, [r7, #4]
 800afd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800afda:	2300      	movs	r3, #0
 800afdc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800afe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d109      	bne.n	800affc <xQueueGenericSend+0x30>
 800afe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afec:	f383 8811 	msr	BASEPRI, r3
 800aff0:	f3bf 8f6f 	isb	sy
 800aff4:	f3bf 8f4f 	dsb	sy
 800aff8:	62bb      	str	r3, [r7, #40]	; 0x28
 800affa:	e7fe      	b.n	800affa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d103      	bne.n	800b00a <xQueueGenericSend+0x3e>
 800b002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b006:	2b00      	cmp	r3, #0
 800b008:	d101      	bne.n	800b00e <xQueueGenericSend+0x42>
 800b00a:	2301      	movs	r3, #1
 800b00c:	e000      	b.n	800b010 <xQueueGenericSend+0x44>
 800b00e:	2300      	movs	r3, #0
 800b010:	2b00      	cmp	r3, #0
 800b012:	d109      	bne.n	800b028 <xQueueGenericSend+0x5c>
 800b014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b018:	f383 8811 	msr	BASEPRI, r3
 800b01c:	f3bf 8f6f 	isb	sy
 800b020:	f3bf 8f4f 	dsb	sy
 800b024:	627b      	str	r3, [r7, #36]	; 0x24
 800b026:	e7fe      	b.n	800b026 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	2b02      	cmp	r3, #2
 800b02c:	d103      	bne.n	800b036 <xQueueGenericSend+0x6a>
 800b02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b032:	2b01      	cmp	r3, #1
 800b034:	d101      	bne.n	800b03a <xQueueGenericSend+0x6e>
 800b036:	2301      	movs	r3, #1
 800b038:	e000      	b.n	800b03c <xQueueGenericSend+0x70>
 800b03a:	2300      	movs	r3, #0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d109      	bne.n	800b054 <xQueueGenericSend+0x88>
 800b040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b044:	f383 8811 	msr	BASEPRI, r3
 800b048:	f3bf 8f6f 	isb	sy
 800b04c:	f3bf 8f4f 	dsb	sy
 800b050:	623b      	str	r3, [r7, #32]
 800b052:	e7fe      	b.n	800b052 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b054:	f001 fc14 	bl	800c880 <xTaskGetSchedulerState>
 800b058:	4603      	mov	r3, r0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d102      	bne.n	800b064 <xQueueGenericSend+0x98>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <xQueueGenericSend+0x9c>
 800b064:	2301      	movs	r3, #1
 800b066:	e000      	b.n	800b06a <xQueueGenericSend+0x9e>
 800b068:	2300      	movs	r3, #0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d109      	bne.n	800b082 <xQueueGenericSend+0xb6>
 800b06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b072:	f383 8811 	msr	BASEPRI, r3
 800b076:	f3bf 8f6f 	isb	sy
 800b07a:	f3bf 8f4f 	dsb	sy
 800b07e:	61fb      	str	r3, [r7, #28]
 800b080:	e7fe      	b.n	800b080 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b082:	f002 f983 	bl	800d38c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b08e:	429a      	cmp	r2, r3
 800b090:	d302      	bcc.n	800b098 <xQueueGenericSend+0xcc>
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	2b02      	cmp	r3, #2
 800b096:	d129      	bne.n	800b0ec <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b098:	683a      	ldr	r2, [r7, #0]
 800b09a:	68b9      	ldr	r1, [r7, #8]
 800b09c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b09e:	f000 fab6 	bl	800b60e <prvCopyDataToQueue>
 800b0a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d010      	beq.n	800b0ce <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ae:	3324      	adds	r3, #36	; 0x24
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f001 f9cf 	bl	800c454 <xTaskRemoveFromEventList>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d013      	beq.n	800b0e4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b0bc:	4b3f      	ldr	r3, [pc, #252]	; (800b1bc <xQueueGenericSend+0x1f0>)
 800b0be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0c2:	601a      	str	r2, [r3, #0]
 800b0c4:	f3bf 8f4f 	dsb	sy
 800b0c8:	f3bf 8f6f 	isb	sy
 800b0cc:	e00a      	b.n	800b0e4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d007      	beq.n	800b0e4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b0d4:	4b39      	ldr	r3, [pc, #228]	; (800b1bc <xQueueGenericSend+0x1f0>)
 800b0d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0da:	601a      	str	r2, [r3, #0]
 800b0dc:	f3bf 8f4f 	dsb	sy
 800b0e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b0e4:	f002 f980 	bl	800d3e8 <vPortExitCritical>
				return pdPASS;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	e063      	b.n	800b1b4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d103      	bne.n	800b0fa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b0f2:	f002 f979 	bl	800d3e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	e05c      	b.n	800b1b4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b0fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d106      	bne.n	800b10e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b100:	f107 0314 	add.w	r3, r7, #20
 800b104:	4618      	mov	r0, r3
 800b106:	f001 fa67 	bl	800c5d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b10a:	2301      	movs	r3, #1
 800b10c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b10e:	f002 f96b 	bl	800d3e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b112:	f000 ff23 	bl	800bf5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b116:	f002 f939 	bl	800d38c <vPortEnterCritical>
 800b11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b120:	b25b      	sxtb	r3, r3
 800b122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b126:	d103      	bne.n	800b130 <xQueueGenericSend+0x164>
 800b128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12a:	2200      	movs	r2, #0
 800b12c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b132:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b136:	b25b      	sxtb	r3, r3
 800b138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b13c:	d103      	bne.n	800b146 <xQueueGenericSend+0x17a>
 800b13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b140:	2200      	movs	r2, #0
 800b142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b146:	f002 f94f 	bl	800d3e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b14a:	1d3a      	adds	r2, r7, #4
 800b14c:	f107 0314 	add.w	r3, r7, #20
 800b150:	4611      	mov	r1, r2
 800b152:	4618      	mov	r0, r3
 800b154:	f001 fa56 	bl	800c604 <xTaskCheckForTimeOut>
 800b158:	4603      	mov	r3, r0
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d124      	bne.n	800b1a8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b15e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b160:	f000 fb4d 	bl	800b7fe <prvIsQueueFull>
 800b164:	4603      	mov	r3, r0
 800b166:	2b00      	cmp	r3, #0
 800b168:	d018      	beq.n	800b19c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16c:	3310      	adds	r3, #16
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	4611      	mov	r1, r2
 800b172:	4618      	mov	r0, r3
 800b174:	f001 f8e6 	bl	800c344 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b178:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b17a:	f000 fad8 	bl	800b72e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b17e:	f000 fefb 	bl	800bf78 <xTaskResumeAll>
 800b182:	4603      	mov	r3, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	f47f af7c 	bne.w	800b082 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800b18a:	4b0c      	ldr	r3, [pc, #48]	; (800b1bc <xQueueGenericSend+0x1f0>)
 800b18c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b190:	601a      	str	r2, [r3, #0]
 800b192:	f3bf 8f4f 	dsb	sy
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	e772      	b.n	800b082 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b19c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b19e:	f000 fac6 	bl	800b72e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1a2:	f000 fee9 	bl	800bf78 <xTaskResumeAll>
 800b1a6:	e76c      	b.n	800b082 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b1a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1aa:	f000 fac0 	bl	800b72e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1ae:	f000 fee3 	bl	800bf78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b1b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3738      	adds	r7, #56	; 0x38
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}
 800b1bc:	e000ed04 	.word	0xe000ed04

0800b1c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b08e      	sub	sp, #56	; 0x38
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	607a      	str	r2, [r7, #4]
 800b1cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d109      	bne.n	800b1ec <xQueueGenericSendFromISR+0x2c>
 800b1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1dc:	f383 8811 	msr	BASEPRI, r3
 800b1e0:	f3bf 8f6f 	isb	sy
 800b1e4:	f3bf 8f4f 	dsb	sy
 800b1e8:	627b      	str	r3, [r7, #36]	; 0x24
 800b1ea:	e7fe      	b.n	800b1ea <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d103      	bne.n	800b1fa <xQueueGenericSendFromISR+0x3a>
 800b1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d101      	bne.n	800b1fe <xQueueGenericSendFromISR+0x3e>
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	e000      	b.n	800b200 <xQueueGenericSendFromISR+0x40>
 800b1fe:	2300      	movs	r3, #0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d109      	bne.n	800b218 <xQueueGenericSendFromISR+0x58>
 800b204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b208:	f383 8811 	msr	BASEPRI, r3
 800b20c:	f3bf 8f6f 	isb	sy
 800b210:	f3bf 8f4f 	dsb	sy
 800b214:	623b      	str	r3, [r7, #32]
 800b216:	e7fe      	b.n	800b216 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	2b02      	cmp	r3, #2
 800b21c:	d103      	bne.n	800b226 <xQueueGenericSendFromISR+0x66>
 800b21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b222:	2b01      	cmp	r3, #1
 800b224:	d101      	bne.n	800b22a <xQueueGenericSendFromISR+0x6a>
 800b226:	2301      	movs	r3, #1
 800b228:	e000      	b.n	800b22c <xQueueGenericSendFromISR+0x6c>
 800b22a:	2300      	movs	r3, #0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d109      	bne.n	800b244 <xQueueGenericSendFromISR+0x84>
 800b230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b234:	f383 8811 	msr	BASEPRI, r3
 800b238:	f3bf 8f6f 	isb	sy
 800b23c:	f3bf 8f4f 	dsb	sy
 800b240:	61fb      	str	r3, [r7, #28]
 800b242:	e7fe      	b.n	800b242 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b244:	f002 f97e 	bl	800d544 <vPortValidateInterruptPriority>
	__asm volatile
 800b248:	f3ef 8211 	mrs	r2, BASEPRI
 800b24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b250:	f383 8811 	msr	BASEPRI, r3
 800b254:	f3bf 8f6f 	isb	sy
 800b258:	f3bf 8f4f 	dsb	sy
 800b25c:	61ba      	str	r2, [r7, #24]
 800b25e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b260:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b262:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d302      	bcc.n	800b276 <xQueueGenericSendFromISR+0xb6>
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	2b02      	cmp	r3, #2
 800b274:	d12c      	bne.n	800b2d0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b27c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b280:	683a      	ldr	r2, [r7, #0]
 800b282:	68b9      	ldr	r1, [r7, #8]
 800b284:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b286:	f000 f9c2 	bl	800b60e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b28a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b292:	d112      	bne.n	800b2ba <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d016      	beq.n	800b2ca <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29e:	3324      	adds	r3, #36	; 0x24
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f001 f8d7 	bl	800c454 <xTaskRemoveFromEventList>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d00e      	beq.n	800b2ca <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d00b      	beq.n	800b2ca <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	601a      	str	r2, [r3, #0]
 800b2b8:	e007      	b.n	800b2ca <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b2ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b2be:	3301      	adds	r3, #1
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	b25a      	sxtb	r2, r3
 800b2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b2ce:	e001      	b.n	800b2d4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	637b      	str	r3, [r7, #52]	; 0x34
 800b2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d6:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3738      	adds	r7, #56	; 0x38
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b08c      	sub	sp, #48	; 0x30
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d109      	bne.n	800b316 <xQueueReceive+0x2e>
	__asm volatile
 800b302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b306:	f383 8811 	msr	BASEPRI, r3
 800b30a:	f3bf 8f6f 	isb	sy
 800b30e:	f3bf 8f4f 	dsb	sy
 800b312:	623b      	str	r3, [r7, #32]
 800b314:	e7fe      	b.n	800b314 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d103      	bne.n	800b324 <xQueueReceive+0x3c>
 800b31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b320:	2b00      	cmp	r3, #0
 800b322:	d101      	bne.n	800b328 <xQueueReceive+0x40>
 800b324:	2301      	movs	r3, #1
 800b326:	e000      	b.n	800b32a <xQueueReceive+0x42>
 800b328:	2300      	movs	r3, #0
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d109      	bne.n	800b342 <xQueueReceive+0x5a>
 800b32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b332:	f383 8811 	msr	BASEPRI, r3
 800b336:	f3bf 8f6f 	isb	sy
 800b33a:	f3bf 8f4f 	dsb	sy
 800b33e:	61fb      	str	r3, [r7, #28]
 800b340:	e7fe      	b.n	800b340 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b342:	f001 fa9d 	bl	800c880 <xTaskGetSchedulerState>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d102      	bne.n	800b352 <xQueueReceive+0x6a>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d101      	bne.n	800b356 <xQueueReceive+0x6e>
 800b352:	2301      	movs	r3, #1
 800b354:	e000      	b.n	800b358 <xQueueReceive+0x70>
 800b356:	2300      	movs	r3, #0
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d109      	bne.n	800b370 <xQueueReceive+0x88>
 800b35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b360:	f383 8811 	msr	BASEPRI, r3
 800b364:	f3bf 8f6f 	isb	sy
 800b368:	f3bf 8f4f 	dsb	sy
 800b36c:	61bb      	str	r3, [r7, #24]
 800b36e:	e7fe      	b.n	800b36e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b370:	f002 f80c 	bl	800d38c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b378:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d01f      	beq.n	800b3c0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b380:	68b9      	ldr	r1, [r7, #8]
 800b382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b384:	f000 f9ad 	bl	800b6e2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38a:	1e5a      	subs	r2, r3, #1
 800b38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b392:	691b      	ldr	r3, [r3, #16]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d00f      	beq.n	800b3b8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39a:	3310      	adds	r3, #16
 800b39c:	4618      	mov	r0, r3
 800b39e:	f001 f859 	bl	800c454 <xTaskRemoveFromEventList>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d007      	beq.n	800b3b8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b3a8:	4b3c      	ldr	r3, [pc, #240]	; (800b49c <xQueueReceive+0x1b4>)
 800b3aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3ae:	601a      	str	r2, [r3, #0]
 800b3b0:	f3bf 8f4f 	dsb	sy
 800b3b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b3b8:	f002 f816 	bl	800d3e8 <vPortExitCritical>
				return pdPASS;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e069      	b.n	800b494 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d103      	bne.n	800b3ce <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b3c6:	f002 f80f 	bl	800d3e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	e062      	b.n	800b494 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d106      	bne.n	800b3e2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b3d4:	f107 0310 	add.w	r3, r7, #16
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f001 f8fd 	bl	800c5d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b3e2:	f002 f801 	bl	800d3e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b3e6:	f000 fdb9 	bl	800bf5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3ea:	f001 ffcf 	bl	800d38c <vPortEnterCritical>
 800b3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3f4:	b25b      	sxtb	r3, r3
 800b3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3fa:	d103      	bne.n	800b404 <xQueueReceive+0x11c>
 800b3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3fe:	2200      	movs	r2, #0
 800b400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b406:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b40a:	b25b      	sxtb	r3, r3
 800b40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b410:	d103      	bne.n	800b41a <xQueueReceive+0x132>
 800b412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b414:	2200      	movs	r2, #0
 800b416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b41a:	f001 ffe5 	bl	800d3e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b41e:	1d3a      	adds	r2, r7, #4
 800b420:	f107 0310 	add.w	r3, r7, #16
 800b424:	4611      	mov	r1, r2
 800b426:	4618      	mov	r0, r3
 800b428:	f001 f8ec 	bl	800c604 <xTaskCheckForTimeOut>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d123      	bne.n	800b47a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b434:	f000 f9cd 	bl	800b7d2 <prvIsQueueEmpty>
 800b438:	4603      	mov	r3, r0
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d017      	beq.n	800b46e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b440:	3324      	adds	r3, #36	; 0x24
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	4611      	mov	r1, r2
 800b446:	4618      	mov	r0, r3
 800b448:	f000 ff7c 	bl	800c344 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b44c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b44e:	f000 f96e 	bl	800b72e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b452:	f000 fd91 	bl	800bf78 <xTaskResumeAll>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d189      	bne.n	800b370 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800b45c:	4b0f      	ldr	r3, [pc, #60]	; (800b49c <xQueueReceive+0x1b4>)
 800b45e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b462:	601a      	str	r2, [r3, #0]
 800b464:	f3bf 8f4f 	dsb	sy
 800b468:	f3bf 8f6f 	isb	sy
 800b46c:	e780      	b.n	800b370 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b46e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b470:	f000 f95d 	bl	800b72e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b474:	f000 fd80 	bl	800bf78 <xTaskResumeAll>
 800b478:	e77a      	b.n	800b370 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b47a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b47c:	f000 f957 	bl	800b72e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b480:	f000 fd7a 	bl	800bf78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b486:	f000 f9a4 	bl	800b7d2 <prvIsQueueEmpty>
 800b48a:	4603      	mov	r3, r0
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	f43f af6f 	beq.w	800b370 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b492:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b494:	4618      	mov	r0, r3
 800b496:	3730      	adds	r7, #48	; 0x30
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	e000ed04 	.word	0xe000ed04

0800b4a0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b08e      	sub	sp, #56	; 0x38
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	60b9      	str	r1, [r7, #8]
 800b4aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d109      	bne.n	800b4ca <xQueueReceiveFromISR+0x2a>
 800b4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ba:	f383 8811 	msr	BASEPRI, r3
 800b4be:	f3bf 8f6f 	isb	sy
 800b4c2:	f3bf 8f4f 	dsb	sy
 800b4c6:	623b      	str	r3, [r7, #32]
 800b4c8:	e7fe      	b.n	800b4c8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d103      	bne.n	800b4d8 <xQueueReceiveFromISR+0x38>
 800b4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d101      	bne.n	800b4dc <xQueueReceiveFromISR+0x3c>
 800b4d8:	2301      	movs	r3, #1
 800b4da:	e000      	b.n	800b4de <xQueueReceiveFromISR+0x3e>
 800b4dc:	2300      	movs	r3, #0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d109      	bne.n	800b4f6 <xQueueReceiveFromISR+0x56>
 800b4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e6:	f383 8811 	msr	BASEPRI, r3
 800b4ea:	f3bf 8f6f 	isb	sy
 800b4ee:	f3bf 8f4f 	dsb	sy
 800b4f2:	61fb      	str	r3, [r7, #28]
 800b4f4:	e7fe      	b.n	800b4f4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b4f6:	f002 f825 	bl	800d544 <vPortValidateInterruptPriority>
	__asm volatile
 800b4fa:	f3ef 8211 	mrs	r2, BASEPRI
 800b4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	61ba      	str	r2, [r7, #24]
 800b510:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b512:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b514:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b51a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d02f      	beq.n	800b582 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b524:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b52c:	68b9      	ldr	r1, [r7, #8]
 800b52e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b530:	f000 f8d7 	bl	800b6e2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b536:	1e5a      	subs	r2, r3, #1
 800b538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b53c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b544:	d112      	bne.n	800b56c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b548:	691b      	ldr	r3, [r3, #16]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d016      	beq.n	800b57c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b550:	3310      	adds	r3, #16
 800b552:	4618      	mov	r0, r3
 800b554:	f000 ff7e 	bl	800c454 <xTaskRemoveFromEventList>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00e      	beq.n	800b57c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d00b      	beq.n	800b57c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2201      	movs	r2, #1
 800b568:	601a      	str	r2, [r3, #0]
 800b56a:	e007      	b.n	800b57c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b56c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b570:	3301      	adds	r3, #1
 800b572:	b2db      	uxtb	r3, r3
 800b574:	b25a      	sxtb	r2, r3
 800b576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b57c:	2301      	movs	r3, #1
 800b57e:	637b      	str	r3, [r7, #52]	; 0x34
 800b580:	e001      	b.n	800b586 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800b582:	2300      	movs	r3, #0
 800b584:	637b      	str	r3, [r7, #52]	; 0x34
 800b586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b588:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b592:	4618      	mov	r0, r3
 800b594:	3738      	adds	r7, #56	; 0x38
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b084      	sub	sp, #16
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d109      	bne.n	800b5bc <uxQueueMessagesWaiting+0x22>
	__asm volatile
 800b5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ac:	f383 8811 	msr	BASEPRI, r3
 800b5b0:	f3bf 8f6f 	isb	sy
 800b5b4:	f3bf 8f4f 	dsb	sy
 800b5b8:	60bb      	str	r3, [r7, #8]
 800b5ba:	e7fe      	b.n	800b5ba <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 800b5bc:	f001 fee6 	bl	800d38c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800b5c6:	f001 ff0f 	bl	800d3e8 <vPortExitCritical>

	return uxReturn;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3710      	adds	r7, #16
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b087      	sub	sp, #28
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d109      	bne.n	800b5fa <uxQueueMessagesWaitingFromISR+0x26>
 800b5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ea:	f383 8811 	msr	BASEPRI, r3
 800b5ee:	f3bf 8f6f 	isb	sy
 800b5f2:	f3bf 8f4f 	dsb	sy
 800b5f6:	60fb      	str	r3, [r7, #12]
 800b5f8:	e7fe      	b.n	800b5f8 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5fe:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800b600:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b602:	4618      	mov	r0, r3
 800b604:	371c      	adds	r7, #28
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr

0800b60e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b60e:	b580      	push	{r7, lr}
 800b610:	b086      	sub	sp, #24
 800b612:	af00      	add	r7, sp, #0
 800b614:	60f8      	str	r0, [r7, #12]
 800b616:	60b9      	str	r1, [r7, #8]
 800b618:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b61a:	2300      	movs	r3, #0
 800b61c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b622:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d10d      	bne.n	800b648 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d14d      	bne.n	800b6d0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	4618      	mov	r0, r3
 800b63a:	f001 f93f 	bl	800c8bc <xTaskPriorityDisinherit>
 800b63e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2200      	movs	r2, #0
 800b644:	609a      	str	r2, [r3, #8]
 800b646:	e043      	b.n	800b6d0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d119      	bne.n	800b682 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	6858      	ldr	r0, [r3, #4]
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b656:	461a      	mov	r2, r3
 800b658:	68b9      	ldr	r1, [r7, #8]
 800b65a:	f002 fe9b 	bl	800e394 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	685a      	ldr	r2, [r3, #4]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b666:	441a      	add	r2, r3
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	685a      	ldr	r2, [r3, #4]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	689b      	ldr	r3, [r3, #8]
 800b674:	429a      	cmp	r2, r3
 800b676:	d32b      	bcc.n	800b6d0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	605a      	str	r2, [r3, #4]
 800b680:	e026      	b.n	800b6d0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	68d8      	ldr	r0, [r3, #12]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b68a:	461a      	mov	r2, r3
 800b68c:	68b9      	ldr	r1, [r7, #8]
 800b68e:	f002 fe81 	bl	800e394 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	68da      	ldr	r2, [r3, #12]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b69a:	425b      	negs	r3, r3
 800b69c:	441a      	add	r2, r3
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	68da      	ldr	r2, [r3, #12]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d207      	bcs.n	800b6be <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	689a      	ldr	r2, [r3, #8]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6b6:	425b      	negs	r3, r3
 800b6b8:	441a      	add	r2, r3
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2b02      	cmp	r3, #2
 800b6c2:	d105      	bne.n	800b6d0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d002      	beq.n	800b6d0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	3b01      	subs	r3, #1
 800b6ce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	1c5a      	adds	r2, r3, #1
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b6d8:	697b      	ldr	r3, [r7, #20]
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3718      	adds	r7, #24
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b082      	sub	sp, #8
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
 800b6ea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d018      	beq.n	800b726 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	68da      	ldr	r2, [r3, #12]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6fc:	441a      	add	r2, r3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	68da      	ldr	r2, [r3, #12]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	689b      	ldr	r3, [r3, #8]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d303      	bcc.n	800b716 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	68d9      	ldr	r1, [r3, #12]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b71e:	461a      	mov	r2, r3
 800b720:	6838      	ldr	r0, [r7, #0]
 800b722:	f002 fe37 	bl	800e394 <memcpy>
	}
}
 800b726:	bf00      	nop
 800b728:	3708      	adds	r7, #8
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}

0800b72e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b72e:	b580      	push	{r7, lr}
 800b730:	b084      	sub	sp, #16
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b736:	f001 fe29 	bl	800d38c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b740:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b742:	e011      	b.n	800b768 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d012      	beq.n	800b772 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	3324      	adds	r3, #36	; 0x24
 800b750:	4618      	mov	r0, r3
 800b752:	f000 fe7f 	bl	800c454 <xTaskRemoveFromEventList>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d001      	beq.n	800b760 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b75c:	f000 ffb2 	bl	800c6c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b760:	7bfb      	ldrb	r3, [r7, #15]
 800b762:	3b01      	subs	r3, #1
 800b764:	b2db      	uxtb	r3, r3
 800b766:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	dce9      	bgt.n	800b744 <prvUnlockQueue+0x16>
 800b770:	e000      	b.n	800b774 <prvUnlockQueue+0x46>
					break;
 800b772:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	22ff      	movs	r2, #255	; 0xff
 800b778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b77c:	f001 fe34 	bl	800d3e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b780:	f001 fe04 	bl	800d38c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b78a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b78c:	e011      	b.n	800b7b2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	691b      	ldr	r3, [r3, #16]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d012      	beq.n	800b7bc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	3310      	adds	r3, #16
 800b79a:	4618      	mov	r0, r3
 800b79c:	f000 fe5a 	bl	800c454 <xTaskRemoveFromEventList>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d001      	beq.n	800b7aa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b7a6:	f000 ff8d 	bl	800c6c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b7aa:	7bbb      	ldrb	r3, [r7, #14]
 800b7ac:	3b01      	subs	r3, #1
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b7b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	dce9      	bgt.n	800b78e <prvUnlockQueue+0x60>
 800b7ba:	e000      	b.n	800b7be <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b7bc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	22ff      	movs	r2, #255	; 0xff
 800b7c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b7c6:	f001 fe0f 	bl	800d3e8 <vPortExitCritical>
}
 800b7ca:	bf00      	nop
 800b7cc:	3710      	adds	r7, #16
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}

0800b7d2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b7d2:	b580      	push	{r7, lr}
 800b7d4:	b084      	sub	sp, #16
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b7da:	f001 fdd7 	bl	800d38c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d102      	bne.n	800b7ec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	60fb      	str	r3, [r7, #12]
 800b7ea:	e001      	b.n	800b7f0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b7f0:	f001 fdfa 	bl	800d3e8 <vPortExitCritical>

	return xReturn;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}

0800b7fe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b084      	sub	sp, #16
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b806:	f001 fdc1 	bl	800d38c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b812:	429a      	cmp	r2, r3
 800b814:	d102      	bne.n	800b81c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b816:	2301      	movs	r3, #1
 800b818:	60fb      	str	r3, [r7, #12]
 800b81a:	e001      	b.n	800b820 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b81c:	2300      	movs	r3, #0
 800b81e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b820:	f001 fde2 	bl	800d3e8 <vPortExitCritical>

	return xReturn;
 800b824:	68fb      	ldr	r3, [r7, #12]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3710      	adds	r7, #16
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
	...

0800b830 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b830:	b480      	push	{r7}
 800b832:	b085      	sub	sp, #20
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b83a:	2300      	movs	r3, #0
 800b83c:	60fb      	str	r3, [r7, #12]
 800b83e:	e014      	b.n	800b86a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b840:	4a0e      	ldr	r2, [pc, #56]	; (800b87c <vQueueAddToRegistry+0x4c>)
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d10b      	bne.n	800b864 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b84c:	490b      	ldr	r1, [pc, #44]	; (800b87c <vQueueAddToRegistry+0x4c>)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	683a      	ldr	r2, [r7, #0]
 800b852:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b856:	4a09      	ldr	r2, [pc, #36]	; (800b87c <vQueueAddToRegistry+0x4c>)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	00db      	lsls	r3, r3, #3
 800b85c:	4413      	add	r3, r2
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b862:	e005      	b.n	800b870 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	3301      	adds	r3, #1
 800b868:	60fb      	str	r3, [r7, #12]
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2b07      	cmp	r3, #7
 800b86e:	d9e7      	bls.n	800b840 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b870:	bf00      	nop
 800b872:	3714      	adds	r7, #20
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr
 800b87c:	2000927c 	.word	0x2000927c

0800b880 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b880:	b580      	push	{r7, lr}
 800b882:	b086      	sub	sp, #24
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b890:	f001 fd7c 	bl	800d38c <vPortEnterCritical>
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b89a:	b25b      	sxtb	r3, r3
 800b89c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8a0:	d103      	bne.n	800b8aa <vQueueWaitForMessageRestricted+0x2a>
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8b0:	b25b      	sxtb	r3, r3
 800b8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b6:	d103      	bne.n	800b8c0 <vQueueWaitForMessageRestricted+0x40>
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8c0:	f001 fd92 	bl	800d3e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d106      	bne.n	800b8da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	3324      	adds	r3, #36	; 0x24
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	68b9      	ldr	r1, [r7, #8]
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f000 fd93 	bl	800c400 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b8da:	6978      	ldr	r0, [r7, #20]
 800b8dc:	f7ff ff27 	bl	800b72e <prvUnlockQueue>
	}
 800b8e0:	bf00      	nop
 800b8e2:	3718      	adds	r7, #24
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b08e      	sub	sp, #56	; 0x38
 800b8ec:	af04      	add	r7, sp, #16
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]
 800b8f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b8f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d109      	bne.n	800b910 <xTaskCreateStatic+0x28>
 800b8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b900:	f383 8811 	msr	BASEPRI, r3
 800b904:	f3bf 8f6f 	isb	sy
 800b908:	f3bf 8f4f 	dsb	sy
 800b90c:	623b      	str	r3, [r7, #32]
 800b90e:	e7fe      	b.n	800b90e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800b910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b912:	2b00      	cmp	r3, #0
 800b914:	d109      	bne.n	800b92a <xTaskCreateStatic+0x42>
 800b916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b91a:	f383 8811 	msr	BASEPRI, r3
 800b91e:	f3bf 8f6f 	isb	sy
 800b922:	f3bf 8f4f 	dsb	sy
 800b926:	61fb      	str	r3, [r7, #28]
 800b928:	e7fe      	b.n	800b928 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b92a:	2370      	movs	r3, #112	; 0x70
 800b92c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	2b70      	cmp	r3, #112	; 0x70
 800b932:	d009      	beq.n	800b948 <xTaskCreateStatic+0x60>
 800b934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b938:	f383 8811 	msr	BASEPRI, r3
 800b93c:	f3bf 8f6f 	isb	sy
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	61bb      	str	r3, [r7, #24]
 800b946:	e7fe      	b.n	800b946 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b948:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d01e      	beq.n	800b98e <xTaskCreateStatic+0xa6>
 800b950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b952:	2b00      	cmp	r3, #0
 800b954:	d01b      	beq.n	800b98e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b958:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b95e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b962:	2202      	movs	r2, #2
 800b964:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b968:	2300      	movs	r3, #0
 800b96a:	9303      	str	r3, [sp, #12]
 800b96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96e:	9302      	str	r3, [sp, #8]
 800b970:	f107 0314 	add.w	r3, r7, #20
 800b974:	9301      	str	r3, [sp, #4]
 800b976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b978:	9300      	str	r3, [sp, #0]
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	68b9      	ldr	r1, [r7, #8]
 800b980:	68f8      	ldr	r0, [r7, #12]
 800b982:	f000 f850 	bl	800ba26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b986:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b988:	f000 f8de 	bl	800bb48 <prvAddNewTaskToReadyList>
 800b98c:	e001      	b.n	800b992 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800b98e:	2300      	movs	r3, #0
 800b990:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b992:	697b      	ldr	r3, [r7, #20]
	}
 800b994:	4618      	mov	r0, r3
 800b996:	3728      	adds	r7, #40	; 0x28
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b08c      	sub	sp, #48	; 0x30
 800b9a0:	af04      	add	r7, sp, #16
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	603b      	str	r3, [r7, #0]
 800b9a8:	4613      	mov	r3, r2
 800b9aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b9ac:	88fb      	ldrh	r3, [r7, #6]
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f001 fe05 	bl	800d5c0 <pvPortMalloc>
 800b9b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d00e      	beq.n	800b9dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b9be:	2070      	movs	r0, #112	; 0x70
 800b9c0:	f001 fdfe 	bl	800d5c0 <pvPortMalloc>
 800b9c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b9c6:	69fb      	ldr	r3, [r7, #28]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d003      	beq.n	800b9d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b9cc:	69fb      	ldr	r3, [r7, #28]
 800b9ce:	697a      	ldr	r2, [r7, #20]
 800b9d0:	631a      	str	r2, [r3, #48]	; 0x30
 800b9d2:	e005      	b.n	800b9e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b9d4:	6978      	ldr	r0, [r7, #20]
 800b9d6:	f001 feb5 	bl	800d744 <vPortFree>
 800b9da:	e001      	b.n	800b9e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d017      	beq.n	800ba16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b9e6:	69fb      	ldr	r3, [r7, #28]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b9ee:	88fa      	ldrh	r2, [r7, #6]
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	9303      	str	r3, [sp, #12]
 800b9f4:	69fb      	ldr	r3, [r7, #28]
 800b9f6:	9302      	str	r3, [sp, #8]
 800b9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9fa:	9301      	str	r3, [sp, #4]
 800b9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	68b9      	ldr	r1, [r7, #8]
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f000 f80e 	bl	800ba26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ba0a:	69f8      	ldr	r0, [r7, #28]
 800ba0c:	f000 f89c 	bl	800bb48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ba10:	2301      	movs	r3, #1
 800ba12:	61bb      	str	r3, [r7, #24]
 800ba14:	e002      	b.n	800ba1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ba16:	f04f 33ff 	mov.w	r3, #4294967295
 800ba1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ba1c:	69bb      	ldr	r3, [r7, #24]
	}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3720      	adds	r7, #32
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}

0800ba26 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b088      	sub	sp, #32
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	60f8      	str	r0, [r7, #12]
 800ba2e:	60b9      	str	r1, [r7, #8]
 800ba30:	607a      	str	r2, [r7, #4]
 800ba32:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ba34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	21a5      	movs	r1, #165	; 0xa5
 800ba40:	f002 fcb3 	bl	800e3aa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ba44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	4413      	add	r3, r2
 800ba54:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ba56:	69bb      	ldr	r3, [r7, #24]
 800ba58:	f023 0307 	bic.w	r3, r3, #7
 800ba5c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ba5e:	69bb      	ldr	r3, [r7, #24]
 800ba60:	f003 0307 	and.w	r3, r3, #7
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d009      	beq.n	800ba7c <prvInitialiseNewTask+0x56>
 800ba68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6c:	f383 8811 	msr	BASEPRI, r3
 800ba70:	f3bf 8f6f 	isb	sy
 800ba74:	f3bf 8f4f 	dsb	sy
 800ba78:	617b      	str	r3, [r7, #20]
 800ba7a:	e7fe      	b.n	800ba7a <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800ba7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7e:	69ba      	ldr	r2, [r7, #24]
 800ba80:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d01f      	beq.n	800bac8 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba88:	2300      	movs	r3, #0
 800ba8a:	61fb      	str	r3, [r7, #28]
 800ba8c:	e012      	b.n	800bab4 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ba8e:	68ba      	ldr	r2, [r7, #8]
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	4413      	add	r3, r2
 800ba94:	7819      	ldrb	r1, [r3, #0]
 800ba96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba98:	69fb      	ldr	r3, [r7, #28]
 800ba9a:	4413      	add	r3, r2
 800ba9c:	3334      	adds	r3, #52	; 0x34
 800ba9e:	460a      	mov	r2, r1
 800baa0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	69fb      	ldr	r3, [r7, #28]
 800baa6:	4413      	add	r3, r2
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d006      	beq.n	800babc <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800baae:	69fb      	ldr	r3, [r7, #28]
 800bab0:	3301      	adds	r3, #1
 800bab2:	61fb      	str	r3, [r7, #28]
 800bab4:	69fb      	ldr	r3, [r7, #28]
 800bab6:	2b1f      	cmp	r3, #31
 800bab8:	d9e9      	bls.n	800ba8e <prvInitialiseNewTask+0x68>
 800baba:	e000      	b.n	800babe <prvInitialiseNewTask+0x98>
			{
				break;
 800babc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800babe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac0:	2200      	movs	r2, #0
 800bac2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800bac6:	e003      	b.n	800bad0 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baca:	2200      	movs	r2, #0
 800bacc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad2:	2b37      	cmp	r3, #55	; 0x37
 800bad4:	d901      	bls.n	800bada <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bad6:	2337      	movs	r3, #55	; 0x37
 800bad8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800badc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bade:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bae4:	661a      	str	r2, [r3, #96]	; 0x60
		pxNewTCB->uxMutexesHeld = 0;
 800bae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae8:	2200      	movs	r2, #0
 800baea:	665a      	str	r2, [r3, #100]	; 0x64
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800baec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baee:	3304      	adds	r3, #4
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7ff f899 	bl	800ac28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800baf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf8:	3318      	adds	r3, #24
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7ff f894 	bl	800ac28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb04:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb14:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb18:	2200      	movs	r2, #0
 800bb1a:	669a      	str	r2, [r3, #104]	; 0x68
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bb24:	683a      	ldr	r2, [r7, #0]
 800bb26:	68f9      	ldr	r1, [r7, #12]
 800bb28:	69b8      	ldr	r0, [r7, #24]
 800bb2a:	f001 fb05 	bl	800d138 <pxPortInitialiseStack>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb32:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d002      	beq.n	800bb40 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb3e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb40:	bf00      	nop
 800bb42:	3720      	adds	r7, #32
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bb50:	f001 fc1c 	bl	800d38c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bb54:	4b2d      	ldr	r3, [pc, #180]	; (800bc0c <prvAddNewTaskToReadyList+0xc4>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	3301      	adds	r3, #1
 800bb5a:	4a2c      	ldr	r2, [pc, #176]	; (800bc0c <prvAddNewTaskToReadyList+0xc4>)
 800bb5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bb5e:	4b2c      	ldr	r3, [pc, #176]	; (800bc10 <prvAddNewTaskToReadyList+0xc8>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d109      	bne.n	800bb7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bb66:	4a2a      	ldr	r2, [pc, #168]	; (800bc10 <prvAddNewTaskToReadyList+0xc8>)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bb6c:	4b27      	ldr	r3, [pc, #156]	; (800bc0c <prvAddNewTaskToReadyList+0xc4>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2b01      	cmp	r3, #1
 800bb72:	d110      	bne.n	800bb96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bb74:	f000 fdca 	bl	800c70c <prvInitialiseTaskLists>
 800bb78:	e00d      	b.n	800bb96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bb7a:	4b26      	ldr	r3, [pc, #152]	; (800bc14 <prvAddNewTaskToReadyList+0xcc>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d109      	bne.n	800bb96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bb82:	4b23      	ldr	r3, [pc, #140]	; (800bc10 <prvAddNewTaskToReadyList+0xc8>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d802      	bhi.n	800bb96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bb90:	4a1f      	ldr	r2, [pc, #124]	; (800bc10 <prvAddNewTaskToReadyList+0xc8>)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bb96:	4b20      	ldr	r3, [pc, #128]	; (800bc18 <prvAddNewTaskToReadyList+0xd0>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	4a1e      	ldr	r2, [pc, #120]	; (800bc18 <prvAddNewTaskToReadyList+0xd0>)
 800bb9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bba0:	4b1d      	ldr	r3, [pc, #116]	; (800bc18 <prvAddNewTaskToReadyList+0xd0>)
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	659a      	str	r2, [r3, #88]	; 0x58
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbac:	4b1b      	ldr	r3, [pc, #108]	; (800bc1c <prvAddNewTaskToReadyList+0xd4>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d903      	bls.n	800bbbc <prvAddNewTaskToReadyList+0x74>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb8:	4a18      	ldr	r2, [pc, #96]	; (800bc1c <prvAddNewTaskToReadyList+0xd4>)
 800bbba:	6013      	str	r3, [r2, #0]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbc0:	4613      	mov	r3, r2
 800bbc2:	009b      	lsls	r3, r3, #2
 800bbc4:	4413      	add	r3, r2
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	4a15      	ldr	r2, [pc, #84]	; (800bc20 <prvAddNewTaskToReadyList+0xd8>)
 800bbca:	441a      	add	r2, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	3304      	adds	r3, #4
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	4610      	mov	r0, r2
 800bbd4:	f7ff f835 	bl	800ac42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bbd8:	f001 fc06 	bl	800d3e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bbdc:	4b0d      	ldr	r3, [pc, #52]	; (800bc14 <prvAddNewTaskToReadyList+0xcc>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d00e      	beq.n	800bc02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bbe4:	4b0a      	ldr	r3, [pc, #40]	; (800bc10 <prvAddNewTaskToReadyList+0xc8>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d207      	bcs.n	800bc02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bbf2:	4b0c      	ldr	r3, [pc, #48]	; (800bc24 <prvAddNewTaskToReadyList+0xdc>)
 800bbf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbf8:	601a      	str	r2, [r3, #0]
 800bbfa:	f3bf 8f4f 	dsb	sy
 800bbfe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc02:	bf00      	nop
 800bc04:	3708      	adds	r7, #8
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	20000f60 	.word	0x20000f60
 800bc10:	20000a8c 	.word	0x20000a8c
 800bc14:	20000f6c 	.word	0x20000f6c
 800bc18:	20000f7c 	.word	0x20000f7c
 800bc1c:	20000f68 	.word	0x20000f68
 800bc20:	20000a90 	.word	0x20000a90
 800bc24:	e000ed04 	.word	0xe000ed04

0800bc28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b084      	sub	sp, #16
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bc30:	2300      	movs	r3, #0
 800bc32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d016      	beq.n	800bc68 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bc3a:	4b13      	ldr	r3, [pc, #76]	; (800bc88 <vTaskDelay+0x60>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d009      	beq.n	800bc56 <vTaskDelay+0x2e>
 800bc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc46:	f383 8811 	msr	BASEPRI, r3
 800bc4a:	f3bf 8f6f 	isb	sy
 800bc4e:	f3bf 8f4f 	dsb	sy
 800bc52:	60bb      	str	r3, [r7, #8]
 800bc54:	e7fe      	b.n	800bc54 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800bc56:	f000 f981 	bl	800bf5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f000 feb1 	bl	800c9c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bc62:	f000 f989 	bl	800bf78 <xTaskResumeAll>
 800bc66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d107      	bne.n	800bc7e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800bc6e:	4b07      	ldr	r3, [pc, #28]	; (800bc8c <vTaskDelay+0x64>)
 800bc70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc74:	601a      	str	r2, [r3, #0]
 800bc76:	f3bf 8f4f 	dsb	sy
 800bc7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bc7e:	bf00      	nop
 800bc80:	3710      	adds	r7, #16
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	20000f88 	.word	0x20000f88
 800bc8c:	e000ed04 	.word	0xe000ed04

0800bc90 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b084      	sub	sp, #16
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800bc98:	f001 fb78 	bl	800d38c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d102      	bne.n	800bca8 <vTaskSuspend+0x18>
 800bca2:	4b2f      	ldr	r3, [pc, #188]	; (800bd60 <vTaskSuspend+0xd0>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	e000      	b.n	800bcaa <vTaskSuspend+0x1a>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	3304      	adds	r3, #4
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f7ff f823 	bl	800acfc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d004      	beq.n	800bcc8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	3318      	adds	r3, #24
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7ff f81a 	bl	800acfc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	3304      	adds	r3, #4
 800bccc:	4619      	mov	r1, r3
 800bcce:	4825      	ldr	r0, [pc, #148]	; (800bd64 <vTaskSuspend+0xd4>)
 800bcd0:	f7fe ffb7 	bl	800ac42 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d103      	bne.n	800bce8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2200      	movs	r2, #0
 800bce4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800bce8:	f001 fb7e 	bl	800d3e8 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800bcec:	4b1e      	ldr	r3, [pc, #120]	; (800bd68 <vTaskSuspend+0xd8>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d005      	beq.n	800bd00 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800bcf4:	f001 fb4a 	bl	800d38c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800bcf8:	f000 fda2 	bl	800c840 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800bcfc:	f001 fb74 	bl	800d3e8 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800bd00:	4b17      	ldr	r3, [pc, #92]	; (800bd60 <vTaskSuspend+0xd0>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d126      	bne.n	800bd58 <vTaskSuspend+0xc8>
		{
			if( xSchedulerRunning != pdFALSE )
 800bd0a:	4b17      	ldr	r3, [pc, #92]	; (800bd68 <vTaskSuspend+0xd8>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d016      	beq.n	800bd40 <vTaskSuspend+0xb0>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800bd12:	4b16      	ldr	r3, [pc, #88]	; (800bd6c <vTaskSuspend+0xdc>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d009      	beq.n	800bd2e <vTaskSuspend+0x9e>
 800bd1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd1e:	f383 8811 	msr	BASEPRI, r3
 800bd22:	f3bf 8f6f 	isb	sy
 800bd26:	f3bf 8f4f 	dsb	sy
 800bd2a:	60bb      	str	r3, [r7, #8]
 800bd2c:	e7fe      	b.n	800bd2c <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 800bd2e:	4b10      	ldr	r3, [pc, #64]	; (800bd70 <vTaskSuspend+0xe0>)
 800bd30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd34:	601a      	str	r2, [r3, #0]
 800bd36:	f3bf 8f4f 	dsb	sy
 800bd3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bd3e:	e00b      	b.n	800bd58 <vTaskSuspend+0xc8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800bd40:	4b08      	ldr	r3, [pc, #32]	; (800bd64 <vTaskSuspend+0xd4>)
 800bd42:	681a      	ldr	r2, [r3, #0]
 800bd44:	4b0b      	ldr	r3, [pc, #44]	; (800bd74 <vTaskSuspend+0xe4>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d103      	bne.n	800bd54 <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 800bd4c:	4b04      	ldr	r3, [pc, #16]	; (800bd60 <vTaskSuspend+0xd0>)
 800bd4e:	2200      	movs	r2, #0
 800bd50:	601a      	str	r2, [r3, #0]
	}
 800bd52:	e001      	b.n	800bd58 <vTaskSuspend+0xc8>
					vTaskSwitchContext();
 800bd54:	f000 fa74 	bl	800c240 <vTaskSwitchContext>
	}
 800bd58:	bf00      	nop
 800bd5a:	3710      	adds	r7, #16
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	20000a8c 	.word	0x20000a8c
 800bd64:	20000f4c 	.word	0x20000f4c
 800bd68:	20000f6c 	.word	0x20000f6c
 800bd6c:	20000f88 	.word	0x20000f88
 800bd70:	e000ed04 	.word	0xe000ed04
 800bd74:	20000f60 	.word	0x20000f60

0800bd78 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800bd78:	b480      	push	{r7}
 800bd7a:	b087      	sub	sp, #28
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800bd80:	2300      	movs	r3, #0
 800bd82:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d109      	bne.n	800bda2 <prvTaskIsTaskSuspended+0x2a>
 800bd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd92:	f383 8811 	msr	BASEPRI, r3
 800bd96:	f3bf 8f6f 	isb	sy
 800bd9a:	f3bf 8f4f 	dsb	sy
 800bd9e:	60fb      	str	r3, [r7, #12]
 800bda0:	e7fe      	b.n	800bda0 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	695b      	ldr	r3, [r3, #20]
 800bda6:	4a0a      	ldr	r2, [pc, #40]	; (800bdd0 <prvTaskIsTaskSuspended+0x58>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d10a      	bne.n	800bdc2 <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdb0:	4a08      	ldr	r2, [pc, #32]	; (800bdd4 <prvTaskIsTaskSuspended+0x5c>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d005      	beq.n	800bdc2 <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d101      	bne.n	800bdc2 <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bdc2:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	371c      	adds	r7, #28
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr
 800bdd0:	20000f4c 	.word	0x20000f4c
 800bdd4:	20000f20 	.word	0x20000f20

0800bdd8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b084      	sub	sp, #16
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d109      	bne.n	800bdfe <vTaskResume+0x26>
 800bdea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdee:	f383 8811 	msr	BASEPRI, r3
 800bdf2:	f3bf 8f6f 	isb	sy
 800bdf6:	f3bf 8f4f 	dsb	sy
 800bdfa:	60bb      	str	r3, [r7, #8]
 800bdfc:	e7fe      	b.n	800bdfc <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800bdfe:	4b21      	ldr	r3, [pc, #132]	; (800be84 <vTaskResume+0xac>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	68fa      	ldr	r2, [r7, #12]
 800be04:	429a      	cmp	r2, r3
 800be06:	d038      	beq.n	800be7a <vTaskResume+0xa2>
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d035      	beq.n	800be7a <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800be0e:	f001 fabd 	bl	800d38c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800be12:	68f8      	ldr	r0, [r7, #12]
 800be14:	f7ff ffb0 	bl	800bd78 <prvTaskIsTaskSuspended>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d02b      	beq.n	800be76 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	3304      	adds	r3, #4
 800be22:	4618      	mov	r0, r3
 800be24:	f7fe ff6a 	bl	800acfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be2c:	4b16      	ldr	r3, [pc, #88]	; (800be88 <vTaskResume+0xb0>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	429a      	cmp	r2, r3
 800be32:	d903      	bls.n	800be3c <vTaskResume+0x64>
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be38:	4a13      	ldr	r2, [pc, #76]	; (800be88 <vTaskResume+0xb0>)
 800be3a:	6013      	str	r3, [r2, #0]
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be40:	4613      	mov	r3, r2
 800be42:	009b      	lsls	r3, r3, #2
 800be44:	4413      	add	r3, r2
 800be46:	009b      	lsls	r3, r3, #2
 800be48:	4a10      	ldr	r2, [pc, #64]	; (800be8c <vTaskResume+0xb4>)
 800be4a:	441a      	add	r2, r3
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	3304      	adds	r3, #4
 800be50:	4619      	mov	r1, r3
 800be52:	4610      	mov	r0, r2
 800be54:	f7fe fef5 	bl	800ac42 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be5c:	4b09      	ldr	r3, [pc, #36]	; (800be84 <vTaskResume+0xac>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be62:	429a      	cmp	r2, r3
 800be64:	d307      	bcc.n	800be76 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800be66:	4b0a      	ldr	r3, [pc, #40]	; (800be90 <vTaskResume+0xb8>)
 800be68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be6c:	601a      	str	r2, [r3, #0]
 800be6e:	f3bf 8f4f 	dsb	sy
 800be72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800be76:	f001 fab7 	bl	800d3e8 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800be7a:	bf00      	nop
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	20000a8c 	.word	0x20000a8c
 800be88:	20000f68 	.word	0x20000f68
 800be8c:	20000a90 	.word	0x20000a90
 800be90:	e000ed04 	.word	0xe000ed04

0800be94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b08a      	sub	sp, #40	; 0x28
 800be98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800be9a:	2300      	movs	r3, #0
 800be9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800be9e:	2300      	movs	r3, #0
 800bea0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bea2:	463a      	mov	r2, r7
 800bea4:	1d39      	adds	r1, r7, #4
 800bea6:	f107 0308 	add.w	r3, r7, #8
 800beaa:	4618      	mov	r0, r3
 800beac:	f7fe fc08 	bl	800a6c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800beb0:	6839      	ldr	r1, [r7, #0]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	68ba      	ldr	r2, [r7, #8]
 800beb6:	9202      	str	r2, [sp, #8]
 800beb8:	9301      	str	r3, [sp, #4]
 800beba:	2300      	movs	r3, #0
 800bebc:	9300      	str	r3, [sp, #0]
 800bebe:	2300      	movs	r3, #0
 800bec0:	460a      	mov	r2, r1
 800bec2:	4920      	ldr	r1, [pc, #128]	; (800bf44 <vTaskStartScheduler+0xb0>)
 800bec4:	4820      	ldr	r0, [pc, #128]	; (800bf48 <vTaskStartScheduler+0xb4>)
 800bec6:	f7ff fd0f 	bl	800b8e8 <xTaskCreateStatic>
 800beca:	4602      	mov	r2, r0
 800becc:	4b1f      	ldr	r3, [pc, #124]	; (800bf4c <vTaskStartScheduler+0xb8>)
 800bece:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bed0:	4b1e      	ldr	r3, [pc, #120]	; (800bf4c <vTaskStartScheduler+0xb8>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d002      	beq.n	800bede <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bed8:	2301      	movs	r3, #1
 800beda:	617b      	str	r3, [r7, #20]
 800bedc:	e001      	b.n	800bee2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bede:	2300      	movs	r3, #0
 800bee0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d102      	bne.n	800beee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bee8:	f000 fdc0 	bl	800ca6c <xTimerCreateTimerTask>
 800beec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d115      	bne.n	800bf20 <vTaskStartScheduler+0x8c>
 800bef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef8:	f383 8811 	msr	BASEPRI, r3
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bf06:	4b12      	ldr	r3, [pc, #72]	; (800bf50 <vTaskStartScheduler+0xbc>)
 800bf08:	f04f 32ff 	mov.w	r2, #4294967295
 800bf0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bf0e:	4b11      	ldr	r3, [pc, #68]	; (800bf54 <vTaskStartScheduler+0xc0>)
 800bf10:	2201      	movs	r2, #1
 800bf12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bf14:	4b10      	ldr	r3, [pc, #64]	; (800bf58 <vTaskStartScheduler+0xc4>)
 800bf16:	2200      	movs	r2, #0
 800bf18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bf1a:	f001 f999 	bl	800d250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bf1e:	e00d      	b.n	800bf3c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf26:	d109      	bne.n	800bf3c <vTaskStartScheduler+0xa8>
 800bf28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2c:	f383 8811 	msr	BASEPRI, r3
 800bf30:	f3bf 8f6f 	isb	sy
 800bf34:	f3bf 8f4f 	dsb	sy
 800bf38:	60fb      	str	r3, [r7, #12]
 800bf3a:	e7fe      	b.n	800bf3a <vTaskStartScheduler+0xa6>
}
 800bf3c:	bf00      	nop
 800bf3e:	3718      	adds	r7, #24
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}
 800bf44:	0800fed8 	.word	0x0800fed8
 800bf48:	0800c6dd 	.word	0x0800c6dd
 800bf4c:	20000f84 	.word	0x20000f84
 800bf50:	20000f80 	.word	0x20000f80
 800bf54:	20000f6c 	.word	0x20000f6c
 800bf58:	20000f64 	.word	0x20000f64

0800bf5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bf60:	4b04      	ldr	r3, [pc, #16]	; (800bf74 <vTaskSuspendAll+0x18>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	3301      	adds	r3, #1
 800bf66:	4a03      	ldr	r2, [pc, #12]	; (800bf74 <vTaskSuspendAll+0x18>)
 800bf68:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bf6a:	bf00      	nop
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr
 800bf74:	20000f88 	.word	0x20000f88

0800bf78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b084      	sub	sp, #16
 800bf7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bf82:	2300      	movs	r3, #0
 800bf84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bf86:	4b41      	ldr	r3, [pc, #260]	; (800c08c <xTaskResumeAll+0x114>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d109      	bne.n	800bfa2 <xTaskResumeAll+0x2a>
 800bf8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf92:	f383 8811 	msr	BASEPRI, r3
 800bf96:	f3bf 8f6f 	isb	sy
 800bf9a:	f3bf 8f4f 	dsb	sy
 800bf9e:	603b      	str	r3, [r7, #0]
 800bfa0:	e7fe      	b.n	800bfa0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bfa2:	f001 f9f3 	bl	800d38c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bfa6:	4b39      	ldr	r3, [pc, #228]	; (800c08c <xTaskResumeAll+0x114>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	3b01      	subs	r3, #1
 800bfac:	4a37      	ldr	r2, [pc, #220]	; (800c08c <xTaskResumeAll+0x114>)
 800bfae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfb0:	4b36      	ldr	r3, [pc, #216]	; (800c08c <xTaskResumeAll+0x114>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d162      	bne.n	800c07e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bfb8:	4b35      	ldr	r3, [pc, #212]	; (800c090 <xTaskResumeAll+0x118>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d05e      	beq.n	800c07e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bfc0:	e02f      	b.n	800c022 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfc2:	4b34      	ldr	r3, [pc, #208]	; (800c094 <xTaskResumeAll+0x11c>)
 800bfc4:	68db      	ldr	r3, [r3, #12]
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	3318      	adds	r3, #24
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7fe fe94 	bl	800acfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	3304      	adds	r3, #4
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7fe fe8f 	bl	800acfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfe2:	4b2d      	ldr	r3, [pc, #180]	; (800c098 <xTaskResumeAll+0x120>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d903      	bls.n	800bff2 <xTaskResumeAll+0x7a>
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfee:	4a2a      	ldr	r2, [pc, #168]	; (800c098 <xTaskResumeAll+0x120>)
 800bff0:	6013      	str	r3, [r2, #0]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bff6:	4613      	mov	r3, r2
 800bff8:	009b      	lsls	r3, r3, #2
 800bffa:	4413      	add	r3, r2
 800bffc:	009b      	lsls	r3, r3, #2
 800bffe:	4a27      	ldr	r2, [pc, #156]	; (800c09c <xTaskResumeAll+0x124>)
 800c000:	441a      	add	r2, r3
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	3304      	adds	r3, #4
 800c006:	4619      	mov	r1, r3
 800c008:	4610      	mov	r0, r2
 800c00a:	f7fe fe1a 	bl	800ac42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c012:	4b23      	ldr	r3, [pc, #140]	; (800c0a0 <xTaskResumeAll+0x128>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c018:	429a      	cmp	r2, r3
 800c01a:	d302      	bcc.n	800c022 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c01c:	4b21      	ldr	r3, [pc, #132]	; (800c0a4 <xTaskResumeAll+0x12c>)
 800c01e:	2201      	movs	r2, #1
 800c020:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c022:	4b1c      	ldr	r3, [pc, #112]	; (800c094 <xTaskResumeAll+0x11c>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d1cb      	bne.n	800bfc2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d001      	beq.n	800c034 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c030:	f000 fc06 	bl	800c840 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c034:	4b1c      	ldr	r3, [pc, #112]	; (800c0a8 <xTaskResumeAll+0x130>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d010      	beq.n	800c062 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c040:	f000 f846 	bl	800c0d0 <xTaskIncrementTick>
 800c044:	4603      	mov	r3, r0
 800c046:	2b00      	cmp	r3, #0
 800c048:	d002      	beq.n	800c050 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c04a:	4b16      	ldr	r3, [pc, #88]	; (800c0a4 <xTaskResumeAll+0x12c>)
 800c04c:	2201      	movs	r2, #1
 800c04e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	3b01      	subs	r3, #1
 800c054:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d1f1      	bne.n	800c040 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800c05c:	4b12      	ldr	r3, [pc, #72]	; (800c0a8 <xTaskResumeAll+0x130>)
 800c05e:	2200      	movs	r2, #0
 800c060:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c062:	4b10      	ldr	r3, [pc, #64]	; (800c0a4 <xTaskResumeAll+0x12c>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d009      	beq.n	800c07e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c06a:	2301      	movs	r3, #1
 800c06c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c06e:	4b0f      	ldr	r3, [pc, #60]	; (800c0ac <xTaskResumeAll+0x134>)
 800c070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c074:	601a      	str	r2, [r3, #0]
 800c076:	f3bf 8f4f 	dsb	sy
 800c07a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c07e:	f001 f9b3 	bl	800d3e8 <vPortExitCritical>

	return xAlreadyYielded;
 800c082:	68bb      	ldr	r3, [r7, #8]
}
 800c084:	4618      	mov	r0, r3
 800c086:	3710      	adds	r7, #16
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	20000f88 	.word	0x20000f88
 800c090:	20000f60 	.word	0x20000f60
 800c094:	20000f20 	.word	0x20000f20
 800c098:	20000f68 	.word	0x20000f68
 800c09c:	20000a90 	.word	0x20000a90
 800c0a0:	20000a8c 	.word	0x20000a8c
 800c0a4:	20000f74 	.word	0x20000f74
 800c0a8:	20000f70 	.word	0x20000f70
 800c0ac:	e000ed04 	.word	0xe000ed04

0800c0b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b083      	sub	sp, #12
 800c0b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c0b6:	4b05      	ldr	r3, [pc, #20]	; (800c0cc <xTaskGetTickCount+0x1c>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c0bc:	687b      	ldr	r3, [r7, #4]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	370c      	adds	r7, #12
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr
 800c0ca:	bf00      	nop
 800c0cc:	20000f64 	.word	0x20000f64

0800c0d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b086      	sub	sp, #24
 800c0d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0da:	4b4e      	ldr	r3, [pc, #312]	; (800c214 <xTaskIncrementTick+0x144>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	f040 8088 	bne.w	800c1f4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c0e4:	4b4c      	ldr	r3, [pc, #304]	; (800c218 <xTaskIncrementTick+0x148>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c0ec:	4a4a      	ldr	r2, [pc, #296]	; (800c218 <xTaskIncrementTick+0x148>)
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d11f      	bne.n	800c138 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800c0f8:	4b48      	ldr	r3, [pc, #288]	; (800c21c <xTaskIncrementTick+0x14c>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d009      	beq.n	800c116 <xTaskIncrementTick+0x46>
 800c102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c106:	f383 8811 	msr	BASEPRI, r3
 800c10a:	f3bf 8f6f 	isb	sy
 800c10e:	f3bf 8f4f 	dsb	sy
 800c112:	603b      	str	r3, [r7, #0]
 800c114:	e7fe      	b.n	800c114 <xTaskIncrementTick+0x44>
 800c116:	4b41      	ldr	r3, [pc, #260]	; (800c21c <xTaskIncrementTick+0x14c>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	60fb      	str	r3, [r7, #12]
 800c11c:	4b40      	ldr	r3, [pc, #256]	; (800c220 <xTaskIncrementTick+0x150>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a3e      	ldr	r2, [pc, #248]	; (800c21c <xTaskIncrementTick+0x14c>)
 800c122:	6013      	str	r3, [r2, #0]
 800c124:	4a3e      	ldr	r2, [pc, #248]	; (800c220 <xTaskIncrementTick+0x150>)
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	6013      	str	r3, [r2, #0]
 800c12a:	4b3e      	ldr	r3, [pc, #248]	; (800c224 <xTaskIncrementTick+0x154>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	3301      	adds	r3, #1
 800c130:	4a3c      	ldr	r2, [pc, #240]	; (800c224 <xTaskIncrementTick+0x154>)
 800c132:	6013      	str	r3, [r2, #0]
 800c134:	f000 fb84 	bl	800c840 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c138:	4b3b      	ldr	r3, [pc, #236]	; (800c228 <xTaskIncrementTick+0x158>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	693a      	ldr	r2, [r7, #16]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d349      	bcc.n	800c1d6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c142:	4b36      	ldr	r3, [pc, #216]	; (800c21c <xTaskIncrementTick+0x14c>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d104      	bne.n	800c156 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c14c:	4b36      	ldr	r3, [pc, #216]	; (800c228 <xTaskIncrementTick+0x158>)
 800c14e:	f04f 32ff 	mov.w	r2, #4294967295
 800c152:	601a      	str	r2, [r3, #0]
					break;
 800c154:	e03f      	b.n	800c1d6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c156:	4b31      	ldr	r3, [pc, #196]	; (800c21c <xTaskIncrementTick+0x14c>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	68db      	ldr	r3, [r3, #12]
 800c15e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c166:	693a      	ldr	r2, [r7, #16]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d203      	bcs.n	800c176 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c16e:	4a2e      	ldr	r2, [pc, #184]	; (800c228 <xTaskIncrementTick+0x158>)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c174:	e02f      	b.n	800c1d6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	3304      	adds	r3, #4
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7fe fdbe 	bl	800acfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c184:	2b00      	cmp	r3, #0
 800c186:	d004      	beq.n	800c192 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	3318      	adds	r3, #24
 800c18c:	4618      	mov	r0, r3
 800c18e:	f7fe fdb5 	bl	800acfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c196:	4b25      	ldr	r3, [pc, #148]	; (800c22c <xTaskIncrementTick+0x15c>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d903      	bls.n	800c1a6 <xTaskIncrementTick+0xd6>
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a2:	4a22      	ldr	r2, [pc, #136]	; (800c22c <xTaskIncrementTick+0x15c>)
 800c1a4:	6013      	str	r3, [r2, #0]
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1aa:	4613      	mov	r3, r2
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	4413      	add	r3, r2
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	4a1f      	ldr	r2, [pc, #124]	; (800c230 <xTaskIncrementTick+0x160>)
 800c1b4:	441a      	add	r2, r3
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	3304      	adds	r3, #4
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	4610      	mov	r0, r2
 800c1be:	f7fe fd40 	bl	800ac42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1c6:	4b1b      	ldr	r3, [pc, #108]	; (800c234 <xTaskIncrementTick+0x164>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d3b8      	bcc.n	800c142 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1d4:	e7b5      	b.n	800c142 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c1d6:	4b17      	ldr	r3, [pc, #92]	; (800c234 <xTaskIncrementTick+0x164>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1dc:	4914      	ldr	r1, [pc, #80]	; (800c230 <xTaskIncrementTick+0x160>)
 800c1de:	4613      	mov	r3, r2
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	4413      	add	r3, r2
 800c1e4:	009b      	lsls	r3, r3, #2
 800c1e6:	440b      	add	r3, r1
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2b01      	cmp	r3, #1
 800c1ec:	d907      	bls.n	800c1fe <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	617b      	str	r3, [r7, #20]
 800c1f2:	e004      	b.n	800c1fe <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c1f4:	4b10      	ldr	r3, [pc, #64]	; (800c238 <xTaskIncrementTick+0x168>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	4a0f      	ldr	r2, [pc, #60]	; (800c238 <xTaskIncrementTick+0x168>)
 800c1fc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c1fe:	4b0f      	ldr	r3, [pc, #60]	; (800c23c <xTaskIncrementTick+0x16c>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d001      	beq.n	800c20a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800c206:	2301      	movs	r3, #1
 800c208:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c20a:	697b      	ldr	r3, [r7, #20]
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3718      	adds	r7, #24
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}
 800c214:	20000f88 	.word	0x20000f88
 800c218:	20000f64 	.word	0x20000f64
 800c21c:	20000f18 	.word	0x20000f18
 800c220:	20000f1c 	.word	0x20000f1c
 800c224:	20000f78 	.word	0x20000f78
 800c228:	20000f80 	.word	0x20000f80
 800c22c:	20000f68 	.word	0x20000f68
 800c230:	20000a90 	.word	0x20000a90
 800c234:	20000a8c 	.word	0x20000a8c
 800c238:	20000f70 	.word	0x20000f70
 800c23c:	20000f74 	.word	0x20000f74

0800c240 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b086      	sub	sp, #24
 800c244:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c246:	4b3a      	ldr	r3, [pc, #232]	; (800c330 <vTaskSwitchContext+0xf0>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d003      	beq.n	800c256 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c24e:	4b39      	ldr	r3, [pc, #228]	; (800c334 <vTaskSwitchContext+0xf4>)
 800c250:	2201      	movs	r2, #1
 800c252:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c254:	e067      	b.n	800c326 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800c256:	4b37      	ldr	r3, [pc, #220]	; (800c334 <vTaskSwitchContext+0xf4>)
 800c258:	2200      	movs	r2, #0
 800c25a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c25c:	4b36      	ldr	r3, [pc, #216]	; (800c338 <vTaskSwitchContext+0xf8>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c262:	613b      	str	r3, [r7, #16]
 800c264:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800c268:	60fb      	str	r3, [r7, #12]
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	68fa      	ldr	r2, [r7, #12]
 800c270:	429a      	cmp	r2, r3
 800c272:	d111      	bne.n	800c298 <vTaskSwitchContext+0x58>
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	3304      	adds	r3, #4
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	68fa      	ldr	r2, [r7, #12]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d10b      	bne.n	800c298 <vTaskSwitchContext+0x58>
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	3308      	adds	r3, #8
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	68fa      	ldr	r2, [r7, #12]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d105      	bne.n	800c298 <vTaskSwitchContext+0x58>
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	330c      	adds	r3, #12
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	68fa      	ldr	r2, [r7, #12]
 800c294:	429a      	cmp	r2, r3
 800c296:	d008      	beq.n	800c2aa <vTaskSwitchContext+0x6a>
 800c298:	4b27      	ldr	r3, [pc, #156]	; (800c338 <vTaskSwitchContext+0xf8>)
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	4b26      	ldr	r3, [pc, #152]	; (800c338 <vTaskSwitchContext+0xf8>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	3334      	adds	r3, #52	; 0x34
 800c2a2:	4619      	mov	r1, r3
 800c2a4:	4610      	mov	r0, r2
 800c2a6:	f7f5 fd1d 	bl	8001ce4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2aa:	4b24      	ldr	r3, [pc, #144]	; (800c33c <vTaskSwitchContext+0xfc>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	617b      	str	r3, [r7, #20]
 800c2b0:	e00f      	b.n	800c2d2 <vTaskSwitchContext+0x92>
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d109      	bne.n	800c2cc <vTaskSwitchContext+0x8c>
 800c2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2bc:	f383 8811 	msr	BASEPRI, r3
 800c2c0:	f3bf 8f6f 	isb	sy
 800c2c4:	f3bf 8f4f 	dsb	sy
 800c2c8:	607b      	str	r3, [r7, #4]
 800c2ca:	e7fe      	b.n	800c2ca <vTaskSwitchContext+0x8a>
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	3b01      	subs	r3, #1
 800c2d0:	617b      	str	r3, [r7, #20]
 800c2d2:	491b      	ldr	r1, [pc, #108]	; (800c340 <vTaskSwitchContext+0x100>)
 800c2d4:	697a      	ldr	r2, [r7, #20]
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	4413      	add	r3, r2
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	440b      	add	r3, r1
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d0e5      	beq.n	800c2b2 <vTaskSwitchContext+0x72>
 800c2e6:	697a      	ldr	r2, [r7, #20]
 800c2e8:	4613      	mov	r3, r2
 800c2ea:	009b      	lsls	r3, r3, #2
 800c2ec:	4413      	add	r3, r2
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	4a13      	ldr	r2, [pc, #76]	; (800c340 <vTaskSwitchContext+0x100>)
 800c2f2:	4413      	add	r3, r2
 800c2f4:	60bb      	str	r3, [r7, #8]
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	685a      	ldr	r2, [r3, #4]
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	605a      	str	r2, [r3, #4]
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	685a      	ldr	r2, [r3, #4]
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	3308      	adds	r3, #8
 800c308:	429a      	cmp	r2, r3
 800c30a:	d104      	bne.n	800c316 <vTaskSwitchContext+0xd6>
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	685a      	ldr	r2, [r3, #4]
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	605a      	str	r2, [r3, #4]
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	685b      	ldr	r3, [r3, #4]
 800c31a:	68db      	ldr	r3, [r3, #12]
 800c31c:	4a06      	ldr	r2, [pc, #24]	; (800c338 <vTaskSwitchContext+0xf8>)
 800c31e:	6013      	str	r3, [r2, #0]
 800c320:	4a06      	ldr	r2, [pc, #24]	; (800c33c <vTaskSwitchContext+0xfc>)
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	6013      	str	r3, [r2, #0]
}
 800c326:	bf00      	nop
 800c328:	3718      	adds	r7, #24
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop
 800c330:	20000f88 	.word	0x20000f88
 800c334:	20000f74 	.word	0x20000f74
 800c338:	20000a8c 	.word	0x20000a8c
 800c33c:	20000f68 	.word	0x20000f68
 800c340:	20000a90 	.word	0x20000a90

0800c344 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b084      	sub	sp, #16
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d109      	bne.n	800c368 <vTaskPlaceOnEventList+0x24>
 800c354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c358:	f383 8811 	msr	BASEPRI, r3
 800c35c:	f3bf 8f6f 	isb	sy
 800c360:	f3bf 8f4f 	dsb	sy
 800c364:	60fb      	str	r3, [r7, #12]
 800c366:	e7fe      	b.n	800c366 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c368:	4b07      	ldr	r3, [pc, #28]	; (800c388 <vTaskPlaceOnEventList+0x44>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	3318      	adds	r3, #24
 800c36e:	4619      	mov	r1, r3
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f7fe fc8a 	bl	800ac8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c376:	2101      	movs	r1, #1
 800c378:	6838      	ldr	r0, [r7, #0]
 800c37a:	f000 fb23 	bl	800c9c4 <prvAddCurrentTaskToDelayedList>
}
 800c37e:	bf00      	nop
 800c380:	3710      	adds	r7, #16
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	20000a8c 	.word	0x20000a8c

0800c38c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b086      	sub	sp, #24
 800c390:	af00      	add	r7, sp, #0
 800c392:	60f8      	str	r0, [r7, #12]
 800c394:	60b9      	str	r1, [r7, #8]
 800c396:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d109      	bne.n	800c3b2 <vTaskPlaceOnUnorderedEventList+0x26>
 800c39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a2:	f383 8811 	msr	BASEPRI, r3
 800c3a6:	f3bf 8f6f 	isb	sy
 800c3aa:	f3bf 8f4f 	dsb	sy
 800c3ae:	617b      	str	r3, [r7, #20]
 800c3b0:	e7fe      	b.n	800c3b0 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800c3b2:	4b11      	ldr	r3, [pc, #68]	; (800c3f8 <vTaskPlaceOnUnorderedEventList+0x6c>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d109      	bne.n	800c3ce <vTaskPlaceOnUnorderedEventList+0x42>
 800c3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3be:	f383 8811 	msr	BASEPRI, r3
 800c3c2:	f3bf 8f6f 	isb	sy
 800c3c6:	f3bf 8f4f 	dsb	sy
 800c3ca:	613b      	str	r3, [r7, #16]
 800c3cc:	e7fe      	b.n	800c3cc <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800c3ce:	4b0b      	ldr	r3, [pc, #44]	; (800c3fc <vTaskPlaceOnUnorderedEventList+0x70>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	68ba      	ldr	r2, [r7, #8]
 800c3d4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800c3d8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c3da:	4b08      	ldr	r3, [pc, #32]	; (800c3fc <vTaskPlaceOnUnorderedEventList+0x70>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	3318      	adds	r3, #24
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	68f8      	ldr	r0, [r7, #12]
 800c3e4:	f7fe fc2d 	bl	800ac42 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c3e8:	2101      	movs	r1, #1
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 faea 	bl	800c9c4 <prvAddCurrentTaskToDelayedList>
}
 800c3f0:	bf00      	nop
 800c3f2:	3718      	adds	r7, #24
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	20000f88 	.word	0x20000f88
 800c3fc:	20000a8c 	.word	0x20000a8c

0800c400 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c400:	b580      	push	{r7, lr}
 800c402:	b086      	sub	sp, #24
 800c404:	af00      	add	r7, sp, #0
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	60b9      	str	r1, [r7, #8]
 800c40a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d109      	bne.n	800c426 <vTaskPlaceOnEventListRestricted+0x26>
 800c412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c416:	f383 8811 	msr	BASEPRI, r3
 800c41a:	f3bf 8f6f 	isb	sy
 800c41e:	f3bf 8f4f 	dsb	sy
 800c422:	617b      	str	r3, [r7, #20]
 800c424:	e7fe      	b.n	800c424 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c426:	4b0a      	ldr	r3, [pc, #40]	; (800c450 <vTaskPlaceOnEventListRestricted+0x50>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	3318      	adds	r3, #24
 800c42c:	4619      	mov	r1, r3
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	f7fe fc07 	bl	800ac42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d002      	beq.n	800c440 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800c43a:	f04f 33ff 	mov.w	r3, #4294967295
 800c43e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c440:	6879      	ldr	r1, [r7, #4]
 800c442:	68b8      	ldr	r0, [r7, #8]
 800c444:	f000 fabe 	bl	800c9c4 <prvAddCurrentTaskToDelayedList>
	}
 800c448:	bf00      	nop
 800c44a:	3718      	adds	r7, #24
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}
 800c450:	20000a8c 	.word	0x20000a8c

0800c454 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b086      	sub	sp, #24
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	68db      	ldr	r3, [r3, #12]
 800c460:	68db      	ldr	r3, [r3, #12]
 800c462:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d109      	bne.n	800c47e <xTaskRemoveFromEventList+0x2a>
 800c46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46e:	f383 8811 	msr	BASEPRI, r3
 800c472:	f3bf 8f6f 	isb	sy
 800c476:	f3bf 8f4f 	dsb	sy
 800c47a:	60fb      	str	r3, [r7, #12]
 800c47c:	e7fe      	b.n	800c47c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	3318      	adds	r3, #24
 800c482:	4618      	mov	r0, r3
 800c484:	f7fe fc3a 	bl	800acfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c488:	4b1d      	ldr	r3, [pc, #116]	; (800c500 <xTaskRemoveFromEventList+0xac>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d11d      	bne.n	800c4cc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	3304      	adds	r3, #4
 800c494:	4618      	mov	r0, r3
 800c496:	f7fe fc31 	bl	800acfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c49e:	4b19      	ldr	r3, [pc, #100]	; (800c504 <xTaskRemoveFromEventList+0xb0>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d903      	bls.n	800c4ae <xTaskRemoveFromEventList+0x5a>
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4aa:	4a16      	ldr	r2, [pc, #88]	; (800c504 <xTaskRemoveFromEventList+0xb0>)
 800c4ac:	6013      	str	r3, [r2, #0]
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	009b      	lsls	r3, r3, #2
 800c4b6:	4413      	add	r3, r2
 800c4b8:	009b      	lsls	r3, r3, #2
 800c4ba:	4a13      	ldr	r2, [pc, #76]	; (800c508 <xTaskRemoveFromEventList+0xb4>)
 800c4bc:	441a      	add	r2, r3
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	3304      	adds	r3, #4
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	4610      	mov	r0, r2
 800c4c6:	f7fe fbbc 	bl	800ac42 <vListInsertEnd>
 800c4ca:	e005      	b.n	800c4d8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	3318      	adds	r3, #24
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	480e      	ldr	r0, [pc, #56]	; (800c50c <xTaskRemoveFromEventList+0xb8>)
 800c4d4:	f7fe fbb5 	bl	800ac42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4dc:	4b0c      	ldr	r3, [pc, #48]	; (800c510 <xTaskRemoveFromEventList+0xbc>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	d905      	bls.n	800c4f2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c4ea:	4b0a      	ldr	r3, [pc, #40]	; (800c514 <xTaskRemoveFromEventList+0xc0>)
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	601a      	str	r2, [r3, #0]
 800c4f0:	e001      	b.n	800c4f6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c4f6:	697b      	ldr	r3, [r7, #20]
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3718      	adds	r7, #24
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}
 800c500:	20000f88 	.word	0x20000f88
 800c504:	20000f68 	.word	0x20000f68
 800c508:	20000a90 	.word	0x20000a90
 800c50c:	20000f20 	.word	0x20000f20
 800c510:	20000a8c 	.word	0x20000a8c
 800c514:	20000f74 	.word	0x20000f74

0800c518 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b086      	sub	sp, #24
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800c522:	4b28      	ldr	r3, [pc, #160]	; (800c5c4 <vTaskRemoveFromUnorderedEventList+0xac>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d109      	bne.n	800c53e <vTaskRemoveFromUnorderedEventList+0x26>
 800c52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c52e:	f383 8811 	msr	BASEPRI, r3
 800c532:	f3bf 8f6f 	isb	sy
 800c536:	f3bf 8f4f 	dsb	sy
 800c53a:	613b      	str	r3, [r7, #16]
 800c53c:	e7fe      	b.n	800c53c <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	68db      	ldr	r3, [r3, #12]
 800c54c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d109      	bne.n	800c568 <vTaskRemoveFromUnorderedEventList+0x50>
 800c554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c558:	f383 8811 	msr	BASEPRI, r3
 800c55c:	f3bf 8f6f 	isb	sy
 800c560:	f3bf 8f4f 	dsb	sy
 800c564:	60fb      	str	r3, [r7, #12]
 800c566:	e7fe      	b.n	800c566 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f7fe fbc7 	bl	800acfc <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	3304      	adds	r3, #4
 800c572:	4618      	mov	r0, r3
 800c574:	f7fe fbc2 	bl	800acfc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c57c:	4b12      	ldr	r3, [pc, #72]	; (800c5c8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	429a      	cmp	r2, r3
 800c582:	d903      	bls.n	800c58c <vTaskRemoveFromUnorderedEventList+0x74>
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c588:	4a0f      	ldr	r2, [pc, #60]	; (800c5c8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800c58a:	6013      	str	r3, [r2, #0]
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c590:	4613      	mov	r3, r2
 800c592:	009b      	lsls	r3, r3, #2
 800c594:	4413      	add	r3, r2
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	4a0c      	ldr	r2, [pc, #48]	; (800c5cc <vTaskRemoveFromUnorderedEventList+0xb4>)
 800c59a:	441a      	add	r2, r3
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	3304      	adds	r3, #4
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	4610      	mov	r0, r2
 800c5a4:	f7fe fb4d 	bl	800ac42 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ac:	4b08      	ldr	r3, [pc, #32]	; (800c5d0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d902      	bls.n	800c5bc <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800c5b6:	4b07      	ldr	r3, [pc, #28]	; (800c5d4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	601a      	str	r2, [r3, #0]
	}
}
 800c5bc:	bf00      	nop
 800c5be:	3718      	adds	r7, #24
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	20000f88 	.word	0x20000f88
 800c5c8:	20000f68 	.word	0x20000f68
 800c5cc:	20000a90 	.word	0x20000a90
 800c5d0:	20000a8c 	.word	0x20000a8c
 800c5d4:	20000f74 	.word	0x20000f74

0800c5d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b083      	sub	sp, #12
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c5e0:	4b06      	ldr	r3, [pc, #24]	; (800c5fc <vTaskInternalSetTimeOutState+0x24>)
 800c5e2:	681a      	ldr	r2, [r3, #0]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c5e8:	4b05      	ldr	r3, [pc, #20]	; (800c600 <vTaskInternalSetTimeOutState+0x28>)
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	605a      	str	r2, [r3, #4]
}
 800c5f0:	bf00      	nop
 800c5f2:	370c      	adds	r7, #12
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr
 800c5fc:	20000f78 	.word	0x20000f78
 800c600:	20000f64 	.word	0x20000f64

0800c604 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b088      	sub	sp, #32
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d109      	bne.n	800c628 <xTaskCheckForTimeOut+0x24>
 800c614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c618:	f383 8811 	msr	BASEPRI, r3
 800c61c:	f3bf 8f6f 	isb	sy
 800c620:	f3bf 8f4f 	dsb	sy
 800c624:	613b      	str	r3, [r7, #16]
 800c626:	e7fe      	b.n	800c626 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d109      	bne.n	800c642 <xTaskCheckForTimeOut+0x3e>
 800c62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c632:	f383 8811 	msr	BASEPRI, r3
 800c636:	f3bf 8f6f 	isb	sy
 800c63a:	f3bf 8f4f 	dsb	sy
 800c63e:	60fb      	str	r3, [r7, #12]
 800c640:	e7fe      	b.n	800c640 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800c642:	f000 fea3 	bl	800d38c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c646:	4b1d      	ldr	r3, [pc, #116]	; (800c6bc <xTaskCheckForTimeOut+0xb8>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	69ba      	ldr	r2, [r7, #24]
 800c652:	1ad3      	subs	r3, r2, r3
 800c654:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c65e:	d102      	bne.n	800c666 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c660:	2300      	movs	r3, #0
 800c662:	61fb      	str	r3, [r7, #28]
 800c664:	e023      	b.n	800c6ae <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	4b15      	ldr	r3, [pc, #84]	; (800c6c0 <xTaskCheckForTimeOut+0xbc>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d007      	beq.n	800c682 <xTaskCheckForTimeOut+0x7e>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	69ba      	ldr	r2, [r7, #24]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d302      	bcc.n	800c682 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c67c:	2301      	movs	r3, #1
 800c67e:	61fb      	str	r3, [r7, #28]
 800c680:	e015      	b.n	800c6ae <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	697a      	ldr	r2, [r7, #20]
 800c688:	429a      	cmp	r2, r3
 800c68a:	d20b      	bcs.n	800c6a4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	681a      	ldr	r2, [r3, #0]
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	1ad2      	subs	r2, r2, r3
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f7ff ff9d 	bl	800c5d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	61fb      	str	r3, [r7, #28]
 800c6a2:	e004      	b.n	800c6ae <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c6ae:	f000 fe9b 	bl	800d3e8 <vPortExitCritical>

	return xReturn;
 800c6b2:	69fb      	ldr	r3, [r7, #28]
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3720      	adds	r7, #32
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	20000f64 	.word	0x20000f64
 800c6c0:	20000f78 	.word	0x20000f78

0800c6c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c6c8:	4b03      	ldr	r3, [pc, #12]	; (800c6d8 <vTaskMissedYield+0x14>)
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	601a      	str	r2, [r3, #0]
}
 800c6ce:	bf00      	nop
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr
 800c6d8:	20000f74 	.word	0x20000f74

0800c6dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c6e4:	f000 f852 	bl	800c78c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c6e8:	4b06      	ldr	r3, [pc, #24]	; (800c704 <prvIdleTask+0x28>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d9f9      	bls.n	800c6e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c6f0:	4b05      	ldr	r3, [pc, #20]	; (800c708 <prvIdleTask+0x2c>)
 800c6f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6f6:	601a      	str	r2, [r3, #0]
 800c6f8:	f3bf 8f4f 	dsb	sy
 800c6fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c700:	e7f0      	b.n	800c6e4 <prvIdleTask+0x8>
 800c702:	bf00      	nop
 800c704:	20000a90 	.word	0x20000a90
 800c708:	e000ed04 	.word	0xe000ed04

0800c70c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c712:	2300      	movs	r3, #0
 800c714:	607b      	str	r3, [r7, #4]
 800c716:	e00c      	b.n	800c732 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	4613      	mov	r3, r2
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	4413      	add	r3, r2
 800c720:	009b      	lsls	r3, r3, #2
 800c722:	4a12      	ldr	r2, [pc, #72]	; (800c76c <prvInitialiseTaskLists+0x60>)
 800c724:	4413      	add	r3, r2
 800c726:	4618      	mov	r0, r3
 800c728:	f7fe fa5e 	bl	800abe8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	3301      	adds	r3, #1
 800c730:	607b      	str	r3, [r7, #4]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2b37      	cmp	r3, #55	; 0x37
 800c736:	d9ef      	bls.n	800c718 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c738:	480d      	ldr	r0, [pc, #52]	; (800c770 <prvInitialiseTaskLists+0x64>)
 800c73a:	f7fe fa55 	bl	800abe8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c73e:	480d      	ldr	r0, [pc, #52]	; (800c774 <prvInitialiseTaskLists+0x68>)
 800c740:	f7fe fa52 	bl	800abe8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c744:	480c      	ldr	r0, [pc, #48]	; (800c778 <prvInitialiseTaskLists+0x6c>)
 800c746:	f7fe fa4f 	bl	800abe8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c74a:	480c      	ldr	r0, [pc, #48]	; (800c77c <prvInitialiseTaskLists+0x70>)
 800c74c:	f7fe fa4c 	bl	800abe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c750:	480b      	ldr	r0, [pc, #44]	; (800c780 <prvInitialiseTaskLists+0x74>)
 800c752:	f7fe fa49 	bl	800abe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c756:	4b0b      	ldr	r3, [pc, #44]	; (800c784 <prvInitialiseTaskLists+0x78>)
 800c758:	4a05      	ldr	r2, [pc, #20]	; (800c770 <prvInitialiseTaskLists+0x64>)
 800c75a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c75c:	4b0a      	ldr	r3, [pc, #40]	; (800c788 <prvInitialiseTaskLists+0x7c>)
 800c75e:	4a05      	ldr	r2, [pc, #20]	; (800c774 <prvInitialiseTaskLists+0x68>)
 800c760:	601a      	str	r2, [r3, #0]
}
 800c762:	bf00      	nop
 800c764:	3708      	adds	r7, #8
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	20000a90 	.word	0x20000a90
 800c770:	20000ef0 	.word	0x20000ef0
 800c774:	20000f04 	.word	0x20000f04
 800c778:	20000f20 	.word	0x20000f20
 800c77c:	20000f34 	.word	0x20000f34
 800c780:	20000f4c 	.word	0x20000f4c
 800c784:	20000f18 	.word	0x20000f18
 800c788:	20000f1c 	.word	0x20000f1c

0800c78c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c792:	e019      	b.n	800c7c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c794:	f000 fdfa 	bl	800d38c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c798:	4b0f      	ldr	r3, [pc, #60]	; (800c7d8 <prvCheckTasksWaitingTermination+0x4c>)
 800c79a:	68db      	ldr	r3, [r3, #12]
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	3304      	adds	r3, #4
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f7fe faa9 	bl	800acfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c7aa:	4b0c      	ldr	r3, [pc, #48]	; (800c7dc <prvCheckTasksWaitingTermination+0x50>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	3b01      	subs	r3, #1
 800c7b0:	4a0a      	ldr	r2, [pc, #40]	; (800c7dc <prvCheckTasksWaitingTermination+0x50>)
 800c7b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c7b4:	4b0a      	ldr	r3, [pc, #40]	; (800c7e0 <prvCheckTasksWaitingTermination+0x54>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	3b01      	subs	r3, #1
 800c7ba:	4a09      	ldr	r2, [pc, #36]	; (800c7e0 <prvCheckTasksWaitingTermination+0x54>)
 800c7bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c7be:	f000 fe13 	bl	800d3e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 f80e 	bl	800c7e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c7c8:	4b05      	ldr	r3, [pc, #20]	; (800c7e0 <prvCheckTasksWaitingTermination+0x54>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d1e1      	bne.n	800c794 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c7d0:	bf00      	nop
 800c7d2:	3708      	adds	r7, #8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	20000f34 	.word	0x20000f34
 800c7dc:	20000f60 	.word	0x20000f60
 800c7e0:	20000f48 	.word	0x20000f48

0800c7e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d108      	bne.n	800c808 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f000 ffa2 	bl	800d744 <vPortFree>
				vPortFree( pxTCB );
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 ff9f 	bl	800d744 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c806:	e017      	b.n	800c838 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800c80e:	2b01      	cmp	r3, #1
 800c810:	d103      	bne.n	800c81a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 ff96 	bl	800d744 <vPortFree>
	}
 800c818:	e00e      	b.n	800c838 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800c820:	2b02      	cmp	r3, #2
 800c822:	d009      	beq.n	800c838 <prvDeleteTCB+0x54>
 800c824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c828:	f383 8811 	msr	BASEPRI, r3
 800c82c:	f3bf 8f6f 	isb	sy
 800c830:	f3bf 8f4f 	dsb	sy
 800c834:	60fb      	str	r3, [r7, #12]
 800c836:	e7fe      	b.n	800c836 <prvDeleteTCB+0x52>
	}
 800c838:	bf00      	nop
 800c83a:	3710      	adds	r7, #16
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c840:	b480      	push	{r7}
 800c842:	b083      	sub	sp, #12
 800c844:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c846:	4b0c      	ldr	r3, [pc, #48]	; (800c878 <prvResetNextTaskUnblockTime+0x38>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d104      	bne.n	800c85a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c850:	4b0a      	ldr	r3, [pc, #40]	; (800c87c <prvResetNextTaskUnblockTime+0x3c>)
 800c852:	f04f 32ff 	mov.w	r2, #4294967295
 800c856:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c858:	e008      	b.n	800c86c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c85a:	4b07      	ldr	r3, [pc, #28]	; (800c878 <prvResetNextTaskUnblockTime+0x38>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	68db      	ldr	r3, [r3, #12]
 800c860:	68db      	ldr	r3, [r3, #12]
 800c862:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	685b      	ldr	r3, [r3, #4]
 800c868:	4a04      	ldr	r2, [pc, #16]	; (800c87c <prvResetNextTaskUnblockTime+0x3c>)
 800c86a:	6013      	str	r3, [r2, #0]
}
 800c86c:	bf00      	nop
 800c86e:	370c      	adds	r7, #12
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr
 800c878:	20000f18 	.word	0x20000f18
 800c87c:	20000f80 	.word	0x20000f80

0800c880 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c880:	b480      	push	{r7}
 800c882:	b083      	sub	sp, #12
 800c884:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c886:	4b0b      	ldr	r3, [pc, #44]	; (800c8b4 <xTaskGetSchedulerState+0x34>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d102      	bne.n	800c894 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c88e:	2301      	movs	r3, #1
 800c890:	607b      	str	r3, [r7, #4]
 800c892:	e008      	b.n	800c8a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c894:	4b08      	ldr	r3, [pc, #32]	; (800c8b8 <xTaskGetSchedulerState+0x38>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d102      	bne.n	800c8a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c89c:	2302      	movs	r3, #2
 800c89e:	607b      	str	r3, [r7, #4]
 800c8a0:	e001      	b.n	800c8a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c8a6:	687b      	ldr	r3, [r7, #4]
	}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	370c      	adds	r7, #12
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr
 800c8b4:	20000f6c 	.word	0x20000f6c
 800c8b8:	20000f88 	.word	0x20000f88

0800c8bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b086      	sub	sp, #24
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d054      	beq.n	800c97c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c8d2:	4b2d      	ldr	r3, [pc, #180]	; (800c988 <xTaskPriorityDisinherit+0xcc>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	693a      	ldr	r2, [r7, #16]
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d009      	beq.n	800c8f0 <xTaskPriorityDisinherit+0x34>
 800c8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e0:	f383 8811 	msr	BASEPRI, r3
 800c8e4:	f3bf 8f6f 	isb	sy
 800c8e8:	f3bf 8f4f 	dsb	sy
 800c8ec:	60fb      	str	r3, [r7, #12]
 800c8ee:	e7fe      	b.n	800c8ee <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d109      	bne.n	800c90c <xTaskPriorityDisinherit+0x50>
 800c8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fc:	f383 8811 	msr	BASEPRI, r3
 800c900:	f3bf 8f6f 	isb	sy
 800c904:	f3bf 8f4f 	dsb	sy
 800c908:	60bb      	str	r3, [r7, #8]
 800c90a:	e7fe      	b.n	800c90a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c910:	1e5a      	subs	r2, r3, #1
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	665a      	str	r2, [r3, #100]	; 0x64

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c91e:	429a      	cmp	r2, r3
 800c920:	d02c      	beq.n	800c97c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c926:	2b00      	cmp	r3, #0
 800c928:	d128      	bne.n	800c97c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	3304      	adds	r3, #4
 800c92e:	4618      	mov	r0, r3
 800c930:	f7fe f9e4 	bl	800acfc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c940:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c94c:	4b0f      	ldr	r3, [pc, #60]	; (800c98c <xTaskPriorityDisinherit+0xd0>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	429a      	cmp	r2, r3
 800c952:	d903      	bls.n	800c95c <xTaskPriorityDisinherit+0xa0>
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c958:	4a0c      	ldr	r2, [pc, #48]	; (800c98c <xTaskPriorityDisinherit+0xd0>)
 800c95a:	6013      	str	r3, [r2, #0]
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c960:	4613      	mov	r3, r2
 800c962:	009b      	lsls	r3, r3, #2
 800c964:	4413      	add	r3, r2
 800c966:	009b      	lsls	r3, r3, #2
 800c968:	4a09      	ldr	r2, [pc, #36]	; (800c990 <xTaskPriorityDisinherit+0xd4>)
 800c96a:	441a      	add	r2, r3
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	3304      	adds	r3, #4
 800c970:	4619      	mov	r1, r3
 800c972:	4610      	mov	r0, r2
 800c974:	f7fe f965 	bl	800ac42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c978:	2301      	movs	r3, #1
 800c97a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c97c:	697b      	ldr	r3, [r7, #20]
	}
 800c97e:	4618      	mov	r0, r3
 800c980:	3718      	adds	r7, #24
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
 800c986:	bf00      	nop
 800c988:	20000a8c 	.word	0x20000a8c
 800c98c:	20000f68 	.word	0x20000f68
 800c990:	20000a90 	.word	0x20000a90

0800c994 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800c994:	b480      	push	{r7}
 800c996:	b083      	sub	sp, #12
 800c998:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800c99a:	4b09      	ldr	r3, [pc, #36]	; (800c9c0 <uxTaskResetEventItemValue+0x2c>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	699b      	ldr	r3, [r3, #24]
 800c9a0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9a2:	4b07      	ldr	r3, [pc, #28]	; (800c9c0 <uxTaskResetEventItemValue+0x2c>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9a8:	4b05      	ldr	r3, [pc, #20]	; (800c9c0 <uxTaskResetEventItemValue+0x2c>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800c9b0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800c9b2:	687b      	ldr	r3, [r7, #4]
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	370c      	adds	r7, #12
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr
 800c9c0:	20000a8c 	.word	0x20000a8c

0800c9c4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b084      	sub	sp, #16
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c9ce:	4b21      	ldr	r3, [pc, #132]	; (800ca54 <prvAddCurrentTaskToDelayedList+0x90>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c9d4:	4b20      	ldr	r3, [pc, #128]	; (800ca58 <prvAddCurrentTaskToDelayedList+0x94>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	3304      	adds	r3, #4
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7fe f98e 	bl	800acfc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9e6:	d10a      	bne.n	800c9fe <prvAddCurrentTaskToDelayedList+0x3a>
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d007      	beq.n	800c9fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9ee:	4b1a      	ldr	r3, [pc, #104]	; (800ca58 <prvAddCurrentTaskToDelayedList+0x94>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	3304      	adds	r3, #4
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	4819      	ldr	r0, [pc, #100]	; (800ca5c <prvAddCurrentTaskToDelayedList+0x98>)
 800c9f8:	f7fe f923 	bl	800ac42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c9fc:	e026      	b.n	800ca4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c9fe:	68fa      	ldr	r2, [r7, #12]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	4413      	add	r3, r2
 800ca04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ca06:	4b14      	ldr	r3, [pc, #80]	; (800ca58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	68ba      	ldr	r2, [r7, #8]
 800ca0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ca0e:	68ba      	ldr	r2, [r7, #8]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d209      	bcs.n	800ca2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca16:	4b12      	ldr	r3, [pc, #72]	; (800ca60 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ca18:	681a      	ldr	r2, [r3, #0]
 800ca1a:	4b0f      	ldr	r3, [pc, #60]	; (800ca58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	3304      	adds	r3, #4
 800ca20:	4619      	mov	r1, r3
 800ca22:	4610      	mov	r0, r2
 800ca24:	f7fe f931 	bl	800ac8a <vListInsert>
}
 800ca28:	e010      	b.n	800ca4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca2a:	4b0e      	ldr	r3, [pc, #56]	; (800ca64 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ca2c:	681a      	ldr	r2, [r3, #0]
 800ca2e:	4b0a      	ldr	r3, [pc, #40]	; (800ca58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	3304      	adds	r3, #4
 800ca34:	4619      	mov	r1, r3
 800ca36:	4610      	mov	r0, r2
 800ca38:	f7fe f927 	bl	800ac8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ca3c:	4b0a      	ldr	r3, [pc, #40]	; (800ca68 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	68ba      	ldr	r2, [r7, #8]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d202      	bcs.n	800ca4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ca46:	4a08      	ldr	r2, [pc, #32]	; (800ca68 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	6013      	str	r3, [r2, #0]
}
 800ca4c:	bf00      	nop
 800ca4e:	3710      	adds	r7, #16
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	20000f64 	.word	0x20000f64
 800ca58:	20000a8c 	.word	0x20000a8c
 800ca5c:	20000f4c 	.word	0x20000f4c
 800ca60:	20000f1c 	.word	0x20000f1c
 800ca64:	20000f18 	.word	0x20000f18
 800ca68:	20000f80 	.word	0x20000f80

0800ca6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b08a      	sub	sp, #40	; 0x28
 800ca70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ca72:	2300      	movs	r3, #0
 800ca74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ca76:	f000 faff 	bl	800d078 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ca7a:	4b1c      	ldr	r3, [pc, #112]	; (800caec <xTimerCreateTimerTask+0x80>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d021      	beq.n	800cac6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ca82:	2300      	movs	r3, #0
 800ca84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ca86:	2300      	movs	r3, #0
 800ca88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ca8a:	1d3a      	adds	r2, r7, #4
 800ca8c:	f107 0108 	add.w	r1, r7, #8
 800ca90:	f107 030c 	add.w	r3, r7, #12
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7fd fe2d 	bl	800a6f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ca9a:	6879      	ldr	r1, [r7, #4]
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	68fa      	ldr	r2, [r7, #12]
 800caa0:	9202      	str	r2, [sp, #8]
 800caa2:	9301      	str	r3, [sp, #4]
 800caa4:	2330      	movs	r3, #48	; 0x30
 800caa6:	9300      	str	r3, [sp, #0]
 800caa8:	2300      	movs	r3, #0
 800caaa:	460a      	mov	r2, r1
 800caac:	4910      	ldr	r1, [pc, #64]	; (800caf0 <xTimerCreateTimerTask+0x84>)
 800caae:	4811      	ldr	r0, [pc, #68]	; (800caf4 <xTimerCreateTimerTask+0x88>)
 800cab0:	f7fe ff1a 	bl	800b8e8 <xTaskCreateStatic>
 800cab4:	4602      	mov	r2, r0
 800cab6:	4b10      	ldr	r3, [pc, #64]	; (800caf8 <xTimerCreateTimerTask+0x8c>)
 800cab8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800caba:	4b0f      	ldr	r3, [pc, #60]	; (800caf8 <xTimerCreateTimerTask+0x8c>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d001      	beq.n	800cac6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cac2:	2301      	movs	r3, #1
 800cac4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d109      	bne.n	800cae0 <xTimerCreateTimerTask+0x74>
 800cacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad0:	f383 8811 	msr	BASEPRI, r3
 800cad4:	f3bf 8f6f 	isb	sy
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	613b      	str	r3, [r7, #16]
 800cade:	e7fe      	b.n	800cade <xTimerCreateTimerTask+0x72>
	return xReturn;
 800cae0:	697b      	ldr	r3, [r7, #20]
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3718      	adds	r7, #24
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	20000fbc 	.word	0x20000fbc
 800caf0:	0800fee0 	.word	0x0800fee0
 800caf4:	0800cc2d 	.word	0x0800cc2d
 800caf8:	20000fc0 	.word	0x20000fc0

0800cafc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b08a      	sub	sp, #40	; 0x28
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	60b9      	str	r1, [r7, #8]
 800cb06:	607a      	str	r2, [r7, #4]
 800cb08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d109      	bne.n	800cb28 <xTimerGenericCommand+0x2c>
 800cb14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb18:	f383 8811 	msr	BASEPRI, r3
 800cb1c:	f3bf 8f6f 	isb	sy
 800cb20:	f3bf 8f4f 	dsb	sy
 800cb24:	623b      	str	r3, [r7, #32]
 800cb26:	e7fe      	b.n	800cb26 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cb28:	4b19      	ldr	r3, [pc, #100]	; (800cb90 <xTimerGenericCommand+0x94>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d02a      	beq.n	800cb86 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	2b05      	cmp	r3, #5
 800cb40:	dc18      	bgt.n	800cb74 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cb42:	f7ff fe9d 	bl	800c880 <xTaskGetSchedulerState>
 800cb46:	4603      	mov	r3, r0
 800cb48:	2b02      	cmp	r3, #2
 800cb4a:	d109      	bne.n	800cb60 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cb4c:	4b10      	ldr	r3, [pc, #64]	; (800cb90 <xTimerGenericCommand+0x94>)
 800cb4e:	6818      	ldr	r0, [r3, #0]
 800cb50:	f107 0110 	add.w	r1, r7, #16
 800cb54:	2300      	movs	r3, #0
 800cb56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb58:	f7fe fa38 	bl	800afcc <xQueueGenericSend>
 800cb5c:	6278      	str	r0, [r7, #36]	; 0x24
 800cb5e:	e012      	b.n	800cb86 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cb60:	4b0b      	ldr	r3, [pc, #44]	; (800cb90 <xTimerGenericCommand+0x94>)
 800cb62:	6818      	ldr	r0, [r3, #0]
 800cb64:	f107 0110 	add.w	r1, r7, #16
 800cb68:	2300      	movs	r3, #0
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	f7fe fa2e 	bl	800afcc <xQueueGenericSend>
 800cb70:	6278      	str	r0, [r7, #36]	; 0x24
 800cb72:	e008      	b.n	800cb86 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cb74:	4b06      	ldr	r3, [pc, #24]	; (800cb90 <xTimerGenericCommand+0x94>)
 800cb76:	6818      	ldr	r0, [r3, #0]
 800cb78:	f107 0110 	add.w	r1, r7, #16
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	683a      	ldr	r2, [r7, #0]
 800cb80:	f7fe fb1e 	bl	800b1c0 <xQueueGenericSendFromISR>
 800cb84:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3728      	adds	r7, #40	; 0x28
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}
 800cb90:	20000fbc 	.word	0x20000fbc

0800cb94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b088      	sub	sp, #32
 800cb98:	af02      	add	r7, sp, #8
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb9e:	4b22      	ldr	r3, [pc, #136]	; (800cc28 <prvProcessExpiredTimer+0x94>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	68db      	ldr	r3, [r3, #12]
 800cba4:	68db      	ldr	r3, [r3, #12]
 800cba6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	3304      	adds	r3, #4
 800cbac:	4618      	mov	r0, r3
 800cbae:	f7fe f8a5 	bl	800acfc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbb8:	f003 0304 	and.w	r3, r3, #4
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d021      	beq.n	800cc04 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	699a      	ldr	r2, [r3, #24]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	18d1      	adds	r1, r2, r3
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	683a      	ldr	r2, [r7, #0]
 800cbcc:	6978      	ldr	r0, [r7, #20]
 800cbce:	f000 f8d1 	bl	800cd74 <prvInsertTimerInActiveList>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d01e      	beq.n	800cc16 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cbd8:	2300      	movs	r3, #0
 800cbda:	9300      	str	r3, [sp, #0]
 800cbdc:	2300      	movs	r3, #0
 800cbde:	687a      	ldr	r2, [r7, #4]
 800cbe0:	2100      	movs	r1, #0
 800cbe2:	6978      	ldr	r0, [r7, #20]
 800cbe4:	f7ff ff8a 	bl	800cafc <xTimerGenericCommand>
 800cbe8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d112      	bne.n	800cc16 <prvProcessExpiredTimer+0x82>
 800cbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf4:	f383 8811 	msr	BASEPRI, r3
 800cbf8:	f3bf 8f6f 	isb	sy
 800cbfc:	f3bf 8f4f 	dsb	sy
 800cc00:	60fb      	str	r3, [r7, #12]
 800cc02:	e7fe      	b.n	800cc02 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc0a:	f023 0301 	bic.w	r3, r3, #1
 800cc0e:	b2da      	uxtb	r2, r3
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	6a1b      	ldr	r3, [r3, #32]
 800cc1a:	6978      	ldr	r0, [r7, #20]
 800cc1c:	4798      	blx	r3
}
 800cc1e:	bf00      	nop
 800cc20:	3718      	adds	r7, #24
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	20000fb4 	.word	0x20000fb4

0800cc2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cc34:	f107 0308 	add.w	r3, r7, #8
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f000 f857 	bl	800ccec <prvGetNextExpireTime>
 800cc3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	4619      	mov	r1, r3
 800cc44:	68f8      	ldr	r0, [r7, #12]
 800cc46:	f000 f803 	bl	800cc50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cc4a:	f000 f8d5 	bl	800cdf8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cc4e:	e7f1      	b.n	800cc34 <prvTimerTask+0x8>

0800cc50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cc5a:	f7ff f97f 	bl	800bf5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cc5e:	f107 0308 	add.w	r3, r7, #8
 800cc62:	4618      	mov	r0, r3
 800cc64:	f000 f866 	bl	800cd34 <prvSampleTimeNow>
 800cc68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d130      	bne.n	800ccd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d10a      	bne.n	800cc8c <prvProcessTimerOrBlockTask+0x3c>
 800cc76:	687a      	ldr	r2, [r7, #4]
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d806      	bhi.n	800cc8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cc7e:	f7ff f97b 	bl	800bf78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cc82:	68f9      	ldr	r1, [r7, #12]
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f7ff ff85 	bl	800cb94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cc8a:	e024      	b.n	800ccd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d008      	beq.n	800cca4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cc92:	4b13      	ldr	r3, [pc, #76]	; (800cce0 <prvProcessTimerOrBlockTask+0x90>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d101      	bne.n	800cca0 <prvProcessTimerOrBlockTask+0x50>
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	e000      	b.n	800cca2 <prvProcessTimerOrBlockTask+0x52>
 800cca0:	2300      	movs	r3, #0
 800cca2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cca4:	4b0f      	ldr	r3, [pc, #60]	; (800cce4 <prvProcessTimerOrBlockTask+0x94>)
 800cca6:	6818      	ldr	r0, [r3, #0]
 800cca8:	687a      	ldr	r2, [r7, #4]
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	1ad3      	subs	r3, r2, r3
 800ccae:	683a      	ldr	r2, [r7, #0]
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	f7fe fde5 	bl	800b880 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ccb6:	f7ff f95f 	bl	800bf78 <xTaskResumeAll>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d10a      	bne.n	800ccd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ccc0:	4b09      	ldr	r3, [pc, #36]	; (800cce8 <prvProcessTimerOrBlockTask+0x98>)
 800ccc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccc6:	601a      	str	r2, [r3, #0]
 800ccc8:	f3bf 8f4f 	dsb	sy
 800cccc:	f3bf 8f6f 	isb	sy
}
 800ccd0:	e001      	b.n	800ccd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ccd2:	f7ff f951 	bl	800bf78 <xTaskResumeAll>
}
 800ccd6:	bf00      	nop
 800ccd8:	3710      	adds	r7, #16
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	20000fb8 	.word	0x20000fb8
 800cce4:	20000fbc 	.word	0x20000fbc
 800cce8:	e000ed04 	.word	0xe000ed04

0800ccec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ccec:	b480      	push	{r7}
 800ccee:	b085      	sub	sp, #20
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ccf4:	4b0e      	ldr	r3, [pc, #56]	; (800cd30 <prvGetNextExpireTime+0x44>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d101      	bne.n	800cd02 <prvGetNextExpireTime+0x16>
 800ccfe:	2201      	movs	r2, #1
 800cd00:	e000      	b.n	800cd04 <prvGetNextExpireTime+0x18>
 800cd02:	2200      	movs	r2, #0
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d105      	bne.n	800cd1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cd10:	4b07      	ldr	r3, [pc, #28]	; (800cd30 <prvGetNextExpireTime+0x44>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	60fb      	str	r3, [r7, #12]
 800cd1a:	e001      	b.n	800cd20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cd20:	68fb      	ldr	r3, [r7, #12]
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3714      	adds	r7, #20
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr
 800cd2e:	bf00      	nop
 800cd30:	20000fb4 	.word	0x20000fb4

0800cd34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cd3c:	f7ff f9b8 	bl	800c0b0 <xTaskGetTickCount>
 800cd40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cd42:	4b0b      	ldr	r3, [pc, #44]	; (800cd70 <prvSampleTimeNow+0x3c>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	68fa      	ldr	r2, [r7, #12]
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d205      	bcs.n	800cd58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cd4c:	f000 f930 	bl	800cfb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2201      	movs	r2, #1
 800cd54:	601a      	str	r2, [r3, #0]
 800cd56:	e002      	b.n	800cd5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cd5e:	4a04      	ldr	r2, [pc, #16]	; (800cd70 <prvSampleTimeNow+0x3c>)
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cd64:	68fb      	ldr	r3, [r7, #12]
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3710      	adds	r7, #16
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	20000fc4 	.word	0x20000fc4

0800cd74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b086      	sub	sp, #24
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	60f8      	str	r0, [r7, #12]
 800cd7c:	60b9      	str	r1, [r7, #8]
 800cd7e:	607a      	str	r2, [r7, #4]
 800cd80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cd82:	2300      	movs	r3, #0
 800cd84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	68ba      	ldr	r2, [r7, #8]
 800cd8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	68fa      	ldr	r2, [r7, #12]
 800cd90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cd92:	68ba      	ldr	r2, [r7, #8]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d812      	bhi.n	800cdc0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd9a:	687a      	ldr	r2, [r7, #4]
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	1ad2      	subs	r2, r2, r3
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	699b      	ldr	r3, [r3, #24]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d302      	bcc.n	800cdae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cda8:	2301      	movs	r3, #1
 800cdaa:	617b      	str	r3, [r7, #20]
 800cdac:	e01b      	b.n	800cde6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cdae:	4b10      	ldr	r3, [pc, #64]	; (800cdf0 <prvInsertTimerInActiveList+0x7c>)
 800cdb0:	681a      	ldr	r2, [r3, #0]
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	3304      	adds	r3, #4
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	4610      	mov	r0, r2
 800cdba:	f7fd ff66 	bl	800ac8a <vListInsert>
 800cdbe:	e012      	b.n	800cde6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d206      	bcs.n	800cdd6 <prvInsertTimerInActiveList+0x62>
 800cdc8:	68ba      	ldr	r2, [r7, #8]
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d302      	bcc.n	800cdd6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	617b      	str	r3, [r7, #20]
 800cdd4:	e007      	b.n	800cde6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cdd6:	4b07      	ldr	r3, [pc, #28]	; (800cdf4 <prvInsertTimerInActiveList+0x80>)
 800cdd8:	681a      	ldr	r2, [r3, #0]
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	3304      	adds	r3, #4
 800cdde:	4619      	mov	r1, r3
 800cde0:	4610      	mov	r0, r2
 800cde2:	f7fd ff52 	bl	800ac8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cde6:	697b      	ldr	r3, [r7, #20]
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3718      	adds	r7, #24
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	20000fb8 	.word	0x20000fb8
 800cdf4:	20000fb4 	.word	0x20000fb4

0800cdf8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b08e      	sub	sp, #56	; 0x38
 800cdfc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cdfe:	e0c6      	b.n	800cf8e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	da17      	bge.n	800ce36 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ce06:	1d3b      	adds	r3, r7, #4
 800ce08:	3304      	adds	r3, #4
 800ce0a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ce0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d109      	bne.n	800ce26 <prvProcessReceivedCommands+0x2e>
 800ce12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce16:	f383 8811 	msr	BASEPRI, r3
 800ce1a:	f3bf 8f6f 	isb	sy
 800ce1e:	f3bf 8f4f 	dsb	sy
 800ce22:	61fb      	str	r3, [r7, #28]
 800ce24:	e7fe      	b.n	800ce24 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ce26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce2c:	6850      	ldr	r0, [r2, #4]
 800ce2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce30:	6892      	ldr	r2, [r2, #8]
 800ce32:	4611      	mov	r1, r2
 800ce34:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	f2c0 80a7 	blt.w	800cf8c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ce42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce44:	695b      	ldr	r3, [r3, #20]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d004      	beq.n	800ce54 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce4c:	3304      	adds	r3, #4
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f7fd ff54 	bl	800acfc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ce54:	463b      	mov	r3, r7
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7ff ff6c 	bl	800cd34 <prvSampleTimeNow>
 800ce5c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2b09      	cmp	r3, #9
 800ce62:	f200 8094 	bhi.w	800cf8e <prvProcessReceivedCommands+0x196>
 800ce66:	a201      	add	r2, pc, #4	; (adr r2, 800ce6c <prvProcessReceivedCommands+0x74>)
 800ce68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce6c:	0800ce95 	.word	0x0800ce95
 800ce70:	0800ce95 	.word	0x0800ce95
 800ce74:	0800ce95 	.word	0x0800ce95
 800ce78:	0800cf07 	.word	0x0800cf07
 800ce7c:	0800cf1b 	.word	0x0800cf1b
 800ce80:	0800cf63 	.word	0x0800cf63
 800ce84:	0800ce95 	.word	0x0800ce95
 800ce88:	0800ce95 	.word	0x0800ce95
 800ce8c:	0800cf07 	.word	0x0800cf07
 800ce90:	0800cf1b 	.word	0x0800cf1b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce9a:	f043 0301 	orr.w	r3, r3, #1
 800ce9e:	b2da      	uxtb	r2, r3
 800cea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cea6:	68ba      	ldr	r2, [r7, #8]
 800cea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceaa:	699b      	ldr	r3, [r3, #24]
 800ceac:	18d1      	adds	r1, r2, r3
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ceb4:	f7ff ff5e 	bl	800cd74 <prvInsertTimerInActiveList>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d067      	beq.n	800cf8e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec0:	6a1b      	ldr	r3, [r3, #32]
 800cec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cec4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cecc:	f003 0304 	and.w	r3, r3, #4
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d05c      	beq.n	800cf8e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ced4:	68ba      	ldr	r2, [r7, #8]
 800ced6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced8:	699b      	ldr	r3, [r3, #24]
 800ceda:	441a      	add	r2, r3
 800cedc:	2300      	movs	r3, #0
 800cede:	9300      	str	r3, [sp, #0]
 800cee0:	2300      	movs	r3, #0
 800cee2:	2100      	movs	r1, #0
 800cee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cee6:	f7ff fe09 	bl	800cafc <xTimerGenericCommand>
 800ceea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ceec:	6a3b      	ldr	r3, [r7, #32]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d14d      	bne.n	800cf8e <prvProcessReceivedCommands+0x196>
 800cef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef6:	f383 8811 	msr	BASEPRI, r3
 800cefa:	f3bf 8f6f 	isb	sy
 800cefe:	f3bf 8f4f 	dsb	sy
 800cf02:	61bb      	str	r3, [r7, #24]
 800cf04:	e7fe      	b.n	800cf04 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf0c:	f023 0301 	bic.w	r3, r3, #1
 800cf10:	b2da      	uxtb	r2, r3
 800cf12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cf18:	e039      	b.n	800cf8e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cf1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf20:	f043 0301 	orr.w	r3, r3, #1
 800cf24:	b2da      	uxtb	r2, r3
 800cf26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cf2c:	68ba      	ldr	r2, [r7, #8]
 800cf2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf30:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cf32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf34:	699b      	ldr	r3, [r3, #24]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d109      	bne.n	800cf4e <prvProcessReceivedCommands+0x156>
 800cf3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf3e:	f383 8811 	msr	BASEPRI, r3
 800cf42:	f3bf 8f6f 	isb	sy
 800cf46:	f3bf 8f4f 	dsb	sy
 800cf4a:	617b      	str	r3, [r7, #20]
 800cf4c:	e7fe      	b.n	800cf4c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cf4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf50:	699a      	ldr	r2, [r3, #24]
 800cf52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf54:	18d1      	adds	r1, r2, r3
 800cf56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf5c:	f7ff ff0a 	bl	800cd74 <prvInsertTimerInActiveList>
					break;
 800cf60:	e015      	b.n	800cf8e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cf62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf68:	f003 0302 	and.w	r3, r3, #2
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d103      	bne.n	800cf78 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800cf70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf72:	f000 fbe7 	bl	800d744 <vPortFree>
 800cf76:	e00a      	b.n	800cf8e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf7e:	f023 0301 	bic.w	r3, r3, #1
 800cf82:	b2da      	uxtb	r2, r3
 800cf84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cf8a:	e000      	b.n	800cf8e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cf8c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cf8e:	4b07      	ldr	r3, [pc, #28]	; (800cfac <prvProcessReceivedCommands+0x1b4>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	1d39      	adds	r1, r7, #4
 800cf94:	2200      	movs	r2, #0
 800cf96:	4618      	mov	r0, r3
 800cf98:	f7fe f9a6 	bl	800b2e8 <xQueueReceive>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f47f af2e 	bne.w	800ce00 <prvProcessReceivedCommands+0x8>
	}
}
 800cfa4:	bf00      	nop
 800cfa6:	3730      	adds	r7, #48	; 0x30
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}
 800cfac:	20000fbc 	.word	0x20000fbc

0800cfb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b088      	sub	sp, #32
 800cfb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cfb6:	e047      	b.n	800d048 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cfb8:	4b2d      	ldr	r3, [pc, #180]	; (800d070 <prvSwitchTimerLists+0xc0>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	68db      	ldr	r3, [r3, #12]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfc2:	4b2b      	ldr	r3, [pc, #172]	; (800d070 <prvSwitchTimerLists+0xc0>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	68db      	ldr	r3, [r3, #12]
 800cfca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	3304      	adds	r3, #4
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7fd fe93 	bl	800acfc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	6a1b      	ldr	r3, [r3, #32]
 800cfda:	68f8      	ldr	r0, [r7, #12]
 800cfdc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfe4:	f003 0304 	and.w	r3, r3, #4
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d02d      	beq.n	800d048 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	699b      	ldr	r3, [r3, #24]
 800cff0:	693a      	ldr	r2, [r7, #16]
 800cff2:	4413      	add	r3, r2
 800cff4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cff6:	68ba      	ldr	r2, [r7, #8]
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d90e      	bls.n	800d01c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	68ba      	ldr	r2, [r7, #8]
 800d002:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	68fa      	ldr	r2, [r7, #12]
 800d008:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d00a:	4b19      	ldr	r3, [pc, #100]	; (800d070 <prvSwitchTimerLists+0xc0>)
 800d00c:	681a      	ldr	r2, [r3, #0]
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	3304      	adds	r3, #4
 800d012:	4619      	mov	r1, r3
 800d014:	4610      	mov	r0, r2
 800d016:	f7fd fe38 	bl	800ac8a <vListInsert>
 800d01a:	e015      	b.n	800d048 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d01c:	2300      	movs	r3, #0
 800d01e:	9300      	str	r3, [sp, #0]
 800d020:	2300      	movs	r3, #0
 800d022:	693a      	ldr	r2, [r7, #16]
 800d024:	2100      	movs	r1, #0
 800d026:	68f8      	ldr	r0, [r7, #12]
 800d028:	f7ff fd68 	bl	800cafc <xTimerGenericCommand>
 800d02c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d109      	bne.n	800d048 <prvSwitchTimerLists+0x98>
 800d034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d038:	f383 8811 	msr	BASEPRI, r3
 800d03c:	f3bf 8f6f 	isb	sy
 800d040:	f3bf 8f4f 	dsb	sy
 800d044:	603b      	str	r3, [r7, #0]
 800d046:	e7fe      	b.n	800d046 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d048:	4b09      	ldr	r3, [pc, #36]	; (800d070 <prvSwitchTimerLists+0xc0>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d1b2      	bne.n	800cfb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d052:	4b07      	ldr	r3, [pc, #28]	; (800d070 <prvSwitchTimerLists+0xc0>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d058:	4b06      	ldr	r3, [pc, #24]	; (800d074 <prvSwitchTimerLists+0xc4>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4a04      	ldr	r2, [pc, #16]	; (800d070 <prvSwitchTimerLists+0xc0>)
 800d05e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d060:	4a04      	ldr	r2, [pc, #16]	; (800d074 <prvSwitchTimerLists+0xc4>)
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	6013      	str	r3, [r2, #0]
}
 800d066:	bf00      	nop
 800d068:	3718      	adds	r7, #24
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	20000fb4 	.word	0x20000fb4
 800d074:	20000fb8 	.word	0x20000fb8

0800d078 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d07e:	f000 f985 	bl	800d38c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d082:	4b15      	ldr	r3, [pc, #84]	; (800d0d8 <prvCheckForValidListAndQueue+0x60>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d120      	bne.n	800d0cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d08a:	4814      	ldr	r0, [pc, #80]	; (800d0dc <prvCheckForValidListAndQueue+0x64>)
 800d08c:	f7fd fdac 	bl	800abe8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d090:	4813      	ldr	r0, [pc, #76]	; (800d0e0 <prvCheckForValidListAndQueue+0x68>)
 800d092:	f7fd fda9 	bl	800abe8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d096:	4b13      	ldr	r3, [pc, #76]	; (800d0e4 <prvCheckForValidListAndQueue+0x6c>)
 800d098:	4a10      	ldr	r2, [pc, #64]	; (800d0dc <prvCheckForValidListAndQueue+0x64>)
 800d09a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d09c:	4b12      	ldr	r3, [pc, #72]	; (800d0e8 <prvCheckForValidListAndQueue+0x70>)
 800d09e:	4a10      	ldr	r2, [pc, #64]	; (800d0e0 <prvCheckForValidListAndQueue+0x68>)
 800d0a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	9300      	str	r3, [sp, #0]
 800d0a6:	4b11      	ldr	r3, [pc, #68]	; (800d0ec <prvCheckForValidListAndQueue+0x74>)
 800d0a8:	4a11      	ldr	r2, [pc, #68]	; (800d0f0 <prvCheckForValidListAndQueue+0x78>)
 800d0aa:	2110      	movs	r1, #16
 800d0ac:	200a      	movs	r0, #10
 800d0ae:	f7fd feb7 	bl	800ae20 <xQueueGenericCreateStatic>
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	4b08      	ldr	r3, [pc, #32]	; (800d0d8 <prvCheckForValidListAndQueue+0x60>)
 800d0b6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d0b8:	4b07      	ldr	r3, [pc, #28]	; (800d0d8 <prvCheckForValidListAndQueue+0x60>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d005      	beq.n	800d0cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d0c0:	4b05      	ldr	r3, [pc, #20]	; (800d0d8 <prvCheckForValidListAndQueue+0x60>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	490b      	ldr	r1, [pc, #44]	; (800d0f4 <prvCheckForValidListAndQueue+0x7c>)
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7fe fbb2 	bl	800b830 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d0cc:	f000 f98c 	bl	800d3e8 <vPortExitCritical>
}
 800d0d0:	bf00      	nop
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	20000fbc 	.word	0x20000fbc
 800d0dc:	20000f8c 	.word	0x20000f8c
 800d0e0:	20000fa0 	.word	0x20000fa0
 800d0e4:	20000fb4 	.word	0x20000fb4
 800d0e8:	20000fb8 	.word	0x20000fb8
 800d0ec:	20001068 	.word	0x20001068
 800d0f0:	20000fc8 	.word	0x20000fc8
 800d0f4:	0800fee8 	.word	0x0800fee8

0800d0f8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b08a      	sub	sp, #40	; 0x28
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	60f8      	str	r0, [r7, #12]
 800d100:	60b9      	str	r1, [r7, #8]
 800d102:	607a      	str	r2, [r7, #4]
 800d104:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800d106:	f06f 0301 	mvn.w	r3, #1
 800d10a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d118:	4b06      	ldr	r3, [pc, #24]	; (800d134 <xTimerPendFunctionCallFromISR+0x3c>)
 800d11a:	6818      	ldr	r0, [r3, #0]
 800d11c:	f107 0114 	add.w	r1, r7, #20
 800d120:	2300      	movs	r3, #0
 800d122:	683a      	ldr	r2, [r7, #0]
 800d124:	f7fe f84c 	bl	800b1c0 <xQueueGenericSendFromISR>
 800d128:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800d12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3728      	adds	r7, #40	; 0x28
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}
 800d134:	20000fbc 	.word	0x20000fbc

0800d138 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d138:	b480      	push	{r7}
 800d13a:	b085      	sub	sp, #20
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	60f8      	str	r0, [r7, #12]
 800d140:	60b9      	str	r1, [r7, #8]
 800d142:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	3b04      	subs	r3, #4
 800d148:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d150:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	3b04      	subs	r3, #4
 800d156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	f023 0201 	bic.w	r2, r3, #1
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	3b04      	subs	r3, #4
 800d166:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d168:	4a0c      	ldr	r2, [pc, #48]	; (800d19c <pxPortInitialiseStack+0x64>)
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	3b14      	subs	r3, #20
 800d172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d174:	687a      	ldr	r2, [r7, #4]
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	3b04      	subs	r3, #4
 800d17e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f06f 0202 	mvn.w	r2, #2
 800d186:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	3b20      	subs	r3, #32
 800d18c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d18e:	68fb      	ldr	r3, [r7, #12]
}
 800d190:	4618      	mov	r0, r3
 800d192:	3714      	adds	r7, #20
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr
 800d19c:	0800d1a1 	.word	0x0800d1a1

0800d1a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b085      	sub	sp, #20
 800d1a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d1aa:	4b11      	ldr	r3, [pc, #68]	; (800d1f0 <prvTaskExitError+0x50>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1b2:	d009      	beq.n	800d1c8 <prvTaskExitError+0x28>
 800d1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b8:	f383 8811 	msr	BASEPRI, r3
 800d1bc:	f3bf 8f6f 	isb	sy
 800d1c0:	f3bf 8f4f 	dsb	sy
 800d1c4:	60fb      	str	r3, [r7, #12]
 800d1c6:	e7fe      	b.n	800d1c6 <prvTaskExitError+0x26>
 800d1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1cc:	f383 8811 	msr	BASEPRI, r3
 800d1d0:	f3bf 8f6f 	isb	sy
 800d1d4:	f3bf 8f4f 	dsb	sy
 800d1d8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d1da:	bf00      	nop
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d0fc      	beq.n	800d1dc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d1e2:	bf00      	nop
 800d1e4:	3714      	adds	r7, #20
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr
 800d1ee:	bf00      	nop
 800d1f0:	2000011c 	.word	0x2000011c
	...

0800d200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d200:	4b07      	ldr	r3, [pc, #28]	; (800d220 <pxCurrentTCBConst2>)
 800d202:	6819      	ldr	r1, [r3, #0]
 800d204:	6808      	ldr	r0, [r1, #0]
 800d206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d20a:	f380 8809 	msr	PSP, r0
 800d20e:	f3bf 8f6f 	isb	sy
 800d212:	f04f 0000 	mov.w	r0, #0
 800d216:	f380 8811 	msr	BASEPRI, r0
 800d21a:	4770      	bx	lr
 800d21c:	f3af 8000 	nop.w

0800d220 <pxCurrentTCBConst2>:
 800d220:	20000a8c 	.word	0x20000a8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d224:	bf00      	nop
 800d226:	bf00      	nop

0800d228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d228:	4808      	ldr	r0, [pc, #32]	; (800d24c <prvPortStartFirstTask+0x24>)
 800d22a:	6800      	ldr	r0, [r0, #0]
 800d22c:	6800      	ldr	r0, [r0, #0]
 800d22e:	f380 8808 	msr	MSP, r0
 800d232:	f04f 0000 	mov.w	r0, #0
 800d236:	f380 8814 	msr	CONTROL, r0
 800d23a:	b662      	cpsie	i
 800d23c:	b661      	cpsie	f
 800d23e:	f3bf 8f4f 	dsb	sy
 800d242:	f3bf 8f6f 	isb	sy
 800d246:	df00      	svc	0
 800d248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d24a:	bf00      	nop
 800d24c:	e000ed08 	.word	0xe000ed08

0800d250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b086      	sub	sp, #24
 800d254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d256:	4b44      	ldr	r3, [pc, #272]	; (800d368 <xPortStartScheduler+0x118>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	4a44      	ldr	r2, [pc, #272]	; (800d36c <xPortStartScheduler+0x11c>)
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d109      	bne.n	800d274 <xPortStartScheduler+0x24>
 800d260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d264:	f383 8811 	msr	BASEPRI, r3
 800d268:	f3bf 8f6f 	isb	sy
 800d26c:	f3bf 8f4f 	dsb	sy
 800d270:	613b      	str	r3, [r7, #16]
 800d272:	e7fe      	b.n	800d272 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d274:	4b3c      	ldr	r3, [pc, #240]	; (800d368 <xPortStartScheduler+0x118>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	4a3d      	ldr	r2, [pc, #244]	; (800d370 <xPortStartScheduler+0x120>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d109      	bne.n	800d292 <xPortStartScheduler+0x42>
 800d27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d282:	f383 8811 	msr	BASEPRI, r3
 800d286:	f3bf 8f6f 	isb	sy
 800d28a:	f3bf 8f4f 	dsb	sy
 800d28e:	60fb      	str	r3, [r7, #12]
 800d290:	e7fe      	b.n	800d290 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d292:	4b38      	ldr	r3, [pc, #224]	; (800d374 <xPortStartScheduler+0x124>)
 800d294:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	781b      	ldrb	r3, [r3, #0]
 800d29a:	b2db      	uxtb	r3, r3
 800d29c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	22ff      	movs	r2, #255	; 0xff
 800d2a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	b2db      	uxtb	r3, r3
 800d2aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d2ac:	78fb      	ldrb	r3, [r7, #3]
 800d2ae:	b2db      	uxtb	r3, r3
 800d2b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d2b4:	b2da      	uxtb	r2, r3
 800d2b6:	4b30      	ldr	r3, [pc, #192]	; (800d378 <xPortStartScheduler+0x128>)
 800d2b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d2ba:	4b30      	ldr	r3, [pc, #192]	; (800d37c <xPortStartScheduler+0x12c>)
 800d2bc:	2207      	movs	r2, #7
 800d2be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d2c0:	e009      	b.n	800d2d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800d2c2:	4b2e      	ldr	r3, [pc, #184]	; (800d37c <xPortStartScheduler+0x12c>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	3b01      	subs	r3, #1
 800d2c8:	4a2c      	ldr	r2, [pc, #176]	; (800d37c <xPortStartScheduler+0x12c>)
 800d2ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d2cc:	78fb      	ldrb	r3, [r7, #3]
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	005b      	lsls	r3, r3, #1
 800d2d2:	b2db      	uxtb	r3, r3
 800d2d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d2d6:	78fb      	ldrb	r3, [r7, #3]
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2de:	2b80      	cmp	r3, #128	; 0x80
 800d2e0:	d0ef      	beq.n	800d2c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d2e2:	4b26      	ldr	r3, [pc, #152]	; (800d37c <xPortStartScheduler+0x12c>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f1c3 0307 	rsb	r3, r3, #7
 800d2ea:	2b04      	cmp	r3, #4
 800d2ec:	d009      	beq.n	800d302 <xPortStartScheduler+0xb2>
 800d2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f2:	f383 8811 	msr	BASEPRI, r3
 800d2f6:	f3bf 8f6f 	isb	sy
 800d2fa:	f3bf 8f4f 	dsb	sy
 800d2fe:	60bb      	str	r3, [r7, #8]
 800d300:	e7fe      	b.n	800d300 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d302:	4b1e      	ldr	r3, [pc, #120]	; (800d37c <xPortStartScheduler+0x12c>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	021b      	lsls	r3, r3, #8
 800d308:	4a1c      	ldr	r2, [pc, #112]	; (800d37c <xPortStartScheduler+0x12c>)
 800d30a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d30c:	4b1b      	ldr	r3, [pc, #108]	; (800d37c <xPortStartScheduler+0x12c>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d314:	4a19      	ldr	r2, [pc, #100]	; (800d37c <xPortStartScheduler+0x12c>)
 800d316:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	b2da      	uxtb	r2, r3
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d320:	4b17      	ldr	r3, [pc, #92]	; (800d380 <xPortStartScheduler+0x130>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4a16      	ldr	r2, [pc, #88]	; (800d380 <xPortStartScheduler+0x130>)
 800d326:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d32a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d32c:	4b14      	ldr	r3, [pc, #80]	; (800d380 <xPortStartScheduler+0x130>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4a13      	ldr	r2, [pc, #76]	; (800d380 <xPortStartScheduler+0x130>)
 800d332:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d336:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d338:	f000 f8d6 	bl	800d4e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d33c:	4b11      	ldr	r3, [pc, #68]	; (800d384 <xPortStartScheduler+0x134>)
 800d33e:	2200      	movs	r2, #0
 800d340:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d342:	f000 f8f5 	bl	800d530 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d346:	4b10      	ldr	r3, [pc, #64]	; (800d388 <xPortStartScheduler+0x138>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4a0f      	ldr	r2, [pc, #60]	; (800d388 <xPortStartScheduler+0x138>)
 800d34c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d350:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d352:	f7ff ff69 	bl	800d228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d356:	f7fe ff73 	bl	800c240 <vTaskSwitchContext>
	prvTaskExitError();
 800d35a:	f7ff ff21 	bl	800d1a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d35e:	2300      	movs	r3, #0
}
 800d360:	4618      	mov	r0, r3
 800d362:	3718      	adds	r7, #24
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	e000ed00 	.word	0xe000ed00
 800d36c:	410fc271 	.word	0x410fc271
 800d370:	410fc270 	.word	0x410fc270
 800d374:	e000e400 	.word	0xe000e400
 800d378:	200010b8 	.word	0x200010b8
 800d37c:	200010bc 	.word	0x200010bc
 800d380:	e000ed20 	.word	0xe000ed20
 800d384:	2000011c 	.word	0x2000011c
 800d388:	e000ef34 	.word	0xe000ef34

0800d38c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d38c:	b480      	push	{r7}
 800d38e:	b083      	sub	sp, #12
 800d390:	af00      	add	r7, sp, #0
 800d392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d396:	f383 8811 	msr	BASEPRI, r3
 800d39a:	f3bf 8f6f 	isb	sy
 800d39e:	f3bf 8f4f 	dsb	sy
 800d3a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d3a4:	4b0e      	ldr	r3, [pc, #56]	; (800d3e0 <vPortEnterCritical+0x54>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	3301      	adds	r3, #1
 800d3aa:	4a0d      	ldr	r2, [pc, #52]	; (800d3e0 <vPortEnterCritical+0x54>)
 800d3ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d3ae:	4b0c      	ldr	r3, [pc, #48]	; (800d3e0 <vPortEnterCritical+0x54>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	2b01      	cmp	r3, #1
 800d3b4:	d10e      	bne.n	800d3d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d3b6:	4b0b      	ldr	r3, [pc, #44]	; (800d3e4 <vPortEnterCritical+0x58>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	b2db      	uxtb	r3, r3
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d009      	beq.n	800d3d4 <vPortEnterCritical+0x48>
 800d3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c4:	f383 8811 	msr	BASEPRI, r3
 800d3c8:	f3bf 8f6f 	isb	sy
 800d3cc:	f3bf 8f4f 	dsb	sy
 800d3d0:	603b      	str	r3, [r7, #0]
 800d3d2:	e7fe      	b.n	800d3d2 <vPortEnterCritical+0x46>
	}
}
 800d3d4:	bf00      	nop
 800d3d6:	370c      	adds	r7, #12
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr
 800d3e0:	2000011c 	.word	0x2000011c
 800d3e4:	e000ed04 	.word	0xe000ed04

0800d3e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b083      	sub	sp, #12
 800d3ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d3ee:	4b11      	ldr	r3, [pc, #68]	; (800d434 <vPortExitCritical+0x4c>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d109      	bne.n	800d40a <vPortExitCritical+0x22>
 800d3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fa:	f383 8811 	msr	BASEPRI, r3
 800d3fe:	f3bf 8f6f 	isb	sy
 800d402:	f3bf 8f4f 	dsb	sy
 800d406:	607b      	str	r3, [r7, #4]
 800d408:	e7fe      	b.n	800d408 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800d40a:	4b0a      	ldr	r3, [pc, #40]	; (800d434 <vPortExitCritical+0x4c>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	3b01      	subs	r3, #1
 800d410:	4a08      	ldr	r2, [pc, #32]	; (800d434 <vPortExitCritical+0x4c>)
 800d412:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d414:	4b07      	ldr	r3, [pc, #28]	; (800d434 <vPortExitCritical+0x4c>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d104      	bne.n	800d426 <vPortExitCritical+0x3e>
 800d41c:	2300      	movs	r3, #0
 800d41e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800d426:	bf00      	nop
 800d428:	370c      	adds	r7, #12
 800d42a:	46bd      	mov	sp, r7
 800d42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d430:	4770      	bx	lr
 800d432:	bf00      	nop
 800d434:	2000011c 	.word	0x2000011c
	...

0800d440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d440:	f3ef 8009 	mrs	r0, PSP
 800d444:	f3bf 8f6f 	isb	sy
 800d448:	4b15      	ldr	r3, [pc, #84]	; (800d4a0 <pxCurrentTCBConst>)
 800d44a:	681a      	ldr	r2, [r3, #0]
 800d44c:	f01e 0f10 	tst.w	lr, #16
 800d450:	bf08      	it	eq
 800d452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d45a:	6010      	str	r0, [r2, #0]
 800d45c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d460:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d464:	f380 8811 	msr	BASEPRI, r0
 800d468:	f3bf 8f4f 	dsb	sy
 800d46c:	f3bf 8f6f 	isb	sy
 800d470:	f7fe fee6 	bl	800c240 <vTaskSwitchContext>
 800d474:	f04f 0000 	mov.w	r0, #0
 800d478:	f380 8811 	msr	BASEPRI, r0
 800d47c:	bc09      	pop	{r0, r3}
 800d47e:	6819      	ldr	r1, [r3, #0]
 800d480:	6808      	ldr	r0, [r1, #0]
 800d482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d486:	f01e 0f10 	tst.w	lr, #16
 800d48a:	bf08      	it	eq
 800d48c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d490:	f380 8809 	msr	PSP, r0
 800d494:	f3bf 8f6f 	isb	sy
 800d498:	4770      	bx	lr
 800d49a:	bf00      	nop
 800d49c:	f3af 8000 	nop.w

0800d4a0 <pxCurrentTCBConst>:
 800d4a0:	20000a8c 	.word	0x20000a8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d4a4:	bf00      	nop
 800d4a6:	bf00      	nop

0800d4a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
	__asm volatile
 800d4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b2:	f383 8811 	msr	BASEPRI, r3
 800d4b6:	f3bf 8f6f 	isb	sy
 800d4ba:	f3bf 8f4f 	dsb	sy
 800d4be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d4c0:	f7fe fe06 	bl	800c0d0 <xTaskIncrementTick>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d003      	beq.n	800d4d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d4ca:	4b06      	ldr	r3, [pc, #24]	; (800d4e4 <SysTick_Handler+0x3c>)
 800d4cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4d0:	601a      	str	r2, [r3, #0]
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800d4dc:	bf00      	nop
 800d4de:	3708      	adds	r7, #8
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}
 800d4e4:	e000ed04 	.word	0xe000ed04

0800d4e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d4ec:	4b0b      	ldr	r3, [pc, #44]	; (800d51c <vPortSetupTimerInterrupt+0x34>)
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d4f2:	4b0b      	ldr	r3, [pc, #44]	; (800d520 <vPortSetupTimerInterrupt+0x38>)
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d4f8:	4b0a      	ldr	r3, [pc, #40]	; (800d524 <vPortSetupTimerInterrupt+0x3c>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4a0a      	ldr	r2, [pc, #40]	; (800d528 <vPortSetupTimerInterrupt+0x40>)
 800d4fe:	fba2 2303 	umull	r2, r3, r2, r3
 800d502:	099b      	lsrs	r3, r3, #6
 800d504:	4a09      	ldr	r2, [pc, #36]	; (800d52c <vPortSetupTimerInterrupt+0x44>)
 800d506:	3b01      	subs	r3, #1
 800d508:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d50a:	4b04      	ldr	r3, [pc, #16]	; (800d51c <vPortSetupTimerInterrupt+0x34>)
 800d50c:	2207      	movs	r2, #7
 800d50e:	601a      	str	r2, [r3, #0]
}
 800d510:	bf00      	nop
 800d512:	46bd      	mov	sp, r7
 800d514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d518:	4770      	bx	lr
 800d51a:	bf00      	nop
 800d51c:	e000e010 	.word	0xe000e010
 800d520:	e000e018 	.word	0xe000e018
 800d524:	20000000 	.word	0x20000000
 800d528:	10624dd3 	.word	0x10624dd3
 800d52c:	e000e014 	.word	0xe000e014

0800d530 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d530:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d540 <vPortEnableVFP+0x10>
 800d534:	6801      	ldr	r1, [r0, #0]
 800d536:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d53a:	6001      	str	r1, [r0, #0]
 800d53c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d53e:	bf00      	nop
 800d540:	e000ed88 	.word	0xe000ed88

0800d544 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d544:	b480      	push	{r7}
 800d546:	b085      	sub	sp, #20
 800d548:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d54a:	f3ef 8305 	mrs	r3, IPSR
 800d54e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	2b0f      	cmp	r3, #15
 800d554:	d913      	bls.n	800d57e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d556:	4a16      	ldr	r2, [pc, #88]	; (800d5b0 <vPortValidateInterruptPriority+0x6c>)
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	4413      	add	r3, r2
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d560:	4b14      	ldr	r3, [pc, #80]	; (800d5b4 <vPortValidateInterruptPriority+0x70>)
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	7afa      	ldrb	r2, [r7, #11]
 800d566:	429a      	cmp	r2, r3
 800d568:	d209      	bcs.n	800d57e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800d56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d56e:	f383 8811 	msr	BASEPRI, r3
 800d572:	f3bf 8f6f 	isb	sy
 800d576:	f3bf 8f4f 	dsb	sy
 800d57a:	607b      	str	r3, [r7, #4]
 800d57c:	e7fe      	b.n	800d57c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d57e:	4b0e      	ldr	r3, [pc, #56]	; (800d5b8 <vPortValidateInterruptPriority+0x74>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d586:	4b0d      	ldr	r3, [pc, #52]	; (800d5bc <vPortValidateInterruptPriority+0x78>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d909      	bls.n	800d5a2 <vPortValidateInterruptPriority+0x5e>
 800d58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d592:	f383 8811 	msr	BASEPRI, r3
 800d596:	f3bf 8f6f 	isb	sy
 800d59a:	f3bf 8f4f 	dsb	sy
 800d59e:	603b      	str	r3, [r7, #0]
 800d5a0:	e7fe      	b.n	800d5a0 <vPortValidateInterruptPriority+0x5c>
	}
 800d5a2:	bf00      	nop
 800d5a4:	3714      	adds	r7, #20
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr
 800d5ae:	bf00      	nop
 800d5b0:	e000e3f0 	.word	0xe000e3f0
 800d5b4:	200010b8 	.word	0x200010b8
 800d5b8:	e000ed0c 	.word	0xe000ed0c
 800d5bc:	200010bc 	.word	0x200010bc

0800d5c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b08a      	sub	sp, #40	; 0x28
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d5cc:	f7fe fcc6 	bl	800bf5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d5d0:	4b57      	ldr	r3, [pc, #348]	; (800d730 <pvPortMalloc+0x170>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d101      	bne.n	800d5dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d5d8:	f000 f90c 	bl	800d7f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d5dc:	4b55      	ldr	r3, [pc, #340]	; (800d734 <pvPortMalloc+0x174>)
 800d5de:	681a      	ldr	r2, [r3, #0]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	4013      	ands	r3, r2
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	f040 808c 	bne.w	800d702 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d01c      	beq.n	800d62a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800d5f0:	2208      	movs	r2, #8
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	4413      	add	r3, r2
 800d5f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f003 0307 	and.w	r3, r3, #7
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d013      	beq.n	800d62a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f023 0307 	bic.w	r3, r3, #7
 800d608:	3308      	adds	r3, #8
 800d60a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f003 0307 	and.w	r3, r3, #7
 800d612:	2b00      	cmp	r3, #0
 800d614:	d009      	beq.n	800d62a <pvPortMalloc+0x6a>
 800d616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d61a:	f383 8811 	msr	BASEPRI, r3
 800d61e:	f3bf 8f6f 	isb	sy
 800d622:	f3bf 8f4f 	dsb	sy
 800d626:	617b      	str	r3, [r7, #20]
 800d628:	e7fe      	b.n	800d628 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d068      	beq.n	800d702 <pvPortMalloc+0x142>
 800d630:	4b41      	ldr	r3, [pc, #260]	; (800d738 <pvPortMalloc+0x178>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	429a      	cmp	r2, r3
 800d638:	d863      	bhi.n	800d702 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d63a:	4b40      	ldr	r3, [pc, #256]	; (800d73c <pvPortMalloc+0x17c>)
 800d63c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d63e:	4b3f      	ldr	r3, [pc, #252]	; (800d73c <pvPortMalloc+0x17c>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d644:	e004      	b.n	800d650 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800d646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d648:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d652:	685b      	ldr	r3, [r3, #4]
 800d654:	687a      	ldr	r2, [r7, #4]
 800d656:	429a      	cmp	r2, r3
 800d658:	d903      	bls.n	800d662 <pvPortMalloc+0xa2>
 800d65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d1f1      	bne.n	800d646 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d662:	4b33      	ldr	r3, [pc, #204]	; (800d730 <pvPortMalloc+0x170>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d668:	429a      	cmp	r2, r3
 800d66a:	d04a      	beq.n	800d702 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d66c:	6a3b      	ldr	r3, [r7, #32]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	2208      	movs	r2, #8
 800d672:	4413      	add	r3, r2
 800d674:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	6a3b      	ldr	r3, [r7, #32]
 800d67c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d680:	685a      	ldr	r2, [r3, #4]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	1ad2      	subs	r2, r2, r3
 800d686:	2308      	movs	r3, #8
 800d688:	005b      	lsls	r3, r3, #1
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d91e      	bls.n	800d6cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d68e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	4413      	add	r3, r2
 800d694:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d696:	69bb      	ldr	r3, [r7, #24]
 800d698:	f003 0307 	and.w	r3, r3, #7
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d009      	beq.n	800d6b4 <pvPortMalloc+0xf4>
 800d6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a4:	f383 8811 	msr	BASEPRI, r3
 800d6a8:	f3bf 8f6f 	isb	sy
 800d6ac:	f3bf 8f4f 	dsb	sy
 800d6b0:	613b      	str	r3, [r7, #16]
 800d6b2:	e7fe      	b.n	800d6b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b6:	685a      	ldr	r2, [r3, #4]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	1ad2      	subs	r2, r2, r3
 800d6bc:	69bb      	ldr	r3, [r7, #24]
 800d6be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d6c6:	69b8      	ldr	r0, [r7, #24]
 800d6c8:	f000 f8f6 	bl	800d8b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d6cc:	4b1a      	ldr	r3, [pc, #104]	; (800d738 <pvPortMalloc+0x178>)
 800d6ce:	681a      	ldr	r2, [r3, #0]
 800d6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d2:	685b      	ldr	r3, [r3, #4]
 800d6d4:	1ad3      	subs	r3, r2, r3
 800d6d6:	4a18      	ldr	r2, [pc, #96]	; (800d738 <pvPortMalloc+0x178>)
 800d6d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d6da:	4b17      	ldr	r3, [pc, #92]	; (800d738 <pvPortMalloc+0x178>)
 800d6dc:	681a      	ldr	r2, [r3, #0]
 800d6de:	4b18      	ldr	r3, [pc, #96]	; (800d740 <pvPortMalloc+0x180>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d203      	bcs.n	800d6ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d6e6:	4b14      	ldr	r3, [pc, #80]	; (800d738 <pvPortMalloc+0x178>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	4a15      	ldr	r2, [pc, #84]	; (800d740 <pvPortMalloc+0x180>)
 800d6ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f0:	685a      	ldr	r2, [r3, #4]
 800d6f2:	4b10      	ldr	r3, [pc, #64]	; (800d734 <pvPortMalloc+0x174>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	431a      	orrs	r2, r3
 800d6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fe:	2200      	movs	r2, #0
 800d700:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d702:	f7fe fc39 	bl	800bf78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d706:	69fb      	ldr	r3, [r7, #28]
 800d708:	f003 0307 	and.w	r3, r3, #7
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d009      	beq.n	800d724 <pvPortMalloc+0x164>
 800d710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d714:	f383 8811 	msr	BASEPRI, r3
 800d718:	f3bf 8f6f 	isb	sy
 800d71c:	f3bf 8f4f 	dsb	sy
 800d720:	60fb      	str	r3, [r7, #12]
 800d722:	e7fe      	b.n	800d722 <pvPortMalloc+0x162>
	return pvReturn;
 800d724:	69fb      	ldr	r3, [r7, #28]
}
 800d726:	4618      	mov	r0, r3
 800d728:	3728      	adds	r7, #40	; 0x28
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop
 800d730:	200090c8 	.word	0x200090c8
 800d734:	200090d4 	.word	0x200090d4
 800d738:	200090cc 	.word	0x200090cc
 800d73c:	200090c0 	.word	0x200090c0
 800d740:	200090d0 	.word	0x200090d0

0800d744 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b086      	sub	sp, #24
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d046      	beq.n	800d7e4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d756:	2308      	movs	r3, #8
 800d758:	425b      	negs	r3, r3
 800d75a:	697a      	ldr	r2, [r7, #20]
 800d75c:	4413      	add	r3, r2
 800d75e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	685a      	ldr	r2, [r3, #4]
 800d768:	4b20      	ldr	r3, [pc, #128]	; (800d7ec <vPortFree+0xa8>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4013      	ands	r3, r2
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d109      	bne.n	800d786 <vPortFree+0x42>
 800d772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d776:	f383 8811 	msr	BASEPRI, r3
 800d77a:	f3bf 8f6f 	isb	sy
 800d77e:	f3bf 8f4f 	dsb	sy
 800d782:	60fb      	str	r3, [r7, #12]
 800d784:	e7fe      	b.n	800d784 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d009      	beq.n	800d7a2 <vPortFree+0x5e>
 800d78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d792:	f383 8811 	msr	BASEPRI, r3
 800d796:	f3bf 8f6f 	isb	sy
 800d79a:	f3bf 8f4f 	dsb	sy
 800d79e:	60bb      	str	r3, [r7, #8]
 800d7a0:	e7fe      	b.n	800d7a0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	685a      	ldr	r2, [r3, #4]
 800d7a6:	4b11      	ldr	r3, [pc, #68]	; (800d7ec <vPortFree+0xa8>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	4013      	ands	r3, r2
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d019      	beq.n	800d7e4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d115      	bne.n	800d7e4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	685a      	ldr	r2, [r3, #4]
 800d7bc:	4b0b      	ldr	r3, [pc, #44]	; (800d7ec <vPortFree+0xa8>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	43db      	mvns	r3, r3
 800d7c2:	401a      	ands	r2, r3
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d7c8:	f7fe fbc8 	bl	800bf5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	685a      	ldr	r2, [r3, #4]
 800d7d0:	4b07      	ldr	r3, [pc, #28]	; (800d7f0 <vPortFree+0xac>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4413      	add	r3, r2
 800d7d6:	4a06      	ldr	r2, [pc, #24]	; (800d7f0 <vPortFree+0xac>)
 800d7d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d7da:	6938      	ldr	r0, [r7, #16]
 800d7dc:	f000 f86c 	bl	800d8b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d7e0:	f7fe fbca 	bl	800bf78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d7e4:	bf00      	nop
 800d7e6:	3718      	adds	r7, #24
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}
 800d7ec:	200090d4 	.word	0x200090d4
 800d7f0:	200090cc 	.word	0x200090cc

0800d7f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b085      	sub	sp, #20
 800d7f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d7fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d7fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d800:	4b27      	ldr	r3, [pc, #156]	; (800d8a0 <prvHeapInit+0xac>)
 800d802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f003 0307 	and.w	r3, r3, #7
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d00c      	beq.n	800d828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	3307      	adds	r3, #7
 800d812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f023 0307 	bic.w	r3, r3, #7
 800d81a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d81c:	68ba      	ldr	r2, [r7, #8]
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	1ad3      	subs	r3, r2, r3
 800d822:	4a1f      	ldr	r2, [pc, #124]	; (800d8a0 <prvHeapInit+0xac>)
 800d824:	4413      	add	r3, r2
 800d826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d82c:	4a1d      	ldr	r2, [pc, #116]	; (800d8a4 <prvHeapInit+0xb0>)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d832:	4b1c      	ldr	r3, [pc, #112]	; (800d8a4 <prvHeapInit+0xb0>)
 800d834:	2200      	movs	r2, #0
 800d836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	68ba      	ldr	r2, [r7, #8]
 800d83c:	4413      	add	r3, r2
 800d83e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d840:	2208      	movs	r2, #8
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	1a9b      	subs	r3, r3, r2
 800d846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f023 0307 	bic.w	r3, r3, #7
 800d84e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	4a15      	ldr	r2, [pc, #84]	; (800d8a8 <prvHeapInit+0xb4>)
 800d854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d856:	4b14      	ldr	r3, [pc, #80]	; (800d8a8 <prvHeapInit+0xb4>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	2200      	movs	r2, #0
 800d85c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d85e:	4b12      	ldr	r3, [pc, #72]	; (800d8a8 <prvHeapInit+0xb4>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	2200      	movs	r2, #0
 800d864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	68fa      	ldr	r2, [r7, #12]
 800d86e:	1ad2      	subs	r2, r2, r3
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d874:	4b0c      	ldr	r3, [pc, #48]	; (800d8a8 <prvHeapInit+0xb4>)
 800d876:	681a      	ldr	r2, [r3, #0]
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	685b      	ldr	r3, [r3, #4]
 800d880:	4a0a      	ldr	r2, [pc, #40]	; (800d8ac <prvHeapInit+0xb8>)
 800d882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	685b      	ldr	r3, [r3, #4]
 800d888:	4a09      	ldr	r2, [pc, #36]	; (800d8b0 <prvHeapInit+0xbc>)
 800d88a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d88c:	4b09      	ldr	r3, [pc, #36]	; (800d8b4 <prvHeapInit+0xc0>)
 800d88e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d892:	601a      	str	r2, [r3, #0]
}
 800d894:	bf00      	nop
 800d896:	3714      	adds	r7, #20
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr
 800d8a0:	200010c0 	.word	0x200010c0
 800d8a4:	200090c0 	.word	0x200090c0
 800d8a8:	200090c8 	.word	0x200090c8
 800d8ac:	200090d0 	.word	0x200090d0
 800d8b0:	200090cc 	.word	0x200090cc
 800d8b4:	200090d4 	.word	0x200090d4

0800d8b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d8c0:	4b28      	ldr	r3, [pc, #160]	; (800d964 <prvInsertBlockIntoFreeList+0xac>)
 800d8c2:	60fb      	str	r3, [r7, #12]
 800d8c4:	e002      	b.n	800d8cc <prvInsertBlockIntoFreeList+0x14>
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	60fb      	str	r3, [r7, #12]
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d8f7      	bhi.n	800d8c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	685b      	ldr	r3, [r3, #4]
 800d8de:	68ba      	ldr	r2, [r7, #8]
 800d8e0:	4413      	add	r3, r2
 800d8e2:	687a      	ldr	r2, [r7, #4]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d108      	bne.n	800d8fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	685a      	ldr	r2, [r3, #4]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	441a      	add	r2, r3
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	685b      	ldr	r3, [r3, #4]
 800d902:	68ba      	ldr	r2, [r7, #8]
 800d904:	441a      	add	r2, r3
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d118      	bne.n	800d940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681a      	ldr	r2, [r3, #0]
 800d912:	4b15      	ldr	r3, [pc, #84]	; (800d968 <prvInsertBlockIntoFreeList+0xb0>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	429a      	cmp	r2, r3
 800d918:	d00d      	beq.n	800d936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	685a      	ldr	r2, [r3, #4]
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	441a      	add	r2, r3
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	681a      	ldr	r2, [r3, #0]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	601a      	str	r2, [r3, #0]
 800d934:	e008      	b.n	800d948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d936:	4b0c      	ldr	r3, [pc, #48]	; (800d968 <prvInsertBlockIntoFreeList+0xb0>)
 800d938:	681a      	ldr	r2, [r3, #0]
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	601a      	str	r2, [r3, #0]
 800d93e:	e003      	b.n	800d948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681a      	ldr	r2, [r3, #0]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d948:	68fa      	ldr	r2, [r7, #12]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d002      	beq.n	800d956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d956:	bf00      	nop
 800d958:	3714      	adds	r7, #20
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr
 800d962:	bf00      	nop
 800d964:	200090c0 	.word	0x200090c0
 800d968:	200090c8 	.word	0x200090c8

0800d96c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d970:	2200      	movs	r2, #0
 800d972:	4912      	ldr	r1, [pc, #72]	; (800d9bc <MX_USB_DEVICE_Init+0x50>)
 800d974:	4812      	ldr	r0, [pc, #72]	; (800d9c0 <MX_USB_DEVICE_Init+0x54>)
 800d976:	f7fb f887 	bl	8008a88 <USBD_Init>
 800d97a:	4603      	mov	r3, r0
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d001      	beq.n	800d984 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d980:	f7f4 fcfc 	bl	800237c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d984:	490f      	ldr	r1, [pc, #60]	; (800d9c4 <MX_USB_DEVICE_Init+0x58>)
 800d986:	480e      	ldr	r0, [pc, #56]	; (800d9c0 <MX_USB_DEVICE_Init+0x54>)
 800d988:	f7fb f8b4 	bl	8008af4 <USBD_RegisterClass>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d001      	beq.n	800d996 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d992:	f7f4 fcf3 	bl	800237c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d996:	490c      	ldr	r1, [pc, #48]	; (800d9c8 <MX_USB_DEVICE_Init+0x5c>)
 800d998:	4809      	ldr	r0, [pc, #36]	; (800d9c0 <MX_USB_DEVICE_Init+0x54>)
 800d99a:	f7fb f809 	bl	80089b0 <USBD_CDC_RegisterInterface>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d001      	beq.n	800d9a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d9a4:	f7f4 fcea 	bl	800237c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d9a8:	4805      	ldr	r0, [pc, #20]	; (800d9c0 <MX_USB_DEVICE_Init+0x54>)
 800d9aa:	f7fb f8c4 	bl	8008b36 <USBD_Start>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d001      	beq.n	800d9b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d9b4:	f7f4 fce2 	bl	800237c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d9b8:	bf00      	nop
 800d9ba:	bd80      	pop	{r7, pc}
 800d9bc:	20000134 	.word	0x20000134
 800d9c0:	200092bc 	.word	0x200092bc
 800d9c4:	20000018 	.word	0x20000018
 800d9c8:	20000120 	.word	0x20000120

0800d9cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	4905      	ldr	r1, [pc, #20]	; (800d9e8 <CDC_Init_FS+0x1c>)
 800d9d4:	4805      	ldr	r0, [pc, #20]	; (800d9ec <CDC_Init_FS+0x20>)
 800d9d6:	f7fb f800 	bl	80089da <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d9da:	4905      	ldr	r1, [pc, #20]	; (800d9f0 <CDC_Init_FS+0x24>)
 800d9dc:	4803      	ldr	r0, [pc, #12]	; (800d9ec <CDC_Init_FS+0x20>)
 800d9de:	f7fb f815 	bl	8008a0c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d9e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	bd80      	pop	{r7, pc}
 800d9e8:	20009d8c 	.word	0x20009d8c
 800d9ec:	200092bc 	.word	0x200092bc
 800d9f0:	2000958c 	.word	0x2000958c

0800d9f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d9f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr

0800da04 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800da04:	b480      	push	{r7}
 800da06:	b083      	sub	sp, #12
 800da08:	af00      	add	r7, sp, #0
 800da0a:	4603      	mov	r3, r0
 800da0c:	6039      	str	r1, [r7, #0]
 800da0e:	71fb      	strb	r3, [r7, #7]
 800da10:	4613      	mov	r3, r2
 800da12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800da14:	79fb      	ldrb	r3, [r7, #7]
 800da16:	2b23      	cmp	r3, #35	; 0x23
 800da18:	d84a      	bhi.n	800dab0 <CDC_Control_FS+0xac>
 800da1a:	a201      	add	r2, pc, #4	; (adr r2, 800da20 <CDC_Control_FS+0x1c>)
 800da1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da20:	0800dab1 	.word	0x0800dab1
 800da24:	0800dab1 	.word	0x0800dab1
 800da28:	0800dab1 	.word	0x0800dab1
 800da2c:	0800dab1 	.word	0x0800dab1
 800da30:	0800dab1 	.word	0x0800dab1
 800da34:	0800dab1 	.word	0x0800dab1
 800da38:	0800dab1 	.word	0x0800dab1
 800da3c:	0800dab1 	.word	0x0800dab1
 800da40:	0800dab1 	.word	0x0800dab1
 800da44:	0800dab1 	.word	0x0800dab1
 800da48:	0800dab1 	.word	0x0800dab1
 800da4c:	0800dab1 	.word	0x0800dab1
 800da50:	0800dab1 	.word	0x0800dab1
 800da54:	0800dab1 	.word	0x0800dab1
 800da58:	0800dab1 	.word	0x0800dab1
 800da5c:	0800dab1 	.word	0x0800dab1
 800da60:	0800dab1 	.word	0x0800dab1
 800da64:	0800dab1 	.word	0x0800dab1
 800da68:	0800dab1 	.word	0x0800dab1
 800da6c:	0800dab1 	.word	0x0800dab1
 800da70:	0800dab1 	.word	0x0800dab1
 800da74:	0800dab1 	.word	0x0800dab1
 800da78:	0800dab1 	.word	0x0800dab1
 800da7c:	0800dab1 	.word	0x0800dab1
 800da80:	0800dab1 	.word	0x0800dab1
 800da84:	0800dab1 	.word	0x0800dab1
 800da88:	0800dab1 	.word	0x0800dab1
 800da8c:	0800dab1 	.word	0x0800dab1
 800da90:	0800dab1 	.word	0x0800dab1
 800da94:	0800dab1 	.word	0x0800dab1
 800da98:	0800dab1 	.word	0x0800dab1
 800da9c:	0800dab1 	.word	0x0800dab1
 800daa0:	0800dab1 	.word	0x0800dab1
 800daa4:	0800dab1 	.word	0x0800dab1
 800daa8:	0800dab1 	.word	0x0800dab1
 800daac:	0800dab1 	.word	0x0800dab1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dab0:	bf00      	nop
  }

  return (USBD_OK);
 800dab2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	370c      	adds	r7, #12
 800dab8:	46bd      	mov	sp, r7
 800daba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabe:	4770      	bx	lr

0800dac0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b082      	sub	sp, #8
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800daca:	6879      	ldr	r1, [r7, #4]
 800dacc:	4805      	ldr	r0, [pc, #20]	; (800dae4 <CDC_Receive_FS+0x24>)
 800dace:	f7fa ff9d 	bl	8008a0c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dad2:	4804      	ldr	r0, [pc, #16]	; (800dae4 <CDC_Receive_FS+0x24>)
 800dad4:	f7fa ffae 	bl	8008a34 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dad8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3708      	adds	r7, #8
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}
 800dae2:	bf00      	nop
 800dae4:	200092bc 	.word	0x200092bc

0800dae8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dae8:	b480      	push	{r7}
 800daea:	b087      	sub	sp, #28
 800daec:	af00      	add	r7, sp, #0
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	60b9      	str	r1, [r7, #8]
 800daf2:	4613      	mov	r3, r2
 800daf4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800daf6:	2300      	movs	r3, #0
 800daf8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800dafa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dafe:	4618      	mov	r0, r3
 800db00:	371c      	adds	r7, #28
 800db02:	46bd      	mov	sp, r7
 800db04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db08:	4770      	bx	lr
	...

0800db0c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b083      	sub	sp, #12
 800db10:	af00      	add	r7, sp, #0
 800db12:	4603      	mov	r3, r0
 800db14:	6039      	str	r1, [r7, #0]
 800db16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	2212      	movs	r2, #18
 800db1c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800db1e:	4b03      	ldr	r3, [pc, #12]	; (800db2c <USBD_FS_DeviceDescriptor+0x20>)
}
 800db20:	4618      	mov	r0, r3
 800db22:	370c      	adds	r7, #12
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr
 800db2c:	20000150 	.word	0x20000150

0800db30 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db30:	b480      	push	{r7}
 800db32:	b083      	sub	sp, #12
 800db34:	af00      	add	r7, sp, #0
 800db36:	4603      	mov	r3, r0
 800db38:	6039      	str	r1, [r7, #0]
 800db3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	2204      	movs	r2, #4
 800db40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800db42:	4b03      	ldr	r3, [pc, #12]	; (800db50 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800db44:	4618      	mov	r0, r3
 800db46:	370c      	adds	r7, #12
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr
 800db50:	20000164 	.word	0x20000164

0800db54 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b082      	sub	sp, #8
 800db58:	af00      	add	r7, sp, #0
 800db5a:	4603      	mov	r3, r0
 800db5c:	6039      	str	r1, [r7, #0]
 800db5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800db60:	79fb      	ldrb	r3, [r7, #7]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d105      	bne.n	800db72 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800db66:	683a      	ldr	r2, [r7, #0]
 800db68:	4907      	ldr	r1, [pc, #28]	; (800db88 <USBD_FS_ProductStrDescriptor+0x34>)
 800db6a:	4808      	ldr	r0, [pc, #32]	; (800db8c <USBD_FS_ProductStrDescriptor+0x38>)
 800db6c:	f7fb ffb1 	bl	8009ad2 <USBD_GetString>
 800db70:	e004      	b.n	800db7c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800db72:	683a      	ldr	r2, [r7, #0]
 800db74:	4904      	ldr	r1, [pc, #16]	; (800db88 <USBD_FS_ProductStrDescriptor+0x34>)
 800db76:	4805      	ldr	r0, [pc, #20]	; (800db8c <USBD_FS_ProductStrDescriptor+0x38>)
 800db78:	f7fb ffab 	bl	8009ad2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800db7c:	4b02      	ldr	r3, [pc, #8]	; (800db88 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800db7e:	4618      	mov	r0, r3
 800db80:	3708      	adds	r7, #8
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	2000a58c 	.word	0x2000a58c
 800db8c:	0800fef0 	.word	0x0800fef0

0800db90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
 800db96:	4603      	mov	r3, r0
 800db98:	6039      	str	r1, [r7, #0]
 800db9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800db9c:	683a      	ldr	r2, [r7, #0]
 800db9e:	4904      	ldr	r1, [pc, #16]	; (800dbb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dba0:	4804      	ldr	r0, [pc, #16]	; (800dbb4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dba2:	f7fb ff96 	bl	8009ad2 <USBD_GetString>
  return USBD_StrDesc;
 800dba6:	4b02      	ldr	r3, [pc, #8]	; (800dbb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dba8:	4618      	mov	r0, r3
 800dbaa:	3708      	adds	r7, #8
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}
 800dbb0:	2000a58c 	.word	0x2000a58c
 800dbb4:	0800ff00 	.word	0x0800ff00

0800dbb8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	6039      	str	r1, [r7, #0]
 800dbc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	221a      	movs	r2, #26
 800dbc8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dbca:	f000 f843 	bl	800dc54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dbce:	4b02      	ldr	r3, [pc, #8]	; (800dbd8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3708      	adds	r7, #8
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	20000168 	.word	0x20000168

0800dbdc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b082      	sub	sp, #8
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	6039      	str	r1, [r7, #0]
 800dbe6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dbe8:	79fb      	ldrb	r3, [r7, #7]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d105      	bne.n	800dbfa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dbee:	683a      	ldr	r2, [r7, #0]
 800dbf0:	4907      	ldr	r1, [pc, #28]	; (800dc10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dbf2:	4808      	ldr	r0, [pc, #32]	; (800dc14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dbf4:	f7fb ff6d 	bl	8009ad2 <USBD_GetString>
 800dbf8:	e004      	b.n	800dc04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dbfa:	683a      	ldr	r2, [r7, #0]
 800dbfc:	4904      	ldr	r1, [pc, #16]	; (800dc10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dbfe:	4805      	ldr	r0, [pc, #20]	; (800dc14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dc00:	f7fb ff67 	bl	8009ad2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc04:	4b02      	ldr	r3, [pc, #8]	; (800dc10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3708      	adds	r7, #8
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	2000a58c 	.word	0x2000a58c
 800dc14:	0800ff14 	.word	0x0800ff14

0800dc18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	4603      	mov	r3, r0
 800dc20:	6039      	str	r1, [r7, #0]
 800dc22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dc24:	79fb      	ldrb	r3, [r7, #7]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d105      	bne.n	800dc36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dc2a:	683a      	ldr	r2, [r7, #0]
 800dc2c:	4907      	ldr	r1, [pc, #28]	; (800dc4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dc2e:	4808      	ldr	r0, [pc, #32]	; (800dc50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dc30:	f7fb ff4f 	bl	8009ad2 <USBD_GetString>
 800dc34:	e004      	b.n	800dc40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dc36:	683a      	ldr	r2, [r7, #0]
 800dc38:	4904      	ldr	r1, [pc, #16]	; (800dc4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dc3a:	4805      	ldr	r0, [pc, #20]	; (800dc50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dc3c:	f7fb ff49 	bl	8009ad2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc40:	4b02      	ldr	r3, [pc, #8]	; (800dc4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3708      	adds	r7, #8
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
 800dc4a:	bf00      	nop
 800dc4c:	2000a58c 	.word	0x2000a58c
 800dc50:	0800ff20 	.word	0x0800ff20

0800dc54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b084      	sub	sp, #16
 800dc58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dc5a:	4b0f      	ldr	r3, [pc, #60]	; (800dc98 <Get_SerialNum+0x44>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dc60:	4b0e      	ldr	r3, [pc, #56]	; (800dc9c <Get_SerialNum+0x48>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dc66:	4b0e      	ldr	r3, [pc, #56]	; (800dca0 <Get_SerialNum+0x4c>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dc6c:	68fa      	ldr	r2, [r7, #12]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	4413      	add	r3, r2
 800dc72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d009      	beq.n	800dc8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dc7a:	2208      	movs	r2, #8
 800dc7c:	4909      	ldr	r1, [pc, #36]	; (800dca4 <Get_SerialNum+0x50>)
 800dc7e:	68f8      	ldr	r0, [r7, #12]
 800dc80:	f000 f814 	bl	800dcac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dc84:	2204      	movs	r2, #4
 800dc86:	4908      	ldr	r1, [pc, #32]	; (800dca8 <Get_SerialNum+0x54>)
 800dc88:	68b8      	ldr	r0, [r7, #8]
 800dc8a:	f000 f80f 	bl	800dcac <IntToUnicode>
  }
}
 800dc8e:	bf00      	nop
 800dc90:	3710      	adds	r7, #16
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}
 800dc96:	bf00      	nop
 800dc98:	1fff7a10 	.word	0x1fff7a10
 800dc9c:	1fff7a14 	.word	0x1fff7a14
 800dca0:	1fff7a18 	.word	0x1fff7a18
 800dca4:	2000016a 	.word	0x2000016a
 800dca8:	2000017a 	.word	0x2000017a

0800dcac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dcac:	b480      	push	{r7}
 800dcae:	b087      	sub	sp, #28
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	60f8      	str	r0, [r7, #12]
 800dcb4:	60b9      	str	r1, [r7, #8]
 800dcb6:	4613      	mov	r3, r2
 800dcb8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	75fb      	strb	r3, [r7, #23]
 800dcc2:	e027      	b.n	800dd14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	0f1b      	lsrs	r3, r3, #28
 800dcc8:	2b09      	cmp	r3, #9
 800dcca:	d80b      	bhi.n	800dce4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	0f1b      	lsrs	r3, r3, #28
 800dcd0:	b2da      	uxtb	r2, r3
 800dcd2:	7dfb      	ldrb	r3, [r7, #23]
 800dcd4:	005b      	lsls	r3, r3, #1
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	440b      	add	r3, r1
 800dcdc:	3230      	adds	r2, #48	; 0x30
 800dcde:	b2d2      	uxtb	r2, r2
 800dce0:	701a      	strb	r2, [r3, #0]
 800dce2:	e00a      	b.n	800dcfa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	0f1b      	lsrs	r3, r3, #28
 800dce8:	b2da      	uxtb	r2, r3
 800dcea:	7dfb      	ldrb	r3, [r7, #23]
 800dcec:	005b      	lsls	r3, r3, #1
 800dcee:	4619      	mov	r1, r3
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	440b      	add	r3, r1
 800dcf4:	3237      	adds	r2, #55	; 0x37
 800dcf6:	b2d2      	uxtb	r2, r2
 800dcf8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	011b      	lsls	r3, r3, #4
 800dcfe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dd00:	7dfb      	ldrb	r3, [r7, #23]
 800dd02:	005b      	lsls	r3, r3, #1
 800dd04:	3301      	adds	r3, #1
 800dd06:	68ba      	ldr	r2, [r7, #8]
 800dd08:	4413      	add	r3, r2
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dd0e:	7dfb      	ldrb	r3, [r7, #23]
 800dd10:	3301      	adds	r3, #1
 800dd12:	75fb      	strb	r3, [r7, #23]
 800dd14:	7dfa      	ldrb	r2, [r7, #23]
 800dd16:	79fb      	ldrb	r3, [r7, #7]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d3d3      	bcc.n	800dcc4 <IntToUnicode+0x18>
  }
}
 800dd1c:	bf00      	nop
 800dd1e:	371c      	adds	r7, #28
 800dd20:	46bd      	mov	sp, r7
 800dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd26:	4770      	bx	lr

0800dd28 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b08a      	sub	sp, #40	; 0x28
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dd30:	f107 0314 	add.w	r3, r7, #20
 800dd34:	2200      	movs	r2, #0
 800dd36:	601a      	str	r2, [r3, #0]
 800dd38:	605a      	str	r2, [r3, #4]
 800dd3a:	609a      	str	r2, [r3, #8]
 800dd3c:	60da      	str	r2, [r3, #12]
 800dd3e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dd48:	d13a      	bne.n	800ddc0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	613b      	str	r3, [r7, #16]
 800dd4e:	4b1e      	ldr	r3, [pc, #120]	; (800ddc8 <HAL_PCD_MspInit+0xa0>)
 800dd50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd52:	4a1d      	ldr	r2, [pc, #116]	; (800ddc8 <HAL_PCD_MspInit+0xa0>)
 800dd54:	f043 0301 	orr.w	r3, r3, #1
 800dd58:	6313      	str	r3, [r2, #48]	; 0x30
 800dd5a:	4b1b      	ldr	r3, [pc, #108]	; (800ddc8 <HAL_PCD_MspInit+0xa0>)
 800dd5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd5e:	f003 0301 	and.w	r3, r3, #1
 800dd62:	613b      	str	r3, [r7, #16]
 800dd64:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800dd66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800dd6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd6c:	2302      	movs	r3, #2
 800dd6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd70:	2300      	movs	r3, #0
 800dd72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dd74:	2303      	movs	r3, #3
 800dd76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dd78:	230a      	movs	r3, #10
 800dd7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dd7c:	f107 0314 	add.w	r3, r7, #20
 800dd80:	4619      	mov	r1, r3
 800dd82:	4812      	ldr	r0, [pc, #72]	; (800ddcc <HAL_PCD_MspInit+0xa4>)
 800dd84:	f7f6 f916 	bl	8003fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dd88:	4b0f      	ldr	r3, [pc, #60]	; (800ddc8 <HAL_PCD_MspInit+0xa0>)
 800dd8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd8c:	4a0e      	ldr	r2, [pc, #56]	; (800ddc8 <HAL_PCD_MspInit+0xa0>)
 800dd8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd92:	6353      	str	r3, [r2, #52]	; 0x34
 800dd94:	2300      	movs	r3, #0
 800dd96:	60fb      	str	r3, [r7, #12]
 800dd98:	4b0b      	ldr	r3, [pc, #44]	; (800ddc8 <HAL_PCD_MspInit+0xa0>)
 800dd9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd9c:	4a0a      	ldr	r2, [pc, #40]	; (800ddc8 <HAL_PCD_MspInit+0xa0>)
 800dd9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dda2:	6453      	str	r3, [r2, #68]	; 0x44
 800dda4:	4b08      	ldr	r3, [pc, #32]	; (800ddc8 <HAL_PCD_MspInit+0xa0>)
 800dda6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dda8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ddac:	60fb      	str	r3, [r7, #12]
 800ddae:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	2100      	movs	r1, #0
 800ddb4:	2043      	movs	r0, #67	; 0x43
 800ddb6:	f7f5 fcf5 	bl	80037a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ddba:	2043      	movs	r0, #67	; 0x43
 800ddbc:	f7f5 fd0e 	bl	80037dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ddc0:	bf00      	nop
 800ddc2:	3728      	adds	r7, #40	; 0x28
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}
 800ddc8:	40023800 	.word	0x40023800
 800ddcc:	40020000 	.word	0x40020000

0800ddd0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800dde4:	4619      	mov	r1, r3
 800dde6:	4610      	mov	r0, r2
 800dde8:	f7fa fef0 	bl	8008bcc <USBD_LL_SetupStage>
}
 800ddec:	bf00      	nop
 800ddee:	3708      	adds	r7, #8
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}

0800ddf4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	460b      	mov	r3, r1
 800ddfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800de06:	78fa      	ldrb	r2, [r7, #3]
 800de08:	6879      	ldr	r1, [r7, #4]
 800de0a:	4613      	mov	r3, r2
 800de0c:	00db      	lsls	r3, r3, #3
 800de0e:	1a9b      	subs	r3, r3, r2
 800de10:	009b      	lsls	r3, r3, #2
 800de12:	440b      	add	r3, r1
 800de14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800de18:	681a      	ldr	r2, [r3, #0]
 800de1a:	78fb      	ldrb	r3, [r7, #3]
 800de1c:	4619      	mov	r1, r3
 800de1e:	f7fa ff28 	bl	8008c72 <USBD_LL_DataOutStage>
}
 800de22:	bf00      	nop
 800de24:	3708      	adds	r7, #8
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}

0800de2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de2a:	b580      	push	{r7, lr}
 800de2c:	b082      	sub	sp, #8
 800de2e:	af00      	add	r7, sp, #0
 800de30:	6078      	str	r0, [r7, #4]
 800de32:	460b      	mov	r3, r1
 800de34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800de3c:	78fa      	ldrb	r2, [r7, #3]
 800de3e:	6879      	ldr	r1, [r7, #4]
 800de40:	4613      	mov	r3, r2
 800de42:	00db      	lsls	r3, r3, #3
 800de44:	1a9b      	subs	r3, r3, r2
 800de46:	009b      	lsls	r3, r3, #2
 800de48:	440b      	add	r3, r1
 800de4a:	3348      	adds	r3, #72	; 0x48
 800de4c:	681a      	ldr	r2, [r3, #0]
 800de4e:	78fb      	ldrb	r3, [r7, #3]
 800de50:	4619      	mov	r1, r3
 800de52:	f7fa ff71 	bl	8008d38 <USBD_LL_DataInStage>
}
 800de56:	bf00      	nop
 800de58:	3708      	adds	r7, #8
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}

0800de5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de5e:	b580      	push	{r7, lr}
 800de60:	b082      	sub	sp, #8
 800de62:	af00      	add	r7, sp, #0
 800de64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7fb f875 	bl	8008f5c <USBD_LL_SOF>
}
 800de72:	bf00      	nop
 800de74:	3708      	adds	r7, #8
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b084      	sub	sp, #16
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800de82:	2301      	movs	r3, #1
 800de84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	68db      	ldr	r3, [r3, #12]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d102      	bne.n	800de94 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800de8e:	2300      	movs	r3, #0
 800de90:	73fb      	strb	r3, [r7, #15]
 800de92:	e008      	b.n	800dea6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	68db      	ldr	r3, [r3, #12]
 800de98:	2b02      	cmp	r3, #2
 800de9a:	d102      	bne.n	800dea2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800de9c:	2301      	movs	r3, #1
 800de9e:	73fb      	strb	r3, [r7, #15]
 800dea0:	e001      	b.n	800dea6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800dea2:	f7f4 fa6b 	bl	800237c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800deac:	7bfa      	ldrb	r2, [r7, #15]
 800deae:	4611      	mov	r1, r2
 800deb0:	4618      	mov	r0, r3
 800deb2:	f7fb f818 	bl	8008ee6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800debc:	4618      	mov	r0, r3
 800debe:	f7fa ffd1 	bl	8008e64 <USBD_LL_Reset>
}
 800dec2:	bf00      	nop
 800dec4:	3710      	adds	r7, #16
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
	...

0800decc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fb f813 	bl	8008f06 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	6812      	ldr	r2, [r2, #0]
 800deee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800def2:	f043 0301 	orr.w	r3, r3, #1
 800def6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6a1b      	ldr	r3, [r3, #32]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d005      	beq.n	800df0c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800df00:	4b04      	ldr	r3, [pc, #16]	; (800df14 <HAL_PCD_SuspendCallback+0x48>)
 800df02:	691b      	ldr	r3, [r3, #16]
 800df04:	4a03      	ldr	r2, [pc, #12]	; (800df14 <HAL_PCD_SuspendCallback+0x48>)
 800df06:	f043 0306 	orr.w	r3, r3, #6
 800df0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800df0c:	bf00      	nop
 800df0e:	3708      	adds	r7, #8
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}
 800df14:	e000ed00 	.word	0xe000ed00

0800df18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b082      	sub	sp, #8
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800df26:	4618      	mov	r0, r3
 800df28:	f7fb f802 	bl	8008f30 <USBD_LL_Resume>
}
 800df2c:	bf00      	nop
 800df2e:	3708      	adds	r7, #8
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b082      	sub	sp, #8
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	460b      	mov	r3, r1
 800df3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800df46:	78fa      	ldrb	r2, [r7, #3]
 800df48:	4611      	mov	r1, r2
 800df4a:	4618      	mov	r0, r3
 800df4c:	f7fb f82d 	bl	8008faa <USBD_LL_IsoOUTIncomplete>
}
 800df50:	bf00      	nop
 800df52:	3708      	adds	r7, #8
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}

0800df58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b082      	sub	sp, #8
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	460b      	mov	r3, r1
 800df62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800df6a:	78fa      	ldrb	r2, [r7, #3]
 800df6c:	4611      	mov	r1, r2
 800df6e:	4618      	mov	r0, r3
 800df70:	f7fb f80e 	bl	8008f90 <USBD_LL_IsoINIncomplete>
}
 800df74:	bf00      	nop
 800df76:	3708      	adds	r7, #8
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}

0800df7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b082      	sub	sp, #8
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800df8a:	4618      	mov	r0, r3
 800df8c:	f7fb f81a 	bl	8008fc4 <USBD_LL_DevConnected>
}
 800df90:	bf00      	nop
 800df92:	3708      	adds	r7, #8
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}

0800df98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b082      	sub	sp, #8
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f7fb f817 	bl	8008fda <USBD_LL_DevDisconnected>
}
 800dfac:	bf00      	nop
 800dfae:	3708      	adds	r7, #8
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}

0800dfb4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b082      	sub	sp, #8
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d13c      	bne.n	800e03e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dfc4:	4a20      	ldr	r2, [pc, #128]	; (800e048 <USBD_LL_Init+0x94>)
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	4a1e      	ldr	r2, [pc, #120]	; (800e048 <USBD_LL_Init+0x94>)
 800dfd0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dfd4:	4b1c      	ldr	r3, [pc, #112]	; (800e048 <USBD_LL_Init+0x94>)
 800dfd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800dfda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800dfdc:	4b1a      	ldr	r3, [pc, #104]	; (800e048 <USBD_LL_Init+0x94>)
 800dfde:	2204      	movs	r2, #4
 800dfe0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dfe2:	4b19      	ldr	r3, [pc, #100]	; (800e048 <USBD_LL_Init+0x94>)
 800dfe4:	2202      	movs	r2, #2
 800dfe6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dfe8:	4b17      	ldr	r3, [pc, #92]	; (800e048 <USBD_LL_Init+0x94>)
 800dfea:	2200      	movs	r2, #0
 800dfec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dfee:	4b16      	ldr	r3, [pc, #88]	; (800e048 <USBD_LL_Init+0x94>)
 800dff0:	2202      	movs	r2, #2
 800dff2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dff4:	4b14      	ldr	r3, [pc, #80]	; (800e048 <USBD_LL_Init+0x94>)
 800dff6:	2200      	movs	r2, #0
 800dff8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dffa:	4b13      	ldr	r3, [pc, #76]	; (800e048 <USBD_LL_Init+0x94>)
 800dffc:	2200      	movs	r2, #0
 800dffe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e000:	4b11      	ldr	r3, [pc, #68]	; (800e048 <USBD_LL_Init+0x94>)
 800e002:	2200      	movs	r2, #0
 800e004:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e006:	4b10      	ldr	r3, [pc, #64]	; (800e048 <USBD_LL_Init+0x94>)
 800e008:	2200      	movs	r2, #0
 800e00a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e00c:	4b0e      	ldr	r3, [pc, #56]	; (800e048 <USBD_LL_Init+0x94>)
 800e00e:	2200      	movs	r2, #0
 800e010:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e012:	480d      	ldr	r0, [pc, #52]	; (800e048 <USBD_LL_Init+0x94>)
 800e014:	f7f6 f981 	bl	800431a <HAL_PCD_Init>
 800e018:	4603      	mov	r3, r0
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d001      	beq.n	800e022 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e01e:	f7f4 f9ad 	bl	800237c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e022:	2180      	movs	r1, #128	; 0x80
 800e024:	4808      	ldr	r0, [pc, #32]	; (800e048 <USBD_LL_Init+0x94>)
 800e026:	f7f7 fade 	bl	80055e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e02a:	2240      	movs	r2, #64	; 0x40
 800e02c:	2100      	movs	r1, #0
 800e02e:	4806      	ldr	r0, [pc, #24]	; (800e048 <USBD_LL_Init+0x94>)
 800e030:	f7f7 fa92 	bl	8005558 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e034:	2280      	movs	r2, #128	; 0x80
 800e036:	2101      	movs	r1, #1
 800e038:	4803      	ldr	r0, [pc, #12]	; (800e048 <USBD_LL_Init+0x94>)
 800e03a:	f7f7 fa8d 	bl	8005558 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e03e:	2300      	movs	r3, #0
}
 800e040:	4618      	mov	r0, r3
 800e042:	3708      	adds	r7, #8
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}
 800e048:	2000a78c 	.word	0x2000a78c

0800e04c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b084      	sub	sp, #16
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e054:	2300      	movs	r3, #0
 800e056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e058:	2300      	movs	r3, #0
 800e05a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e062:	4618      	mov	r0, r3
 800e064:	f7f6 fa76 	bl	8004554 <HAL_PCD_Start>
 800e068:	4603      	mov	r3, r0
 800e06a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e06c:	7bfb      	ldrb	r3, [r7, #15]
 800e06e:	4618      	mov	r0, r3
 800e070:	f000 f92a 	bl	800e2c8 <USBD_Get_USB_Status>
 800e074:	4603      	mov	r3, r0
 800e076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e078:	7bbb      	ldrb	r3, [r7, #14]
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3710      	adds	r7, #16
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}

0800e082 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e082:	b580      	push	{r7, lr}
 800e084:	b084      	sub	sp, #16
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
 800e08a:	4608      	mov	r0, r1
 800e08c:	4611      	mov	r1, r2
 800e08e:	461a      	mov	r2, r3
 800e090:	4603      	mov	r3, r0
 800e092:	70fb      	strb	r3, [r7, #3]
 800e094:	460b      	mov	r3, r1
 800e096:	70bb      	strb	r3, [r7, #2]
 800e098:	4613      	mov	r3, r2
 800e09a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e09c:	2300      	movs	r3, #0
 800e09e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e0aa:	78bb      	ldrb	r3, [r7, #2]
 800e0ac:	883a      	ldrh	r2, [r7, #0]
 800e0ae:	78f9      	ldrb	r1, [r7, #3]
 800e0b0:	f7f6 fe5a 	bl	8004d68 <HAL_PCD_EP_Open>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0b8:	7bfb      	ldrb	r3, [r7, #15]
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f000 f904 	bl	800e2c8 <USBD_Get_USB_Status>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3710      	adds	r7, #16
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}

0800e0ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0ce:	b580      	push	{r7, lr}
 800e0d0:	b084      	sub	sp, #16
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	6078      	str	r0, [r7, #4]
 800e0d6:	460b      	mov	r3, r1
 800e0d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e0e8:	78fa      	ldrb	r2, [r7, #3]
 800e0ea:	4611      	mov	r1, r2
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f7f6 fea3 	bl	8004e38 <HAL_PCD_EP_Close>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0f6:	7bfb      	ldrb	r3, [r7, #15]
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f000 f8e5 	bl	800e2c8 <USBD_Get_USB_Status>
 800e0fe:	4603      	mov	r3, r0
 800e100:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e102:	7bbb      	ldrb	r3, [r7, #14]
}
 800e104:	4618      	mov	r0, r3
 800e106:	3710      	adds	r7, #16
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b084      	sub	sp, #16
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
 800e114:	460b      	mov	r3, r1
 800e116:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e118:	2300      	movs	r3, #0
 800e11a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e11c:	2300      	movs	r3, #0
 800e11e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e126:	78fa      	ldrb	r2, [r7, #3]
 800e128:	4611      	mov	r1, r2
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7f6 ff7b 	bl	8005026 <HAL_PCD_EP_SetStall>
 800e130:	4603      	mov	r3, r0
 800e132:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e134:	7bfb      	ldrb	r3, [r7, #15]
 800e136:	4618      	mov	r0, r3
 800e138:	f000 f8c6 	bl	800e2c8 <USBD_Get_USB_Status>
 800e13c:	4603      	mov	r3, r0
 800e13e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e140:	7bbb      	ldrb	r3, [r7, #14]
}
 800e142:	4618      	mov	r0, r3
 800e144:	3710      	adds	r7, #16
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}

0800e14a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e14a:	b580      	push	{r7, lr}
 800e14c:	b084      	sub	sp, #16
 800e14e:	af00      	add	r7, sp, #0
 800e150:	6078      	str	r0, [r7, #4]
 800e152:	460b      	mov	r3, r1
 800e154:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e156:	2300      	movs	r3, #0
 800e158:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e15a:	2300      	movs	r3, #0
 800e15c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e164:	78fa      	ldrb	r2, [r7, #3]
 800e166:	4611      	mov	r1, r2
 800e168:	4618      	mov	r0, r3
 800e16a:	f7f6 ffc0 	bl	80050ee <HAL_PCD_EP_ClrStall>
 800e16e:	4603      	mov	r3, r0
 800e170:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e172:	7bfb      	ldrb	r3, [r7, #15]
 800e174:	4618      	mov	r0, r3
 800e176:	f000 f8a7 	bl	800e2c8 <USBD_Get_USB_Status>
 800e17a:	4603      	mov	r3, r0
 800e17c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e17e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e180:	4618      	mov	r0, r3
 800e182:	3710      	adds	r7, #16
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e188:	b480      	push	{r7}
 800e18a:	b085      	sub	sp, #20
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	460b      	mov	r3, r1
 800e192:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e19a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e19c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	da0b      	bge.n	800e1bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e1a4:	78fb      	ldrb	r3, [r7, #3]
 800e1a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e1aa:	68f9      	ldr	r1, [r7, #12]
 800e1ac:	4613      	mov	r3, r2
 800e1ae:	00db      	lsls	r3, r3, #3
 800e1b0:	1a9b      	subs	r3, r3, r2
 800e1b2:	009b      	lsls	r3, r3, #2
 800e1b4:	440b      	add	r3, r1
 800e1b6:	333e      	adds	r3, #62	; 0x3e
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	e00b      	b.n	800e1d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e1bc:	78fb      	ldrb	r3, [r7, #3]
 800e1be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e1c2:	68f9      	ldr	r1, [r7, #12]
 800e1c4:	4613      	mov	r3, r2
 800e1c6:	00db      	lsls	r3, r3, #3
 800e1c8:	1a9b      	subs	r3, r3, r2
 800e1ca:	009b      	lsls	r3, r3, #2
 800e1cc:	440b      	add	r3, r1
 800e1ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e1d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3714      	adds	r7, #20
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1de:	4770      	bx	lr

0800e1e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b084      	sub	sp, #16
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e1fa:	78fa      	ldrb	r2, [r7, #3]
 800e1fc:	4611      	mov	r1, r2
 800e1fe:	4618      	mov	r0, r3
 800e200:	f7f6 fd8d 	bl	8004d1e <HAL_PCD_SetAddress>
 800e204:	4603      	mov	r3, r0
 800e206:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e208:	7bfb      	ldrb	r3, [r7, #15]
 800e20a:	4618      	mov	r0, r3
 800e20c:	f000 f85c 	bl	800e2c8 <USBD_Get_USB_Status>
 800e210:	4603      	mov	r3, r0
 800e212:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e214:	7bbb      	ldrb	r3, [r7, #14]
}
 800e216:	4618      	mov	r0, r3
 800e218:	3710      	adds	r7, #16
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}

0800e21e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e21e:	b580      	push	{r7, lr}
 800e220:	b086      	sub	sp, #24
 800e222:	af00      	add	r7, sp, #0
 800e224:	60f8      	str	r0, [r7, #12]
 800e226:	607a      	str	r2, [r7, #4]
 800e228:	603b      	str	r3, [r7, #0]
 800e22a:	460b      	mov	r3, r1
 800e22c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e22e:	2300      	movs	r3, #0
 800e230:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e232:	2300      	movs	r3, #0
 800e234:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e23c:	7af9      	ldrb	r1, [r7, #11]
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	687a      	ldr	r2, [r7, #4]
 800e242:	f7f6 fea6 	bl	8004f92 <HAL_PCD_EP_Transmit>
 800e246:	4603      	mov	r3, r0
 800e248:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e24a:	7dfb      	ldrb	r3, [r7, #23]
 800e24c:	4618      	mov	r0, r3
 800e24e:	f000 f83b 	bl	800e2c8 <USBD_Get_USB_Status>
 800e252:	4603      	mov	r3, r0
 800e254:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e256:	7dbb      	ldrb	r3, [r7, #22]
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3718      	adds	r7, #24
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b086      	sub	sp, #24
 800e264:	af00      	add	r7, sp, #0
 800e266:	60f8      	str	r0, [r7, #12]
 800e268:	607a      	str	r2, [r7, #4]
 800e26a:	603b      	str	r3, [r7, #0]
 800e26c:	460b      	mov	r3, r1
 800e26e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e270:	2300      	movs	r3, #0
 800e272:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e274:	2300      	movs	r3, #0
 800e276:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e27e:	7af9      	ldrb	r1, [r7, #11]
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	687a      	ldr	r2, [r7, #4]
 800e284:	f7f6 fe22 	bl	8004ecc <HAL_PCD_EP_Receive>
 800e288:	4603      	mov	r3, r0
 800e28a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e28c:	7dfb      	ldrb	r3, [r7, #23]
 800e28e:	4618      	mov	r0, r3
 800e290:	f000 f81a 	bl	800e2c8 <USBD_Get_USB_Status>
 800e294:	4603      	mov	r3, r0
 800e296:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e298:	7dbb      	ldrb	r3, [r7, #22]
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3718      	adds	r7, #24
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}

0800e2a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2a2:	b580      	push	{r7, lr}
 800e2a4:	b082      	sub	sp, #8
 800e2a6:	af00      	add	r7, sp, #0
 800e2a8:	6078      	str	r0, [r7, #4]
 800e2aa:	460b      	mov	r3, r1
 800e2ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e2b4:	78fa      	ldrb	r2, [r7, #3]
 800e2b6:	4611      	mov	r1, r2
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7f6 fe52 	bl	8004f62 <HAL_PCD_EP_GetRxCount>
 800e2be:	4603      	mov	r3, r0
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3708      	adds	r7, #8
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}

0800e2c8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b085      	sub	sp, #20
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e2d6:	79fb      	ldrb	r3, [r7, #7]
 800e2d8:	2b03      	cmp	r3, #3
 800e2da:	d817      	bhi.n	800e30c <USBD_Get_USB_Status+0x44>
 800e2dc:	a201      	add	r2, pc, #4	; (adr r2, 800e2e4 <USBD_Get_USB_Status+0x1c>)
 800e2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2e2:	bf00      	nop
 800e2e4:	0800e2f5 	.word	0x0800e2f5
 800e2e8:	0800e2fb 	.word	0x0800e2fb
 800e2ec:	0800e301 	.word	0x0800e301
 800e2f0:	0800e307 	.word	0x0800e307
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	73fb      	strb	r3, [r7, #15]
    break;
 800e2f8:	e00b      	b.n	800e312 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e2fa:	2303      	movs	r3, #3
 800e2fc:	73fb      	strb	r3, [r7, #15]
    break;
 800e2fe:	e008      	b.n	800e312 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e300:	2301      	movs	r3, #1
 800e302:	73fb      	strb	r3, [r7, #15]
    break;
 800e304:	e005      	b.n	800e312 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e306:	2303      	movs	r3, #3
 800e308:	73fb      	strb	r3, [r7, #15]
    break;
 800e30a:	e002      	b.n	800e312 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e30c:	2303      	movs	r3, #3
 800e30e:	73fb      	strb	r3, [r7, #15]
    break;
 800e310:	bf00      	nop
  }
  return usb_status;
 800e312:	7bfb      	ldrb	r3, [r7, #15]
}
 800e314:	4618      	mov	r0, r3
 800e316:	3714      	adds	r7, #20
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr

0800e320 <__errno>:
 800e320:	4b01      	ldr	r3, [pc, #4]	; (800e328 <__errno+0x8>)
 800e322:	6818      	ldr	r0, [r3, #0]
 800e324:	4770      	bx	lr
 800e326:	bf00      	nop
 800e328:	20000184 	.word	0x20000184

0800e32c <__libc_init_array>:
 800e32c:	b570      	push	{r4, r5, r6, lr}
 800e32e:	4e0d      	ldr	r6, [pc, #52]	; (800e364 <__libc_init_array+0x38>)
 800e330:	4c0d      	ldr	r4, [pc, #52]	; (800e368 <__libc_init_array+0x3c>)
 800e332:	1ba4      	subs	r4, r4, r6
 800e334:	10a4      	asrs	r4, r4, #2
 800e336:	2500      	movs	r5, #0
 800e338:	42a5      	cmp	r5, r4
 800e33a:	d109      	bne.n	800e350 <__libc_init_array+0x24>
 800e33c:	4e0b      	ldr	r6, [pc, #44]	; (800e36c <__libc_init_array+0x40>)
 800e33e:	4c0c      	ldr	r4, [pc, #48]	; (800e370 <__libc_init_array+0x44>)
 800e340:	f001 fd9c 	bl	800fe7c <_init>
 800e344:	1ba4      	subs	r4, r4, r6
 800e346:	10a4      	asrs	r4, r4, #2
 800e348:	2500      	movs	r5, #0
 800e34a:	42a5      	cmp	r5, r4
 800e34c:	d105      	bne.n	800e35a <__libc_init_array+0x2e>
 800e34e:	bd70      	pop	{r4, r5, r6, pc}
 800e350:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e354:	4798      	blx	r3
 800e356:	3501      	adds	r5, #1
 800e358:	e7ee      	b.n	800e338 <__libc_init_array+0xc>
 800e35a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e35e:	4798      	blx	r3
 800e360:	3501      	adds	r5, #1
 800e362:	e7f2      	b.n	800e34a <__libc_init_array+0x1e>
 800e364:	080101a8 	.word	0x080101a8
 800e368:	080101a8 	.word	0x080101a8
 800e36c:	080101a8 	.word	0x080101a8
 800e370:	080101ac 	.word	0x080101ac

0800e374 <malloc>:
 800e374:	4b02      	ldr	r3, [pc, #8]	; (800e380 <malloc+0xc>)
 800e376:	4601      	mov	r1, r0
 800e378:	6818      	ldr	r0, [r3, #0]
 800e37a:	f000 b86d 	b.w	800e458 <_malloc_r>
 800e37e:	bf00      	nop
 800e380:	20000184 	.word	0x20000184

0800e384 <free>:
 800e384:	4b02      	ldr	r3, [pc, #8]	; (800e390 <free+0xc>)
 800e386:	4601      	mov	r1, r0
 800e388:	6818      	ldr	r0, [r3, #0]
 800e38a:	f000 b817 	b.w	800e3bc <_free_r>
 800e38e:	bf00      	nop
 800e390:	20000184 	.word	0x20000184

0800e394 <memcpy>:
 800e394:	b510      	push	{r4, lr}
 800e396:	1e43      	subs	r3, r0, #1
 800e398:	440a      	add	r2, r1
 800e39a:	4291      	cmp	r1, r2
 800e39c:	d100      	bne.n	800e3a0 <memcpy+0xc>
 800e39e:	bd10      	pop	{r4, pc}
 800e3a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e3a8:	e7f7      	b.n	800e39a <memcpy+0x6>

0800e3aa <memset>:
 800e3aa:	4402      	add	r2, r0
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	d100      	bne.n	800e3b4 <memset+0xa>
 800e3b2:	4770      	bx	lr
 800e3b4:	f803 1b01 	strb.w	r1, [r3], #1
 800e3b8:	e7f9      	b.n	800e3ae <memset+0x4>
	...

0800e3bc <_free_r>:
 800e3bc:	b538      	push	{r3, r4, r5, lr}
 800e3be:	4605      	mov	r5, r0
 800e3c0:	2900      	cmp	r1, #0
 800e3c2:	d045      	beq.n	800e450 <_free_r+0x94>
 800e3c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3c8:	1f0c      	subs	r4, r1, #4
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	bfb8      	it	lt
 800e3ce:	18e4      	addlt	r4, r4, r3
 800e3d0:	f001 fa48 	bl	800f864 <__malloc_lock>
 800e3d4:	4a1f      	ldr	r2, [pc, #124]	; (800e454 <_free_r+0x98>)
 800e3d6:	6813      	ldr	r3, [r2, #0]
 800e3d8:	4610      	mov	r0, r2
 800e3da:	b933      	cbnz	r3, 800e3ea <_free_r+0x2e>
 800e3dc:	6063      	str	r3, [r4, #4]
 800e3de:	6014      	str	r4, [r2, #0]
 800e3e0:	4628      	mov	r0, r5
 800e3e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e3e6:	f001 ba3e 	b.w	800f866 <__malloc_unlock>
 800e3ea:	42a3      	cmp	r3, r4
 800e3ec:	d90c      	bls.n	800e408 <_free_r+0x4c>
 800e3ee:	6821      	ldr	r1, [r4, #0]
 800e3f0:	1862      	adds	r2, r4, r1
 800e3f2:	4293      	cmp	r3, r2
 800e3f4:	bf04      	itt	eq
 800e3f6:	681a      	ldreq	r2, [r3, #0]
 800e3f8:	685b      	ldreq	r3, [r3, #4]
 800e3fa:	6063      	str	r3, [r4, #4]
 800e3fc:	bf04      	itt	eq
 800e3fe:	1852      	addeq	r2, r2, r1
 800e400:	6022      	streq	r2, [r4, #0]
 800e402:	6004      	str	r4, [r0, #0]
 800e404:	e7ec      	b.n	800e3e0 <_free_r+0x24>
 800e406:	4613      	mov	r3, r2
 800e408:	685a      	ldr	r2, [r3, #4]
 800e40a:	b10a      	cbz	r2, 800e410 <_free_r+0x54>
 800e40c:	42a2      	cmp	r2, r4
 800e40e:	d9fa      	bls.n	800e406 <_free_r+0x4a>
 800e410:	6819      	ldr	r1, [r3, #0]
 800e412:	1858      	adds	r0, r3, r1
 800e414:	42a0      	cmp	r0, r4
 800e416:	d10b      	bne.n	800e430 <_free_r+0x74>
 800e418:	6820      	ldr	r0, [r4, #0]
 800e41a:	4401      	add	r1, r0
 800e41c:	1858      	adds	r0, r3, r1
 800e41e:	4282      	cmp	r2, r0
 800e420:	6019      	str	r1, [r3, #0]
 800e422:	d1dd      	bne.n	800e3e0 <_free_r+0x24>
 800e424:	6810      	ldr	r0, [r2, #0]
 800e426:	6852      	ldr	r2, [r2, #4]
 800e428:	605a      	str	r2, [r3, #4]
 800e42a:	4401      	add	r1, r0
 800e42c:	6019      	str	r1, [r3, #0]
 800e42e:	e7d7      	b.n	800e3e0 <_free_r+0x24>
 800e430:	d902      	bls.n	800e438 <_free_r+0x7c>
 800e432:	230c      	movs	r3, #12
 800e434:	602b      	str	r3, [r5, #0]
 800e436:	e7d3      	b.n	800e3e0 <_free_r+0x24>
 800e438:	6820      	ldr	r0, [r4, #0]
 800e43a:	1821      	adds	r1, r4, r0
 800e43c:	428a      	cmp	r2, r1
 800e43e:	bf04      	itt	eq
 800e440:	6811      	ldreq	r1, [r2, #0]
 800e442:	6852      	ldreq	r2, [r2, #4]
 800e444:	6062      	str	r2, [r4, #4]
 800e446:	bf04      	itt	eq
 800e448:	1809      	addeq	r1, r1, r0
 800e44a:	6021      	streq	r1, [r4, #0]
 800e44c:	605c      	str	r4, [r3, #4]
 800e44e:	e7c7      	b.n	800e3e0 <_free_r+0x24>
 800e450:	bd38      	pop	{r3, r4, r5, pc}
 800e452:	bf00      	nop
 800e454:	200090d8 	.word	0x200090d8

0800e458 <_malloc_r>:
 800e458:	b570      	push	{r4, r5, r6, lr}
 800e45a:	1ccd      	adds	r5, r1, #3
 800e45c:	f025 0503 	bic.w	r5, r5, #3
 800e460:	3508      	adds	r5, #8
 800e462:	2d0c      	cmp	r5, #12
 800e464:	bf38      	it	cc
 800e466:	250c      	movcc	r5, #12
 800e468:	2d00      	cmp	r5, #0
 800e46a:	4606      	mov	r6, r0
 800e46c:	db01      	blt.n	800e472 <_malloc_r+0x1a>
 800e46e:	42a9      	cmp	r1, r5
 800e470:	d903      	bls.n	800e47a <_malloc_r+0x22>
 800e472:	230c      	movs	r3, #12
 800e474:	6033      	str	r3, [r6, #0]
 800e476:	2000      	movs	r0, #0
 800e478:	bd70      	pop	{r4, r5, r6, pc}
 800e47a:	f001 f9f3 	bl	800f864 <__malloc_lock>
 800e47e:	4a21      	ldr	r2, [pc, #132]	; (800e504 <_malloc_r+0xac>)
 800e480:	6814      	ldr	r4, [r2, #0]
 800e482:	4621      	mov	r1, r4
 800e484:	b991      	cbnz	r1, 800e4ac <_malloc_r+0x54>
 800e486:	4c20      	ldr	r4, [pc, #128]	; (800e508 <_malloc_r+0xb0>)
 800e488:	6823      	ldr	r3, [r4, #0]
 800e48a:	b91b      	cbnz	r3, 800e494 <_malloc_r+0x3c>
 800e48c:	4630      	mov	r0, r6
 800e48e:	f000 fb87 	bl	800eba0 <_sbrk_r>
 800e492:	6020      	str	r0, [r4, #0]
 800e494:	4629      	mov	r1, r5
 800e496:	4630      	mov	r0, r6
 800e498:	f000 fb82 	bl	800eba0 <_sbrk_r>
 800e49c:	1c43      	adds	r3, r0, #1
 800e49e:	d124      	bne.n	800e4ea <_malloc_r+0x92>
 800e4a0:	230c      	movs	r3, #12
 800e4a2:	6033      	str	r3, [r6, #0]
 800e4a4:	4630      	mov	r0, r6
 800e4a6:	f001 f9de 	bl	800f866 <__malloc_unlock>
 800e4aa:	e7e4      	b.n	800e476 <_malloc_r+0x1e>
 800e4ac:	680b      	ldr	r3, [r1, #0]
 800e4ae:	1b5b      	subs	r3, r3, r5
 800e4b0:	d418      	bmi.n	800e4e4 <_malloc_r+0x8c>
 800e4b2:	2b0b      	cmp	r3, #11
 800e4b4:	d90f      	bls.n	800e4d6 <_malloc_r+0x7e>
 800e4b6:	600b      	str	r3, [r1, #0]
 800e4b8:	50cd      	str	r5, [r1, r3]
 800e4ba:	18cc      	adds	r4, r1, r3
 800e4bc:	4630      	mov	r0, r6
 800e4be:	f001 f9d2 	bl	800f866 <__malloc_unlock>
 800e4c2:	f104 000b 	add.w	r0, r4, #11
 800e4c6:	1d23      	adds	r3, r4, #4
 800e4c8:	f020 0007 	bic.w	r0, r0, #7
 800e4cc:	1ac3      	subs	r3, r0, r3
 800e4ce:	d0d3      	beq.n	800e478 <_malloc_r+0x20>
 800e4d0:	425a      	negs	r2, r3
 800e4d2:	50e2      	str	r2, [r4, r3]
 800e4d4:	e7d0      	b.n	800e478 <_malloc_r+0x20>
 800e4d6:	428c      	cmp	r4, r1
 800e4d8:	684b      	ldr	r3, [r1, #4]
 800e4da:	bf16      	itet	ne
 800e4dc:	6063      	strne	r3, [r4, #4]
 800e4de:	6013      	streq	r3, [r2, #0]
 800e4e0:	460c      	movne	r4, r1
 800e4e2:	e7eb      	b.n	800e4bc <_malloc_r+0x64>
 800e4e4:	460c      	mov	r4, r1
 800e4e6:	6849      	ldr	r1, [r1, #4]
 800e4e8:	e7cc      	b.n	800e484 <_malloc_r+0x2c>
 800e4ea:	1cc4      	adds	r4, r0, #3
 800e4ec:	f024 0403 	bic.w	r4, r4, #3
 800e4f0:	42a0      	cmp	r0, r4
 800e4f2:	d005      	beq.n	800e500 <_malloc_r+0xa8>
 800e4f4:	1a21      	subs	r1, r4, r0
 800e4f6:	4630      	mov	r0, r6
 800e4f8:	f000 fb52 	bl	800eba0 <_sbrk_r>
 800e4fc:	3001      	adds	r0, #1
 800e4fe:	d0cf      	beq.n	800e4a0 <_malloc_r+0x48>
 800e500:	6025      	str	r5, [r4, #0]
 800e502:	e7db      	b.n	800e4bc <_malloc_r+0x64>
 800e504:	200090d8 	.word	0x200090d8
 800e508:	200090dc 	.word	0x200090dc

0800e50c <__cvt>:
 800e50c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e510:	ec55 4b10 	vmov	r4, r5, d0
 800e514:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800e516:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e51a:	2d00      	cmp	r5, #0
 800e51c:	460e      	mov	r6, r1
 800e51e:	4691      	mov	r9, r2
 800e520:	4619      	mov	r1, r3
 800e522:	bfb8      	it	lt
 800e524:	4622      	movlt	r2, r4
 800e526:	462b      	mov	r3, r5
 800e528:	f027 0720 	bic.w	r7, r7, #32
 800e52c:	bfbb      	ittet	lt
 800e52e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e532:	461d      	movlt	r5, r3
 800e534:	2300      	movge	r3, #0
 800e536:	232d      	movlt	r3, #45	; 0x2d
 800e538:	bfb8      	it	lt
 800e53a:	4614      	movlt	r4, r2
 800e53c:	2f46      	cmp	r7, #70	; 0x46
 800e53e:	700b      	strb	r3, [r1, #0]
 800e540:	d004      	beq.n	800e54c <__cvt+0x40>
 800e542:	2f45      	cmp	r7, #69	; 0x45
 800e544:	d100      	bne.n	800e548 <__cvt+0x3c>
 800e546:	3601      	adds	r6, #1
 800e548:	2102      	movs	r1, #2
 800e54a:	e000      	b.n	800e54e <__cvt+0x42>
 800e54c:	2103      	movs	r1, #3
 800e54e:	ab03      	add	r3, sp, #12
 800e550:	9301      	str	r3, [sp, #4]
 800e552:	ab02      	add	r3, sp, #8
 800e554:	9300      	str	r3, [sp, #0]
 800e556:	4632      	mov	r2, r6
 800e558:	4653      	mov	r3, sl
 800e55a:	ec45 4b10 	vmov	d0, r4, r5
 800e55e:	f000 fbbb 	bl	800ecd8 <_dtoa_r>
 800e562:	2f47      	cmp	r7, #71	; 0x47
 800e564:	4680      	mov	r8, r0
 800e566:	d102      	bne.n	800e56e <__cvt+0x62>
 800e568:	f019 0f01 	tst.w	r9, #1
 800e56c:	d026      	beq.n	800e5bc <__cvt+0xb0>
 800e56e:	2f46      	cmp	r7, #70	; 0x46
 800e570:	eb08 0906 	add.w	r9, r8, r6
 800e574:	d111      	bne.n	800e59a <__cvt+0x8e>
 800e576:	f898 3000 	ldrb.w	r3, [r8]
 800e57a:	2b30      	cmp	r3, #48	; 0x30
 800e57c:	d10a      	bne.n	800e594 <__cvt+0x88>
 800e57e:	2200      	movs	r2, #0
 800e580:	2300      	movs	r3, #0
 800e582:	4620      	mov	r0, r4
 800e584:	4629      	mov	r1, r5
 800e586:	f7f2 fa57 	bl	8000a38 <__aeabi_dcmpeq>
 800e58a:	b918      	cbnz	r0, 800e594 <__cvt+0x88>
 800e58c:	f1c6 0601 	rsb	r6, r6, #1
 800e590:	f8ca 6000 	str.w	r6, [sl]
 800e594:	f8da 3000 	ldr.w	r3, [sl]
 800e598:	4499      	add	r9, r3
 800e59a:	2200      	movs	r2, #0
 800e59c:	2300      	movs	r3, #0
 800e59e:	4620      	mov	r0, r4
 800e5a0:	4629      	mov	r1, r5
 800e5a2:	f7f2 fa49 	bl	8000a38 <__aeabi_dcmpeq>
 800e5a6:	b938      	cbnz	r0, 800e5b8 <__cvt+0xac>
 800e5a8:	2230      	movs	r2, #48	; 0x30
 800e5aa:	9b03      	ldr	r3, [sp, #12]
 800e5ac:	454b      	cmp	r3, r9
 800e5ae:	d205      	bcs.n	800e5bc <__cvt+0xb0>
 800e5b0:	1c59      	adds	r1, r3, #1
 800e5b2:	9103      	str	r1, [sp, #12]
 800e5b4:	701a      	strb	r2, [r3, #0]
 800e5b6:	e7f8      	b.n	800e5aa <__cvt+0x9e>
 800e5b8:	f8cd 900c 	str.w	r9, [sp, #12]
 800e5bc:	9b03      	ldr	r3, [sp, #12]
 800e5be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e5c0:	eba3 0308 	sub.w	r3, r3, r8
 800e5c4:	4640      	mov	r0, r8
 800e5c6:	6013      	str	r3, [r2, #0]
 800e5c8:	b004      	add	sp, #16
 800e5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e5ce <__exponent>:
 800e5ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5d0:	2900      	cmp	r1, #0
 800e5d2:	4604      	mov	r4, r0
 800e5d4:	bfba      	itte	lt
 800e5d6:	4249      	neglt	r1, r1
 800e5d8:	232d      	movlt	r3, #45	; 0x2d
 800e5da:	232b      	movge	r3, #43	; 0x2b
 800e5dc:	2909      	cmp	r1, #9
 800e5de:	f804 2b02 	strb.w	r2, [r4], #2
 800e5e2:	7043      	strb	r3, [r0, #1]
 800e5e4:	dd20      	ble.n	800e628 <__exponent+0x5a>
 800e5e6:	f10d 0307 	add.w	r3, sp, #7
 800e5ea:	461f      	mov	r7, r3
 800e5ec:	260a      	movs	r6, #10
 800e5ee:	fb91 f5f6 	sdiv	r5, r1, r6
 800e5f2:	fb06 1115 	mls	r1, r6, r5, r1
 800e5f6:	3130      	adds	r1, #48	; 0x30
 800e5f8:	2d09      	cmp	r5, #9
 800e5fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e5fe:	f103 32ff 	add.w	r2, r3, #4294967295
 800e602:	4629      	mov	r1, r5
 800e604:	dc09      	bgt.n	800e61a <__exponent+0x4c>
 800e606:	3130      	adds	r1, #48	; 0x30
 800e608:	3b02      	subs	r3, #2
 800e60a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e60e:	42bb      	cmp	r3, r7
 800e610:	4622      	mov	r2, r4
 800e612:	d304      	bcc.n	800e61e <__exponent+0x50>
 800e614:	1a10      	subs	r0, r2, r0
 800e616:	b003      	add	sp, #12
 800e618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e61a:	4613      	mov	r3, r2
 800e61c:	e7e7      	b.n	800e5ee <__exponent+0x20>
 800e61e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e622:	f804 2b01 	strb.w	r2, [r4], #1
 800e626:	e7f2      	b.n	800e60e <__exponent+0x40>
 800e628:	2330      	movs	r3, #48	; 0x30
 800e62a:	4419      	add	r1, r3
 800e62c:	7083      	strb	r3, [r0, #2]
 800e62e:	1d02      	adds	r2, r0, #4
 800e630:	70c1      	strb	r1, [r0, #3]
 800e632:	e7ef      	b.n	800e614 <__exponent+0x46>

0800e634 <_printf_float>:
 800e634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e638:	b08d      	sub	sp, #52	; 0x34
 800e63a:	460c      	mov	r4, r1
 800e63c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800e640:	4616      	mov	r6, r2
 800e642:	461f      	mov	r7, r3
 800e644:	4605      	mov	r5, r0
 800e646:	f001 f8ff 	bl	800f848 <_localeconv_r>
 800e64a:	6803      	ldr	r3, [r0, #0]
 800e64c:	9304      	str	r3, [sp, #16]
 800e64e:	4618      	mov	r0, r3
 800e650:	f7f1 fdc6 	bl	80001e0 <strlen>
 800e654:	2300      	movs	r3, #0
 800e656:	930a      	str	r3, [sp, #40]	; 0x28
 800e658:	f8d8 3000 	ldr.w	r3, [r8]
 800e65c:	9005      	str	r0, [sp, #20]
 800e65e:	3307      	adds	r3, #7
 800e660:	f023 0307 	bic.w	r3, r3, #7
 800e664:	f103 0208 	add.w	r2, r3, #8
 800e668:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e66c:	f8d4 b000 	ldr.w	fp, [r4]
 800e670:	f8c8 2000 	str.w	r2, [r8]
 800e674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e678:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e67c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e680:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e684:	9307      	str	r3, [sp, #28]
 800e686:	f8cd 8018 	str.w	r8, [sp, #24]
 800e68a:	f04f 32ff 	mov.w	r2, #4294967295
 800e68e:	4ba7      	ldr	r3, [pc, #668]	; (800e92c <_printf_float+0x2f8>)
 800e690:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e694:	f7f2 fa02 	bl	8000a9c <__aeabi_dcmpun>
 800e698:	bb70      	cbnz	r0, 800e6f8 <_printf_float+0xc4>
 800e69a:	f04f 32ff 	mov.w	r2, #4294967295
 800e69e:	4ba3      	ldr	r3, [pc, #652]	; (800e92c <_printf_float+0x2f8>)
 800e6a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e6a4:	f7f2 f9dc 	bl	8000a60 <__aeabi_dcmple>
 800e6a8:	bb30      	cbnz	r0, 800e6f8 <_printf_float+0xc4>
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	4640      	mov	r0, r8
 800e6b0:	4649      	mov	r1, r9
 800e6b2:	f7f2 f9cb 	bl	8000a4c <__aeabi_dcmplt>
 800e6b6:	b110      	cbz	r0, 800e6be <_printf_float+0x8a>
 800e6b8:	232d      	movs	r3, #45	; 0x2d
 800e6ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6be:	4a9c      	ldr	r2, [pc, #624]	; (800e930 <_printf_float+0x2fc>)
 800e6c0:	4b9c      	ldr	r3, [pc, #624]	; (800e934 <_printf_float+0x300>)
 800e6c2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e6c6:	bf8c      	ite	hi
 800e6c8:	4690      	movhi	r8, r2
 800e6ca:	4698      	movls	r8, r3
 800e6cc:	2303      	movs	r3, #3
 800e6ce:	f02b 0204 	bic.w	r2, fp, #4
 800e6d2:	6123      	str	r3, [r4, #16]
 800e6d4:	6022      	str	r2, [r4, #0]
 800e6d6:	f04f 0900 	mov.w	r9, #0
 800e6da:	9700      	str	r7, [sp, #0]
 800e6dc:	4633      	mov	r3, r6
 800e6de:	aa0b      	add	r2, sp, #44	; 0x2c
 800e6e0:	4621      	mov	r1, r4
 800e6e2:	4628      	mov	r0, r5
 800e6e4:	f000 f9e6 	bl	800eab4 <_printf_common>
 800e6e8:	3001      	adds	r0, #1
 800e6ea:	f040 808d 	bne.w	800e808 <_printf_float+0x1d4>
 800e6ee:	f04f 30ff 	mov.w	r0, #4294967295
 800e6f2:	b00d      	add	sp, #52	; 0x34
 800e6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6f8:	4642      	mov	r2, r8
 800e6fa:	464b      	mov	r3, r9
 800e6fc:	4640      	mov	r0, r8
 800e6fe:	4649      	mov	r1, r9
 800e700:	f7f2 f9cc 	bl	8000a9c <__aeabi_dcmpun>
 800e704:	b110      	cbz	r0, 800e70c <_printf_float+0xd8>
 800e706:	4a8c      	ldr	r2, [pc, #560]	; (800e938 <_printf_float+0x304>)
 800e708:	4b8c      	ldr	r3, [pc, #560]	; (800e93c <_printf_float+0x308>)
 800e70a:	e7da      	b.n	800e6c2 <_printf_float+0x8e>
 800e70c:	6861      	ldr	r1, [r4, #4]
 800e70e:	1c4b      	adds	r3, r1, #1
 800e710:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800e714:	a80a      	add	r0, sp, #40	; 0x28
 800e716:	d13e      	bne.n	800e796 <_printf_float+0x162>
 800e718:	2306      	movs	r3, #6
 800e71a:	6063      	str	r3, [r4, #4]
 800e71c:	2300      	movs	r3, #0
 800e71e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e722:	ab09      	add	r3, sp, #36	; 0x24
 800e724:	9300      	str	r3, [sp, #0]
 800e726:	ec49 8b10 	vmov	d0, r8, r9
 800e72a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e72e:	6022      	str	r2, [r4, #0]
 800e730:	f8cd a004 	str.w	sl, [sp, #4]
 800e734:	6861      	ldr	r1, [r4, #4]
 800e736:	4628      	mov	r0, r5
 800e738:	f7ff fee8 	bl	800e50c <__cvt>
 800e73c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800e740:	2b47      	cmp	r3, #71	; 0x47
 800e742:	4680      	mov	r8, r0
 800e744:	d109      	bne.n	800e75a <_printf_float+0x126>
 800e746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e748:	1cd8      	adds	r0, r3, #3
 800e74a:	db02      	blt.n	800e752 <_printf_float+0x11e>
 800e74c:	6862      	ldr	r2, [r4, #4]
 800e74e:	4293      	cmp	r3, r2
 800e750:	dd47      	ble.n	800e7e2 <_printf_float+0x1ae>
 800e752:	f1aa 0a02 	sub.w	sl, sl, #2
 800e756:	fa5f fa8a 	uxtb.w	sl, sl
 800e75a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e75e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e760:	d824      	bhi.n	800e7ac <_printf_float+0x178>
 800e762:	3901      	subs	r1, #1
 800e764:	4652      	mov	r2, sl
 800e766:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e76a:	9109      	str	r1, [sp, #36]	; 0x24
 800e76c:	f7ff ff2f 	bl	800e5ce <__exponent>
 800e770:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e772:	1813      	adds	r3, r2, r0
 800e774:	2a01      	cmp	r2, #1
 800e776:	4681      	mov	r9, r0
 800e778:	6123      	str	r3, [r4, #16]
 800e77a:	dc02      	bgt.n	800e782 <_printf_float+0x14e>
 800e77c:	6822      	ldr	r2, [r4, #0]
 800e77e:	07d1      	lsls	r1, r2, #31
 800e780:	d501      	bpl.n	800e786 <_printf_float+0x152>
 800e782:	3301      	adds	r3, #1
 800e784:	6123      	str	r3, [r4, #16]
 800e786:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d0a5      	beq.n	800e6da <_printf_float+0xa6>
 800e78e:	232d      	movs	r3, #45	; 0x2d
 800e790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e794:	e7a1      	b.n	800e6da <_printf_float+0xa6>
 800e796:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800e79a:	f000 8177 	beq.w	800ea8c <_printf_float+0x458>
 800e79e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e7a2:	d1bb      	bne.n	800e71c <_printf_float+0xe8>
 800e7a4:	2900      	cmp	r1, #0
 800e7a6:	d1b9      	bne.n	800e71c <_printf_float+0xe8>
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	e7b6      	b.n	800e71a <_printf_float+0xe6>
 800e7ac:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800e7b0:	d119      	bne.n	800e7e6 <_printf_float+0x1b2>
 800e7b2:	2900      	cmp	r1, #0
 800e7b4:	6863      	ldr	r3, [r4, #4]
 800e7b6:	dd0c      	ble.n	800e7d2 <_printf_float+0x19e>
 800e7b8:	6121      	str	r1, [r4, #16]
 800e7ba:	b913      	cbnz	r3, 800e7c2 <_printf_float+0x18e>
 800e7bc:	6822      	ldr	r2, [r4, #0]
 800e7be:	07d2      	lsls	r2, r2, #31
 800e7c0:	d502      	bpl.n	800e7c8 <_printf_float+0x194>
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	440b      	add	r3, r1
 800e7c6:	6123      	str	r3, [r4, #16]
 800e7c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7ca:	65a3      	str	r3, [r4, #88]	; 0x58
 800e7cc:	f04f 0900 	mov.w	r9, #0
 800e7d0:	e7d9      	b.n	800e786 <_printf_float+0x152>
 800e7d2:	b913      	cbnz	r3, 800e7da <_printf_float+0x1a6>
 800e7d4:	6822      	ldr	r2, [r4, #0]
 800e7d6:	07d0      	lsls	r0, r2, #31
 800e7d8:	d501      	bpl.n	800e7de <_printf_float+0x1aa>
 800e7da:	3302      	adds	r3, #2
 800e7dc:	e7f3      	b.n	800e7c6 <_printf_float+0x192>
 800e7de:	2301      	movs	r3, #1
 800e7e0:	e7f1      	b.n	800e7c6 <_printf_float+0x192>
 800e7e2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800e7e6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e7ea:	4293      	cmp	r3, r2
 800e7ec:	db05      	blt.n	800e7fa <_printf_float+0x1c6>
 800e7ee:	6822      	ldr	r2, [r4, #0]
 800e7f0:	6123      	str	r3, [r4, #16]
 800e7f2:	07d1      	lsls	r1, r2, #31
 800e7f4:	d5e8      	bpl.n	800e7c8 <_printf_float+0x194>
 800e7f6:	3301      	adds	r3, #1
 800e7f8:	e7e5      	b.n	800e7c6 <_printf_float+0x192>
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	bfd4      	ite	le
 800e7fe:	f1c3 0302 	rsble	r3, r3, #2
 800e802:	2301      	movgt	r3, #1
 800e804:	4413      	add	r3, r2
 800e806:	e7de      	b.n	800e7c6 <_printf_float+0x192>
 800e808:	6823      	ldr	r3, [r4, #0]
 800e80a:	055a      	lsls	r2, r3, #21
 800e80c:	d407      	bmi.n	800e81e <_printf_float+0x1ea>
 800e80e:	6923      	ldr	r3, [r4, #16]
 800e810:	4642      	mov	r2, r8
 800e812:	4631      	mov	r1, r6
 800e814:	4628      	mov	r0, r5
 800e816:	47b8      	blx	r7
 800e818:	3001      	adds	r0, #1
 800e81a:	d12b      	bne.n	800e874 <_printf_float+0x240>
 800e81c:	e767      	b.n	800e6ee <_printf_float+0xba>
 800e81e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e822:	f240 80dc 	bls.w	800e9de <_printf_float+0x3aa>
 800e826:	2200      	movs	r2, #0
 800e828:	2300      	movs	r3, #0
 800e82a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e82e:	f7f2 f903 	bl	8000a38 <__aeabi_dcmpeq>
 800e832:	2800      	cmp	r0, #0
 800e834:	d033      	beq.n	800e89e <_printf_float+0x26a>
 800e836:	2301      	movs	r3, #1
 800e838:	4a41      	ldr	r2, [pc, #260]	; (800e940 <_printf_float+0x30c>)
 800e83a:	4631      	mov	r1, r6
 800e83c:	4628      	mov	r0, r5
 800e83e:	47b8      	blx	r7
 800e840:	3001      	adds	r0, #1
 800e842:	f43f af54 	beq.w	800e6ee <_printf_float+0xba>
 800e846:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e84a:	429a      	cmp	r2, r3
 800e84c:	db02      	blt.n	800e854 <_printf_float+0x220>
 800e84e:	6823      	ldr	r3, [r4, #0]
 800e850:	07d8      	lsls	r0, r3, #31
 800e852:	d50f      	bpl.n	800e874 <_printf_float+0x240>
 800e854:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e858:	4631      	mov	r1, r6
 800e85a:	4628      	mov	r0, r5
 800e85c:	47b8      	blx	r7
 800e85e:	3001      	adds	r0, #1
 800e860:	f43f af45 	beq.w	800e6ee <_printf_float+0xba>
 800e864:	f04f 0800 	mov.w	r8, #0
 800e868:	f104 091a 	add.w	r9, r4, #26
 800e86c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e86e:	3b01      	subs	r3, #1
 800e870:	4543      	cmp	r3, r8
 800e872:	dc09      	bgt.n	800e888 <_printf_float+0x254>
 800e874:	6823      	ldr	r3, [r4, #0]
 800e876:	079b      	lsls	r3, r3, #30
 800e878:	f100 8103 	bmi.w	800ea82 <_printf_float+0x44e>
 800e87c:	68e0      	ldr	r0, [r4, #12]
 800e87e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e880:	4298      	cmp	r0, r3
 800e882:	bfb8      	it	lt
 800e884:	4618      	movlt	r0, r3
 800e886:	e734      	b.n	800e6f2 <_printf_float+0xbe>
 800e888:	2301      	movs	r3, #1
 800e88a:	464a      	mov	r2, r9
 800e88c:	4631      	mov	r1, r6
 800e88e:	4628      	mov	r0, r5
 800e890:	47b8      	blx	r7
 800e892:	3001      	adds	r0, #1
 800e894:	f43f af2b 	beq.w	800e6ee <_printf_float+0xba>
 800e898:	f108 0801 	add.w	r8, r8, #1
 800e89c:	e7e6      	b.n	800e86c <_printf_float+0x238>
 800e89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	dc2b      	bgt.n	800e8fc <_printf_float+0x2c8>
 800e8a4:	2301      	movs	r3, #1
 800e8a6:	4a26      	ldr	r2, [pc, #152]	; (800e940 <_printf_float+0x30c>)
 800e8a8:	4631      	mov	r1, r6
 800e8aa:	4628      	mov	r0, r5
 800e8ac:	47b8      	blx	r7
 800e8ae:	3001      	adds	r0, #1
 800e8b0:	f43f af1d 	beq.w	800e6ee <_printf_float+0xba>
 800e8b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8b6:	b923      	cbnz	r3, 800e8c2 <_printf_float+0x28e>
 800e8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8ba:	b913      	cbnz	r3, 800e8c2 <_printf_float+0x28e>
 800e8bc:	6823      	ldr	r3, [r4, #0]
 800e8be:	07d9      	lsls	r1, r3, #31
 800e8c0:	d5d8      	bpl.n	800e874 <_printf_float+0x240>
 800e8c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8c6:	4631      	mov	r1, r6
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	47b8      	blx	r7
 800e8cc:	3001      	adds	r0, #1
 800e8ce:	f43f af0e 	beq.w	800e6ee <_printf_float+0xba>
 800e8d2:	f04f 0900 	mov.w	r9, #0
 800e8d6:	f104 0a1a 	add.w	sl, r4, #26
 800e8da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8dc:	425b      	negs	r3, r3
 800e8de:	454b      	cmp	r3, r9
 800e8e0:	dc01      	bgt.n	800e8e6 <_printf_float+0x2b2>
 800e8e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8e4:	e794      	b.n	800e810 <_printf_float+0x1dc>
 800e8e6:	2301      	movs	r3, #1
 800e8e8:	4652      	mov	r2, sl
 800e8ea:	4631      	mov	r1, r6
 800e8ec:	4628      	mov	r0, r5
 800e8ee:	47b8      	blx	r7
 800e8f0:	3001      	adds	r0, #1
 800e8f2:	f43f aefc 	beq.w	800e6ee <_printf_float+0xba>
 800e8f6:	f109 0901 	add.w	r9, r9, #1
 800e8fa:	e7ee      	b.n	800e8da <_printf_float+0x2a6>
 800e8fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e8fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e900:	429a      	cmp	r2, r3
 800e902:	bfa8      	it	ge
 800e904:	461a      	movge	r2, r3
 800e906:	2a00      	cmp	r2, #0
 800e908:	4691      	mov	r9, r2
 800e90a:	dd07      	ble.n	800e91c <_printf_float+0x2e8>
 800e90c:	4613      	mov	r3, r2
 800e90e:	4631      	mov	r1, r6
 800e910:	4642      	mov	r2, r8
 800e912:	4628      	mov	r0, r5
 800e914:	47b8      	blx	r7
 800e916:	3001      	adds	r0, #1
 800e918:	f43f aee9 	beq.w	800e6ee <_printf_float+0xba>
 800e91c:	f104 031a 	add.w	r3, r4, #26
 800e920:	f04f 0b00 	mov.w	fp, #0
 800e924:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e928:	9306      	str	r3, [sp, #24]
 800e92a:	e015      	b.n	800e958 <_printf_float+0x324>
 800e92c:	7fefffff 	.word	0x7fefffff
 800e930:	0800ff78 	.word	0x0800ff78
 800e934:	0800ff74 	.word	0x0800ff74
 800e938:	0800ff80 	.word	0x0800ff80
 800e93c:	0800ff7c 	.word	0x0800ff7c
 800e940:	0800ff84 	.word	0x0800ff84
 800e944:	2301      	movs	r3, #1
 800e946:	9a06      	ldr	r2, [sp, #24]
 800e948:	4631      	mov	r1, r6
 800e94a:	4628      	mov	r0, r5
 800e94c:	47b8      	blx	r7
 800e94e:	3001      	adds	r0, #1
 800e950:	f43f aecd 	beq.w	800e6ee <_printf_float+0xba>
 800e954:	f10b 0b01 	add.w	fp, fp, #1
 800e958:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800e95c:	ebaa 0309 	sub.w	r3, sl, r9
 800e960:	455b      	cmp	r3, fp
 800e962:	dcef      	bgt.n	800e944 <_printf_float+0x310>
 800e964:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e968:	429a      	cmp	r2, r3
 800e96a:	44d0      	add	r8, sl
 800e96c:	db15      	blt.n	800e99a <_printf_float+0x366>
 800e96e:	6823      	ldr	r3, [r4, #0]
 800e970:	07da      	lsls	r2, r3, #31
 800e972:	d412      	bmi.n	800e99a <_printf_float+0x366>
 800e974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e976:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e978:	eba3 020a 	sub.w	r2, r3, sl
 800e97c:	eba3 0a01 	sub.w	sl, r3, r1
 800e980:	4592      	cmp	sl, r2
 800e982:	bfa8      	it	ge
 800e984:	4692      	movge	sl, r2
 800e986:	f1ba 0f00 	cmp.w	sl, #0
 800e98a:	dc0e      	bgt.n	800e9aa <_printf_float+0x376>
 800e98c:	f04f 0800 	mov.w	r8, #0
 800e990:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e994:	f104 091a 	add.w	r9, r4, #26
 800e998:	e019      	b.n	800e9ce <_printf_float+0x39a>
 800e99a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e99e:	4631      	mov	r1, r6
 800e9a0:	4628      	mov	r0, r5
 800e9a2:	47b8      	blx	r7
 800e9a4:	3001      	adds	r0, #1
 800e9a6:	d1e5      	bne.n	800e974 <_printf_float+0x340>
 800e9a8:	e6a1      	b.n	800e6ee <_printf_float+0xba>
 800e9aa:	4653      	mov	r3, sl
 800e9ac:	4642      	mov	r2, r8
 800e9ae:	4631      	mov	r1, r6
 800e9b0:	4628      	mov	r0, r5
 800e9b2:	47b8      	blx	r7
 800e9b4:	3001      	adds	r0, #1
 800e9b6:	d1e9      	bne.n	800e98c <_printf_float+0x358>
 800e9b8:	e699      	b.n	800e6ee <_printf_float+0xba>
 800e9ba:	2301      	movs	r3, #1
 800e9bc:	464a      	mov	r2, r9
 800e9be:	4631      	mov	r1, r6
 800e9c0:	4628      	mov	r0, r5
 800e9c2:	47b8      	blx	r7
 800e9c4:	3001      	adds	r0, #1
 800e9c6:	f43f ae92 	beq.w	800e6ee <_printf_float+0xba>
 800e9ca:	f108 0801 	add.w	r8, r8, #1
 800e9ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e9d2:	1a9b      	subs	r3, r3, r2
 800e9d4:	eba3 030a 	sub.w	r3, r3, sl
 800e9d8:	4543      	cmp	r3, r8
 800e9da:	dcee      	bgt.n	800e9ba <_printf_float+0x386>
 800e9dc:	e74a      	b.n	800e874 <_printf_float+0x240>
 800e9de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9e0:	2a01      	cmp	r2, #1
 800e9e2:	dc01      	bgt.n	800e9e8 <_printf_float+0x3b4>
 800e9e4:	07db      	lsls	r3, r3, #31
 800e9e6:	d53a      	bpl.n	800ea5e <_printf_float+0x42a>
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	4642      	mov	r2, r8
 800e9ec:	4631      	mov	r1, r6
 800e9ee:	4628      	mov	r0, r5
 800e9f0:	47b8      	blx	r7
 800e9f2:	3001      	adds	r0, #1
 800e9f4:	f43f ae7b 	beq.w	800e6ee <_printf_float+0xba>
 800e9f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9fc:	4631      	mov	r1, r6
 800e9fe:	4628      	mov	r0, r5
 800ea00:	47b8      	blx	r7
 800ea02:	3001      	adds	r0, #1
 800ea04:	f108 0801 	add.w	r8, r8, #1
 800ea08:	f43f ae71 	beq.w	800e6ee <_printf_float+0xba>
 800ea0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea0e:	2200      	movs	r2, #0
 800ea10:	f103 3aff 	add.w	sl, r3, #4294967295
 800ea14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ea18:	2300      	movs	r3, #0
 800ea1a:	f7f2 f80d 	bl	8000a38 <__aeabi_dcmpeq>
 800ea1e:	b9c8      	cbnz	r0, 800ea54 <_printf_float+0x420>
 800ea20:	4653      	mov	r3, sl
 800ea22:	4642      	mov	r2, r8
 800ea24:	4631      	mov	r1, r6
 800ea26:	4628      	mov	r0, r5
 800ea28:	47b8      	blx	r7
 800ea2a:	3001      	adds	r0, #1
 800ea2c:	d10e      	bne.n	800ea4c <_printf_float+0x418>
 800ea2e:	e65e      	b.n	800e6ee <_printf_float+0xba>
 800ea30:	2301      	movs	r3, #1
 800ea32:	4652      	mov	r2, sl
 800ea34:	4631      	mov	r1, r6
 800ea36:	4628      	mov	r0, r5
 800ea38:	47b8      	blx	r7
 800ea3a:	3001      	adds	r0, #1
 800ea3c:	f43f ae57 	beq.w	800e6ee <_printf_float+0xba>
 800ea40:	f108 0801 	add.w	r8, r8, #1
 800ea44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea46:	3b01      	subs	r3, #1
 800ea48:	4543      	cmp	r3, r8
 800ea4a:	dcf1      	bgt.n	800ea30 <_printf_float+0x3fc>
 800ea4c:	464b      	mov	r3, r9
 800ea4e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ea52:	e6de      	b.n	800e812 <_printf_float+0x1de>
 800ea54:	f04f 0800 	mov.w	r8, #0
 800ea58:	f104 0a1a 	add.w	sl, r4, #26
 800ea5c:	e7f2      	b.n	800ea44 <_printf_float+0x410>
 800ea5e:	2301      	movs	r3, #1
 800ea60:	e7df      	b.n	800ea22 <_printf_float+0x3ee>
 800ea62:	2301      	movs	r3, #1
 800ea64:	464a      	mov	r2, r9
 800ea66:	4631      	mov	r1, r6
 800ea68:	4628      	mov	r0, r5
 800ea6a:	47b8      	blx	r7
 800ea6c:	3001      	adds	r0, #1
 800ea6e:	f43f ae3e 	beq.w	800e6ee <_printf_float+0xba>
 800ea72:	f108 0801 	add.w	r8, r8, #1
 800ea76:	68e3      	ldr	r3, [r4, #12]
 800ea78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ea7a:	1a9b      	subs	r3, r3, r2
 800ea7c:	4543      	cmp	r3, r8
 800ea7e:	dcf0      	bgt.n	800ea62 <_printf_float+0x42e>
 800ea80:	e6fc      	b.n	800e87c <_printf_float+0x248>
 800ea82:	f04f 0800 	mov.w	r8, #0
 800ea86:	f104 0919 	add.w	r9, r4, #25
 800ea8a:	e7f4      	b.n	800ea76 <_printf_float+0x442>
 800ea8c:	2900      	cmp	r1, #0
 800ea8e:	f43f ae8b 	beq.w	800e7a8 <_printf_float+0x174>
 800ea92:	2300      	movs	r3, #0
 800ea94:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ea98:	ab09      	add	r3, sp, #36	; 0x24
 800ea9a:	9300      	str	r3, [sp, #0]
 800ea9c:	ec49 8b10 	vmov	d0, r8, r9
 800eaa0:	6022      	str	r2, [r4, #0]
 800eaa2:	f8cd a004 	str.w	sl, [sp, #4]
 800eaa6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eaaa:	4628      	mov	r0, r5
 800eaac:	f7ff fd2e 	bl	800e50c <__cvt>
 800eab0:	4680      	mov	r8, r0
 800eab2:	e648      	b.n	800e746 <_printf_float+0x112>

0800eab4 <_printf_common>:
 800eab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eab8:	4691      	mov	r9, r2
 800eaba:	461f      	mov	r7, r3
 800eabc:	688a      	ldr	r2, [r1, #8]
 800eabe:	690b      	ldr	r3, [r1, #16]
 800eac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eac4:	4293      	cmp	r3, r2
 800eac6:	bfb8      	it	lt
 800eac8:	4613      	movlt	r3, r2
 800eaca:	f8c9 3000 	str.w	r3, [r9]
 800eace:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ead2:	4606      	mov	r6, r0
 800ead4:	460c      	mov	r4, r1
 800ead6:	b112      	cbz	r2, 800eade <_printf_common+0x2a>
 800ead8:	3301      	adds	r3, #1
 800eada:	f8c9 3000 	str.w	r3, [r9]
 800eade:	6823      	ldr	r3, [r4, #0]
 800eae0:	0699      	lsls	r1, r3, #26
 800eae2:	bf42      	ittt	mi
 800eae4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800eae8:	3302      	addmi	r3, #2
 800eaea:	f8c9 3000 	strmi.w	r3, [r9]
 800eaee:	6825      	ldr	r5, [r4, #0]
 800eaf0:	f015 0506 	ands.w	r5, r5, #6
 800eaf4:	d107      	bne.n	800eb06 <_printf_common+0x52>
 800eaf6:	f104 0a19 	add.w	sl, r4, #25
 800eafa:	68e3      	ldr	r3, [r4, #12]
 800eafc:	f8d9 2000 	ldr.w	r2, [r9]
 800eb00:	1a9b      	subs	r3, r3, r2
 800eb02:	42ab      	cmp	r3, r5
 800eb04:	dc28      	bgt.n	800eb58 <_printf_common+0xa4>
 800eb06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800eb0a:	6822      	ldr	r2, [r4, #0]
 800eb0c:	3300      	adds	r3, #0
 800eb0e:	bf18      	it	ne
 800eb10:	2301      	movne	r3, #1
 800eb12:	0692      	lsls	r2, r2, #26
 800eb14:	d42d      	bmi.n	800eb72 <_printf_common+0xbe>
 800eb16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb1a:	4639      	mov	r1, r7
 800eb1c:	4630      	mov	r0, r6
 800eb1e:	47c0      	blx	r8
 800eb20:	3001      	adds	r0, #1
 800eb22:	d020      	beq.n	800eb66 <_printf_common+0xb2>
 800eb24:	6823      	ldr	r3, [r4, #0]
 800eb26:	68e5      	ldr	r5, [r4, #12]
 800eb28:	f8d9 2000 	ldr.w	r2, [r9]
 800eb2c:	f003 0306 	and.w	r3, r3, #6
 800eb30:	2b04      	cmp	r3, #4
 800eb32:	bf08      	it	eq
 800eb34:	1aad      	subeq	r5, r5, r2
 800eb36:	68a3      	ldr	r3, [r4, #8]
 800eb38:	6922      	ldr	r2, [r4, #16]
 800eb3a:	bf0c      	ite	eq
 800eb3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb40:	2500      	movne	r5, #0
 800eb42:	4293      	cmp	r3, r2
 800eb44:	bfc4      	itt	gt
 800eb46:	1a9b      	subgt	r3, r3, r2
 800eb48:	18ed      	addgt	r5, r5, r3
 800eb4a:	f04f 0900 	mov.w	r9, #0
 800eb4e:	341a      	adds	r4, #26
 800eb50:	454d      	cmp	r5, r9
 800eb52:	d11a      	bne.n	800eb8a <_printf_common+0xd6>
 800eb54:	2000      	movs	r0, #0
 800eb56:	e008      	b.n	800eb6a <_printf_common+0xb6>
 800eb58:	2301      	movs	r3, #1
 800eb5a:	4652      	mov	r2, sl
 800eb5c:	4639      	mov	r1, r7
 800eb5e:	4630      	mov	r0, r6
 800eb60:	47c0      	blx	r8
 800eb62:	3001      	adds	r0, #1
 800eb64:	d103      	bne.n	800eb6e <_printf_common+0xba>
 800eb66:	f04f 30ff 	mov.w	r0, #4294967295
 800eb6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb6e:	3501      	adds	r5, #1
 800eb70:	e7c3      	b.n	800eafa <_printf_common+0x46>
 800eb72:	18e1      	adds	r1, r4, r3
 800eb74:	1c5a      	adds	r2, r3, #1
 800eb76:	2030      	movs	r0, #48	; 0x30
 800eb78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eb7c:	4422      	add	r2, r4
 800eb7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eb82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eb86:	3302      	adds	r3, #2
 800eb88:	e7c5      	b.n	800eb16 <_printf_common+0x62>
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	4622      	mov	r2, r4
 800eb8e:	4639      	mov	r1, r7
 800eb90:	4630      	mov	r0, r6
 800eb92:	47c0      	blx	r8
 800eb94:	3001      	adds	r0, #1
 800eb96:	d0e6      	beq.n	800eb66 <_printf_common+0xb2>
 800eb98:	f109 0901 	add.w	r9, r9, #1
 800eb9c:	e7d8      	b.n	800eb50 <_printf_common+0x9c>
	...

0800eba0 <_sbrk_r>:
 800eba0:	b538      	push	{r3, r4, r5, lr}
 800eba2:	4c06      	ldr	r4, [pc, #24]	; (800ebbc <_sbrk_r+0x1c>)
 800eba4:	2300      	movs	r3, #0
 800eba6:	4605      	mov	r5, r0
 800eba8:	4608      	mov	r0, r1
 800ebaa:	6023      	str	r3, [r4, #0]
 800ebac:	f7f4 f81e 	bl	8002bec <_sbrk>
 800ebb0:	1c43      	adds	r3, r0, #1
 800ebb2:	d102      	bne.n	800ebba <_sbrk_r+0x1a>
 800ebb4:	6823      	ldr	r3, [r4, #0]
 800ebb6:	b103      	cbz	r3, 800ebba <_sbrk_r+0x1a>
 800ebb8:	602b      	str	r3, [r5, #0]
 800ebba:	bd38      	pop	{r3, r4, r5, pc}
 800ebbc:	2000ab94 	.word	0x2000ab94

0800ebc0 <quorem>:
 800ebc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebc4:	6903      	ldr	r3, [r0, #16]
 800ebc6:	690c      	ldr	r4, [r1, #16]
 800ebc8:	42a3      	cmp	r3, r4
 800ebca:	4680      	mov	r8, r0
 800ebcc:	f2c0 8082 	blt.w	800ecd4 <quorem+0x114>
 800ebd0:	3c01      	subs	r4, #1
 800ebd2:	f101 0714 	add.w	r7, r1, #20
 800ebd6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ebda:	f100 0614 	add.w	r6, r0, #20
 800ebde:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ebe2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ebe6:	eb06 030c 	add.w	r3, r6, ip
 800ebea:	3501      	adds	r5, #1
 800ebec:	eb07 090c 	add.w	r9, r7, ip
 800ebf0:	9301      	str	r3, [sp, #4]
 800ebf2:	fbb0 f5f5 	udiv	r5, r0, r5
 800ebf6:	b395      	cbz	r5, 800ec5e <quorem+0x9e>
 800ebf8:	f04f 0a00 	mov.w	sl, #0
 800ebfc:	4638      	mov	r0, r7
 800ebfe:	46b6      	mov	lr, r6
 800ec00:	46d3      	mov	fp, sl
 800ec02:	f850 2b04 	ldr.w	r2, [r0], #4
 800ec06:	b293      	uxth	r3, r2
 800ec08:	fb05 a303 	mla	r3, r5, r3, sl
 800ec0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	ebab 0303 	sub.w	r3, fp, r3
 800ec16:	0c12      	lsrs	r2, r2, #16
 800ec18:	f8de b000 	ldr.w	fp, [lr]
 800ec1c:	fb05 a202 	mla	r2, r5, r2, sl
 800ec20:	fa13 f38b 	uxtah	r3, r3, fp
 800ec24:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ec28:	fa1f fb82 	uxth.w	fp, r2
 800ec2c:	f8de 2000 	ldr.w	r2, [lr]
 800ec30:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ec34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ec38:	b29b      	uxth	r3, r3
 800ec3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec3e:	4581      	cmp	r9, r0
 800ec40:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ec44:	f84e 3b04 	str.w	r3, [lr], #4
 800ec48:	d2db      	bcs.n	800ec02 <quorem+0x42>
 800ec4a:	f856 300c 	ldr.w	r3, [r6, ip]
 800ec4e:	b933      	cbnz	r3, 800ec5e <quorem+0x9e>
 800ec50:	9b01      	ldr	r3, [sp, #4]
 800ec52:	3b04      	subs	r3, #4
 800ec54:	429e      	cmp	r6, r3
 800ec56:	461a      	mov	r2, r3
 800ec58:	d330      	bcc.n	800ecbc <quorem+0xfc>
 800ec5a:	f8c8 4010 	str.w	r4, [r8, #16]
 800ec5e:	4640      	mov	r0, r8
 800ec60:	f001 f818 	bl	800fc94 <__mcmp>
 800ec64:	2800      	cmp	r0, #0
 800ec66:	db25      	blt.n	800ecb4 <quorem+0xf4>
 800ec68:	3501      	adds	r5, #1
 800ec6a:	4630      	mov	r0, r6
 800ec6c:	f04f 0c00 	mov.w	ip, #0
 800ec70:	f857 2b04 	ldr.w	r2, [r7], #4
 800ec74:	f8d0 e000 	ldr.w	lr, [r0]
 800ec78:	b293      	uxth	r3, r2
 800ec7a:	ebac 0303 	sub.w	r3, ip, r3
 800ec7e:	0c12      	lsrs	r2, r2, #16
 800ec80:	fa13 f38e 	uxtah	r3, r3, lr
 800ec84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ec88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ec8c:	b29b      	uxth	r3, r3
 800ec8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec92:	45b9      	cmp	r9, r7
 800ec94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ec98:	f840 3b04 	str.w	r3, [r0], #4
 800ec9c:	d2e8      	bcs.n	800ec70 <quorem+0xb0>
 800ec9e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800eca2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800eca6:	b92a      	cbnz	r2, 800ecb4 <quorem+0xf4>
 800eca8:	3b04      	subs	r3, #4
 800ecaa:	429e      	cmp	r6, r3
 800ecac:	461a      	mov	r2, r3
 800ecae:	d30b      	bcc.n	800ecc8 <quorem+0x108>
 800ecb0:	f8c8 4010 	str.w	r4, [r8, #16]
 800ecb4:	4628      	mov	r0, r5
 800ecb6:	b003      	add	sp, #12
 800ecb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecbc:	6812      	ldr	r2, [r2, #0]
 800ecbe:	3b04      	subs	r3, #4
 800ecc0:	2a00      	cmp	r2, #0
 800ecc2:	d1ca      	bne.n	800ec5a <quorem+0x9a>
 800ecc4:	3c01      	subs	r4, #1
 800ecc6:	e7c5      	b.n	800ec54 <quorem+0x94>
 800ecc8:	6812      	ldr	r2, [r2, #0]
 800ecca:	3b04      	subs	r3, #4
 800eccc:	2a00      	cmp	r2, #0
 800ecce:	d1ef      	bne.n	800ecb0 <quorem+0xf0>
 800ecd0:	3c01      	subs	r4, #1
 800ecd2:	e7ea      	b.n	800ecaa <quorem+0xea>
 800ecd4:	2000      	movs	r0, #0
 800ecd6:	e7ee      	b.n	800ecb6 <quorem+0xf6>

0800ecd8 <_dtoa_r>:
 800ecd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecdc:	ec57 6b10 	vmov	r6, r7, d0
 800ece0:	b097      	sub	sp, #92	; 0x5c
 800ece2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ece4:	9106      	str	r1, [sp, #24]
 800ece6:	4604      	mov	r4, r0
 800ece8:	920b      	str	r2, [sp, #44]	; 0x2c
 800ecea:	9312      	str	r3, [sp, #72]	; 0x48
 800ecec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ecf0:	e9cd 6700 	strd	r6, r7, [sp]
 800ecf4:	b93d      	cbnz	r5, 800ed06 <_dtoa_r+0x2e>
 800ecf6:	2010      	movs	r0, #16
 800ecf8:	f7ff fb3c 	bl	800e374 <malloc>
 800ecfc:	6260      	str	r0, [r4, #36]	; 0x24
 800ecfe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ed02:	6005      	str	r5, [r0, #0]
 800ed04:	60c5      	str	r5, [r0, #12]
 800ed06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed08:	6819      	ldr	r1, [r3, #0]
 800ed0a:	b151      	cbz	r1, 800ed22 <_dtoa_r+0x4a>
 800ed0c:	685a      	ldr	r2, [r3, #4]
 800ed0e:	604a      	str	r2, [r1, #4]
 800ed10:	2301      	movs	r3, #1
 800ed12:	4093      	lsls	r3, r2
 800ed14:	608b      	str	r3, [r1, #8]
 800ed16:	4620      	mov	r0, r4
 800ed18:	f000 fdda 	bl	800f8d0 <_Bfree>
 800ed1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed1e:	2200      	movs	r2, #0
 800ed20:	601a      	str	r2, [r3, #0]
 800ed22:	1e3b      	subs	r3, r7, #0
 800ed24:	bfbb      	ittet	lt
 800ed26:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ed2a:	9301      	strlt	r3, [sp, #4]
 800ed2c:	2300      	movge	r3, #0
 800ed2e:	2201      	movlt	r2, #1
 800ed30:	bfac      	ite	ge
 800ed32:	f8c8 3000 	strge.w	r3, [r8]
 800ed36:	f8c8 2000 	strlt.w	r2, [r8]
 800ed3a:	4baf      	ldr	r3, [pc, #700]	; (800eff8 <_dtoa_r+0x320>)
 800ed3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ed40:	ea33 0308 	bics.w	r3, r3, r8
 800ed44:	d114      	bne.n	800ed70 <_dtoa_r+0x98>
 800ed46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ed48:	f242 730f 	movw	r3, #9999	; 0x270f
 800ed4c:	6013      	str	r3, [r2, #0]
 800ed4e:	9b00      	ldr	r3, [sp, #0]
 800ed50:	b923      	cbnz	r3, 800ed5c <_dtoa_r+0x84>
 800ed52:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800ed56:	2800      	cmp	r0, #0
 800ed58:	f000 8542 	beq.w	800f7e0 <_dtoa_r+0xb08>
 800ed5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed5e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800f00c <_dtoa_r+0x334>
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	f000 8544 	beq.w	800f7f0 <_dtoa_r+0xb18>
 800ed68:	f10b 0303 	add.w	r3, fp, #3
 800ed6c:	f000 bd3e 	b.w	800f7ec <_dtoa_r+0xb14>
 800ed70:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ed74:	2200      	movs	r2, #0
 800ed76:	2300      	movs	r3, #0
 800ed78:	4630      	mov	r0, r6
 800ed7a:	4639      	mov	r1, r7
 800ed7c:	f7f1 fe5c 	bl	8000a38 <__aeabi_dcmpeq>
 800ed80:	4681      	mov	r9, r0
 800ed82:	b168      	cbz	r0, 800eda0 <_dtoa_r+0xc8>
 800ed84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ed86:	2301      	movs	r3, #1
 800ed88:	6013      	str	r3, [r2, #0]
 800ed8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	f000 8524 	beq.w	800f7da <_dtoa_r+0xb02>
 800ed92:	4b9a      	ldr	r3, [pc, #616]	; (800effc <_dtoa_r+0x324>)
 800ed94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ed96:	f103 3bff 	add.w	fp, r3, #4294967295
 800ed9a:	6013      	str	r3, [r2, #0]
 800ed9c:	f000 bd28 	b.w	800f7f0 <_dtoa_r+0xb18>
 800eda0:	aa14      	add	r2, sp, #80	; 0x50
 800eda2:	a915      	add	r1, sp, #84	; 0x54
 800eda4:	ec47 6b10 	vmov	d0, r6, r7
 800eda8:	4620      	mov	r0, r4
 800edaa:	f000 ffea 	bl	800fd82 <__d2b>
 800edae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800edb2:	9004      	str	r0, [sp, #16]
 800edb4:	2d00      	cmp	r5, #0
 800edb6:	d07c      	beq.n	800eeb2 <_dtoa_r+0x1da>
 800edb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800edbc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800edc0:	46b2      	mov	sl, r6
 800edc2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800edc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800edca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800edce:	2200      	movs	r2, #0
 800edd0:	4b8b      	ldr	r3, [pc, #556]	; (800f000 <_dtoa_r+0x328>)
 800edd2:	4650      	mov	r0, sl
 800edd4:	4659      	mov	r1, fp
 800edd6:	f7f1 fa0f 	bl	80001f8 <__aeabi_dsub>
 800edda:	a381      	add	r3, pc, #516	; (adr r3, 800efe0 <_dtoa_r+0x308>)
 800eddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede0:	f7f1 fbc2 	bl	8000568 <__aeabi_dmul>
 800ede4:	a380      	add	r3, pc, #512	; (adr r3, 800efe8 <_dtoa_r+0x310>)
 800ede6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edea:	f7f1 fa07 	bl	80001fc <__adddf3>
 800edee:	4606      	mov	r6, r0
 800edf0:	4628      	mov	r0, r5
 800edf2:	460f      	mov	r7, r1
 800edf4:	f7f1 fb4e 	bl	8000494 <__aeabi_i2d>
 800edf8:	a37d      	add	r3, pc, #500	; (adr r3, 800eff0 <_dtoa_r+0x318>)
 800edfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edfe:	f7f1 fbb3 	bl	8000568 <__aeabi_dmul>
 800ee02:	4602      	mov	r2, r0
 800ee04:	460b      	mov	r3, r1
 800ee06:	4630      	mov	r0, r6
 800ee08:	4639      	mov	r1, r7
 800ee0a:	f7f1 f9f7 	bl	80001fc <__adddf3>
 800ee0e:	4606      	mov	r6, r0
 800ee10:	460f      	mov	r7, r1
 800ee12:	f7f1 fe59 	bl	8000ac8 <__aeabi_d2iz>
 800ee16:	2200      	movs	r2, #0
 800ee18:	4682      	mov	sl, r0
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	4630      	mov	r0, r6
 800ee1e:	4639      	mov	r1, r7
 800ee20:	f7f1 fe14 	bl	8000a4c <__aeabi_dcmplt>
 800ee24:	b148      	cbz	r0, 800ee3a <_dtoa_r+0x162>
 800ee26:	4650      	mov	r0, sl
 800ee28:	f7f1 fb34 	bl	8000494 <__aeabi_i2d>
 800ee2c:	4632      	mov	r2, r6
 800ee2e:	463b      	mov	r3, r7
 800ee30:	f7f1 fe02 	bl	8000a38 <__aeabi_dcmpeq>
 800ee34:	b908      	cbnz	r0, 800ee3a <_dtoa_r+0x162>
 800ee36:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ee3a:	f1ba 0f16 	cmp.w	sl, #22
 800ee3e:	d859      	bhi.n	800eef4 <_dtoa_r+0x21c>
 800ee40:	4970      	ldr	r1, [pc, #448]	; (800f004 <_dtoa_r+0x32c>)
 800ee42:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ee46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee4e:	f7f1 fe1b 	bl	8000a88 <__aeabi_dcmpgt>
 800ee52:	2800      	cmp	r0, #0
 800ee54:	d050      	beq.n	800eef8 <_dtoa_r+0x220>
 800ee56:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ee60:	1b5d      	subs	r5, r3, r5
 800ee62:	f1b5 0801 	subs.w	r8, r5, #1
 800ee66:	bf49      	itett	mi
 800ee68:	f1c5 0301 	rsbmi	r3, r5, #1
 800ee6c:	2300      	movpl	r3, #0
 800ee6e:	9305      	strmi	r3, [sp, #20]
 800ee70:	f04f 0800 	movmi.w	r8, #0
 800ee74:	bf58      	it	pl
 800ee76:	9305      	strpl	r3, [sp, #20]
 800ee78:	f1ba 0f00 	cmp.w	sl, #0
 800ee7c:	db3e      	blt.n	800eefc <_dtoa_r+0x224>
 800ee7e:	2300      	movs	r3, #0
 800ee80:	44d0      	add	r8, sl
 800ee82:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ee86:	9307      	str	r3, [sp, #28]
 800ee88:	9b06      	ldr	r3, [sp, #24]
 800ee8a:	2b09      	cmp	r3, #9
 800ee8c:	f200 8090 	bhi.w	800efb0 <_dtoa_r+0x2d8>
 800ee90:	2b05      	cmp	r3, #5
 800ee92:	bfc4      	itt	gt
 800ee94:	3b04      	subgt	r3, #4
 800ee96:	9306      	strgt	r3, [sp, #24]
 800ee98:	9b06      	ldr	r3, [sp, #24]
 800ee9a:	f1a3 0302 	sub.w	r3, r3, #2
 800ee9e:	bfcc      	ite	gt
 800eea0:	2500      	movgt	r5, #0
 800eea2:	2501      	movle	r5, #1
 800eea4:	2b03      	cmp	r3, #3
 800eea6:	f200 808f 	bhi.w	800efc8 <_dtoa_r+0x2f0>
 800eeaa:	e8df f003 	tbb	[pc, r3]
 800eeae:	7f7d      	.short	0x7f7d
 800eeb0:	7131      	.short	0x7131
 800eeb2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800eeb6:	441d      	add	r5, r3
 800eeb8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800eebc:	2820      	cmp	r0, #32
 800eebe:	dd13      	ble.n	800eee8 <_dtoa_r+0x210>
 800eec0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800eec4:	9b00      	ldr	r3, [sp, #0]
 800eec6:	fa08 f800 	lsl.w	r8, r8, r0
 800eeca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800eece:	fa23 f000 	lsr.w	r0, r3, r0
 800eed2:	ea48 0000 	orr.w	r0, r8, r0
 800eed6:	f7f1 facd 	bl	8000474 <__aeabi_ui2d>
 800eeda:	2301      	movs	r3, #1
 800eedc:	4682      	mov	sl, r0
 800eede:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800eee2:	3d01      	subs	r5, #1
 800eee4:	9313      	str	r3, [sp, #76]	; 0x4c
 800eee6:	e772      	b.n	800edce <_dtoa_r+0xf6>
 800eee8:	9b00      	ldr	r3, [sp, #0]
 800eeea:	f1c0 0020 	rsb	r0, r0, #32
 800eeee:	fa03 f000 	lsl.w	r0, r3, r0
 800eef2:	e7f0      	b.n	800eed6 <_dtoa_r+0x1fe>
 800eef4:	2301      	movs	r3, #1
 800eef6:	e7b1      	b.n	800ee5c <_dtoa_r+0x184>
 800eef8:	900f      	str	r0, [sp, #60]	; 0x3c
 800eefa:	e7b0      	b.n	800ee5e <_dtoa_r+0x186>
 800eefc:	9b05      	ldr	r3, [sp, #20]
 800eefe:	eba3 030a 	sub.w	r3, r3, sl
 800ef02:	9305      	str	r3, [sp, #20]
 800ef04:	f1ca 0300 	rsb	r3, sl, #0
 800ef08:	9307      	str	r3, [sp, #28]
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	930e      	str	r3, [sp, #56]	; 0x38
 800ef0e:	e7bb      	b.n	800ee88 <_dtoa_r+0x1b0>
 800ef10:	2301      	movs	r3, #1
 800ef12:	930a      	str	r3, [sp, #40]	; 0x28
 800ef14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	dd59      	ble.n	800efce <_dtoa_r+0x2f6>
 800ef1a:	9302      	str	r3, [sp, #8]
 800ef1c:	4699      	mov	r9, r3
 800ef1e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ef20:	2200      	movs	r2, #0
 800ef22:	6072      	str	r2, [r6, #4]
 800ef24:	2204      	movs	r2, #4
 800ef26:	f102 0014 	add.w	r0, r2, #20
 800ef2a:	4298      	cmp	r0, r3
 800ef2c:	6871      	ldr	r1, [r6, #4]
 800ef2e:	d953      	bls.n	800efd8 <_dtoa_r+0x300>
 800ef30:	4620      	mov	r0, r4
 800ef32:	f000 fc99 	bl	800f868 <_Balloc>
 800ef36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef38:	6030      	str	r0, [r6, #0]
 800ef3a:	f1b9 0f0e 	cmp.w	r9, #14
 800ef3e:	f8d3 b000 	ldr.w	fp, [r3]
 800ef42:	f200 80e6 	bhi.w	800f112 <_dtoa_r+0x43a>
 800ef46:	2d00      	cmp	r5, #0
 800ef48:	f000 80e3 	beq.w	800f112 <_dtoa_r+0x43a>
 800ef4c:	ed9d 7b00 	vldr	d7, [sp]
 800ef50:	f1ba 0f00 	cmp.w	sl, #0
 800ef54:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ef58:	dd74      	ble.n	800f044 <_dtoa_r+0x36c>
 800ef5a:	4a2a      	ldr	r2, [pc, #168]	; (800f004 <_dtoa_r+0x32c>)
 800ef5c:	f00a 030f 	and.w	r3, sl, #15
 800ef60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ef64:	ed93 7b00 	vldr	d7, [r3]
 800ef68:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ef6c:	06f0      	lsls	r0, r6, #27
 800ef6e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ef72:	d565      	bpl.n	800f040 <_dtoa_r+0x368>
 800ef74:	4b24      	ldr	r3, [pc, #144]	; (800f008 <_dtoa_r+0x330>)
 800ef76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ef7a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ef7e:	f7f1 fc1d 	bl	80007bc <__aeabi_ddiv>
 800ef82:	e9cd 0100 	strd	r0, r1, [sp]
 800ef86:	f006 060f 	and.w	r6, r6, #15
 800ef8a:	2503      	movs	r5, #3
 800ef8c:	4f1e      	ldr	r7, [pc, #120]	; (800f008 <_dtoa_r+0x330>)
 800ef8e:	e04c      	b.n	800f02a <_dtoa_r+0x352>
 800ef90:	2301      	movs	r3, #1
 800ef92:	930a      	str	r3, [sp, #40]	; 0x28
 800ef94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef96:	4453      	add	r3, sl
 800ef98:	f103 0901 	add.w	r9, r3, #1
 800ef9c:	9302      	str	r3, [sp, #8]
 800ef9e:	464b      	mov	r3, r9
 800efa0:	2b01      	cmp	r3, #1
 800efa2:	bfb8      	it	lt
 800efa4:	2301      	movlt	r3, #1
 800efa6:	e7ba      	b.n	800ef1e <_dtoa_r+0x246>
 800efa8:	2300      	movs	r3, #0
 800efaa:	e7b2      	b.n	800ef12 <_dtoa_r+0x23a>
 800efac:	2300      	movs	r3, #0
 800efae:	e7f0      	b.n	800ef92 <_dtoa_r+0x2ba>
 800efb0:	2501      	movs	r5, #1
 800efb2:	2300      	movs	r3, #0
 800efb4:	9306      	str	r3, [sp, #24]
 800efb6:	950a      	str	r5, [sp, #40]	; 0x28
 800efb8:	f04f 33ff 	mov.w	r3, #4294967295
 800efbc:	9302      	str	r3, [sp, #8]
 800efbe:	4699      	mov	r9, r3
 800efc0:	2200      	movs	r2, #0
 800efc2:	2312      	movs	r3, #18
 800efc4:	920b      	str	r2, [sp, #44]	; 0x2c
 800efc6:	e7aa      	b.n	800ef1e <_dtoa_r+0x246>
 800efc8:	2301      	movs	r3, #1
 800efca:	930a      	str	r3, [sp, #40]	; 0x28
 800efcc:	e7f4      	b.n	800efb8 <_dtoa_r+0x2e0>
 800efce:	2301      	movs	r3, #1
 800efd0:	9302      	str	r3, [sp, #8]
 800efd2:	4699      	mov	r9, r3
 800efd4:	461a      	mov	r2, r3
 800efd6:	e7f5      	b.n	800efc4 <_dtoa_r+0x2ec>
 800efd8:	3101      	adds	r1, #1
 800efda:	6071      	str	r1, [r6, #4]
 800efdc:	0052      	lsls	r2, r2, #1
 800efde:	e7a2      	b.n	800ef26 <_dtoa_r+0x24e>
 800efe0:	636f4361 	.word	0x636f4361
 800efe4:	3fd287a7 	.word	0x3fd287a7
 800efe8:	8b60c8b3 	.word	0x8b60c8b3
 800efec:	3fc68a28 	.word	0x3fc68a28
 800eff0:	509f79fb 	.word	0x509f79fb
 800eff4:	3fd34413 	.word	0x3fd34413
 800eff8:	7ff00000 	.word	0x7ff00000
 800effc:	0800ff85 	.word	0x0800ff85
 800f000:	3ff80000 	.word	0x3ff80000
 800f004:	0800ffc0 	.word	0x0800ffc0
 800f008:	0800ff98 	.word	0x0800ff98
 800f00c:	0800ff8f 	.word	0x0800ff8f
 800f010:	07f1      	lsls	r1, r6, #31
 800f012:	d508      	bpl.n	800f026 <_dtoa_r+0x34e>
 800f014:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f018:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f01c:	f7f1 faa4 	bl	8000568 <__aeabi_dmul>
 800f020:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f024:	3501      	adds	r5, #1
 800f026:	1076      	asrs	r6, r6, #1
 800f028:	3708      	adds	r7, #8
 800f02a:	2e00      	cmp	r6, #0
 800f02c:	d1f0      	bne.n	800f010 <_dtoa_r+0x338>
 800f02e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f032:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f036:	f7f1 fbc1 	bl	80007bc <__aeabi_ddiv>
 800f03a:	e9cd 0100 	strd	r0, r1, [sp]
 800f03e:	e01a      	b.n	800f076 <_dtoa_r+0x39e>
 800f040:	2502      	movs	r5, #2
 800f042:	e7a3      	b.n	800ef8c <_dtoa_r+0x2b4>
 800f044:	f000 80a0 	beq.w	800f188 <_dtoa_r+0x4b0>
 800f048:	f1ca 0600 	rsb	r6, sl, #0
 800f04c:	4b9f      	ldr	r3, [pc, #636]	; (800f2cc <_dtoa_r+0x5f4>)
 800f04e:	4fa0      	ldr	r7, [pc, #640]	; (800f2d0 <_dtoa_r+0x5f8>)
 800f050:	f006 020f 	and.w	r2, r6, #15
 800f054:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f05c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f060:	f7f1 fa82 	bl	8000568 <__aeabi_dmul>
 800f064:	e9cd 0100 	strd	r0, r1, [sp]
 800f068:	1136      	asrs	r6, r6, #4
 800f06a:	2300      	movs	r3, #0
 800f06c:	2502      	movs	r5, #2
 800f06e:	2e00      	cmp	r6, #0
 800f070:	d17f      	bne.n	800f172 <_dtoa_r+0x49a>
 800f072:	2b00      	cmp	r3, #0
 800f074:	d1e1      	bne.n	800f03a <_dtoa_r+0x362>
 800f076:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f078:	2b00      	cmp	r3, #0
 800f07a:	f000 8087 	beq.w	800f18c <_dtoa_r+0x4b4>
 800f07e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f082:	2200      	movs	r2, #0
 800f084:	4b93      	ldr	r3, [pc, #588]	; (800f2d4 <_dtoa_r+0x5fc>)
 800f086:	4630      	mov	r0, r6
 800f088:	4639      	mov	r1, r7
 800f08a:	f7f1 fcdf 	bl	8000a4c <__aeabi_dcmplt>
 800f08e:	2800      	cmp	r0, #0
 800f090:	d07c      	beq.n	800f18c <_dtoa_r+0x4b4>
 800f092:	f1b9 0f00 	cmp.w	r9, #0
 800f096:	d079      	beq.n	800f18c <_dtoa_r+0x4b4>
 800f098:	9b02      	ldr	r3, [sp, #8]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	dd35      	ble.n	800f10a <_dtoa_r+0x432>
 800f09e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f0a2:	9308      	str	r3, [sp, #32]
 800f0a4:	4639      	mov	r1, r7
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	4b8b      	ldr	r3, [pc, #556]	; (800f2d8 <_dtoa_r+0x600>)
 800f0aa:	4630      	mov	r0, r6
 800f0ac:	f7f1 fa5c 	bl	8000568 <__aeabi_dmul>
 800f0b0:	e9cd 0100 	strd	r0, r1, [sp]
 800f0b4:	9f02      	ldr	r7, [sp, #8]
 800f0b6:	3501      	adds	r5, #1
 800f0b8:	4628      	mov	r0, r5
 800f0ba:	f7f1 f9eb 	bl	8000494 <__aeabi_i2d>
 800f0be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f0c2:	f7f1 fa51 	bl	8000568 <__aeabi_dmul>
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	4b84      	ldr	r3, [pc, #528]	; (800f2dc <_dtoa_r+0x604>)
 800f0ca:	f7f1 f897 	bl	80001fc <__adddf3>
 800f0ce:	4605      	mov	r5, r0
 800f0d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f0d4:	2f00      	cmp	r7, #0
 800f0d6:	d15d      	bne.n	800f194 <_dtoa_r+0x4bc>
 800f0d8:	2200      	movs	r2, #0
 800f0da:	4b81      	ldr	r3, [pc, #516]	; (800f2e0 <_dtoa_r+0x608>)
 800f0dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f0e0:	f7f1 f88a 	bl	80001f8 <__aeabi_dsub>
 800f0e4:	462a      	mov	r2, r5
 800f0e6:	4633      	mov	r3, r6
 800f0e8:	e9cd 0100 	strd	r0, r1, [sp]
 800f0ec:	f7f1 fccc 	bl	8000a88 <__aeabi_dcmpgt>
 800f0f0:	2800      	cmp	r0, #0
 800f0f2:	f040 8288 	bne.w	800f606 <_dtoa_r+0x92e>
 800f0f6:	462a      	mov	r2, r5
 800f0f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f0fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f100:	f7f1 fca4 	bl	8000a4c <__aeabi_dcmplt>
 800f104:	2800      	cmp	r0, #0
 800f106:	f040 827c 	bne.w	800f602 <_dtoa_r+0x92a>
 800f10a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f10e:	e9cd 2300 	strd	r2, r3, [sp]
 800f112:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f114:	2b00      	cmp	r3, #0
 800f116:	f2c0 8150 	blt.w	800f3ba <_dtoa_r+0x6e2>
 800f11a:	f1ba 0f0e 	cmp.w	sl, #14
 800f11e:	f300 814c 	bgt.w	800f3ba <_dtoa_r+0x6e2>
 800f122:	4b6a      	ldr	r3, [pc, #424]	; (800f2cc <_dtoa_r+0x5f4>)
 800f124:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f128:	ed93 7b00 	vldr	d7, [r3]
 800f12c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f12e:	2b00      	cmp	r3, #0
 800f130:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f134:	f280 80d8 	bge.w	800f2e8 <_dtoa_r+0x610>
 800f138:	f1b9 0f00 	cmp.w	r9, #0
 800f13c:	f300 80d4 	bgt.w	800f2e8 <_dtoa_r+0x610>
 800f140:	f040 825e 	bne.w	800f600 <_dtoa_r+0x928>
 800f144:	2200      	movs	r2, #0
 800f146:	4b66      	ldr	r3, [pc, #408]	; (800f2e0 <_dtoa_r+0x608>)
 800f148:	ec51 0b17 	vmov	r0, r1, d7
 800f14c:	f7f1 fa0c 	bl	8000568 <__aeabi_dmul>
 800f150:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f154:	f7f1 fc8e 	bl	8000a74 <__aeabi_dcmpge>
 800f158:	464f      	mov	r7, r9
 800f15a:	464e      	mov	r6, r9
 800f15c:	2800      	cmp	r0, #0
 800f15e:	f040 8234 	bne.w	800f5ca <_dtoa_r+0x8f2>
 800f162:	2331      	movs	r3, #49	; 0x31
 800f164:	f10b 0501 	add.w	r5, fp, #1
 800f168:	f88b 3000 	strb.w	r3, [fp]
 800f16c:	f10a 0a01 	add.w	sl, sl, #1
 800f170:	e22f      	b.n	800f5d2 <_dtoa_r+0x8fa>
 800f172:	07f2      	lsls	r2, r6, #31
 800f174:	d505      	bpl.n	800f182 <_dtoa_r+0x4aa>
 800f176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f17a:	f7f1 f9f5 	bl	8000568 <__aeabi_dmul>
 800f17e:	3501      	adds	r5, #1
 800f180:	2301      	movs	r3, #1
 800f182:	1076      	asrs	r6, r6, #1
 800f184:	3708      	adds	r7, #8
 800f186:	e772      	b.n	800f06e <_dtoa_r+0x396>
 800f188:	2502      	movs	r5, #2
 800f18a:	e774      	b.n	800f076 <_dtoa_r+0x39e>
 800f18c:	f8cd a020 	str.w	sl, [sp, #32]
 800f190:	464f      	mov	r7, r9
 800f192:	e791      	b.n	800f0b8 <_dtoa_r+0x3e0>
 800f194:	4b4d      	ldr	r3, [pc, #308]	; (800f2cc <_dtoa_r+0x5f4>)
 800f196:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f19a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800f19e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d047      	beq.n	800f234 <_dtoa_r+0x55c>
 800f1a4:	4602      	mov	r2, r0
 800f1a6:	460b      	mov	r3, r1
 800f1a8:	2000      	movs	r0, #0
 800f1aa:	494e      	ldr	r1, [pc, #312]	; (800f2e4 <_dtoa_r+0x60c>)
 800f1ac:	f7f1 fb06 	bl	80007bc <__aeabi_ddiv>
 800f1b0:	462a      	mov	r2, r5
 800f1b2:	4633      	mov	r3, r6
 800f1b4:	f7f1 f820 	bl	80001f8 <__aeabi_dsub>
 800f1b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f1bc:	465d      	mov	r5, fp
 800f1be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f1c2:	f7f1 fc81 	bl	8000ac8 <__aeabi_d2iz>
 800f1c6:	4606      	mov	r6, r0
 800f1c8:	f7f1 f964 	bl	8000494 <__aeabi_i2d>
 800f1cc:	4602      	mov	r2, r0
 800f1ce:	460b      	mov	r3, r1
 800f1d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f1d4:	f7f1 f810 	bl	80001f8 <__aeabi_dsub>
 800f1d8:	3630      	adds	r6, #48	; 0x30
 800f1da:	f805 6b01 	strb.w	r6, [r5], #1
 800f1de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f1e2:	e9cd 0100 	strd	r0, r1, [sp]
 800f1e6:	f7f1 fc31 	bl	8000a4c <__aeabi_dcmplt>
 800f1ea:	2800      	cmp	r0, #0
 800f1ec:	d163      	bne.n	800f2b6 <_dtoa_r+0x5de>
 800f1ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f1f2:	2000      	movs	r0, #0
 800f1f4:	4937      	ldr	r1, [pc, #220]	; (800f2d4 <_dtoa_r+0x5fc>)
 800f1f6:	f7f0 ffff 	bl	80001f8 <__aeabi_dsub>
 800f1fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f1fe:	f7f1 fc25 	bl	8000a4c <__aeabi_dcmplt>
 800f202:	2800      	cmp	r0, #0
 800f204:	f040 80b7 	bne.w	800f376 <_dtoa_r+0x69e>
 800f208:	eba5 030b 	sub.w	r3, r5, fp
 800f20c:	429f      	cmp	r7, r3
 800f20e:	f77f af7c 	ble.w	800f10a <_dtoa_r+0x432>
 800f212:	2200      	movs	r2, #0
 800f214:	4b30      	ldr	r3, [pc, #192]	; (800f2d8 <_dtoa_r+0x600>)
 800f216:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f21a:	f7f1 f9a5 	bl	8000568 <__aeabi_dmul>
 800f21e:	2200      	movs	r2, #0
 800f220:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f224:	4b2c      	ldr	r3, [pc, #176]	; (800f2d8 <_dtoa_r+0x600>)
 800f226:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f22a:	f7f1 f99d 	bl	8000568 <__aeabi_dmul>
 800f22e:	e9cd 0100 	strd	r0, r1, [sp]
 800f232:	e7c4      	b.n	800f1be <_dtoa_r+0x4e6>
 800f234:	462a      	mov	r2, r5
 800f236:	4633      	mov	r3, r6
 800f238:	f7f1 f996 	bl	8000568 <__aeabi_dmul>
 800f23c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f240:	eb0b 0507 	add.w	r5, fp, r7
 800f244:	465e      	mov	r6, fp
 800f246:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f24a:	f7f1 fc3d 	bl	8000ac8 <__aeabi_d2iz>
 800f24e:	4607      	mov	r7, r0
 800f250:	f7f1 f920 	bl	8000494 <__aeabi_i2d>
 800f254:	3730      	adds	r7, #48	; 0x30
 800f256:	4602      	mov	r2, r0
 800f258:	460b      	mov	r3, r1
 800f25a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f25e:	f7f0 ffcb 	bl	80001f8 <__aeabi_dsub>
 800f262:	f806 7b01 	strb.w	r7, [r6], #1
 800f266:	42ae      	cmp	r6, r5
 800f268:	e9cd 0100 	strd	r0, r1, [sp]
 800f26c:	f04f 0200 	mov.w	r2, #0
 800f270:	d126      	bne.n	800f2c0 <_dtoa_r+0x5e8>
 800f272:	4b1c      	ldr	r3, [pc, #112]	; (800f2e4 <_dtoa_r+0x60c>)
 800f274:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f278:	f7f0 ffc0 	bl	80001fc <__adddf3>
 800f27c:	4602      	mov	r2, r0
 800f27e:	460b      	mov	r3, r1
 800f280:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f284:	f7f1 fc00 	bl	8000a88 <__aeabi_dcmpgt>
 800f288:	2800      	cmp	r0, #0
 800f28a:	d174      	bne.n	800f376 <_dtoa_r+0x69e>
 800f28c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f290:	2000      	movs	r0, #0
 800f292:	4914      	ldr	r1, [pc, #80]	; (800f2e4 <_dtoa_r+0x60c>)
 800f294:	f7f0 ffb0 	bl	80001f8 <__aeabi_dsub>
 800f298:	4602      	mov	r2, r0
 800f29a:	460b      	mov	r3, r1
 800f29c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f2a0:	f7f1 fbd4 	bl	8000a4c <__aeabi_dcmplt>
 800f2a4:	2800      	cmp	r0, #0
 800f2a6:	f43f af30 	beq.w	800f10a <_dtoa_r+0x432>
 800f2aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f2ae:	2b30      	cmp	r3, #48	; 0x30
 800f2b0:	f105 32ff 	add.w	r2, r5, #4294967295
 800f2b4:	d002      	beq.n	800f2bc <_dtoa_r+0x5e4>
 800f2b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f2ba:	e04a      	b.n	800f352 <_dtoa_r+0x67a>
 800f2bc:	4615      	mov	r5, r2
 800f2be:	e7f4      	b.n	800f2aa <_dtoa_r+0x5d2>
 800f2c0:	4b05      	ldr	r3, [pc, #20]	; (800f2d8 <_dtoa_r+0x600>)
 800f2c2:	f7f1 f951 	bl	8000568 <__aeabi_dmul>
 800f2c6:	e9cd 0100 	strd	r0, r1, [sp]
 800f2ca:	e7bc      	b.n	800f246 <_dtoa_r+0x56e>
 800f2cc:	0800ffc0 	.word	0x0800ffc0
 800f2d0:	0800ff98 	.word	0x0800ff98
 800f2d4:	3ff00000 	.word	0x3ff00000
 800f2d8:	40240000 	.word	0x40240000
 800f2dc:	401c0000 	.word	0x401c0000
 800f2e0:	40140000 	.word	0x40140000
 800f2e4:	3fe00000 	.word	0x3fe00000
 800f2e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f2ec:	465d      	mov	r5, fp
 800f2ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f2f2:	4630      	mov	r0, r6
 800f2f4:	4639      	mov	r1, r7
 800f2f6:	f7f1 fa61 	bl	80007bc <__aeabi_ddiv>
 800f2fa:	f7f1 fbe5 	bl	8000ac8 <__aeabi_d2iz>
 800f2fe:	4680      	mov	r8, r0
 800f300:	f7f1 f8c8 	bl	8000494 <__aeabi_i2d>
 800f304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f308:	f7f1 f92e 	bl	8000568 <__aeabi_dmul>
 800f30c:	4602      	mov	r2, r0
 800f30e:	460b      	mov	r3, r1
 800f310:	4630      	mov	r0, r6
 800f312:	4639      	mov	r1, r7
 800f314:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800f318:	f7f0 ff6e 	bl	80001f8 <__aeabi_dsub>
 800f31c:	f805 6b01 	strb.w	r6, [r5], #1
 800f320:	eba5 060b 	sub.w	r6, r5, fp
 800f324:	45b1      	cmp	r9, r6
 800f326:	4602      	mov	r2, r0
 800f328:	460b      	mov	r3, r1
 800f32a:	d139      	bne.n	800f3a0 <_dtoa_r+0x6c8>
 800f32c:	f7f0 ff66 	bl	80001fc <__adddf3>
 800f330:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f334:	4606      	mov	r6, r0
 800f336:	460f      	mov	r7, r1
 800f338:	f7f1 fba6 	bl	8000a88 <__aeabi_dcmpgt>
 800f33c:	b9c8      	cbnz	r0, 800f372 <_dtoa_r+0x69a>
 800f33e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f342:	4630      	mov	r0, r6
 800f344:	4639      	mov	r1, r7
 800f346:	f7f1 fb77 	bl	8000a38 <__aeabi_dcmpeq>
 800f34a:	b110      	cbz	r0, 800f352 <_dtoa_r+0x67a>
 800f34c:	f018 0f01 	tst.w	r8, #1
 800f350:	d10f      	bne.n	800f372 <_dtoa_r+0x69a>
 800f352:	9904      	ldr	r1, [sp, #16]
 800f354:	4620      	mov	r0, r4
 800f356:	f000 fabb 	bl	800f8d0 <_Bfree>
 800f35a:	2300      	movs	r3, #0
 800f35c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f35e:	702b      	strb	r3, [r5, #0]
 800f360:	f10a 0301 	add.w	r3, sl, #1
 800f364:	6013      	str	r3, [r2, #0]
 800f366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f368:	2b00      	cmp	r3, #0
 800f36a:	f000 8241 	beq.w	800f7f0 <_dtoa_r+0xb18>
 800f36e:	601d      	str	r5, [r3, #0]
 800f370:	e23e      	b.n	800f7f0 <_dtoa_r+0xb18>
 800f372:	f8cd a020 	str.w	sl, [sp, #32]
 800f376:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f37a:	2a39      	cmp	r2, #57	; 0x39
 800f37c:	f105 33ff 	add.w	r3, r5, #4294967295
 800f380:	d108      	bne.n	800f394 <_dtoa_r+0x6bc>
 800f382:	459b      	cmp	fp, r3
 800f384:	d10a      	bne.n	800f39c <_dtoa_r+0x6c4>
 800f386:	9b08      	ldr	r3, [sp, #32]
 800f388:	3301      	adds	r3, #1
 800f38a:	9308      	str	r3, [sp, #32]
 800f38c:	2330      	movs	r3, #48	; 0x30
 800f38e:	f88b 3000 	strb.w	r3, [fp]
 800f392:	465b      	mov	r3, fp
 800f394:	781a      	ldrb	r2, [r3, #0]
 800f396:	3201      	adds	r2, #1
 800f398:	701a      	strb	r2, [r3, #0]
 800f39a:	e78c      	b.n	800f2b6 <_dtoa_r+0x5de>
 800f39c:	461d      	mov	r5, r3
 800f39e:	e7ea      	b.n	800f376 <_dtoa_r+0x69e>
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	4b9b      	ldr	r3, [pc, #620]	; (800f610 <_dtoa_r+0x938>)
 800f3a4:	f7f1 f8e0 	bl	8000568 <__aeabi_dmul>
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	4606      	mov	r6, r0
 800f3ae:	460f      	mov	r7, r1
 800f3b0:	f7f1 fb42 	bl	8000a38 <__aeabi_dcmpeq>
 800f3b4:	2800      	cmp	r0, #0
 800f3b6:	d09a      	beq.n	800f2ee <_dtoa_r+0x616>
 800f3b8:	e7cb      	b.n	800f352 <_dtoa_r+0x67a>
 800f3ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f3bc:	2a00      	cmp	r2, #0
 800f3be:	f000 808b 	beq.w	800f4d8 <_dtoa_r+0x800>
 800f3c2:	9a06      	ldr	r2, [sp, #24]
 800f3c4:	2a01      	cmp	r2, #1
 800f3c6:	dc6e      	bgt.n	800f4a6 <_dtoa_r+0x7ce>
 800f3c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f3ca:	2a00      	cmp	r2, #0
 800f3cc:	d067      	beq.n	800f49e <_dtoa_r+0x7c6>
 800f3ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f3d2:	9f07      	ldr	r7, [sp, #28]
 800f3d4:	9d05      	ldr	r5, [sp, #20]
 800f3d6:	9a05      	ldr	r2, [sp, #20]
 800f3d8:	2101      	movs	r1, #1
 800f3da:	441a      	add	r2, r3
 800f3dc:	4620      	mov	r0, r4
 800f3de:	9205      	str	r2, [sp, #20]
 800f3e0:	4498      	add	r8, r3
 800f3e2:	f000 fb15 	bl	800fa10 <__i2b>
 800f3e6:	4606      	mov	r6, r0
 800f3e8:	2d00      	cmp	r5, #0
 800f3ea:	dd0c      	ble.n	800f406 <_dtoa_r+0x72e>
 800f3ec:	f1b8 0f00 	cmp.w	r8, #0
 800f3f0:	dd09      	ble.n	800f406 <_dtoa_r+0x72e>
 800f3f2:	4545      	cmp	r5, r8
 800f3f4:	9a05      	ldr	r2, [sp, #20]
 800f3f6:	462b      	mov	r3, r5
 800f3f8:	bfa8      	it	ge
 800f3fa:	4643      	movge	r3, r8
 800f3fc:	1ad2      	subs	r2, r2, r3
 800f3fe:	9205      	str	r2, [sp, #20]
 800f400:	1aed      	subs	r5, r5, r3
 800f402:	eba8 0803 	sub.w	r8, r8, r3
 800f406:	9b07      	ldr	r3, [sp, #28]
 800f408:	b1eb      	cbz	r3, 800f446 <_dtoa_r+0x76e>
 800f40a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d067      	beq.n	800f4e0 <_dtoa_r+0x808>
 800f410:	b18f      	cbz	r7, 800f436 <_dtoa_r+0x75e>
 800f412:	4631      	mov	r1, r6
 800f414:	463a      	mov	r2, r7
 800f416:	4620      	mov	r0, r4
 800f418:	f000 fb9a 	bl	800fb50 <__pow5mult>
 800f41c:	9a04      	ldr	r2, [sp, #16]
 800f41e:	4601      	mov	r1, r0
 800f420:	4606      	mov	r6, r0
 800f422:	4620      	mov	r0, r4
 800f424:	f000 fafd 	bl	800fa22 <__multiply>
 800f428:	9904      	ldr	r1, [sp, #16]
 800f42a:	9008      	str	r0, [sp, #32]
 800f42c:	4620      	mov	r0, r4
 800f42e:	f000 fa4f 	bl	800f8d0 <_Bfree>
 800f432:	9b08      	ldr	r3, [sp, #32]
 800f434:	9304      	str	r3, [sp, #16]
 800f436:	9b07      	ldr	r3, [sp, #28]
 800f438:	1bda      	subs	r2, r3, r7
 800f43a:	d004      	beq.n	800f446 <_dtoa_r+0x76e>
 800f43c:	9904      	ldr	r1, [sp, #16]
 800f43e:	4620      	mov	r0, r4
 800f440:	f000 fb86 	bl	800fb50 <__pow5mult>
 800f444:	9004      	str	r0, [sp, #16]
 800f446:	2101      	movs	r1, #1
 800f448:	4620      	mov	r0, r4
 800f44a:	f000 fae1 	bl	800fa10 <__i2b>
 800f44e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f450:	4607      	mov	r7, r0
 800f452:	2b00      	cmp	r3, #0
 800f454:	f000 81d0 	beq.w	800f7f8 <_dtoa_r+0xb20>
 800f458:	461a      	mov	r2, r3
 800f45a:	4601      	mov	r1, r0
 800f45c:	4620      	mov	r0, r4
 800f45e:	f000 fb77 	bl	800fb50 <__pow5mult>
 800f462:	9b06      	ldr	r3, [sp, #24]
 800f464:	2b01      	cmp	r3, #1
 800f466:	4607      	mov	r7, r0
 800f468:	dc40      	bgt.n	800f4ec <_dtoa_r+0x814>
 800f46a:	9b00      	ldr	r3, [sp, #0]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d139      	bne.n	800f4e4 <_dtoa_r+0x80c>
 800f470:	9b01      	ldr	r3, [sp, #4]
 800f472:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f476:	2b00      	cmp	r3, #0
 800f478:	d136      	bne.n	800f4e8 <_dtoa_r+0x810>
 800f47a:	9b01      	ldr	r3, [sp, #4]
 800f47c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f480:	0d1b      	lsrs	r3, r3, #20
 800f482:	051b      	lsls	r3, r3, #20
 800f484:	b12b      	cbz	r3, 800f492 <_dtoa_r+0x7ba>
 800f486:	9b05      	ldr	r3, [sp, #20]
 800f488:	3301      	adds	r3, #1
 800f48a:	9305      	str	r3, [sp, #20]
 800f48c:	f108 0801 	add.w	r8, r8, #1
 800f490:	2301      	movs	r3, #1
 800f492:	9307      	str	r3, [sp, #28]
 800f494:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f496:	2b00      	cmp	r3, #0
 800f498:	d12a      	bne.n	800f4f0 <_dtoa_r+0x818>
 800f49a:	2001      	movs	r0, #1
 800f49c:	e030      	b.n	800f500 <_dtoa_r+0x828>
 800f49e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f4a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f4a4:	e795      	b.n	800f3d2 <_dtoa_r+0x6fa>
 800f4a6:	9b07      	ldr	r3, [sp, #28]
 800f4a8:	f109 37ff 	add.w	r7, r9, #4294967295
 800f4ac:	42bb      	cmp	r3, r7
 800f4ae:	bfbf      	itttt	lt
 800f4b0:	9b07      	ldrlt	r3, [sp, #28]
 800f4b2:	9707      	strlt	r7, [sp, #28]
 800f4b4:	1afa      	sublt	r2, r7, r3
 800f4b6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f4b8:	bfbb      	ittet	lt
 800f4ba:	189b      	addlt	r3, r3, r2
 800f4bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f4be:	1bdf      	subge	r7, r3, r7
 800f4c0:	2700      	movlt	r7, #0
 800f4c2:	f1b9 0f00 	cmp.w	r9, #0
 800f4c6:	bfb5      	itete	lt
 800f4c8:	9b05      	ldrlt	r3, [sp, #20]
 800f4ca:	9d05      	ldrge	r5, [sp, #20]
 800f4cc:	eba3 0509 	sublt.w	r5, r3, r9
 800f4d0:	464b      	movge	r3, r9
 800f4d2:	bfb8      	it	lt
 800f4d4:	2300      	movlt	r3, #0
 800f4d6:	e77e      	b.n	800f3d6 <_dtoa_r+0x6fe>
 800f4d8:	9f07      	ldr	r7, [sp, #28]
 800f4da:	9d05      	ldr	r5, [sp, #20]
 800f4dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f4de:	e783      	b.n	800f3e8 <_dtoa_r+0x710>
 800f4e0:	9a07      	ldr	r2, [sp, #28]
 800f4e2:	e7ab      	b.n	800f43c <_dtoa_r+0x764>
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	e7d4      	b.n	800f492 <_dtoa_r+0x7ba>
 800f4e8:	9b00      	ldr	r3, [sp, #0]
 800f4ea:	e7d2      	b.n	800f492 <_dtoa_r+0x7ba>
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	9307      	str	r3, [sp, #28]
 800f4f0:	693b      	ldr	r3, [r7, #16]
 800f4f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800f4f6:	6918      	ldr	r0, [r3, #16]
 800f4f8:	f000 fa3c 	bl	800f974 <__hi0bits>
 800f4fc:	f1c0 0020 	rsb	r0, r0, #32
 800f500:	4440      	add	r0, r8
 800f502:	f010 001f 	ands.w	r0, r0, #31
 800f506:	d047      	beq.n	800f598 <_dtoa_r+0x8c0>
 800f508:	f1c0 0320 	rsb	r3, r0, #32
 800f50c:	2b04      	cmp	r3, #4
 800f50e:	dd3b      	ble.n	800f588 <_dtoa_r+0x8b0>
 800f510:	9b05      	ldr	r3, [sp, #20]
 800f512:	f1c0 001c 	rsb	r0, r0, #28
 800f516:	4403      	add	r3, r0
 800f518:	9305      	str	r3, [sp, #20]
 800f51a:	4405      	add	r5, r0
 800f51c:	4480      	add	r8, r0
 800f51e:	9b05      	ldr	r3, [sp, #20]
 800f520:	2b00      	cmp	r3, #0
 800f522:	dd05      	ble.n	800f530 <_dtoa_r+0x858>
 800f524:	461a      	mov	r2, r3
 800f526:	9904      	ldr	r1, [sp, #16]
 800f528:	4620      	mov	r0, r4
 800f52a:	f000 fb5f 	bl	800fbec <__lshift>
 800f52e:	9004      	str	r0, [sp, #16]
 800f530:	f1b8 0f00 	cmp.w	r8, #0
 800f534:	dd05      	ble.n	800f542 <_dtoa_r+0x86a>
 800f536:	4639      	mov	r1, r7
 800f538:	4642      	mov	r2, r8
 800f53a:	4620      	mov	r0, r4
 800f53c:	f000 fb56 	bl	800fbec <__lshift>
 800f540:	4607      	mov	r7, r0
 800f542:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f544:	b353      	cbz	r3, 800f59c <_dtoa_r+0x8c4>
 800f546:	4639      	mov	r1, r7
 800f548:	9804      	ldr	r0, [sp, #16]
 800f54a:	f000 fba3 	bl	800fc94 <__mcmp>
 800f54e:	2800      	cmp	r0, #0
 800f550:	da24      	bge.n	800f59c <_dtoa_r+0x8c4>
 800f552:	2300      	movs	r3, #0
 800f554:	220a      	movs	r2, #10
 800f556:	9904      	ldr	r1, [sp, #16]
 800f558:	4620      	mov	r0, r4
 800f55a:	f000 f9d0 	bl	800f8fe <__multadd>
 800f55e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f560:	9004      	str	r0, [sp, #16]
 800f562:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f566:	2b00      	cmp	r3, #0
 800f568:	f000 814d 	beq.w	800f806 <_dtoa_r+0xb2e>
 800f56c:	2300      	movs	r3, #0
 800f56e:	4631      	mov	r1, r6
 800f570:	220a      	movs	r2, #10
 800f572:	4620      	mov	r0, r4
 800f574:	f000 f9c3 	bl	800f8fe <__multadd>
 800f578:	9b02      	ldr	r3, [sp, #8]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	4606      	mov	r6, r0
 800f57e:	dc4f      	bgt.n	800f620 <_dtoa_r+0x948>
 800f580:	9b06      	ldr	r3, [sp, #24]
 800f582:	2b02      	cmp	r3, #2
 800f584:	dd4c      	ble.n	800f620 <_dtoa_r+0x948>
 800f586:	e011      	b.n	800f5ac <_dtoa_r+0x8d4>
 800f588:	d0c9      	beq.n	800f51e <_dtoa_r+0x846>
 800f58a:	9a05      	ldr	r2, [sp, #20]
 800f58c:	331c      	adds	r3, #28
 800f58e:	441a      	add	r2, r3
 800f590:	9205      	str	r2, [sp, #20]
 800f592:	441d      	add	r5, r3
 800f594:	4498      	add	r8, r3
 800f596:	e7c2      	b.n	800f51e <_dtoa_r+0x846>
 800f598:	4603      	mov	r3, r0
 800f59a:	e7f6      	b.n	800f58a <_dtoa_r+0x8b2>
 800f59c:	f1b9 0f00 	cmp.w	r9, #0
 800f5a0:	dc38      	bgt.n	800f614 <_dtoa_r+0x93c>
 800f5a2:	9b06      	ldr	r3, [sp, #24]
 800f5a4:	2b02      	cmp	r3, #2
 800f5a6:	dd35      	ble.n	800f614 <_dtoa_r+0x93c>
 800f5a8:	f8cd 9008 	str.w	r9, [sp, #8]
 800f5ac:	9b02      	ldr	r3, [sp, #8]
 800f5ae:	b963      	cbnz	r3, 800f5ca <_dtoa_r+0x8f2>
 800f5b0:	4639      	mov	r1, r7
 800f5b2:	2205      	movs	r2, #5
 800f5b4:	4620      	mov	r0, r4
 800f5b6:	f000 f9a2 	bl	800f8fe <__multadd>
 800f5ba:	4601      	mov	r1, r0
 800f5bc:	4607      	mov	r7, r0
 800f5be:	9804      	ldr	r0, [sp, #16]
 800f5c0:	f000 fb68 	bl	800fc94 <__mcmp>
 800f5c4:	2800      	cmp	r0, #0
 800f5c6:	f73f adcc 	bgt.w	800f162 <_dtoa_r+0x48a>
 800f5ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5cc:	465d      	mov	r5, fp
 800f5ce:	ea6f 0a03 	mvn.w	sl, r3
 800f5d2:	f04f 0900 	mov.w	r9, #0
 800f5d6:	4639      	mov	r1, r7
 800f5d8:	4620      	mov	r0, r4
 800f5da:	f000 f979 	bl	800f8d0 <_Bfree>
 800f5de:	2e00      	cmp	r6, #0
 800f5e0:	f43f aeb7 	beq.w	800f352 <_dtoa_r+0x67a>
 800f5e4:	f1b9 0f00 	cmp.w	r9, #0
 800f5e8:	d005      	beq.n	800f5f6 <_dtoa_r+0x91e>
 800f5ea:	45b1      	cmp	r9, r6
 800f5ec:	d003      	beq.n	800f5f6 <_dtoa_r+0x91e>
 800f5ee:	4649      	mov	r1, r9
 800f5f0:	4620      	mov	r0, r4
 800f5f2:	f000 f96d 	bl	800f8d0 <_Bfree>
 800f5f6:	4631      	mov	r1, r6
 800f5f8:	4620      	mov	r0, r4
 800f5fa:	f000 f969 	bl	800f8d0 <_Bfree>
 800f5fe:	e6a8      	b.n	800f352 <_dtoa_r+0x67a>
 800f600:	2700      	movs	r7, #0
 800f602:	463e      	mov	r6, r7
 800f604:	e7e1      	b.n	800f5ca <_dtoa_r+0x8f2>
 800f606:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f60a:	463e      	mov	r6, r7
 800f60c:	e5a9      	b.n	800f162 <_dtoa_r+0x48a>
 800f60e:	bf00      	nop
 800f610:	40240000 	.word	0x40240000
 800f614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f616:	f8cd 9008 	str.w	r9, [sp, #8]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	f000 80fa 	beq.w	800f814 <_dtoa_r+0xb3c>
 800f620:	2d00      	cmp	r5, #0
 800f622:	dd05      	ble.n	800f630 <_dtoa_r+0x958>
 800f624:	4631      	mov	r1, r6
 800f626:	462a      	mov	r2, r5
 800f628:	4620      	mov	r0, r4
 800f62a:	f000 fadf 	bl	800fbec <__lshift>
 800f62e:	4606      	mov	r6, r0
 800f630:	9b07      	ldr	r3, [sp, #28]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d04c      	beq.n	800f6d0 <_dtoa_r+0x9f8>
 800f636:	6871      	ldr	r1, [r6, #4]
 800f638:	4620      	mov	r0, r4
 800f63a:	f000 f915 	bl	800f868 <_Balloc>
 800f63e:	6932      	ldr	r2, [r6, #16]
 800f640:	3202      	adds	r2, #2
 800f642:	4605      	mov	r5, r0
 800f644:	0092      	lsls	r2, r2, #2
 800f646:	f106 010c 	add.w	r1, r6, #12
 800f64a:	300c      	adds	r0, #12
 800f64c:	f7fe fea2 	bl	800e394 <memcpy>
 800f650:	2201      	movs	r2, #1
 800f652:	4629      	mov	r1, r5
 800f654:	4620      	mov	r0, r4
 800f656:	f000 fac9 	bl	800fbec <__lshift>
 800f65a:	9b00      	ldr	r3, [sp, #0]
 800f65c:	f8cd b014 	str.w	fp, [sp, #20]
 800f660:	f003 0301 	and.w	r3, r3, #1
 800f664:	46b1      	mov	r9, r6
 800f666:	9307      	str	r3, [sp, #28]
 800f668:	4606      	mov	r6, r0
 800f66a:	4639      	mov	r1, r7
 800f66c:	9804      	ldr	r0, [sp, #16]
 800f66e:	f7ff faa7 	bl	800ebc0 <quorem>
 800f672:	4649      	mov	r1, r9
 800f674:	4605      	mov	r5, r0
 800f676:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f67a:	9804      	ldr	r0, [sp, #16]
 800f67c:	f000 fb0a 	bl	800fc94 <__mcmp>
 800f680:	4632      	mov	r2, r6
 800f682:	9000      	str	r0, [sp, #0]
 800f684:	4639      	mov	r1, r7
 800f686:	4620      	mov	r0, r4
 800f688:	f000 fb1e 	bl	800fcc8 <__mdiff>
 800f68c:	68c3      	ldr	r3, [r0, #12]
 800f68e:	4602      	mov	r2, r0
 800f690:	bb03      	cbnz	r3, 800f6d4 <_dtoa_r+0x9fc>
 800f692:	4601      	mov	r1, r0
 800f694:	9008      	str	r0, [sp, #32]
 800f696:	9804      	ldr	r0, [sp, #16]
 800f698:	f000 fafc 	bl	800fc94 <__mcmp>
 800f69c:	9a08      	ldr	r2, [sp, #32]
 800f69e:	4603      	mov	r3, r0
 800f6a0:	4611      	mov	r1, r2
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	9308      	str	r3, [sp, #32]
 800f6a6:	f000 f913 	bl	800f8d0 <_Bfree>
 800f6aa:	9b08      	ldr	r3, [sp, #32]
 800f6ac:	b9a3      	cbnz	r3, 800f6d8 <_dtoa_r+0xa00>
 800f6ae:	9a06      	ldr	r2, [sp, #24]
 800f6b0:	b992      	cbnz	r2, 800f6d8 <_dtoa_r+0xa00>
 800f6b2:	9a07      	ldr	r2, [sp, #28]
 800f6b4:	b982      	cbnz	r2, 800f6d8 <_dtoa_r+0xa00>
 800f6b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f6ba:	d029      	beq.n	800f710 <_dtoa_r+0xa38>
 800f6bc:	9b00      	ldr	r3, [sp, #0]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	dd01      	ble.n	800f6c6 <_dtoa_r+0x9ee>
 800f6c2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800f6c6:	9b05      	ldr	r3, [sp, #20]
 800f6c8:	1c5d      	adds	r5, r3, #1
 800f6ca:	f883 8000 	strb.w	r8, [r3]
 800f6ce:	e782      	b.n	800f5d6 <_dtoa_r+0x8fe>
 800f6d0:	4630      	mov	r0, r6
 800f6d2:	e7c2      	b.n	800f65a <_dtoa_r+0x982>
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	e7e3      	b.n	800f6a0 <_dtoa_r+0x9c8>
 800f6d8:	9a00      	ldr	r2, [sp, #0]
 800f6da:	2a00      	cmp	r2, #0
 800f6dc:	db04      	blt.n	800f6e8 <_dtoa_r+0xa10>
 800f6de:	d125      	bne.n	800f72c <_dtoa_r+0xa54>
 800f6e0:	9a06      	ldr	r2, [sp, #24]
 800f6e2:	bb1a      	cbnz	r2, 800f72c <_dtoa_r+0xa54>
 800f6e4:	9a07      	ldr	r2, [sp, #28]
 800f6e6:	bb0a      	cbnz	r2, 800f72c <_dtoa_r+0xa54>
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	ddec      	ble.n	800f6c6 <_dtoa_r+0x9ee>
 800f6ec:	2201      	movs	r2, #1
 800f6ee:	9904      	ldr	r1, [sp, #16]
 800f6f0:	4620      	mov	r0, r4
 800f6f2:	f000 fa7b 	bl	800fbec <__lshift>
 800f6f6:	4639      	mov	r1, r7
 800f6f8:	9004      	str	r0, [sp, #16]
 800f6fa:	f000 facb 	bl	800fc94 <__mcmp>
 800f6fe:	2800      	cmp	r0, #0
 800f700:	dc03      	bgt.n	800f70a <_dtoa_r+0xa32>
 800f702:	d1e0      	bne.n	800f6c6 <_dtoa_r+0x9ee>
 800f704:	f018 0f01 	tst.w	r8, #1
 800f708:	d0dd      	beq.n	800f6c6 <_dtoa_r+0x9ee>
 800f70a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f70e:	d1d8      	bne.n	800f6c2 <_dtoa_r+0x9ea>
 800f710:	9b05      	ldr	r3, [sp, #20]
 800f712:	9a05      	ldr	r2, [sp, #20]
 800f714:	1c5d      	adds	r5, r3, #1
 800f716:	2339      	movs	r3, #57	; 0x39
 800f718:	7013      	strb	r3, [r2, #0]
 800f71a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f71e:	2b39      	cmp	r3, #57	; 0x39
 800f720:	f105 32ff 	add.w	r2, r5, #4294967295
 800f724:	d04f      	beq.n	800f7c6 <_dtoa_r+0xaee>
 800f726:	3301      	adds	r3, #1
 800f728:	7013      	strb	r3, [r2, #0]
 800f72a:	e754      	b.n	800f5d6 <_dtoa_r+0x8fe>
 800f72c:	9a05      	ldr	r2, [sp, #20]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	f102 0501 	add.w	r5, r2, #1
 800f734:	dd06      	ble.n	800f744 <_dtoa_r+0xa6c>
 800f736:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f73a:	d0e9      	beq.n	800f710 <_dtoa_r+0xa38>
 800f73c:	f108 0801 	add.w	r8, r8, #1
 800f740:	9b05      	ldr	r3, [sp, #20]
 800f742:	e7c2      	b.n	800f6ca <_dtoa_r+0x9f2>
 800f744:	9a02      	ldr	r2, [sp, #8]
 800f746:	f805 8c01 	strb.w	r8, [r5, #-1]
 800f74a:	eba5 030b 	sub.w	r3, r5, fp
 800f74e:	4293      	cmp	r3, r2
 800f750:	d021      	beq.n	800f796 <_dtoa_r+0xabe>
 800f752:	2300      	movs	r3, #0
 800f754:	220a      	movs	r2, #10
 800f756:	9904      	ldr	r1, [sp, #16]
 800f758:	4620      	mov	r0, r4
 800f75a:	f000 f8d0 	bl	800f8fe <__multadd>
 800f75e:	45b1      	cmp	r9, r6
 800f760:	9004      	str	r0, [sp, #16]
 800f762:	f04f 0300 	mov.w	r3, #0
 800f766:	f04f 020a 	mov.w	r2, #10
 800f76a:	4649      	mov	r1, r9
 800f76c:	4620      	mov	r0, r4
 800f76e:	d105      	bne.n	800f77c <_dtoa_r+0xaa4>
 800f770:	f000 f8c5 	bl	800f8fe <__multadd>
 800f774:	4681      	mov	r9, r0
 800f776:	4606      	mov	r6, r0
 800f778:	9505      	str	r5, [sp, #20]
 800f77a:	e776      	b.n	800f66a <_dtoa_r+0x992>
 800f77c:	f000 f8bf 	bl	800f8fe <__multadd>
 800f780:	4631      	mov	r1, r6
 800f782:	4681      	mov	r9, r0
 800f784:	2300      	movs	r3, #0
 800f786:	220a      	movs	r2, #10
 800f788:	4620      	mov	r0, r4
 800f78a:	f000 f8b8 	bl	800f8fe <__multadd>
 800f78e:	4606      	mov	r6, r0
 800f790:	e7f2      	b.n	800f778 <_dtoa_r+0xaa0>
 800f792:	f04f 0900 	mov.w	r9, #0
 800f796:	2201      	movs	r2, #1
 800f798:	9904      	ldr	r1, [sp, #16]
 800f79a:	4620      	mov	r0, r4
 800f79c:	f000 fa26 	bl	800fbec <__lshift>
 800f7a0:	4639      	mov	r1, r7
 800f7a2:	9004      	str	r0, [sp, #16]
 800f7a4:	f000 fa76 	bl	800fc94 <__mcmp>
 800f7a8:	2800      	cmp	r0, #0
 800f7aa:	dcb6      	bgt.n	800f71a <_dtoa_r+0xa42>
 800f7ac:	d102      	bne.n	800f7b4 <_dtoa_r+0xadc>
 800f7ae:	f018 0f01 	tst.w	r8, #1
 800f7b2:	d1b2      	bne.n	800f71a <_dtoa_r+0xa42>
 800f7b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f7b8:	2b30      	cmp	r3, #48	; 0x30
 800f7ba:	f105 32ff 	add.w	r2, r5, #4294967295
 800f7be:	f47f af0a 	bne.w	800f5d6 <_dtoa_r+0x8fe>
 800f7c2:	4615      	mov	r5, r2
 800f7c4:	e7f6      	b.n	800f7b4 <_dtoa_r+0xadc>
 800f7c6:	4593      	cmp	fp, r2
 800f7c8:	d105      	bne.n	800f7d6 <_dtoa_r+0xafe>
 800f7ca:	2331      	movs	r3, #49	; 0x31
 800f7cc:	f10a 0a01 	add.w	sl, sl, #1
 800f7d0:	f88b 3000 	strb.w	r3, [fp]
 800f7d4:	e6ff      	b.n	800f5d6 <_dtoa_r+0x8fe>
 800f7d6:	4615      	mov	r5, r2
 800f7d8:	e79f      	b.n	800f71a <_dtoa_r+0xa42>
 800f7da:	f8df b064 	ldr.w	fp, [pc, #100]	; 800f840 <_dtoa_r+0xb68>
 800f7de:	e007      	b.n	800f7f0 <_dtoa_r+0xb18>
 800f7e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f7e2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800f844 <_dtoa_r+0xb6c>
 800f7e6:	b11b      	cbz	r3, 800f7f0 <_dtoa_r+0xb18>
 800f7e8:	f10b 0308 	add.w	r3, fp, #8
 800f7ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f7ee:	6013      	str	r3, [r2, #0]
 800f7f0:	4658      	mov	r0, fp
 800f7f2:	b017      	add	sp, #92	; 0x5c
 800f7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7f8:	9b06      	ldr	r3, [sp, #24]
 800f7fa:	2b01      	cmp	r3, #1
 800f7fc:	f77f ae35 	ble.w	800f46a <_dtoa_r+0x792>
 800f800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f802:	9307      	str	r3, [sp, #28]
 800f804:	e649      	b.n	800f49a <_dtoa_r+0x7c2>
 800f806:	9b02      	ldr	r3, [sp, #8]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	dc03      	bgt.n	800f814 <_dtoa_r+0xb3c>
 800f80c:	9b06      	ldr	r3, [sp, #24]
 800f80e:	2b02      	cmp	r3, #2
 800f810:	f73f aecc 	bgt.w	800f5ac <_dtoa_r+0x8d4>
 800f814:	465d      	mov	r5, fp
 800f816:	4639      	mov	r1, r7
 800f818:	9804      	ldr	r0, [sp, #16]
 800f81a:	f7ff f9d1 	bl	800ebc0 <quorem>
 800f81e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f822:	f805 8b01 	strb.w	r8, [r5], #1
 800f826:	9a02      	ldr	r2, [sp, #8]
 800f828:	eba5 030b 	sub.w	r3, r5, fp
 800f82c:	429a      	cmp	r2, r3
 800f82e:	ddb0      	ble.n	800f792 <_dtoa_r+0xaba>
 800f830:	2300      	movs	r3, #0
 800f832:	220a      	movs	r2, #10
 800f834:	9904      	ldr	r1, [sp, #16]
 800f836:	4620      	mov	r0, r4
 800f838:	f000 f861 	bl	800f8fe <__multadd>
 800f83c:	9004      	str	r0, [sp, #16]
 800f83e:	e7ea      	b.n	800f816 <_dtoa_r+0xb3e>
 800f840:	0800ff84 	.word	0x0800ff84
 800f844:	0800ff86 	.word	0x0800ff86

0800f848 <_localeconv_r>:
 800f848:	4b04      	ldr	r3, [pc, #16]	; (800f85c <_localeconv_r+0x14>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	6a18      	ldr	r0, [r3, #32]
 800f84e:	4b04      	ldr	r3, [pc, #16]	; (800f860 <_localeconv_r+0x18>)
 800f850:	2800      	cmp	r0, #0
 800f852:	bf08      	it	eq
 800f854:	4618      	moveq	r0, r3
 800f856:	30f0      	adds	r0, #240	; 0xf0
 800f858:	4770      	bx	lr
 800f85a:	bf00      	nop
 800f85c:	20000184 	.word	0x20000184
 800f860:	200001e8 	.word	0x200001e8

0800f864 <__malloc_lock>:
 800f864:	4770      	bx	lr

0800f866 <__malloc_unlock>:
 800f866:	4770      	bx	lr

0800f868 <_Balloc>:
 800f868:	b570      	push	{r4, r5, r6, lr}
 800f86a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f86c:	4604      	mov	r4, r0
 800f86e:	460e      	mov	r6, r1
 800f870:	b93d      	cbnz	r5, 800f882 <_Balloc+0x1a>
 800f872:	2010      	movs	r0, #16
 800f874:	f7fe fd7e 	bl	800e374 <malloc>
 800f878:	6260      	str	r0, [r4, #36]	; 0x24
 800f87a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f87e:	6005      	str	r5, [r0, #0]
 800f880:	60c5      	str	r5, [r0, #12]
 800f882:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f884:	68eb      	ldr	r3, [r5, #12]
 800f886:	b183      	cbz	r3, 800f8aa <_Balloc+0x42>
 800f888:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f88a:	68db      	ldr	r3, [r3, #12]
 800f88c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f890:	b9b8      	cbnz	r0, 800f8c2 <_Balloc+0x5a>
 800f892:	2101      	movs	r1, #1
 800f894:	fa01 f506 	lsl.w	r5, r1, r6
 800f898:	1d6a      	adds	r2, r5, #5
 800f89a:	0092      	lsls	r2, r2, #2
 800f89c:	4620      	mov	r0, r4
 800f89e:	f000 fabf 	bl	800fe20 <_calloc_r>
 800f8a2:	b160      	cbz	r0, 800f8be <_Balloc+0x56>
 800f8a4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f8a8:	e00e      	b.n	800f8c8 <_Balloc+0x60>
 800f8aa:	2221      	movs	r2, #33	; 0x21
 800f8ac:	2104      	movs	r1, #4
 800f8ae:	4620      	mov	r0, r4
 800f8b0:	f000 fab6 	bl	800fe20 <_calloc_r>
 800f8b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8b6:	60e8      	str	r0, [r5, #12]
 800f8b8:	68db      	ldr	r3, [r3, #12]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d1e4      	bne.n	800f888 <_Balloc+0x20>
 800f8be:	2000      	movs	r0, #0
 800f8c0:	bd70      	pop	{r4, r5, r6, pc}
 800f8c2:	6802      	ldr	r2, [r0, #0]
 800f8c4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f8ce:	e7f7      	b.n	800f8c0 <_Balloc+0x58>

0800f8d0 <_Bfree>:
 800f8d0:	b570      	push	{r4, r5, r6, lr}
 800f8d2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f8d4:	4606      	mov	r6, r0
 800f8d6:	460d      	mov	r5, r1
 800f8d8:	b93c      	cbnz	r4, 800f8ea <_Bfree+0x1a>
 800f8da:	2010      	movs	r0, #16
 800f8dc:	f7fe fd4a 	bl	800e374 <malloc>
 800f8e0:	6270      	str	r0, [r6, #36]	; 0x24
 800f8e2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f8e6:	6004      	str	r4, [r0, #0]
 800f8e8:	60c4      	str	r4, [r0, #12]
 800f8ea:	b13d      	cbz	r5, 800f8fc <_Bfree+0x2c>
 800f8ec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f8ee:	686a      	ldr	r2, [r5, #4]
 800f8f0:	68db      	ldr	r3, [r3, #12]
 800f8f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f8f6:	6029      	str	r1, [r5, #0]
 800f8f8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f8fc:	bd70      	pop	{r4, r5, r6, pc}

0800f8fe <__multadd>:
 800f8fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f902:	690d      	ldr	r5, [r1, #16]
 800f904:	461f      	mov	r7, r3
 800f906:	4606      	mov	r6, r0
 800f908:	460c      	mov	r4, r1
 800f90a:	f101 0c14 	add.w	ip, r1, #20
 800f90e:	2300      	movs	r3, #0
 800f910:	f8dc 0000 	ldr.w	r0, [ip]
 800f914:	b281      	uxth	r1, r0
 800f916:	fb02 7101 	mla	r1, r2, r1, r7
 800f91a:	0c0f      	lsrs	r7, r1, #16
 800f91c:	0c00      	lsrs	r0, r0, #16
 800f91e:	fb02 7000 	mla	r0, r2, r0, r7
 800f922:	b289      	uxth	r1, r1
 800f924:	3301      	adds	r3, #1
 800f926:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f92a:	429d      	cmp	r5, r3
 800f92c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f930:	f84c 1b04 	str.w	r1, [ip], #4
 800f934:	dcec      	bgt.n	800f910 <__multadd+0x12>
 800f936:	b1d7      	cbz	r7, 800f96e <__multadd+0x70>
 800f938:	68a3      	ldr	r3, [r4, #8]
 800f93a:	42ab      	cmp	r3, r5
 800f93c:	dc12      	bgt.n	800f964 <__multadd+0x66>
 800f93e:	6861      	ldr	r1, [r4, #4]
 800f940:	4630      	mov	r0, r6
 800f942:	3101      	adds	r1, #1
 800f944:	f7ff ff90 	bl	800f868 <_Balloc>
 800f948:	6922      	ldr	r2, [r4, #16]
 800f94a:	3202      	adds	r2, #2
 800f94c:	f104 010c 	add.w	r1, r4, #12
 800f950:	4680      	mov	r8, r0
 800f952:	0092      	lsls	r2, r2, #2
 800f954:	300c      	adds	r0, #12
 800f956:	f7fe fd1d 	bl	800e394 <memcpy>
 800f95a:	4621      	mov	r1, r4
 800f95c:	4630      	mov	r0, r6
 800f95e:	f7ff ffb7 	bl	800f8d0 <_Bfree>
 800f962:	4644      	mov	r4, r8
 800f964:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f968:	3501      	adds	r5, #1
 800f96a:	615f      	str	r7, [r3, #20]
 800f96c:	6125      	str	r5, [r4, #16]
 800f96e:	4620      	mov	r0, r4
 800f970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f974 <__hi0bits>:
 800f974:	0c02      	lsrs	r2, r0, #16
 800f976:	0412      	lsls	r2, r2, #16
 800f978:	4603      	mov	r3, r0
 800f97a:	b9b2      	cbnz	r2, 800f9aa <__hi0bits+0x36>
 800f97c:	0403      	lsls	r3, r0, #16
 800f97e:	2010      	movs	r0, #16
 800f980:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f984:	bf04      	itt	eq
 800f986:	021b      	lsleq	r3, r3, #8
 800f988:	3008      	addeq	r0, #8
 800f98a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f98e:	bf04      	itt	eq
 800f990:	011b      	lsleq	r3, r3, #4
 800f992:	3004      	addeq	r0, #4
 800f994:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f998:	bf04      	itt	eq
 800f99a:	009b      	lsleq	r3, r3, #2
 800f99c:	3002      	addeq	r0, #2
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	db06      	blt.n	800f9b0 <__hi0bits+0x3c>
 800f9a2:	005b      	lsls	r3, r3, #1
 800f9a4:	d503      	bpl.n	800f9ae <__hi0bits+0x3a>
 800f9a6:	3001      	adds	r0, #1
 800f9a8:	4770      	bx	lr
 800f9aa:	2000      	movs	r0, #0
 800f9ac:	e7e8      	b.n	800f980 <__hi0bits+0xc>
 800f9ae:	2020      	movs	r0, #32
 800f9b0:	4770      	bx	lr

0800f9b2 <__lo0bits>:
 800f9b2:	6803      	ldr	r3, [r0, #0]
 800f9b4:	f013 0207 	ands.w	r2, r3, #7
 800f9b8:	4601      	mov	r1, r0
 800f9ba:	d00b      	beq.n	800f9d4 <__lo0bits+0x22>
 800f9bc:	07da      	lsls	r2, r3, #31
 800f9be:	d423      	bmi.n	800fa08 <__lo0bits+0x56>
 800f9c0:	0798      	lsls	r0, r3, #30
 800f9c2:	bf49      	itett	mi
 800f9c4:	085b      	lsrmi	r3, r3, #1
 800f9c6:	089b      	lsrpl	r3, r3, #2
 800f9c8:	2001      	movmi	r0, #1
 800f9ca:	600b      	strmi	r3, [r1, #0]
 800f9cc:	bf5c      	itt	pl
 800f9ce:	600b      	strpl	r3, [r1, #0]
 800f9d0:	2002      	movpl	r0, #2
 800f9d2:	4770      	bx	lr
 800f9d4:	b298      	uxth	r0, r3
 800f9d6:	b9a8      	cbnz	r0, 800fa04 <__lo0bits+0x52>
 800f9d8:	0c1b      	lsrs	r3, r3, #16
 800f9da:	2010      	movs	r0, #16
 800f9dc:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f9e0:	bf04      	itt	eq
 800f9e2:	0a1b      	lsreq	r3, r3, #8
 800f9e4:	3008      	addeq	r0, #8
 800f9e6:	071a      	lsls	r2, r3, #28
 800f9e8:	bf04      	itt	eq
 800f9ea:	091b      	lsreq	r3, r3, #4
 800f9ec:	3004      	addeq	r0, #4
 800f9ee:	079a      	lsls	r2, r3, #30
 800f9f0:	bf04      	itt	eq
 800f9f2:	089b      	lsreq	r3, r3, #2
 800f9f4:	3002      	addeq	r0, #2
 800f9f6:	07da      	lsls	r2, r3, #31
 800f9f8:	d402      	bmi.n	800fa00 <__lo0bits+0x4e>
 800f9fa:	085b      	lsrs	r3, r3, #1
 800f9fc:	d006      	beq.n	800fa0c <__lo0bits+0x5a>
 800f9fe:	3001      	adds	r0, #1
 800fa00:	600b      	str	r3, [r1, #0]
 800fa02:	4770      	bx	lr
 800fa04:	4610      	mov	r0, r2
 800fa06:	e7e9      	b.n	800f9dc <__lo0bits+0x2a>
 800fa08:	2000      	movs	r0, #0
 800fa0a:	4770      	bx	lr
 800fa0c:	2020      	movs	r0, #32
 800fa0e:	4770      	bx	lr

0800fa10 <__i2b>:
 800fa10:	b510      	push	{r4, lr}
 800fa12:	460c      	mov	r4, r1
 800fa14:	2101      	movs	r1, #1
 800fa16:	f7ff ff27 	bl	800f868 <_Balloc>
 800fa1a:	2201      	movs	r2, #1
 800fa1c:	6144      	str	r4, [r0, #20]
 800fa1e:	6102      	str	r2, [r0, #16]
 800fa20:	bd10      	pop	{r4, pc}

0800fa22 <__multiply>:
 800fa22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa26:	4614      	mov	r4, r2
 800fa28:	690a      	ldr	r2, [r1, #16]
 800fa2a:	6923      	ldr	r3, [r4, #16]
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	bfb8      	it	lt
 800fa30:	460b      	movlt	r3, r1
 800fa32:	4688      	mov	r8, r1
 800fa34:	bfbc      	itt	lt
 800fa36:	46a0      	movlt	r8, r4
 800fa38:	461c      	movlt	r4, r3
 800fa3a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fa3e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fa42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fa46:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fa4a:	eb07 0609 	add.w	r6, r7, r9
 800fa4e:	42b3      	cmp	r3, r6
 800fa50:	bfb8      	it	lt
 800fa52:	3101      	addlt	r1, #1
 800fa54:	f7ff ff08 	bl	800f868 <_Balloc>
 800fa58:	f100 0514 	add.w	r5, r0, #20
 800fa5c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800fa60:	462b      	mov	r3, r5
 800fa62:	2200      	movs	r2, #0
 800fa64:	4573      	cmp	r3, lr
 800fa66:	d316      	bcc.n	800fa96 <__multiply+0x74>
 800fa68:	f104 0214 	add.w	r2, r4, #20
 800fa6c:	f108 0114 	add.w	r1, r8, #20
 800fa70:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800fa74:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800fa78:	9300      	str	r3, [sp, #0]
 800fa7a:	9b00      	ldr	r3, [sp, #0]
 800fa7c:	9201      	str	r2, [sp, #4]
 800fa7e:	4293      	cmp	r3, r2
 800fa80:	d80c      	bhi.n	800fa9c <__multiply+0x7a>
 800fa82:	2e00      	cmp	r6, #0
 800fa84:	dd03      	ble.n	800fa8e <__multiply+0x6c>
 800fa86:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d05d      	beq.n	800fb4a <__multiply+0x128>
 800fa8e:	6106      	str	r6, [r0, #16]
 800fa90:	b003      	add	sp, #12
 800fa92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa96:	f843 2b04 	str.w	r2, [r3], #4
 800fa9a:	e7e3      	b.n	800fa64 <__multiply+0x42>
 800fa9c:	f8b2 b000 	ldrh.w	fp, [r2]
 800faa0:	f1bb 0f00 	cmp.w	fp, #0
 800faa4:	d023      	beq.n	800faee <__multiply+0xcc>
 800faa6:	4689      	mov	r9, r1
 800faa8:	46ac      	mov	ip, r5
 800faaa:	f04f 0800 	mov.w	r8, #0
 800faae:	f859 4b04 	ldr.w	r4, [r9], #4
 800fab2:	f8dc a000 	ldr.w	sl, [ip]
 800fab6:	b2a3      	uxth	r3, r4
 800fab8:	fa1f fa8a 	uxth.w	sl, sl
 800fabc:	fb0b a303 	mla	r3, fp, r3, sl
 800fac0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fac4:	f8dc 4000 	ldr.w	r4, [ip]
 800fac8:	4443      	add	r3, r8
 800faca:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800face:	fb0b 840a 	mla	r4, fp, sl, r8
 800fad2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800fad6:	46e2      	mov	sl, ip
 800fad8:	b29b      	uxth	r3, r3
 800fada:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800fade:	454f      	cmp	r7, r9
 800fae0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800fae4:	f84a 3b04 	str.w	r3, [sl], #4
 800fae8:	d82b      	bhi.n	800fb42 <__multiply+0x120>
 800faea:	f8cc 8004 	str.w	r8, [ip, #4]
 800faee:	9b01      	ldr	r3, [sp, #4]
 800faf0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800faf4:	3204      	adds	r2, #4
 800faf6:	f1ba 0f00 	cmp.w	sl, #0
 800fafa:	d020      	beq.n	800fb3e <__multiply+0x11c>
 800fafc:	682b      	ldr	r3, [r5, #0]
 800fafe:	4689      	mov	r9, r1
 800fb00:	46a8      	mov	r8, r5
 800fb02:	f04f 0b00 	mov.w	fp, #0
 800fb06:	f8b9 c000 	ldrh.w	ip, [r9]
 800fb0a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800fb0e:	fb0a 440c 	mla	r4, sl, ip, r4
 800fb12:	445c      	add	r4, fp
 800fb14:	46c4      	mov	ip, r8
 800fb16:	b29b      	uxth	r3, r3
 800fb18:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800fb1c:	f84c 3b04 	str.w	r3, [ip], #4
 800fb20:	f859 3b04 	ldr.w	r3, [r9], #4
 800fb24:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800fb28:	0c1b      	lsrs	r3, r3, #16
 800fb2a:	fb0a b303 	mla	r3, sl, r3, fp
 800fb2e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800fb32:	454f      	cmp	r7, r9
 800fb34:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800fb38:	d805      	bhi.n	800fb46 <__multiply+0x124>
 800fb3a:	f8c8 3004 	str.w	r3, [r8, #4]
 800fb3e:	3504      	adds	r5, #4
 800fb40:	e79b      	b.n	800fa7a <__multiply+0x58>
 800fb42:	46d4      	mov	ip, sl
 800fb44:	e7b3      	b.n	800faae <__multiply+0x8c>
 800fb46:	46e0      	mov	r8, ip
 800fb48:	e7dd      	b.n	800fb06 <__multiply+0xe4>
 800fb4a:	3e01      	subs	r6, #1
 800fb4c:	e799      	b.n	800fa82 <__multiply+0x60>
	...

0800fb50 <__pow5mult>:
 800fb50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb54:	4615      	mov	r5, r2
 800fb56:	f012 0203 	ands.w	r2, r2, #3
 800fb5a:	4606      	mov	r6, r0
 800fb5c:	460f      	mov	r7, r1
 800fb5e:	d007      	beq.n	800fb70 <__pow5mult+0x20>
 800fb60:	3a01      	subs	r2, #1
 800fb62:	4c21      	ldr	r4, [pc, #132]	; (800fbe8 <__pow5mult+0x98>)
 800fb64:	2300      	movs	r3, #0
 800fb66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fb6a:	f7ff fec8 	bl	800f8fe <__multadd>
 800fb6e:	4607      	mov	r7, r0
 800fb70:	10ad      	asrs	r5, r5, #2
 800fb72:	d035      	beq.n	800fbe0 <__pow5mult+0x90>
 800fb74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fb76:	b93c      	cbnz	r4, 800fb88 <__pow5mult+0x38>
 800fb78:	2010      	movs	r0, #16
 800fb7a:	f7fe fbfb 	bl	800e374 <malloc>
 800fb7e:	6270      	str	r0, [r6, #36]	; 0x24
 800fb80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fb84:	6004      	str	r4, [r0, #0]
 800fb86:	60c4      	str	r4, [r0, #12]
 800fb88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fb8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fb90:	b94c      	cbnz	r4, 800fba6 <__pow5mult+0x56>
 800fb92:	f240 2171 	movw	r1, #625	; 0x271
 800fb96:	4630      	mov	r0, r6
 800fb98:	f7ff ff3a 	bl	800fa10 <__i2b>
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800fba2:	4604      	mov	r4, r0
 800fba4:	6003      	str	r3, [r0, #0]
 800fba6:	f04f 0800 	mov.w	r8, #0
 800fbaa:	07eb      	lsls	r3, r5, #31
 800fbac:	d50a      	bpl.n	800fbc4 <__pow5mult+0x74>
 800fbae:	4639      	mov	r1, r7
 800fbb0:	4622      	mov	r2, r4
 800fbb2:	4630      	mov	r0, r6
 800fbb4:	f7ff ff35 	bl	800fa22 <__multiply>
 800fbb8:	4639      	mov	r1, r7
 800fbba:	4681      	mov	r9, r0
 800fbbc:	4630      	mov	r0, r6
 800fbbe:	f7ff fe87 	bl	800f8d0 <_Bfree>
 800fbc2:	464f      	mov	r7, r9
 800fbc4:	106d      	asrs	r5, r5, #1
 800fbc6:	d00b      	beq.n	800fbe0 <__pow5mult+0x90>
 800fbc8:	6820      	ldr	r0, [r4, #0]
 800fbca:	b938      	cbnz	r0, 800fbdc <__pow5mult+0x8c>
 800fbcc:	4622      	mov	r2, r4
 800fbce:	4621      	mov	r1, r4
 800fbd0:	4630      	mov	r0, r6
 800fbd2:	f7ff ff26 	bl	800fa22 <__multiply>
 800fbd6:	6020      	str	r0, [r4, #0]
 800fbd8:	f8c0 8000 	str.w	r8, [r0]
 800fbdc:	4604      	mov	r4, r0
 800fbde:	e7e4      	b.n	800fbaa <__pow5mult+0x5a>
 800fbe0:	4638      	mov	r0, r7
 800fbe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbe6:	bf00      	nop
 800fbe8:	08010088 	.word	0x08010088

0800fbec <__lshift>:
 800fbec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbf0:	460c      	mov	r4, r1
 800fbf2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fbf6:	6923      	ldr	r3, [r4, #16]
 800fbf8:	6849      	ldr	r1, [r1, #4]
 800fbfa:	eb0a 0903 	add.w	r9, sl, r3
 800fbfe:	68a3      	ldr	r3, [r4, #8]
 800fc00:	4607      	mov	r7, r0
 800fc02:	4616      	mov	r6, r2
 800fc04:	f109 0501 	add.w	r5, r9, #1
 800fc08:	42ab      	cmp	r3, r5
 800fc0a:	db32      	blt.n	800fc72 <__lshift+0x86>
 800fc0c:	4638      	mov	r0, r7
 800fc0e:	f7ff fe2b 	bl	800f868 <_Balloc>
 800fc12:	2300      	movs	r3, #0
 800fc14:	4680      	mov	r8, r0
 800fc16:	f100 0114 	add.w	r1, r0, #20
 800fc1a:	461a      	mov	r2, r3
 800fc1c:	4553      	cmp	r3, sl
 800fc1e:	db2b      	blt.n	800fc78 <__lshift+0x8c>
 800fc20:	6920      	ldr	r0, [r4, #16]
 800fc22:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fc26:	f104 0314 	add.w	r3, r4, #20
 800fc2a:	f016 021f 	ands.w	r2, r6, #31
 800fc2e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fc32:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fc36:	d025      	beq.n	800fc84 <__lshift+0x98>
 800fc38:	f1c2 0e20 	rsb	lr, r2, #32
 800fc3c:	2000      	movs	r0, #0
 800fc3e:	681e      	ldr	r6, [r3, #0]
 800fc40:	468a      	mov	sl, r1
 800fc42:	4096      	lsls	r6, r2
 800fc44:	4330      	orrs	r0, r6
 800fc46:	f84a 0b04 	str.w	r0, [sl], #4
 800fc4a:	f853 0b04 	ldr.w	r0, [r3], #4
 800fc4e:	459c      	cmp	ip, r3
 800fc50:	fa20 f00e 	lsr.w	r0, r0, lr
 800fc54:	d814      	bhi.n	800fc80 <__lshift+0x94>
 800fc56:	6048      	str	r0, [r1, #4]
 800fc58:	b108      	cbz	r0, 800fc5e <__lshift+0x72>
 800fc5a:	f109 0502 	add.w	r5, r9, #2
 800fc5e:	3d01      	subs	r5, #1
 800fc60:	4638      	mov	r0, r7
 800fc62:	f8c8 5010 	str.w	r5, [r8, #16]
 800fc66:	4621      	mov	r1, r4
 800fc68:	f7ff fe32 	bl	800f8d0 <_Bfree>
 800fc6c:	4640      	mov	r0, r8
 800fc6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc72:	3101      	adds	r1, #1
 800fc74:	005b      	lsls	r3, r3, #1
 800fc76:	e7c7      	b.n	800fc08 <__lshift+0x1c>
 800fc78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fc7c:	3301      	adds	r3, #1
 800fc7e:	e7cd      	b.n	800fc1c <__lshift+0x30>
 800fc80:	4651      	mov	r1, sl
 800fc82:	e7dc      	b.n	800fc3e <__lshift+0x52>
 800fc84:	3904      	subs	r1, #4
 800fc86:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc8a:	f841 2f04 	str.w	r2, [r1, #4]!
 800fc8e:	459c      	cmp	ip, r3
 800fc90:	d8f9      	bhi.n	800fc86 <__lshift+0x9a>
 800fc92:	e7e4      	b.n	800fc5e <__lshift+0x72>

0800fc94 <__mcmp>:
 800fc94:	6903      	ldr	r3, [r0, #16]
 800fc96:	690a      	ldr	r2, [r1, #16]
 800fc98:	1a9b      	subs	r3, r3, r2
 800fc9a:	b530      	push	{r4, r5, lr}
 800fc9c:	d10c      	bne.n	800fcb8 <__mcmp+0x24>
 800fc9e:	0092      	lsls	r2, r2, #2
 800fca0:	3014      	adds	r0, #20
 800fca2:	3114      	adds	r1, #20
 800fca4:	1884      	adds	r4, r0, r2
 800fca6:	4411      	add	r1, r2
 800fca8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fcac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fcb0:	4295      	cmp	r5, r2
 800fcb2:	d003      	beq.n	800fcbc <__mcmp+0x28>
 800fcb4:	d305      	bcc.n	800fcc2 <__mcmp+0x2e>
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	4618      	mov	r0, r3
 800fcba:	bd30      	pop	{r4, r5, pc}
 800fcbc:	42a0      	cmp	r0, r4
 800fcbe:	d3f3      	bcc.n	800fca8 <__mcmp+0x14>
 800fcc0:	e7fa      	b.n	800fcb8 <__mcmp+0x24>
 800fcc2:	f04f 33ff 	mov.w	r3, #4294967295
 800fcc6:	e7f7      	b.n	800fcb8 <__mcmp+0x24>

0800fcc8 <__mdiff>:
 800fcc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fccc:	460d      	mov	r5, r1
 800fcce:	4607      	mov	r7, r0
 800fcd0:	4611      	mov	r1, r2
 800fcd2:	4628      	mov	r0, r5
 800fcd4:	4614      	mov	r4, r2
 800fcd6:	f7ff ffdd 	bl	800fc94 <__mcmp>
 800fcda:	1e06      	subs	r6, r0, #0
 800fcdc:	d108      	bne.n	800fcf0 <__mdiff+0x28>
 800fcde:	4631      	mov	r1, r6
 800fce0:	4638      	mov	r0, r7
 800fce2:	f7ff fdc1 	bl	800f868 <_Balloc>
 800fce6:	2301      	movs	r3, #1
 800fce8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800fcec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcf0:	bfa4      	itt	ge
 800fcf2:	4623      	movge	r3, r4
 800fcf4:	462c      	movge	r4, r5
 800fcf6:	4638      	mov	r0, r7
 800fcf8:	6861      	ldr	r1, [r4, #4]
 800fcfa:	bfa6      	itte	ge
 800fcfc:	461d      	movge	r5, r3
 800fcfe:	2600      	movge	r6, #0
 800fd00:	2601      	movlt	r6, #1
 800fd02:	f7ff fdb1 	bl	800f868 <_Balloc>
 800fd06:	692b      	ldr	r3, [r5, #16]
 800fd08:	60c6      	str	r6, [r0, #12]
 800fd0a:	6926      	ldr	r6, [r4, #16]
 800fd0c:	f105 0914 	add.w	r9, r5, #20
 800fd10:	f104 0214 	add.w	r2, r4, #20
 800fd14:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800fd18:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800fd1c:	f100 0514 	add.w	r5, r0, #20
 800fd20:	f04f 0e00 	mov.w	lr, #0
 800fd24:	f852 ab04 	ldr.w	sl, [r2], #4
 800fd28:	f859 4b04 	ldr.w	r4, [r9], #4
 800fd2c:	fa1e f18a 	uxtah	r1, lr, sl
 800fd30:	b2a3      	uxth	r3, r4
 800fd32:	1ac9      	subs	r1, r1, r3
 800fd34:	0c23      	lsrs	r3, r4, #16
 800fd36:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800fd3a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800fd3e:	b289      	uxth	r1, r1
 800fd40:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800fd44:	45c8      	cmp	r8, r9
 800fd46:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800fd4a:	4694      	mov	ip, r2
 800fd4c:	f845 3b04 	str.w	r3, [r5], #4
 800fd50:	d8e8      	bhi.n	800fd24 <__mdiff+0x5c>
 800fd52:	45bc      	cmp	ip, r7
 800fd54:	d304      	bcc.n	800fd60 <__mdiff+0x98>
 800fd56:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800fd5a:	b183      	cbz	r3, 800fd7e <__mdiff+0xb6>
 800fd5c:	6106      	str	r6, [r0, #16]
 800fd5e:	e7c5      	b.n	800fcec <__mdiff+0x24>
 800fd60:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fd64:	fa1e f381 	uxtah	r3, lr, r1
 800fd68:	141a      	asrs	r2, r3, #16
 800fd6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fd6e:	b29b      	uxth	r3, r3
 800fd70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fd74:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800fd78:	f845 3b04 	str.w	r3, [r5], #4
 800fd7c:	e7e9      	b.n	800fd52 <__mdiff+0x8a>
 800fd7e:	3e01      	subs	r6, #1
 800fd80:	e7e9      	b.n	800fd56 <__mdiff+0x8e>

0800fd82 <__d2b>:
 800fd82:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fd86:	460e      	mov	r6, r1
 800fd88:	2101      	movs	r1, #1
 800fd8a:	ec59 8b10 	vmov	r8, r9, d0
 800fd8e:	4615      	mov	r5, r2
 800fd90:	f7ff fd6a 	bl	800f868 <_Balloc>
 800fd94:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800fd98:	4607      	mov	r7, r0
 800fd9a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fd9e:	bb34      	cbnz	r4, 800fdee <__d2b+0x6c>
 800fda0:	9301      	str	r3, [sp, #4]
 800fda2:	f1b8 0300 	subs.w	r3, r8, #0
 800fda6:	d027      	beq.n	800fdf8 <__d2b+0x76>
 800fda8:	a802      	add	r0, sp, #8
 800fdaa:	f840 3d08 	str.w	r3, [r0, #-8]!
 800fdae:	f7ff fe00 	bl	800f9b2 <__lo0bits>
 800fdb2:	9900      	ldr	r1, [sp, #0]
 800fdb4:	b1f0      	cbz	r0, 800fdf4 <__d2b+0x72>
 800fdb6:	9a01      	ldr	r2, [sp, #4]
 800fdb8:	f1c0 0320 	rsb	r3, r0, #32
 800fdbc:	fa02 f303 	lsl.w	r3, r2, r3
 800fdc0:	430b      	orrs	r3, r1
 800fdc2:	40c2      	lsrs	r2, r0
 800fdc4:	617b      	str	r3, [r7, #20]
 800fdc6:	9201      	str	r2, [sp, #4]
 800fdc8:	9b01      	ldr	r3, [sp, #4]
 800fdca:	61bb      	str	r3, [r7, #24]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	bf14      	ite	ne
 800fdd0:	2102      	movne	r1, #2
 800fdd2:	2101      	moveq	r1, #1
 800fdd4:	6139      	str	r1, [r7, #16]
 800fdd6:	b1c4      	cbz	r4, 800fe0a <__d2b+0x88>
 800fdd8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800fddc:	4404      	add	r4, r0
 800fdde:	6034      	str	r4, [r6, #0]
 800fde0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fde4:	6028      	str	r0, [r5, #0]
 800fde6:	4638      	mov	r0, r7
 800fde8:	b003      	add	sp, #12
 800fdea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fdf2:	e7d5      	b.n	800fda0 <__d2b+0x1e>
 800fdf4:	6179      	str	r1, [r7, #20]
 800fdf6:	e7e7      	b.n	800fdc8 <__d2b+0x46>
 800fdf8:	a801      	add	r0, sp, #4
 800fdfa:	f7ff fdda 	bl	800f9b2 <__lo0bits>
 800fdfe:	9b01      	ldr	r3, [sp, #4]
 800fe00:	617b      	str	r3, [r7, #20]
 800fe02:	2101      	movs	r1, #1
 800fe04:	6139      	str	r1, [r7, #16]
 800fe06:	3020      	adds	r0, #32
 800fe08:	e7e5      	b.n	800fdd6 <__d2b+0x54>
 800fe0a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800fe0e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fe12:	6030      	str	r0, [r6, #0]
 800fe14:	6918      	ldr	r0, [r3, #16]
 800fe16:	f7ff fdad 	bl	800f974 <__hi0bits>
 800fe1a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800fe1e:	e7e1      	b.n	800fde4 <__d2b+0x62>

0800fe20 <_calloc_r>:
 800fe20:	b538      	push	{r3, r4, r5, lr}
 800fe22:	fb02 f401 	mul.w	r4, r2, r1
 800fe26:	4621      	mov	r1, r4
 800fe28:	f7fe fb16 	bl	800e458 <_malloc_r>
 800fe2c:	4605      	mov	r5, r0
 800fe2e:	b118      	cbz	r0, 800fe38 <_calloc_r+0x18>
 800fe30:	4622      	mov	r2, r4
 800fe32:	2100      	movs	r1, #0
 800fe34:	f7fe fab9 	bl	800e3aa <memset>
 800fe38:	4628      	mov	r0, r5
 800fe3a:	bd38      	pop	{r3, r4, r5, pc}

0800fe3c <__ascii_mbtowc>:
 800fe3c:	b082      	sub	sp, #8
 800fe3e:	b901      	cbnz	r1, 800fe42 <__ascii_mbtowc+0x6>
 800fe40:	a901      	add	r1, sp, #4
 800fe42:	b142      	cbz	r2, 800fe56 <__ascii_mbtowc+0x1a>
 800fe44:	b14b      	cbz	r3, 800fe5a <__ascii_mbtowc+0x1e>
 800fe46:	7813      	ldrb	r3, [r2, #0]
 800fe48:	600b      	str	r3, [r1, #0]
 800fe4a:	7812      	ldrb	r2, [r2, #0]
 800fe4c:	1c10      	adds	r0, r2, #0
 800fe4e:	bf18      	it	ne
 800fe50:	2001      	movne	r0, #1
 800fe52:	b002      	add	sp, #8
 800fe54:	4770      	bx	lr
 800fe56:	4610      	mov	r0, r2
 800fe58:	e7fb      	b.n	800fe52 <__ascii_mbtowc+0x16>
 800fe5a:	f06f 0001 	mvn.w	r0, #1
 800fe5e:	e7f8      	b.n	800fe52 <__ascii_mbtowc+0x16>

0800fe60 <__ascii_wctomb>:
 800fe60:	b149      	cbz	r1, 800fe76 <__ascii_wctomb+0x16>
 800fe62:	2aff      	cmp	r2, #255	; 0xff
 800fe64:	bf85      	ittet	hi
 800fe66:	238a      	movhi	r3, #138	; 0x8a
 800fe68:	6003      	strhi	r3, [r0, #0]
 800fe6a:	700a      	strbls	r2, [r1, #0]
 800fe6c:	f04f 30ff 	movhi.w	r0, #4294967295
 800fe70:	bf98      	it	ls
 800fe72:	2001      	movls	r0, #1
 800fe74:	4770      	bx	lr
 800fe76:	4608      	mov	r0, r1
 800fe78:	4770      	bx	lr
	...

0800fe7c <_init>:
 800fe7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe7e:	bf00      	nop
 800fe80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe82:	bc08      	pop	{r3}
 800fe84:	469e      	mov	lr, r3
 800fe86:	4770      	bx	lr

0800fe88 <_fini>:
 800fe88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe8a:	bf00      	nop
 800fe8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe8e:	bc08      	pop	{r3}
 800fe90:	469e      	mov	lr, r3
 800fe92:	4770      	bx	lr
