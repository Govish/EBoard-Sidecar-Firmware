
Buzzer Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dfc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005f9c  08005f9c  00015f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006008  08006008  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006008  08006008  00016008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006010  08006010  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006010  08006010  00016010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006014  08006014  00016014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049fc  20000010  08006028  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20004a0c  08006028  00024a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170c4  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e3e  00000000  00000000  00037104  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011a0  00000000  00000000  00039f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001058  00000000  00000000  0003b0e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000179d8  00000000  00000000  0003c140  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e12b  00000000  00000000  00053b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000930f7  00000000  00000000  00061c43  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f4d3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048f4  00000000  00000000  000f4db8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005f84 	.word	0x08005f84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08005f84 	.word	0x08005f84

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e4:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <HAL_Init+0x40>)
 80004ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <HAL_Init+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <HAL_Init+0x40>)
 80004f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <HAL_Init+0x40>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a07      	ldr	r2, [pc, #28]	; (8000520 <HAL_Init+0x40>)
 8000502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000506:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000508:	2003      	movs	r0, #3
 800050a:	f000 f8d8 	bl	80006be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800050e:	2000      	movs	r0, #0
 8000510:	f005 fc42 	bl	8005d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000514:	f005 fbbc 	bl	8005c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000518:	2300      	movs	r3, #0
}
 800051a:	4618      	mov	r0, r3
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40023c00 	.word	0x40023c00

08000524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_IncTick+0x20>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_IncTick+0x24>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_IncTick+0x24>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000004 	.word	0x20000004
 8000548:	20004944 	.word	0x20004944

0800054c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <HAL_GetTick+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20004944 	.word	0x20004944

08000564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f003 0307 	and.w	r3, r3, #7
 8000572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800057a:	68ba      	ldr	r2, [r7, #8]
 800057c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000580:	4013      	ands	r3, r2
 8000582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800058c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000596:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	60d3      	str	r3, [r2, #12]
}
 800059c:	bf00      	nop
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	e000ed00 	.word	0xe000ed00

080005ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <__NVIC_GetPriorityGrouping+0x18>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	f003 0307 	and.w	r3, r3, #7
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	db0b      	blt.n	80005f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f003 021f 	and.w	r2, r3, #31
 80005e0:	4907      	ldr	r1, [pc, #28]	; (8000600 <__NVIC_EnableIRQ+0x38>)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	095b      	lsrs	r3, r3, #5
 80005e8:	2001      	movs	r0, #1
 80005ea:	fa00 f202 	lsl.w	r2, r0, r2
 80005ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000e100 	.word	0xe000e100

08000604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000614:	2b00      	cmp	r3, #0
 8000616:	db0a      	blt.n	800062e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	b2da      	uxtb	r2, r3
 800061c:	490c      	ldr	r1, [pc, #48]	; (8000650 <__NVIC_SetPriority+0x4c>)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	0112      	lsls	r2, r2, #4
 8000624:	b2d2      	uxtb	r2, r2
 8000626:	440b      	add	r3, r1
 8000628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800062c:	e00a      	b.n	8000644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4908      	ldr	r1, [pc, #32]	; (8000654 <__NVIC_SetPriority+0x50>)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	f003 030f 	and.w	r3, r3, #15
 800063a:	3b04      	subs	r3, #4
 800063c:	0112      	lsls	r2, r2, #4
 800063e:	b2d2      	uxtb	r2, r2
 8000640:	440b      	add	r3, r1
 8000642:	761a      	strb	r2, [r3, #24]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000e100 	.word	0xe000e100
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000658:	b480      	push	{r7}
 800065a:	b089      	sub	sp, #36	; 0x24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	f1c3 0307 	rsb	r3, r3, #7
 8000672:	2b04      	cmp	r3, #4
 8000674:	bf28      	it	cs
 8000676:	2304      	movcs	r3, #4
 8000678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3304      	adds	r3, #4
 800067e:	2b06      	cmp	r3, #6
 8000680:	d902      	bls.n	8000688 <NVIC_EncodePriority+0x30>
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	3b03      	subs	r3, #3
 8000686:	e000      	b.n	800068a <NVIC_EncodePriority+0x32>
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068c:	f04f 32ff 	mov.w	r2, #4294967295
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	fa02 f303 	lsl.w	r3, r2, r3
 8000696:	43da      	mvns	r2, r3
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	401a      	ands	r2, r3
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a0:	f04f 31ff 	mov.w	r1, #4294967295
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	fa01 f303 	lsl.w	r3, r1, r3
 80006aa:	43d9      	mvns	r1, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b0:	4313      	orrs	r3, r2
         );
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3724      	adds	r7, #36	; 0x24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b082      	sub	sp, #8
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f7ff ff4c 	bl	8000564 <__NVIC_SetPriorityGrouping>
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
 80006e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006e6:	f7ff ff61 	bl	80005ac <__NVIC_GetPriorityGrouping>
 80006ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	68b9      	ldr	r1, [r7, #8]
 80006f0:	6978      	ldr	r0, [r7, #20]
 80006f2:	f7ff ffb1 	bl	8000658 <NVIC_EncodePriority>
 80006f6:	4602      	mov	r2, r0
 80006f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006fc:	4611      	mov	r1, r2
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff80 	bl	8000604 <__NVIC_SetPriority>
}
 8000704:	bf00      	nop
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff54 	bl	80005c8 <__NVIC_EnableIRQ>
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000728:	b480      	push	{r7}
 800072a:	b089      	sub	sp, #36	; 0x24
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
 8000742:	e159      	b.n	80009f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000744:	2201      	movs	r2, #1
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	fa02 f303 	lsl.w	r3, r2, r3
 800074c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	697a      	ldr	r2, [r7, #20]
 8000754:	4013      	ands	r3, r2
 8000756:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000758:	693a      	ldr	r2, [r7, #16]
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	429a      	cmp	r2, r3
 800075e:	f040 8148 	bne.w	80009f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d00b      	beq.n	8000782 <HAL_GPIO_Init+0x5a>
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	2b02      	cmp	r3, #2
 8000770:	d007      	beq.n	8000782 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000776:	2b11      	cmp	r3, #17
 8000778:	d003      	beq.n	8000782 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	2b12      	cmp	r3, #18
 8000780:	d130      	bne.n	80007e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	2203      	movs	r2, #3
 800078e:	fa02 f303 	lsl.w	r3, r2, r3
 8000792:	43db      	mvns	r3, r3
 8000794:	69ba      	ldr	r2, [r7, #24]
 8000796:	4013      	ands	r3, r2
 8000798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	68da      	ldr	r2, [r3, #12]
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	69ba      	ldr	r2, [r7, #24]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	69ba      	ldr	r2, [r7, #24]
 80007b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007b8:	2201      	movs	r2, #1
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	fa02 f303 	lsl.w	r3, r2, r3
 80007c0:	43db      	mvns	r3, r3
 80007c2:	69ba      	ldr	r2, [r7, #24]
 80007c4:	4013      	ands	r3, r2
 80007c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	091b      	lsrs	r3, r3, #4
 80007ce:	f003 0201 	and.w	r2, r3, #1
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	fa02 f303 	lsl.w	r3, r2, r3
 80007d8:	69ba      	ldr	r2, [r7, #24]
 80007da:	4313      	orrs	r3, r2
 80007dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	69ba      	ldr	r2, [r7, #24]
 80007e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	2203      	movs	r2, #3
 80007f0:	fa02 f303 	lsl.w	r3, r2, r3
 80007f4:	43db      	mvns	r3, r3
 80007f6:	69ba      	ldr	r2, [r7, #24]
 80007f8:	4013      	ands	r3, r2
 80007fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	689a      	ldr	r2, [r3, #8]
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	69ba      	ldr	r2, [r7, #24]
 800080a:	4313      	orrs	r3, r2
 800080c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	69ba      	ldr	r2, [r7, #24]
 8000812:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	2b02      	cmp	r3, #2
 800081a:	d003      	beq.n	8000824 <HAL_GPIO_Init+0xfc>
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	2b12      	cmp	r3, #18
 8000822:	d123      	bne.n	800086c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	08da      	lsrs	r2, r3, #3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3208      	adds	r2, #8
 800082c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000830:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	f003 0307 	and.w	r3, r3, #7
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	220f      	movs	r2, #15
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	43db      	mvns	r3, r3
 8000842:	69ba      	ldr	r2, [r7, #24]
 8000844:	4013      	ands	r3, r2
 8000846:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	691a      	ldr	r2, [r3, #16]
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	fa02 f303 	lsl.w	r3, r2, r3
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	4313      	orrs	r3, r2
 800085c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	08da      	lsrs	r2, r3, #3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3208      	adds	r2, #8
 8000866:	69b9      	ldr	r1, [r7, #24]
 8000868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	2203      	movs	r2, #3
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	43db      	mvns	r3, r3
 800087e:	69ba      	ldr	r2, [r7, #24]
 8000880:	4013      	ands	r3, r2
 8000882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	f003 0203 	and.w	r2, r3, #3
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	69ba      	ldr	r2, [r7, #24]
 8000896:	4313      	orrs	r3, r2
 8000898:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	69ba      	ldr	r2, [r7, #24]
 800089e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	f000 80a2 	beq.w	80009f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	4b56      	ldr	r3, [pc, #344]	; (8000a0c <HAL_GPIO_Init+0x2e4>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	4a55      	ldr	r2, [pc, #340]	; (8000a0c <HAL_GPIO_Init+0x2e4>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008bc:	6453      	str	r3, [r2, #68]	; 0x44
 80008be:	4b53      	ldr	r3, [pc, #332]	; (8000a0c <HAL_GPIO_Init+0x2e4>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80008ca:	4a51      	ldr	r2, [pc, #324]	; (8000a10 <HAL_GPIO_Init+0x2e8>)
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	089b      	lsrs	r3, r3, #2
 80008d0:	3302      	adds	r3, #2
 80008d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	f003 0303 	and.w	r3, r3, #3
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	220f      	movs	r2, #15
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	4013      	ands	r3, r2
 80008ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a48      	ldr	r2, [pc, #288]	; (8000a14 <HAL_GPIO_Init+0x2ec>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d019      	beq.n	800092a <HAL_GPIO_Init+0x202>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a47      	ldr	r2, [pc, #284]	; (8000a18 <HAL_GPIO_Init+0x2f0>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d013      	beq.n	8000926 <HAL_GPIO_Init+0x1fe>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a46      	ldr	r2, [pc, #280]	; (8000a1c <HAL_GPIO_Init+0x2f4>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d00d      	beq.n	8000922 <HAL_GPIO_Init+0x1fa>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a45      	ldr	r2, [pc, #276]	; (8000a20 <HAL_GPIO_Init+0x2f8>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d007      	beq.n	800091e <HAL_GPIO_Init+0x1f6>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a44      	ldr	r2, [pc, #272]	; (8000a24 <HAL_GPIO_Init+0x2fc>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d101      	bne.n	800091a <HAL_GPIO_Init+0x1f2>
 8000916:	2304      	movs	r3, #4
 8000918:	e008      	b.n	800092c <HAL_GPIO_Init+0x204>
 800091a:	2307      	movs	r3, #7
 800091c:	e006      	b.n	800092c <HAL_GPIO_Init+0x204>
 800091e:	2303      	movs	r3, #3
 8000920:	e004      	b.n	800092c <HAL_GPIO_Init+0x204>
 8000922:	2302      	movs	r3, #2
 8000924:	e002      	b.n	800092c <HAL_GPIO_Init+0x204>
 8000926:	2301      	movs	r3, #1
 8000928:	e000      	b.n	800092c <HAL_GPIO_Init+0x204>
 800092a:	2300      	movs	r3, #0
 800092c:	69fa      	ldr	r2, [r7, #28]
 800092e:	f002 0203 	and.w	r2, r2, #3
 8000932:	0092      	lsls	r2, r2, #2
 8000934:	4093      	lsls	r3, r2
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	4313      	orrs	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800093c:	4934      	ldr	r1, [pc, #208]	; (8000a10 <HAL_GPIO_Init+0x2e8>)
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	089b      	lsrs	r3, r3, #2
 8000942:	3302      	adds	r3, #2
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800094a:	4b37      	ldr	r3, [pc, #220]	; (8000a28 <HAL_GPIO_Init+0x300>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	43db      	mvns	r3, r3
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	4013      	ands	r3, r2
 8000958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000962:	2b00      	cmp	r3, #0
 8000964:	d003      	beq.n	800096e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000966:	69ba      	ldr	r2, [r7, #24]
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	4313      	orrs	r3, r2
 800096c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800096e:	4a2e      	ldr	r2, [pc, #184]	; (8000a28 <HAL_GPIO_Init+0x300>)
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000974:	4b2c      	ldr	r3, [pc, #176]	; (8000a28 <HAL_GPIO_Init+0x300>)
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	43db      	mvns	r3, r3
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	4013      	ands	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098c:	2b00      	cmp	r3, #0
 800098e:	d003      	beq.n	8000998 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	4313      	orrs	r3, r2
 8000996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000998:	4a23      	ldr	r2, [pc, #140]	; (8000a28 <HAL_GPIO_Init+0x300>)
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <HAL_GPIO_Init+0x300>)
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	43db      	mvns	r3, r3
 80009a8:	69ba      	ldr	r2, [r7, #24]
 80009aa:	4013      	ands	r3, r2
 80009ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d003      	beq.n	80009c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80009ba:	69ba      	ldr	r2, [r7, #24]
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	4313      	orrs	r3, r2
 80009c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80009c2:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <HAL_GPIO_Init+0x300>)
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80009c8:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <HAL_GPIO_Init+0x300>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	43db      	mvns	r3, r3
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	4013      	ands	r3, r2
 80009d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d003      	beq.n	80009ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <HAL_GPIO_Init+0x300>)
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3301      	adds	r3, #1
 80009f6:	61fb      	str	r3, [r7, #28]
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	2b0f      	cmp	r3, #15
 80009fc:	f67f aea2 	bls.w	8000744 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a00:	bf00      	nop
 8000a02:	3724      	adds	r7, #36	; 0x24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40013800 	.word	0x40013800
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40020400 	.word	0x40020400
 8000a1c:	40020800 	.word	0x40020800
 8000a20:	40020c00 	.word	0x40020c00
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40013c00 	.word	0x40013c00

08000a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	807b      	strh	r3, [r7, #2]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a3c:	787b      	ldrb	r3, [r7, #1]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d003      	beq.n	8000a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a42:	887a      	ldrh	r2, [r7, #2]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000a48:	e003      	b.n	8000a52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a4a:	887b      	ldrh	r3, [r7, #2]
 8000a4c:	041a      	lsls	r2, r3, #16
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	619a      	str	r2, [r3, #24]
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
	...

08000a60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d101      	bne.n	8000a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e25b      	b.n	8000f2a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d075      	beq.n	8000b6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a7e:	4ba3      	ldr	r3, [pc, #652]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	f003 030c 	and.w	r3, r3, #12
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	d00c      	beq.n	8000aa4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a8a:	4ba0      	ldr	r3, [pc, #640]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a92:	2b08      	cmp	r3, #8
 8000a94:	d112      	bne.n	8000abc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a96:	4b9d      	ldr	r3, [pc, #628]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000aa2:	d10b      	bne.n	8000abc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aa4:	4b99      	ldr	r3, [pc, #612]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d05b      	beq.n	8000b68 <HAL_RCC_OscConfig+0x108>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d157      	bne.n	8000b68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e236      	b.n	8000f2a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ac4:	d106      	bne.n	8000ad4 <HAL_RCC_OscConfig+0x74>
 8000ac6:	4b91      	ldr	r3, [pc, #580]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a90      	ldr	r2, [pc, #576]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ad0:	6013      	str	r3, [r2, #0]
 8000ad2:	e01d      	b.n	8000b10 <HAL_RCC_OscConfig+0xb0>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000adc:	d10c      	bne.n	8000af8 <HAL_RCC_OscConfig+0x98>
 8000ade:	4b8b      	ldr	r3, [pc, #556]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a8a      	ldr	r2, [pc, #552]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ae8:	6013      	str	r3, [r2, #0]
 8000aea:	4b88      	ldr	r3, [pc, #544]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a87      	ldr	r2, [pc, #540]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000af4:	6013      	str	r3, [r2, #0]
 8000af6:	e00b      	b.n	8000b10 <HAL_RCC_OscConfig+0xb0>
 8000af8:	4b84      	ldr	r3, [pc, #528]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a83      	ldr	r2, [pc, #524]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	4b81      	ldr	r3, [pc, #516]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a80      	ldr	r2, [pc, #512]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d013      	beq.n	8000b40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b18:	f7ff fd18 	bl	800054c <HAL_GetTick>
 8000b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b1e:	e008      	b.n	8000b32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b20:	f7ff fd14 	bl	800054c <HAL_GetTick>
 8000b24:	4602      	mov	r2, r0
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	2b64      	cmp	r3, #100	; 0x64
 8000b2c:	d901      	bls.n	8000b32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	e1fb      	b.n	8000f2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b32:	4b76      	ldr	r3, [pc, #472]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0f0      	beq.n	8000b20 <HAL_RCC_OscConfig+0xc0>
 8000b3e:	e014      	b.n	8000b6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b40:	f7ff fd04 	bl	800054c <HAL_GetTick>
 8000b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b46:	e008      	b.n	8000b5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b48:	f7ff fd00 	bl	800054c <HAL_GetTick>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	2b64      	cmp	r3, #100	; 0x64
 8000b54:	d901      	bls.n	8000b5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000b56:	2303      	movs	r3, #3
 8000b58:	e1e7      	b.n	8000f2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b5a:	4b6c      	ldr	r3, [pc, #432]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d1f0      	bne.n	8000b48 <HAL_RCC_OscConfig+0xe8>
 8000b66:	e000      	b.n	8000b6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d063      	beq.n	8000c3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b76:	4b65      	ldr	r3, [pc, #404]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	f003 030c 	and.w	r3, r3, #12
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d00b      	beq.n	8000b9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b82:	4b62      	ldr	r3, [pc, #392]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b8a:	2b08      	cmp	r3, #8
 8000b8c:	d11c      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b8e:	4b5f      	ldr	r3, [pc, #380]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d116      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b9a:	4b5c      	ldr	r3, [pc, #368]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d005      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x152>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d001      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e1bb      	b.n	8000f2a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bb2:	4b56      	ldr	r3, [pc, #344]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	691b      	ldr	r3, [r3, #16]
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	4952      	ldr	r1, [pc, #328]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bc6:	e03a      	b.n	8000c3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d020      	beq.n	8000c12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bd0:	4b4f      	ldr	r3, [pc, #316]	; (8000d10 <HAL_RCC_OscConfig+0x2b0>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bd6:	f7ff fcb9 	bl	800054c <HAL_GetTick>
 8000bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bdc:	e008      	b.n	8000bf0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bde:	f7ff fcb5 	bl	800054c <HAL_GetTick>
 8000be2:	4602      	mov	r2, r0
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d901      	bls.n	8000bf0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000bec:	2303      	movs	r3, #3
 8000bee:	e19c      	b.n	8000f2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bf0:	4b46      	ldr	r3, [pc, #280]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f003 0302 	and.w	r3, r3, #2
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d0f0      	beq.n	8000bde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bfc:	4b43      	ldr	r3, [pc, #268]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	691b      	ldr	r3, [r3, #16]
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	4940      	ldr	r1, [pc, #256]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	600b      	str	r3, [r1, #0]
 8000c10:	e015      	b.n	8000c3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c12:	4b3f      	ldr	r3, [pc, #252]	; (8000d10 <HAL_RCC_OscConfig+0x2b0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c18:	f7ff fc98 	bl	800054c <HAL_GetTick>
 8000c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c1e:	e008      	b.n	8000c32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c20:	f7ff fc94 	bl	800054c <HAL_GetTick>
 8000c24:	4602      	mov	r2, r0
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d901      	bls.n	8000c32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e17b      	b.n	8000f2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c32:	4b36      	ldr	r3, [pc, #216]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d1f0      	bne.n	8000c20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f003 0308 	and.w	r3, r3, #8
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d030      	beq.n	8000cac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d016      	beq.n	8000c80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c52:	4b30      	ldr	r3, [pc, #192]	; (8000d14 <HAL_RCC_OscConfig+0x2b4>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c58:	f7ff fc78 	bl	800054c <HAL_GetTick>
 8000c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c5e:	e008      	b.n	8000c72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c60:	f7ff fc74 	bl	800054c <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d901      	bls.n	8000c72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	e15b      	b.n	8000f2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c72:	4b26      	ldr	r3, [pc, #152]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d0f0      	beq.n	8000c60 <HAL_RCC_OscConfig+0x200>
 8000c7e:	e015      	b.n	8000cac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c80:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <HAL_RCC_OscConfig+0x2b4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c86:	f7ff fc61 	bl	800054c <HAL_GetTick>
 8000c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c8c:	e008      	b.n	8000ca0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c8e:	f7ff fc5d 	bl	800054c <HAL_GetTick>
 8000c92:	4602      	mov	r2, r0
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d901      	bls.n	8000ca0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	e144      	b.n	8000f2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ca4:	f003 0302 	and.w	r3, r3, #2
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d1f0      	bne.n	8000c8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f003 0304 	and.w	r3, r3, #4
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f000 80a0 	beq.w	8000dfa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cbe:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d10f      	bne.n	8000cea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_RCC_OscConfig+0x2ac>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <HAL_RCC_OscConfig+0x2b8>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d121      	bne.n	8000d3a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <HAL_RCC_OscConfig+0x2b8>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <HAL_RCC_OscConfig+0x2b8>)
 8000cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d02:	f7ff fc23 	bl	800054c <HAL_GetTick>
 8000d06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d08:	e011      	b.n	8000d2e <HAL_RCC_OscConfig+0x2ce>
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	42470000 	.word	0x42470000
 8000d14:	42470e80 	.word	0x42470e80
 8000d18:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d1c:	f7ff fc16 	bl	800054c <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d901      	bls.n	8000d2e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e0fd      	b.n	8000f2a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d2e:	4b81      	ldr	r3, [pc, #516]	; (8000f34 <HAL_RCC_OscConfig+0x4d4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f0      	beq.n	8000d1c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d106      	bne.n	8000d50 <HAL_RCC_OscConfig+0x2f0>
 8000d42:	4b7d      	ldr	r3, [pc, #500]	; (8000f38 <HAL_RCC_OscConfig+0x4d8>)
 8000d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d46:	4a7c      	ldr	r2, [pc, #496]	; (8000f38 <HAL_RCC_OscConfig+0x4d8>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8000d4e:	e01c      	b.n	8000d8a <HAL_RCC_OscConfig+0x32a>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	2b05      	cmp	r3, #5
 8000d56:	d10c      	bne.n	8000d72 <HAL_RCC_OscConfig+0x312>
 8000d58:	4b77      	ldr	r3, [pc, #476]	; (8000f38 <HAL_RCC_OscConfig+0x4d8>)
 8000d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d5c:	4a76      	ldr	r2, [pc, #472]	; (8000f38 <HAL_RCC_OscConfig+0x4d8>)
 8000d5e:	f043 0304 	orr.w	r3, r3, #4
 8000d62:	6713      	str	r3, [r2, #112]	; 0x70
 8000d64:	4b74      	ldr	r3, [pc, #464]	; (8000f38 <HAL_RCC_OscConfig+0x4d8>)
 8000d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d68:	4a73      	ldr	r2, [pc, #460]	; (8000f38 <HAL_RCC_OscConfig+0x4d8>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8000d70:	e00b      	b.n	8000d8a <HAL_RCC_OscConfig+0x32a>
 8000d72:	4b71      	ldr	r3, [pc, #452]	; (8000f38 <HAL_RCC_OscConfig+0x4d8>)
 8000d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d76:	4a70      	ldr	r2, [pc, #448]	; (8000f38 <HAL_RCC_OscConfig+0x4d8>)
 8000d78:	f023 0301 	bic.w	r3, r3, #1
 8000d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8000d7e:	4b6e      	ldr	r3, [pc, #440]	; (8000f38 <HAL_RCC_OscConfig+0x4d8>)
 8000d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d82:	4a6d      	ldr	r2, [pc, #436]	; (8000f38 <HAL_RCC_OscConfig+0x4d8>)
 8000d84:	f023 0304 	bic.w	r3, r3, #4
 8000d88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d015      	beq.n	8000dbe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d92:	f7ff fbdb 	bl	800054c <HAL_GetTick>
 8000d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d98:	e00a      	b.n	8000db0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d9a:	f7ff fbd7 	bl	800054c <HAL_GetTick>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d901      	bls.n	8000db0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e0bc      	b.n	8000f2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000db0:	4b61      	ldr	r3, [pc, #388]	; (8000f38 <HAL_RCC_OscConfig+0x4d8>)
 8000db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0ee      	beq.n	8000d9a <HAL_RCC_OscConfig+0x33a>
 8000dbc:	e014      	b.n	8000de8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dbe:	f7ff fbc5 	bl	800054c <HAL_GetTick>
 8000dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dc4:	e00a      	b.n	8000ddc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dc6:	f7ff fbc1 	bl	800054c <HAL_GetTick>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d901      	bls.n	8000ddc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e0a6      	b.n	8000f2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ddc:	4b56      	ldr	r3, [pc, #344]	; (8000f38 <HAL_RCC_OscConfig+0x4d8>)
 8000dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1ee      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000de8:	7dfb      	ldrb	r3, [r7, #23]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d105      	bne.n	8000dfa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dee:	4b52      	ldr	r3, [pc, #328]	; (8000f38 <HAL_RCC_OscConfig+0x4d8>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	4a51      	ldr	r2, [pc, #324]	; (8000f38 <HAL_RCC_OscConfig+0x4d8>)
 8000df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000df8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f000 8092 	beq.w	8000f28 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e04:	4b4c      	ldr	r3, [pc, #304]	; (8000f38 <HAL_RCC_OscConfig+0x4d8>)
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	f003 030c 	and.w	r3, r3, #12
 8000e0c:	2b08      	cmp	r3, #8
 8000e0e:	d05c      	beq.n	8000eca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d141      	bne.n	8000e9c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e18:	4b48      	ldr	r3, [pc, #288]	; (8000f3c <HAL_RCC_OscConfig+0x4dc>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e1e:	f7ff fb95 	bl	800054c <HAL_GetTick>
 8000e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e24:	e008      	b.n	8000e38 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e26:	f7ff fb91 	bl	800054c <HAL_GetTick>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d901      	bls.n	8000e38 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000e34:	2303      	movs	r3, #3
 8000e36:	e078      	b.n	8000f2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e38:	4b3f      	ldr	r3, [pc, #252]	; (8000f38 <HAL_RCC_OscConfig+0x4d8>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1f0      	bne.n	8000e26 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	69da      	ldr	r2, [r3, #28]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6a1b      	ldr	r3, [r3, #32]
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e52:	019b      	lsls	r3, r3, #6
 8000e54:	431a      	orrs	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5a:	085b      	lsrs	r3, r3, #1
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	041b      	lsls	r3, r3, #16
 8000e60:	431a      	orrs	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e66:	061b      	lsls	r3, r3, #24
 8000e68:	4933      	ldr	r1, [pc, #204]	; (8000f38 <HAL_RCC_OscConfig+0x4d8>)
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e6e:	4b33      	ldr	r3, [pc, #204]	; (8000f3c <HAL_RCC_OscConfig+0x4dc>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e74:	f7ff fb6a 	bl	800054c <HAL_GetTick>
 8000e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e7a:	e008      	b.n	8000e8e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e7c:	f7ff fb66 	bl	800054c <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e04d      	b.n	8000f2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <HAL_RCC_OscConfig+0x4d8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0f0      	beq.n	8000e7c <HAL_RCC_OscConfig+0x41c>
 8000e9a:	e045      	b.n	8000f28 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e9c:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <HAL_RCC_OscConfig+0x4dc>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea2:	f7ff fb53 	bl	800054c <HAL_GetTick>
 8000ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ea8:	e008      	b.n	8000ebc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eaa:	f7ff fb4f 	bl	800054c <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d901      	bls.n	8000ebc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e036      	b.n	8000f2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <HAL_RCC_OscConfig+0x4d8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1f0      	bne.n	8000eaa <HAL_RCC_OscConfig+0x44a>
 8000ec8:	e02e      	b.n	8000f28 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d101      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e029      	b.n	8000f2a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_RCC_OscConfig+0x4d8>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d11c      	bne.n	8000f24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d115      	bne.n	8000f24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000efe:	4013      	ands	r3, r2
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d10d      	bne.n	8000f24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d106      	bne.n	8000f24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d001      	beq.n	8000f28 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e000      	b.n	8000f2a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40007000 	.word	0x40007000
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	42470060 	.word	0x42470060

08000f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d101      	bne.n	8000f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e0cc      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f54:	4b68      	ldr	r3, [pc, #416]	; (80010f8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 030f 	and.w	r3, r3, #15
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d90c      	bls.n	8000f7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f62:	4b65      	ldr	r3, [pc, #404]	; (80010f8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f6a:	4b63      	ldr	r3, [pc, #396]	; (80010f8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d001      	beq.n	8000f7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e0b8      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d020      	beq.n	8000fca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0304 	and.w	r3, r3, #4
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d005      	beq.n	8000fa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f94:	4b59      	ldr	r3, [pc, #356]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	4a58      	ldr	r2, [pc, #352]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000f9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0308 	and.w	r3, r3, #8
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d005      	beq.n	8000fb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fac:	4b53      	ldr	r3, [pc, #332]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	4a52      	ldr	r2, [pc, #328]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000fb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000fb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fb8:	4b50      	ldr	r3, [pc, #320]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	494d      	ldr	r1, [pc, #308]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d044      	beq.n	8001060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d107      	bne.n	8000fee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fde:	4b47      	ldr	r3, [pc, #284]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d119      	bne.n	800101e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e07f      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d003      	beq.n	8000ffe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d107      	bne.n	800100e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ffe:	4b3f      	ldr	r3, [pc, #252]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d109      	bne.n	800101e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e06f      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800100e:	4b3b      	ldr	r3, [pc, #236]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d101      	bne.n	800101e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e067      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800101e:	4b37      	ldr	r3, [pc, #220]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f023 0203 	bic.w	r2, r3, #3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	4934      	ldr	r1, [pc, #208]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 800102c:	4313      	orrs	r3, r2
 800102e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001030:	f7ff fa8c 	bl	800054c <HAL_GetTick>
 8001034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001036:	e00a      	b.n	800104e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001038:	f7ff fa88 	bl	800054c <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	f241 3288 	movw	r2, #5000	; 0x1388
 8001046:	4293      	cmp	r3, r2
 8001048:	d901      	bls.n	800104e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e04f      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800104e:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 020c 	and.w	r2, r3, #12
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	429a      	cmp	r2, r3
 800105e:	d1eb      	bne.n	8001038 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001060:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 030f 	and.w	r3, r3, #15
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	d20c      	bcs.n	8001088 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800106e:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001076:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d001      	beq.n	8001088 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e032      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	2b00      	cmp	r3, #0
 8001092:	d008      	beq.n	80010a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	4916      	ldr	r1, [pc, #88]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d009      	beq.n	80010c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010b2:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	490e      	ldr	r1, [pc, #56]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010c6:	f000 f821 	bl	800110c <HAL_RCC_GetSysClockFreq>
 80010ca:	4601      	mov	r1, r0
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	091b      	lsrs	r3, r3, #4
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <HAL_RCC_ClockConfig+0x1c0>)
 80010d8:	5cd3      	ldrb	r3, [r2, r3]
 80010da:	fa21 f303 	lsr.w	r3, r1, r3
 80010de:	4a09      	ldr	r2, [pc, #36]	; (8001104 <HAL_RCC_ClockConfig+0x1c4>)
 80010e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <HAL_RCC_ClockConfig+0x1c8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f004 fe56 	bl	8005d98 <HAL_InitTick>

  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023c00 	.word	0x40023c00
 80010fc:	40023800 	.word	0x40023800
 8001100:	08005ff0 	.word	0x08005ff0
 8001104:	2000000c 	.word	0x2000000c
 8001108:	20000000 	.word	0x20000000

0800110c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001122:	4b63      	ldr	r3, [pc, #396]	; (80012b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f003 030c 	and.w	r3, r3, #12
 800112a:	2b04      	cmp	r3, #4
 800112c:	d007      	beq.n	800113e <HAL_RCC_GetSysClockFreq+0x32>
 800112e:	2b08      	cmp	r3, #8
 8001130:	d008      	beq.n	8001144 <HAL_RCC_GetSysClockFreq+0x38>
 8001132:	2b00      	cmp	r3, #0
 8001134:	f040 80b4 	bne.w	80012a0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001138:	4b5e      	ldr	r3, [pc, #376]	; (80012b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800113a:	60bb      	str	r3, [r7, #8]
       break;
 800113c:	e0b3      	b.n	80012a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800113e:	4b5e      	ldr	r3, [pc, #376]	; (80012b8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001140:	60bb      	str	r3, [r7, #8]
      break;
 8001142:	e0b0      	b.n	80012a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001144:	4b5a      	ldr	r3, [pc, #360]	; (80012b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800114c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800114e:	4b58      	ldr	r3, [pc, #352]	; (80012b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d04a      	beq.n	80011f0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800115a:	4b55      	ldr	r3, [pc, #340]	; (80012b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	099b      	lsrs	r3, r3, #6
 8001160:	f04f 0400 	mov.w	r4, #0
 8001164:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	ea03 0501 	and.w	r5, r3, r1
 8001170:	ea04 0602 	and.w	r6, r4, r2
 8001174:	4629      	mov	r1, r5
 8001176:	4632      	mov	r2, r6
 8001178:	f04f 0300 	mov.w	r3, #0
 800117c:	f04f 0400 	mov.w	r4, #0
 8001180:	0154      	lsls	r4, r2, #5
 8001182:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001186:	014b      	lsls	r3, r1, #5
 8001188:	4619      	mov	r1, r3
 800118a:	4622      	mov	r2, r4
 800118c:	1b49      	subs	r1, r1, r5
 800118e:	eb62 0206 	sbc.w	r2, r2, r6
 8001192:	f04f 0300 	mov.w	r3, #0
 8001196:	f04f 0400 	mov.w	r4, #0
 800119a:	0194      	lsls	r4, r2, #6
 800119c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80011a0:	018b      	lsls	r3, r1, #6
 80011a2:	1a5b      	subs	r3, r3, r1
 80011a4:	eb64 0402 	sbc.w	r4, r4, r2
 80011a8:	f04f 0100 	mov.w	r1, #0
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	00e2      	lsls	r2, r4, #3
 80011b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80011b6:	00d9      	lsls	r1, r3, #3
 80011b8:	460b      	mov	r3, r1
 80011ba:	4614      	mov	r4, r2
 80011bc:	195b      	adds	r3, r3, r5
 80011be:	eb44 0406 	adc.w	r4, r4, r6
 80011c2:	f04f 0100 	mov.w	r1, #0
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	0262      	lsls	r2, r4, #9
 80011cc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80011d0:	0259      	lsls	r1, r3, #9
 80011d2:	460b      	mov	r3, r1
 80011d4:	4614      	mov	r4, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	4621      	mov	r1, r4
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f04f 0400 	mov.w	r4, #0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4623      	mov	r3, r4
 80011e4:	f7fe fffc 	bl	80001e0 <__aeabi_uldivmod>
 80011e8:	4603      	mov	r3, r0
 80011ea:	460c      	mov	r4, r1
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	e049      	b.n	8001284 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011f0:	4b2f      	ldr	r3, [pc, #188]	; (80012b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	099b      	lsrs	r3, r3, #6
 80011f6:	f04f 0400 	mov.w	r4, #0
 80011fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	ea03 0501 	and.w	r5, r3, r1
 8001206:	ea04 0602 	and.w	r6, r4, r2
 800120a:	4629      	mov	r1, r5
 800120c:	4632      	mov	r2, r6
 800120e:	f04f 0300 	mov.w	r3, #0
 8001212:	f04f 0400 	mov.w	r4, #0
 8001216:	0154      	lsls	r4, r2, #5
 8001218:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800121c:	014b      	lsls	r3, r1, #5
 800121e:	4619      	mov	r1, r3
 8001220:	4622      	mov	r2, r4
 8001222:	1b49      	subs	r1, r1, r5
 8001224:	eb62 0206 	sbc.w	r2, r2, r6
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	f04f 0400 	mov.w	r4, #0
 8001230:	0194      	lsls	r4, r2, #6
 8001232:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001236:	018b      	lsls	r3, r1, #6
 8001238:	1a5b      	subs	r3, r3, r1
 800123a:	eb64 0402 	sbc.w	r4, r4, r2
 800123e:	f04f 0100 	mov.w	r1, #0
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	00e2      	lsls	r2, r4, #3
 8001248:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800124c:	00d9      	lsls	r1, r3, #3
 800124e:	460b      	mov	r3, r1
 8001250:	4614      	mov	r4, r2
 8001252:	195b      	adds	r3, r3, r5
 8001254:	eb44 0406 	adc.w	r4, r4, r6
 8001258:	f04f 0100 	mov.w	r1, #0
 800125c:	f04f 0200 	mov.w	r2, #0
 8001260:	02a2      	lsls	r2, r4, #10
 8001262:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001266:	0299      	lsls	r1, r3, #10
 8001268:	460b      	mov	r3, r1
 800126a:	4614      	mov	r4, r2
 800126c:	4618      	mov	r0, r3
 800126e:	4621      	mov	r1, r4
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f04f 0400 	mov.w	r4, #0
 8001276:	461a      	mov	r2, r3
 8001278:	4623      	mov	r3, r4
 800127a:	f7fe ffb1 	bl	80001e0 <__aeabi_uldivmod>
 800127e:	4603      	mov	r3, r0
 8001280:	460c      	mov	r4, r1
 8001282:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	0c1b      	lsrs	r3, r3, #16
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	3301      	adds	r3, #1
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	fbb2 f3f3 	udiv	r3, r2, r3
 800129c:	60bb      	str	r3, [r7, #8]
      break;
 800129e:	e002      	b.n	80012a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80012a0:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80012a2:	60bb      	str	r3, [r7, #8]
      break;
 80012a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012a6:	68bb      	ldr	r3, [r7, #8]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012b0:	40023800 	.word	0x40023800
 80012b4:	00f42400 	.word	0x00f42400
 80012b8:	007a1200 	.word	0x007a1200

080012bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	2000000c 	.word	0x2000000c

080012d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012d8:	f7ff fff0 	bl	80012bc <HAL_RCC_GetHCLKFreq>
 80012dc:	4601      	mov	r1, r0
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	0a9b      	lsrs	r3, r3, #10
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	4a03      	ldr	r2, [pc, #12]	; (80012f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012ea:	5cd3      	ldrb	r3, [r2, r3]
 80012ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40023800 	.word	0x40023800
 80012f8:	08006000 	.word	0x08006000

080012fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	220f      	movs	r2, #15
 800130a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_RCC_GetClockConfig+0x5c>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 0203 	and.w	r2, r3, #3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_RCC_GetClockConfig+0x5c>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <HAL_RCC_GetClockConfig+0x5c>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_RCC_GetClockConfig+0x5c>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	08db      	lsrs	r3, r3, #3
 8001336:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <HAL_RCC_GetClockConfig+0x60>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 020f 	and.w	r2, r3, #15
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	601a      	str	r2, [r3, #0]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800
 800135c:	40023c00 	.word	0x40023c00

08001360 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e01d      	b.n	80013ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d106      	bne.n	800138c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f004 fcae 	bl	8005ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2202      	movs	r2, #2
 8001390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3304      	adds	r3, #4
 800139c:	4619      	mov	r1, r3
 800139e:	4610      	mov	r0, r2
 80013a0:	f000 fb24 	bl	80019ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f042 0201 	orr.w	r2, r2, #1
 80013cc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2b06      	cmp	r3, #6
 80013de:	d007      	beq.n	80013f0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 0201 	orr.w	r2, r2, #1
 80013ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e01d      	b.n	800144c <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d106      	bne.n	800142a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 f815 	bl	8001454 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2202      	movs	r2, #2
 800142e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3304      	adds	r3, #4
 800143a:	4619      	mov	r1, r3
 800143c:	4610      	mov	r0, r2
 800143e:	f000 fad5 	bl	80019ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2201      	movs	r2, #1
 8001478:	6839      	ldr	r1, [r7, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f000 fd5c 	bl	8001f38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <HAL_TIM_OC_Start+0x60>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d107      	bne.n	800149a <HAL_TIM_OC_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001498:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b06      	cmp	r3, #6
 80014aa:	d007      	beq.n	80014bc <HAL_TIM_OC_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 0201 	orr.w	r2, r2, #1
 80014ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40010000 	.word	0x40010000

080014cc <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2200      	movs	r2, #0
 80014dc:	6839      	ldr	r1, [r7, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 fd2a 	bl	8001f38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a1b      	ldr	r2, [pc, #108]	; (8001558 <HAL_TIM_OC_Stop+0x8c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d117      	bne.n	800151e <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6a1a      	ldr	r2, [r3, #32]
 80014f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10f      	bne.n	800151e <HAL_TIM_OC_Stop+0x52>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6a1a      	ldr	r2, [r3, #32]
 8001504:	f240 4344 	movw	r3, #1092	; 0x444
 8001508:	4013      	ands	r3, r2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d107      	bne.n	800151e <HAL_TIM_OC_Stop+0x52>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800151c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6a1a      	ldr	r2, [r3, #32]
 8001524:	f241 1311 	movw	r3, #4369	; 0x1111
 8001528:	4013      	ands	r3, r2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10f      	bne.n	800154e <HAL_TIM_OC_Stop+0x82>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6a1a      	ldr	r2, [r3, #32]
 8001534:	f240 4344 	movw	r3, #1092	; 0x444
 8001538:	4013      	ands	r3, r2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d107      	bne.n	800154e <HAL_TIM_OC_Stop+0x82>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0201 	bic.w	r2, r2, #1
 800154c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40010000 	.word	0x40010000

0800155c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b02      	cmp	r3, #2
 8001570:	d122      	bne.n	80015b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b02      	cmp	r3, #2
 800157e:	d11b      	bne.n	80015b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f06f 0202 	mvn.w	r2, #2
 8001588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 fa05 	bl	80019ae <HAL_TIM_IC_CaptureCallback>
 80015a4:	e005      	b.n	80015b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 f9f7 	bl	800199a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 fa08 	bl	80019c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	d122      	bne.n	800160c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b04      	cmp	r3, #4
 80015d2:	d11b      	bne.n	800160c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f06f 0204 	mvn.w	r2, #4
 80015dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2202      	movs	r2, #2
 80015e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 f9db 	bl	80019ae <HAL_TIM_IC_CaptureCallback>
 80015f8:	e005      	b.n	8001606 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f9cd 	bl	800199a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 f9de 	bl	80019c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	2b08      	cmp	r3, #8
 8001618:	d122      	bne.n	8001660 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	2b08      	cmp	r3, #8
 8001626:	d11b      	bne.n	8001660 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f06f 0208 	mvn.w	r2, #8
 8001630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2204      	movs	r2, #4
 8001636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 f9b1 	bl	80019ae <HAL_TIM_IC_CaptureCallback>
 800164c:	e005      	b.n	800165a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f9a3 	bl	800199a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 f9b4 	bl	80019c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	2b10      	cmp	r3, #16
 800166c:	d122      	bne.n	80016b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	f003 0310 	and.w	r3, r3, #16
 8001678:	2b10      	cmp	r3, #16
 800167a:	d11b      	bne.n	80016b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f06f 0210 	mvn.w	r2, #16
 8001684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2208      	movs	r2, #8
 800168a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f987 	bl	80019ae <HAL_TIM_IC_CaptureCallback>
 80016a0:	e005      	b.n	80016ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 f979 	bl	800199a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 f98a 	bl	80019c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d10e      	bne.n	80016e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d107      	bne.n	80016e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f06f 0201 	mvn.w	r2, #1
 80016d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f004 fabe 	bl	8005c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ea:	2b80      	cmp	r3, #128	; 0x80
 80016ec:	d10e      	bne.n	800170c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f8:	2b80      	cmp	r3, #128	; 0x80
 80016fa:	d107      	bne.n	800170c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 fcb4 	bl	8002074 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001716:	2b40      	cmp	r3, #64	; 0x40
 8001718:	d10e      	bne.n	8001738 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001724:	2b40      	cmp	r3, #64	; 0x40
 8001726:	d107      	bne.n	8001738 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f94f 	bl	80019d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	f003 0320 	and.w	r3, r3, #32
 8001742:	2b20      	cmp	r3, #32
 8001744:	d10e      	bne.n	8001764 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	f003 0320 	and.w	r3, r3, #32
 8001750:	2b20      	cmp	r3, #32
 8001752:	d107      	bne.n	8001764 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f06f 0220 	mvn.w	r2, #32
 800175c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 fc7e 	bl	8002060 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800177e:	2b01      	cmp	r3, #1
 8001780:	d101      	bne.n	8001786 <HAL_TIM_OC_ConfigChannel+0x1a>
 8001782:	2302      	movs	r3, #2
 8001784:	e04e      	b.n	8001824 <HAL_TIM_OC_ConfigChannel+0xb8>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2202      	movs	r2, #2
 8001792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b0c      	cmp	r3, #12
 800179a:	d839      	bhi.n	8001810 <HAL_TIM_OC_ConfigChannel+0xa4>
 800179c:	a201      	add	r2, pc, #4	; (adr r2, 80017a4 <HAL_TIM_OC_ConfigChannel+0x38>)
 800179e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a2:	bf00      	nop
 80017a4:	080017d9 	.word	0x080017d9
 80017a8:	08001811 	.word	0x08001811
 80017ac:	08001811 	.word	0x08001811
 80017b0:	08001811 	.word	0x08001811
 80017b4:	080017e7 	.word	0x080017e7
 80017b8:	08001811 	.word	0x08001811
 80017bc:	08001811 	.word	0x08001811
 80017c0:	08001811 	.word	0x08001811
 80017c4:	080017f5 	.word	0x080017f5
 80017c8:	08001811 	.word	0x08001811
 80017cc:	08001811 	.word	0x08001811
 80017d0:	08001811 	.word	0x08001811
 80017d4:	08001803 	.word	0x08001803
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68b9      	ldr	r1, [r7, #8]
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 f984 	bl	8001aec <TIM_OC1_SetConfig>
      break;
 80017e4:	e015      	b.n	8001812 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68b9      	ldr	r1, [r7, #8]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 f9e3 	bl	8001bb8 <TIM_OC2_SetConfig>
      break;
 80017f2:	e00e      	b.n	8001812 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68b9      	ldr	r1, [r7, #8]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 fa48 	bl	8001c90 <TIM_OC3_SetConfig>
      break;
 8001800:	e007      	b.n	8001812 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68b9      	ldr	r1, [r7, #8]
 8001808:	4618      	mov	r0, r3
 800180a:	f000 faab 	bl	8001d64 <TIM_OC4_SetConfig>
      break;
 800180e:	e000      	b.n	8001812 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8001810:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <HAL_TIM_ConfigClockSource+0x18>
 8001840:	2302      	movs	r3, #2
 8001842:	e0a6      	b.n	8001992 <HAL_TIM_ConfigClockSource+0x166>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2202      	movs	r2, #2
 8001850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001862:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800186a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b40      	cmp	r3, #64	; 0x40
 800187a:	d067      	beq.n	800194c <HAL_TIM_ConfigClockSource+0x120>
 800187c:	2b40      	cmp	r3, #64	; 0x40
 800187e:	d80b      	bhi.n	8001898 <HAL_TIM_ConfigClockSource+0x6c>
 8001880:	2b10      	cmp	r3, #16
 8001882:	d073      	beq.n	800196c <HAL_TIM_ConfigClockSource+0x140>
 8001884:	2b10      	cmp	r3, #16
 8001886:	d802      	bhi.n	800188e <HAL_TIM_ConfigClockSource+0x62>
 8001888:	2b00      	cmp	r3, #0
 800188a:	d06f      	beq.n	800196c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800188c:	e078      	b.n	8001980 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800188e:	2b20      	cmp	r3, #32
 8001890:	d06c      	beq.n	800196c <HAL_TIM_ConfigClockSource+0x140>
 8001892:	2b30      	cmp	r3, #48	; 0x30
 8001894:	d06a      	beq.n	800196c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001896:	e073      	b.n	8001980 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001898:	2b70      	cmp	r3, #112	; 0x70
 800189a:	d00d      	beq.n	80018b8 <HAL_TIM_ConfigClockSource+0x8c>
 800189c:	2b70      	cmp	r3, #112	; 0x70
 800189e:	d804      	bhi.n	80018aa <HAL_TIM_ConfigClockSource+0x7e>
 80018a0:	2b50      	cmp	r3, #80	; 0x50
 80018a2:	d033      	beq.n	800190c <HAL_TIM_ConfigClockSource+0xe0>
 80018a4:	2b60      	cmp	r3, #96	; 0x60
 80018a6:	d041      	beq.n	800192c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80018a8:	e06a      	b.n	8001980 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80018aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018ae:	d066      	beq.n	800197e <HAL_TIM_ConfigClockSource+0x152>
 80018b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018b4:	d017      	beq.n	80018e6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80018b6:	e063      	b.n	8001980 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	6899      	ldr	r1, [r3, #8]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f000 fb16 	bl	8001ef8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80018da:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	609a      	str	r2, [r3, #8]
      break;
 80018e4:	e04c      	b.n	8001980 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	6899      	ldr	r1, [r3, #8]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f000 faff 	bl	8001ef8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001908:	609a      	str	r2, [r3, #8]
      break;
 800190a:	e039      	b.n	8001980 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	6859      	ldr	r1, [r3, #4]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	461a      	mov	r2, r3
 800191a:	f000 fa73 	bl	8001e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2150      	movs	r1, #80	; 0x50
 8001924:	4618      	mov	r0, r3
 8001926:	f000 facc 	bl	8001ec2 <TIM_ITRx_SetConfig>
      break;
 800192a:	e029      	b.n	8001980 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6818      	ldr	r0, [r3, #0]
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	6859      	ldr	r1, [r3, #4]
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	461a      	mov	r2, r3
 800193a:	f000 fa92 	bl	8001e62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2160      	movs	r1, #96	; 0x60
 8001944:	4618      	mov	r0, r3
 8001946:	f000 fabc 	bl	8001ec2 <TIM_ITRx_SetConfig>
      break;
 800194a:	e019      	b.n	8001980 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6818      	ldr	r0, [r3, #0]
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	6859      	ldr	r1, [r3, #4]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	461a      	mov	r2, r3
 800195a:	f000 fa53 	bl	8001e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2140      	movs	r1, #64	; 0x40
 8001964:	4618      	mov	r0, r3
 8001966:	f000 faac 	bl	8001ec2 <TIM_ITRx_SetConfig>
      break;
 800196a:	e009      	b.n	8001980 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4619      	mov	r1, r3
 8001976:	4610      	mov	r0, r2
 8001978:	f000 faa3 	bl	8001ec2 <TIM_ITRx_SetConfig>
      break;
 800197c:	e000      	b.n	8001980 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800197e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a34      	ldr	r2, [pc, #208]	; (8001ad0 <TIM_Base_SetConfig+0xe4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d00f      	beq.n	8001a24 <TIM_Base_SetConfig+0x38>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a0a:	d00b      	beq.n	8001a24 <TIM_Base_SetConfig+0x38>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a31      	ldr	r2, [pc, #196]	; (8001ad4 <TIM_Base_SetConfig+0xe8>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d007      	beq.n	8001a24 <TIM_Base_SetConfig+0x38>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a30      	ldr	r2, [pc, #192]	; (8001ad8 <TIM_Base_SetConfig+0xec>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d003      	beq.n	8001a24 <TIM_Base_SetConfig+0x38>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a2f      	ldr	r2, [pc, #188]	; (8001adc <TIM_Base_SetConfig+0xf0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d108      	bne.n	8001a36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a25      	ldr	r2, [pc, #148]	; (8001ad0 <TIM_Base_SetConfig+0xe4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d01b      	beq.n	8001a76 <TIM_Base_SetConfig+0x8a>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a44:	d017      	beq.n	8001a76 <TIM_Base_SetConfig+0x8a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a22      	ldr	r2, [pc, #136]	; (8001ad4 <TIM_Base_SetConfig+0xe8>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d013      	beq.n	8001a76 <TIM_Base_SetConfig+0x8a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a21      	ldr	r2, [pc, #132]	; (8001ad8 <TIM_Base_SetConfig+0xec>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00f      	beq.n	8001a76 <TIM_Base_SetConfig+0x8a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a20      	ldr	r2, [pc, #128]	; (8001adc <TIM_Base_SetConfig+0xf0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d00b      	beq.n	8001a76 <TIM_Base_SetConfig+0x8a>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a1f      	ldr	r2, [pc, #124]	; (8001ae0 <TIM_Base_SetConfig+0xf4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d007      	beq.n	8001a76 <TIM_Base_SetConfig+0x8a>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a1e      	ldr	r2, [pc, #120]	; (8001ae4 <TIM_Base_SetConfig+0xf8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d003      	beq.n	8001a76 <TIM_Base_SetConfig+0x8a>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a1d      	ldr	r2, [pc, #116]	; (8001ae8 <TIM_Base_SetConfig+0xfc>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d108      	bne.n	8001a88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a08      	ldr	r2, [pc, #32]	; (8001ad0 <TIM_Base_SetConfig+0xe4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d103      	bne.n	8001abc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	615a      	str	r2, [r3, #20]
}
 8001ac2:	bf00      	nop
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	40000400 	.word	0x40000400
 8001ad8:	40000800 	.word	0x40000800
 8001adc:	40000c00 	.word	0x40000c00
 8001ae0:	40014000 	.word	0x40014000
 8001ae4:	40014400 	.word	0x40014400
 8001ae8:	40014800 	.word	0x40014800

08001aec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	f023 0201 	bic.w	r2, r3, #1
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f023 0303 	bic.w	r3, r3, #3
 8001b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f023 0302 	bic.w	r3, r3, #2
 8001b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a1c      	ldr	r2, [pc, #112]	; (8001bb4 <TIM_OC1_SetConfig+0xc8>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d10c      	bne.n	8001b62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f023 0308 	bic.w	r3, r3, #8
 8001b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f023 0304 	bic.w	r3, r3, #4
 8001b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a13      	ldr	r2, [pc, #76]	; (8001bb4 <TIM_OC1_SetConfig+0xc8>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d111      	bne.n	8001b8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	621a      	str	r2, [r3, #32]
}
 8001ba8:	bf00      	nop
 8001baa:	371c      	adds	r7, #28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	40010000 	.word	0x40010000

08001bb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	f023 0210 	bic.w	r2, r3, #16
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	021b      	lsls	r3, r3, #8
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f023 0320 	bic.w	r3, r3, #32
 8001c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <TIM_OC2_SetConfig+0xd4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d10d      	bne.n	8001c34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	011b      	lsls	r3, r3, #4
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a15      	ldr	r2, [pc, #84]	; (8001c8c <TIM_OC2_SetConfig+0xd4>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d113      	bne.n	8001c64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	621a      	str	r2, [r3, #32]
}
 8001c7e:	bf00      	nop
 8001c80:	371c      	adds	r7, #28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40010000 	.word	0x40010000

08001c90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b087      	sub	sp, #28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f023 0303 	bic.w	r3, r3, #3
 8001cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a1d      	ldr	r2, [pc, #116]	; (8001d60 <TIM_OC3_SetConfig+0xd0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d10d      	bne.n	8001d0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001cf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	021b      	lsls	r3, r3, #8
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <TIM_OC3_SetConfig+0xd0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d113      	bne.n	8001d3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	621a      	str	r2, [r3, #32]
}
 8001d54:	bf00      	nop
 8001d56:	371c      	adds	r7, #28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	40010000 	.word	0x40010000

08001d64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b087      	sub	sp, #28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001dae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	031b      	lsls	r3, r3, #12
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a10      	ldr	r2, [pc, #64]	; (8001e00 <TIM_OC4_SetConfig+0x9c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d109      	bne.n	8001dd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	019b      	lsls	r3, r3, #6
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	621a      	str	r2, [r3, #32]
}
 8001df2:	bf00      	nop
 8001df4:	371c      	adds	r7, #28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40010000 	.word	0x40010000

08001e04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b087      	sub	sp, #28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	f023 0201 	bic.w	r2, r3, #1
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f023 030a 	bic.w	r3, r3, #10
 8001e40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	621a      	str	r2, [r3, #32]
}
 8001e56:	bf00      	nop
 8001e58:	371c      	adds	r7, #28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b087      	sub	sp, #28
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	f023 0210 	bic.w	r2, r3, #16
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	031b      	lsls	r3, r3, #12
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001e9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	011b      	lsls	r3, r3, #4
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	621a      	str	r2, [r3, #32]
}
 8001eb6:	bf00      	nop
 8001eb8:	371c      	adds	r7, #28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b085      	sub	sp, #20
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ed8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	f043 0307 	orr.w	r3, r3, #7
 8001ee4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	609a      	str	r2, [r3, #8]
}
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
 8001f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	021a      	lsls	r2, r3, #8
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	609a      	str	r2, [r3, #8]
}
 8001f2c:	bf00      	nop
 8001f2e:	371c      	adds	r7, #28
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	f003 031f 	and.w	r3, r3, #31
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a1a      	ldr	r2, [r3, #32]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a1a      	ldr	r2, [r3, #32]
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f003 031f 	and.w	r3, r3, #31
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f70:	431a      	orrs	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	621a      	str	r2, [r3, #32]
}
 8001f76:	bf00      	nop
 8001f78:	371c      	adds	r7, #28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e050      	b.n	800203e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a1c      	ldr	r2, [pc, #112]	; (800204c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d018      	beq.n	8002012 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe8:	d013      	beq.n	8002012 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a18      	ldr	r2, [pc, #96]	; (8002050 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d00e      	beq.n	8002012 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a16      	ldr	r2, [pc, #88]	; (8002054 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d009      	beq.n	8002012 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a15      	ldr	r2, [pc, #84]	; (8002058 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d004      	beq.n	8002012 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a13      	ldr	r2, [pc, #76]	; (800205c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d10c      	bne.n	800202c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002018:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	4313      	orrs	r3, r2
 8002022:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40010000 	.word	0x40010000
 8002050:	40000400 	.word	0x40000400
 8002054:	40000800 	.word	0x40000800
 8002058:	40000c00 	.word	0x40000c00
 800205c:	40014000 	.word	0x40014000

08002060 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800209e:	f3ef 8305 	mrs	r3, IPSR
 80020a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80020a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10f      	bne.n	80020ca <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020aa:	f3ef 8310 	mrs	r3, PRIMASK
 80020ae:	607b      	str	r3, [r7, #4]
  return(result);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d105      	bne.n	80020c2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80020b6:	f3ef 8311 	mrs	r3, BASEPRI
 80020ba:	603b      	str	r3, [r7, #0]
  return(result);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d007      	beq.n	80020d2 <osKernelInitialize+0x3a>
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <osKernelInitialize+0x64>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d103      	bne.n	80020d2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80020ca:	f06f 0305 	mvn.w	r3, #5
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	e00c      	b.n	80020ec <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <osKernelInitialize+0x64>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d105      	bne.n	80020e6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80020da:	4b08      	ldr	r3, [pc, #32]	; (80020fc <osKernelInitialize+0x64>)
 80020dc:	2201      	movs	r2, #1
 80020de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	e002      	b.n	80020ec <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80020e6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80020ec:	68fb      	ldr	r3, [r7, #12]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	2000002c 	.word	0x2000002c

08002100 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002106:	f3ef 8305 	mrs	r3, IPSR
 800210a:	60bb      	str	r3, [r7, #8]
  return(result);
 800210c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10f      	bne.n	8002132 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002112:	f3ef 8310 	mrs	r3, PRIMASK
 8002116:	607b      	str	r3, [r7, #4]
  return(result);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d105      	bne.n	800212a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800211e:	f3ef 8311 	mrs	r3, BASEPRI
 8002122:	603b      	str	r3, [r7, #0]
  return(result);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d007      	beq.n	800213a <osKernelStart+0x3a>
 800212a:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <osKernelStart+0x68>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d103      	bne.n	800213a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002132:	f06f 0305 	mvn.w	r3, #5
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	e010      	b.n	800215c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <osKernelStart+0x68>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d109      	bne.n	8002156 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002142:	f7ff ffa1 	bl	8002088 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <osKernelStart+0x68>)
 8002148:	2202      	movs	r2, #2
 800214a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800214c:	f001 fc98 	bl	8003a80 <vTaskStartScheduler>
      stat = osOK;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	e002      	b.n	800215c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8002156:	f04f 33ff 	mov.w	r3, #4294967295
 800215a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800215c:	68fb      	ldr	r3, [r7, #12]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	2000002c 	.word	0x2000002c

0800216c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800216c:	b580      	push	{r7, lr}
 800216e:	b090      	sub	sp, #64	; 0x40
 8002170:	af04      	add	r7, sp, #16
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002178:	2300      	movs	r3, #0
 800217a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800217c:	f3ef 8305 	mrs	r3, IPSR
 8002180:	61fb      	str	r3, [r7, #28]
  return(result);
 8002182:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002184:	2b00      	cmp	r3, #0
 8002186:	f040 808f 	bne.w	80022a8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800218a:	f3ef 8310 	mrs	r3, PRIMASK
 800218e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d105      	bne.n	80021a2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002196:	f3ef 8311 	mrs	r3, BASEPRI
 800219a:	617b      	str	r3, [r7, #20]
  return(result);
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <osThreadNew+0x3e>
 80021a2:	4b44      	ldr	r3, [pc, #272]	; (80022b4 <osThreadNew+0x148>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d07e      	beq.n	80022a8 <osThreadNew+0x13c>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d07b      	beq.n	80022a8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80021b0:	2380      	movs	r3, #128	; 0x80
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80021b4:	2318      	movs	r3, #24
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80021bc:	f04f 33ff 	mov.w	r3, #4294967295
 80021c0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d045      	beq.n	8002254 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <osThreadNew+0x6a>
        name = attr->name;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <osThreadNew+0x90>
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	2b38      	cmp	r3, #56	; 0x38
 80021ee:	d805      	bhi.n	80021fc <osThreadNew+0x90>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <osThreadNew+0x94>
        return (NULL);
 80021fc:	2300      	movs	r3, #0
 80021fe:	e054      	b.n	80022aa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	089b      	lsrs	r3, r3, #2
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00e      	beq.n	8002236 <osThreadNew+0xca>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	2b5f      	cmp	r3, #95	; 0x5f
 800221e:	d90a      	bls.n	8002236 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002224:	2b00      	cmp	r3, #0
 8002226:	d006      	beq.n	8002236 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d002      	beq.n	8002236 <osThreadNew+0xca>
        mem = 1;
 8002230:	2301      	movs	r3, #1
 8002232:	623b      	str	r3, [r7, #32]
 8002234:	e010      	b.n	8002258 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10c      	bne.n	8002258 <osThreadNew+0xec>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d108      	bne.n	8002258 <osThreadNew+0xec>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d104      	bne.n	8002258 <osThreadNew+0xec>
          mem = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	623b      	str	r3, [r7, #32]
 8002252:	e001      	b.n	8002258 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d110      	bne.n	8002280 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002266:	9202      	str	r2, [sp, #8]
 8002268:	9301      	str	r3, [sp, #4]
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f001 fa2f 	bl	80036d8 <xTaskCreateStatic>
 800227a:	4603      	mov	r3, r0
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	e013      	b.n	80022a8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d110      	bne.n	80022a8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002288:	b29a      	uxth	r2, r3
 800228a:	f107 0310 	add.w	r3, r7, #16
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f001 fa77 	bl	800378c <xTaskCreate>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d001      	beq.n	80022a8 <osThreadNew+0x13c>
          hTask = NULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80022a8:	693b      	ldr	r3, [r7, #16]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3730      	adds	r7, #48	; 0x30
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	2000002c 	.word	0x2000002c

080022b8 <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022c4:	f3ef 8305 	mrs	r3, IPSR
 80022c8:	617b      	str	r3, [r7, #20]
  return(result);
 80022ca:	697b      	ldr	r3, [r7, #20]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d112      	bne.n	80022f6 <osThreadGetStackSpace+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022d0:	f3ef 8310 	mrs	r3, PRIMASK
 80022d4:	613b      	str	r3, [r7, #16]
  return(result);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d105      	bne.n	80022e8 <osThreadGetStackSpace+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80022dc:	f3ef 8311 	mrs	r3, BASEPRI
 80022e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <osThreadGetStackSpace+0x38>
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <osThreadGetStackSpace+0x58>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d002      	beq.n	80022f6 <osThreadGetStackSpace+0x3e>
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d102      	bne.n	80022fc <osThreadGetStackSpace+0x44>
    sz = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	e003      	b.n	8002304 <osThreadGetStackSpace+0x4c>
  } else {
    sz = (uint32_t)uxTaskGetStackHighWaterMark (hTask);
 80022fc:	69b8      	ldr	r0, [r7, #24]
 80022fe:	f002 f85d 	bl	80043bc <uxTaskGetStackHighWaterMark>
 8002302:	61f8      	str	r0, [r7, #28]
  }

  return (sz);
 8002304:	69fb      	ldr	r3, [r7, #28]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3720      	adds	r7, #32
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	2000002c 	.word	0x2000002c

08002314 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800231c:	f3ef 8305 	mrs	r3, IPSR
 8002320:	613b      	str	r3, [r7, #16]
  return(result);
 8002322:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10f      	bne.n	8002348 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002328:	f3ef 8310 	mrs	r3, PRIMASK
 800232c:	60fb      	str	r3, [r7, #12]
  return(result);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d105      	bne.n	8002340 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002334:	f3ef 8311 	mrs	r3, BASEPRI
 8002338:	60bb      	str	r3, [r7, #8]
  return(result);
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d007      	beq.n	8002350 <osDelay+0x3c>
 8002340:	4b0a      	ldr	r3, [pc, #40]	; (800236c <osDelay+0x58>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d103      	bne.n	8002350 <osDelay+0x3c>
    stat = osErrorISR;
 8002348:	f06f 0305 	mvn.w	r3, #5
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	e007      	b.n	8002360 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <osDelay+0x4c>
      vTaskDelay(ticks);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f001 fb5c 	bl	8003a18 <vTaskDelay>
    }
  }

  return (stat);
 8002360:	697b      	ldr	r3, [r7, #20]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	2000002c 	.word	0x2000002c

08002370 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800237c:	f3ef 8305 	mrs	r3, IPSR
 8002380:	617b      	str	r3, [r7, #20]
  return(result);
 8002382:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8002384:	2b00      	cmp	r3, #0
 8002386:	d13d      	bne.n	8002404 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002388:	f3ef 8310 	mrs	r3, PRIMASK
 800238c:	613b      	str	r3, [r7, #16]
  return(result);
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d105      	bne.n	80023a0 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002394:	f3ef 8311 	mrs	r3, BASEPRI
 8002398:	60fb      	str	r3, [r7, #12]
  return(result);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <osEventFlagsNew+0x38>
 80023a0:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <osEventFlagsNew+0xa0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d02d      	beq.n	8002404 <osEventFlagsNew+0x94>
    mem = -1;
 80023a8:	f04f 33ff 	mov.w	r3, #4294967295
 80023ac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d015      	beq.n	80023e0 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d006      	beq.n	80023ca <osEventFlagsNew+0x5a>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b1f      	cmp	r3, #31
 80023c2:	d902      	bls.n	80023ca <osEventFlagsNew+0x5a>
        mem = 1;
 80023c4:	2301      	movs	r3, #1
 80023c6:	61bb      	str	r3, [r7, #24]
 80023c8:	e00c      	b.n	80023e4 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d108      	bne.n	80023e4 <osEventFlagsNew+0x74>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d104      	bne.n	80023e4 <osEventFlagsNew+0x74>
          mem = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	61bb      	str	r3, [r7, #24]
 80023de:	e001      	b.n	80023e4 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d106      	bne.n	80023f8 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f98a 	bl	8002708 <xEventGroupCreateStatic>
 80023f4:	61f8      	str	r0, [r7, #28]
 80023f6:	e005      	b.n	8002404 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d102      	bne.n	8002404 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 80023fe:	f000 f9b8 	bl	8002772 <xEventGroupCreate>
 8002402:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8002404:	69fb      	ldr	r3, [r7, #28]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3720      	adds	r7, #32
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	2000002c 	.word	0x2000002c

08002414 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d004      	beq.n	8002432 <osEventFlagsSet+0x1e>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8002432:	f06f 0303 	mvn.w	r3, #3
 8002436:	61fb      	str	r3, [r7, #28]
 8002438:	e03a      	b.n	80024b0 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800243a:	f3ef 8305 	mrs	r3, IPSR
 800243e:	617b      	str	r3, [r7, #20]
  return(result);
 8002440:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10f      	bne.n	8002466 <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002446:	f3ef 8310 	mrs	r3, PRIMASK
 800244a:	613b      	str	r3, [r7, #16]
  return(result);
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d105      	bne.n	800245e <osEventFlagsSet+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002452:	f3ef 8311 	mrs	r3, BASEPRI
 8002456:	60fb      	str	r3, [r7, #12]
  return(result);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d021      	beq.n	80024a2 <osEventFlagsSet+0x8e>
 800245e:	4b17      	ldr	r3, [pc, #92]	; (80024bc <osEventFlagsSet+0xa8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d11d      	bne.n	80024a2 <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800246a:	f107 0308 	add.w	r3, r7, #8
 800246e:	461a      	mov	r2, r3
 8002470:	6839      	ldr	r1, [r7, #0]
 8002472:	69b8      	ldr	r0, [r7, #24]
 8002474:	f000 fb94 	bl	8002ba0 <xEventGroupSetBitsFromISR>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d103      	bne.n	8002486 <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 800247e:	f06f 0302 	mvn.w	r3, #2
 8002482:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8002484:	e013      	b.n	80024ae <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00e      	beq.n	80024ae <osEventFlagsSet+0x9a>
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <osEventFlagsSet+0xac>)
 8002492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80024a0:	e005      	b.n	80024ae <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80024a2:	6839      	ldr	r1, [r7, #0]
 80024a4:	69b8      	ldr	r0, [r7, #24]
 80024a6:	f000 fab6 	bl	8002a16 <xEventGroupSetBits>
 80024aa:	61f8      	str	r0, [r7, #28]
 80024ac:	e000      	b.n	80024b0 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80024ae:	bf00      	nop
  }

  return (rflags);
 80024b0:	69fb      	ldr	r3, [r7, #28]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3720      	adds	r7, #32
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	2000002c 	.word	0x2000002c
 80024c0:	e000ed04 	.word	0xe000ed04

080024c4 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d004      	beq.n	80024e2 <osEventFlagsClear+0x1e>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80024e2:	f06f 0303 	mvn.w	r3, #3
 80024e6:	61fb      	str	r3, [r7, #28]
 80024e8:	e029      	b.n	800253e <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024ea:	f3ef 8305 	mrs	r3, IPSR
 80024ee:	617b      	str	r3, [r7, #20]
  return(result);
 80024f0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10f      	bne.n	8002516 <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024f6:	f3ef 8310 	mrs	r3, PRIMASK
 80024fa:	613b      	str	r3, [r7, #16]
  return(result);
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d105      	bne.n	800250e <osEventFlagsClear+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002502:	f3ef 8311 	mrs	r3, BASEPRI
 8002506:	60fb      	str	r3, [r7, #12]
  return(result);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d012      	beq.n	8002534 <osEventFlagsClear+0x70>
 800250e:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <osEventFlagsClear+0x84>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d10e      	bne.n	8002534 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8002516:	69b8      	ldr	r0, [r7, #24]
 8002518:	f000 fa5a 	bl	80029d0 <xEventGroupGetBitsFromISR>
 800251c:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800251e:	6839      	ldr	r1, [r7, #0]
 8002520:	69b8      	ldr	r0, [r7, #24]
 8002522:	f000 fa41 	bl	80029a8 <xEventGroupClearBitsFromISR>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d108      	bne.n	800253e <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 800252c:	f06f 0302 	mvn.w	r3, #2
 8002530:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8002532:	e004      	b.n	800253e <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8002534:	6839      	ldr	r1, [r7, #0]
 8002536:	69b8      	ldr	r0, [r7, #24]
 8002538:	f000 fa00 	bl	800293c <xEventGroupClearBits>
 800253c:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 800253e:	69fb      	ldr	r3, [r7, #28]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3720      	adds	r7, #32
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	2000002c 	.word	0x2000002c

0800254c <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if (ef_id == NULL) {
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d102      	bne.n	8002564 <osEventFlagsGet+0x18>
    rflags = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
 8002562:	e01f      	b.n	80025a4 <osEventFlagsGet+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002564:	f3ef 8305 	mrs	r3, IPSR
 8002568:	617b      	str	r3, [r7, #20]
  return(result);
 800256a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10f      	bne.n	8002590 <osEventFlagsGet+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002570:	f3ef 8310 	mrs	r3, PRIMASK
 8002574:	613b      	str	r3, [r7, #16]
  return(result);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d105      	bne.n	8002588 <osEventFlagsGet+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800257c:	f3ef 8311 	mrs	r3, BASEPRI
 8002580:	60fb      	str	r3, [r7, #12]
  return(result);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <osEventFlagsGet+0x4e>
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <osEventFlagsGet+0x64>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d104      	bne.n	800259a <osEventFlagsGet+0x4e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8002590:	69b8      	ldr	r0, [r7, #24]
 8002592:	f000 fa1d 	bl	80029d0 <xEventGroupGetBitsFromISR>
 8002596:	61f8      	str	r0, [r7, #28]
 8002598:	e004      	b.n	80025a4 <osEventFlagsGet+0x58>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 800259a:	2100      	movs	r1, #0
 800259c:	69b8      	ldr	r0, [r7, #24]
 800259e:	f000 f9cd 	bl	800293c <xEventGroupClearBits>
 80025a2:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 80025a4:	69fb      	ldr	r3, [r7, #28]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3720      	adds	r7, #32
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	2000002c 	.word	0x2000002c

080025b4 <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08e      	sub	sp, #56	; 0x38
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d004      	beq.n	80025d6 <osEventFlagsWait+0x22>
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80025d6:	f06f 0303 	mvn.w	r3, #3
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
 80025dc:	e059      	b.n	8002692 <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025de:	f3ef 8305 	mrs	r3, IPSR
 80025e2:	61fb      	str	r3, [r7, #28]
  return(result);
 80025e4:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10f      	bne.n	800260a <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ea:	f3ef 8310 	mrs	r3, PRIMASK
 80025ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d105      	bne.n	8002602 <osEventFlagsWait+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025f6:	f3ef 8311 	mrs	r3, BASEPRI
 80025fa:	617b      	str	r3, [r7, #20]
  return(result);
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <osEventFlagsWait+0x5e>
 8002602:	4b26      	ldr	r3, [pc, #152]	; (800269c <osEventFlagsWait+0xe8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d103      	bne.n	8002612 <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 800260a:	f06f 0305 	mvn.w	r3, #5
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
 8002610:	e03f      	b.n	8002692 <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 800261c:	2301      	movs	r3, #1
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002620:	e001      	b.n	8002626 <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 8002622:	2300      	movs	r3, #0
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 8002630:	2300      	movs	r3, #0
 8002632:	62bb      	str	r3, [r7, #40]	; 0x28
 8002634:	e001      	b.n	800263a <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8002636:	2301      	movs	r3, #1
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002642:	68b9      	ldr	r1, [r7, #8]
 8002644:	6a38      	ldr	r0, [r7, #32]
 8002646:	f000 f8af 	bl	80027a8 <xEventGroupWaitBits>
 800264a:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00e      	beq.n	8002674 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	429a      	cmp	r2, r3
 800265c:	d019      	beq.n	8002692 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8002664:	f06f 0301 	mvn.w	r3, #1
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
 800266a:	e012      	b.n	8002692 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 800266c:	f06f 0302 	mvn.w	r3, #2
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
 8002672:	e00e      	b.n	8002692 <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	4013      	ands	r3, r2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d109      	bne.n	8002692 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 8002684:	f06f 0301 	mvn.w	r3, #1
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
 800268a:	e002      	b.n	8002692 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 800268c:	f06f 0302 	mvn.w	r3, #2
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002694:	4618      	mov	r0, r3
 8002696:	3730      	adds	r7, #48	; 0x30
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	2000002c 	.word	0x2000002c

080026a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4a07      	ldr	r2, [pc, #28]	; (80026cc <vApplicationGetIdleTaskMemory+0x2c>)
 80026b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	4a06      	ldr	r2, [pc, #24]	; (80026d0 <vApplicationGetIdleTaskMemory+0x30>)
 80026b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2280      	movs	r2, #128	; 0x80
 80026bc:	601a      	str	r2, [r3, #0]
}
 80026be:	bf00      	nop
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	20000030 	.word	0x20000030
 80026d0:	20000090 	.word	0x20000090

080026d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4a07      	ldr	r2, [pc, #28]	; (8002700 <vApplicationGetTimerTaskMemory+0x2c>)
 80026e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	4a06      	ldr	r2, [pc, #24]	; (8002704 <vApplicationGetTimerTaskMemory+0x30>)
 80026ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026f2:	601a      	str	r2, [r3, #0]
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	20000290 	.word	0x20000290
 8002704:	200002f0 	.word	0x200002f0

08002708 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <xEventGroupCreateStatic+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271a:	f383 8811 	msr	BASEPRI, r3
 800271e:	f3bf 8f6f 	isb	sy
 8002722:	f3bf 8f4f 	dsb	sy
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	e7fe      	b.n	8002728 <xEventGroupCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800272a:	2320      	movs	r3, #32
 800272c:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2b20      	cmp	r3, #32
 8002732:	d009      	beq.n	8002748 <xEventGroupCreateStatic+0x40>
 8002734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002738:	f383 8811 	msr	BASEPRI, r3
 800273c:	f3bf 8f6f 	isb	sy
 8002740:	f3bf 8f4f 	dsb	sy
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	e7fe      	b.n	8002746 <xEventGroupCreateStatic+0x3e>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00a      	beq.n	8002768 <xEventGroupCreateStatic+0x60>
		{
			pxEventBits->uxEventBits = 0;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	3304      	adds	r3, #4
 800275c:	4618      	mov	r0, r3
 800275e:	f000 fa33 	bl	8002bc8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2201      	movs	r2, #1
 8002766:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8002768:	697b      	ldr	r3, [r7, #20]
	}
 800276a:	4618      	mov	r0, r3
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8002778:	2020      	movs	r0, #32
 800277a:	f002 fd29 	bl	80051d0 <pvPortMalloc>
 800277e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3304      	adds	r3, #4
 8002790:	4618      	mov	r0, r3
 8002792:	f000 fa19 	bl	8002bc8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800279c:	687b      	ldr	r3, [r7, #4]
	}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b090      	sub	sp, #64	; 0x40
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80027be:	2300      	movs	r3, #0
 80027c0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d109      	bne.n	80027dc <xEventGroupWaitBits+0x34>
 80027c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027cc:	f383 8811 	msr	BASEPRI, r3
 80027d0:	f3bf 8f6f 	isb	sy
 80027d4:	f3bf 8f4f 	dsb	sy
 80027d8:	623b      	str	r3, [r7, #32]
 80027da:	e7fe      	b.n	80027da <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d009      	beq.n	80027fa <xEventGroupWaitBits+0x52>
 80027e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ea:	f383 8811 	msr	BASEPRI, r3
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	61fb      	str	r3, [r7, #28]
 80027f8:	e7fe      	b.n	80027f8 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d109      	bne.n	8002814 <xEventGroupWaitBits+0x6c>
 8002800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	e7fe      	b.n	8002812 <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002814:	f001 fe3c 	bl	8004490 <xTaskGetSchedulerState>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d102      	bne.n	8002824 <xEventGroupWaitBits+0x7c>
 800281e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <xEventGroupWaitBits+0x80>
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <xEventGroupWaitBits+0x82>
 8002828:	2300      	movs	r3, #0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d109      	bne.n	8002842 <xEventGroupWaitBits+0x9a>
 800282e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002832:	f383 8811 	msr	BASEPRI, r3
 8002836:	f3bf 8f6f 	isb	sy
 800283a:	f3bf 8f4f 	dsb	sy
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	e7fe      	b.n	8002840 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 8002842:	f001 f981 	bl	8003b48 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	68b9      	ldr	r1, [r7, #8]
 8002850:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002852:	f000 f983 	bl	8002b5c <prvTestWaitCondition>
 8002856:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8002858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00e      	beq.n	800287c <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002860:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8002862:	2300      	movs	r3, #0
 8002864:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d028      	beq.n	80028be <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800286c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	43db      	mvns	r3, r3
 8002874:	401a      	ands	r2, r3
 8002876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	e020      	b.n	80028be <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800287c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800287e:	2b00      	cmp	r3, #0
 8002880:	d104      	bne.n	800288c <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8002882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002884:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8002886:	2301      	movs	r3, #1
 8002888:	633b      	str	r3, [r7, #48]	; 0x30
 800288a:	e018      	b.n	80028be <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002894:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002898:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80028a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028a6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80028a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028aa:	1d18      	adds	r0, r3, #4
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b0:	4313      	orrs	r3, r2
 80028b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028b4:	4619      	mov	r1, r3
 80028b6:	f001 fb39 	bl	8003f2c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80028be:	f001 f951 	bl	8003b64 <xTaskResumeAll>
 80028c2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80028c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d031      	beq.n	800292e <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d107      	bne.n	80028e0 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 80028d0:	4b19      	ldr	r3, [pc, #100]	; (8002938 <xEventGroupWaitBits+0x190>)
 80028d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80028e0:	f001 fe60 	bl	80045a4 <uxTaskResetEventItemValue>
 80028e4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80028e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d11a      	bne.n	8002926 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 80028f0:	f002 fb54 	bl	8004f9c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80028f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002900:	f000 f92c 	bl	8002b5c <prvTestWaitCondition>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d009      	beq.n	800291e <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d006      	beq.n	800291e <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	43db      	mvns	r3, r3
 8002918:	401a      	ands	r2, r3
 800291a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800291c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800291e:	2301      	movs	r3, #1
 8002920:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8002922:	f002 fb69 	bl	8004ff8 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002928:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800292c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800292e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002930:	4618      	mov	r0, r3
 8002932:	3740      	adds	r7, #64	; 0x40
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	e000ed04 	.word	0xe000ed04

0800293c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d109      	bne.n	8002964 <xEventGroupClearBits+0x28>
 8002950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002954:	f383 8811 	msr	BASEPRI, r3
 8002958:	f3bf 8f6f 	isb	sy
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	e7fe      	b.n	8002962 <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <xEventGroupClearBits+0x46>
 800296e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002972:	f383 8811 	msr	BASEPRI, r3
 8002976:	f3bf 8f6f 	isb	sy
 800297a:	f3bf 8f4f 	dsb	sy
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	e7fe      	b.n	8002980 <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 8002982:	f002 fb0b 	bl	8004f9c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	43db      	mvns	r3, r3
 8002994:	401a      	ands	r2, r3
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800299a:	f002 fb2d 	bl	8004ff8 <vPortExitCritical>

	return uxReturn;
 800299e:	693b      	ldr	r3, [r7, #16]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80029b2:	2300      	movs	r3, #0
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4804      	ldr	r0, [pc, #16]	; (80029cc <xEventGroupClearBitsFromISR+0x24>)
 80029ba:	f002 f9a5 	bl	8004d08 <xTimerPendFunctionCallFromISR>
 80029be:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80029c0:	68fb      	ldr	r3, [r7, #12]
	}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	08002b43 	.word	0x08002b43

080029d0 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80029d0:	b480      	push	{r7}
 80029d2:	b089      	sub	sp, #36	; 0x24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80029dc:	f3ef 8211 	mrs	r2, BASEPRI
 80029e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e4:	f383 8811 	msr	BASEPRI, r3
 80029e8:	f3bf 8f6f 	isb	sy
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	60fa      	str	r2, [r7, #12]
 80029f2:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80029f4:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80029f6:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	f383 8811 	msr	BASEPRI, r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8002a08:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3724      	adds	r7, #36	; 0x24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b08e      	sub	sp, #56	; 0x38
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002a20:	2300      	movs	r3, #0
 8002a22:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d109      	bne.n	8002a46 <xEventGroupSetBits+0x30>
	__asm volatile
 8002a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a36:	f383 8811 	msr	BASEPRI, r3
 8002a3a:	f3bf 8f6f 	isb	sy
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	e7fe      	b.n	8002a44 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d009      	beq.n	8002a64 <xEventGroupSetBits+0x4e>
 8002a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a54:	f383 8811 	msr	BASEPRI, r3
 8002a58:	f3bf 8f6f 	isb	sy
 8002a5c:	f3bf 8f4f 	dsb	sy
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	e7fe      	b.n	8002a62 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a66:	3304      	adds	r3, #4
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	3308      	adds	r3, #8
 8002a6e:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8002a70:	f001 f86a 	bl	8003b48 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8002a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a84:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8002a86:	e03c      	b.n	8002b02 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8002a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8002a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8002a94:	2300      	movs	r3, #0
 8002a96:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002a9e:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002aa6:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d108      	bne.n	8002ac4 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8002ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00b      	beq.n	8002ad6 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac2:	e008      	b.n	8002ad6 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8002ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	4013      	ands	r3, r2
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d101      	bne.n	8002ad6 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8002ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d010      	beq.n	8002afe <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8002ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8002aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002af6:	4619      	mov	r1, r3
 8002af8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002afa:	f001 fadd 	bl	80040b8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8002b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d1be      	bne.n	8002a88 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b10:	43db      	mvns	r3, r3
 8002b12:	401a      	ands	r2, r3
 8002b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b16:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8002b18:	f001 f824 	bl	8003b64 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8002b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1e:	681b      	ldr	r3, [r3, #0]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3738      	adds	r7, #56	; 0x38
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8002b32:	6839      	ldr	r1, [r7, #0]
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff ff6e 	bl	8002a16 <xEventGroupSetBits>
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8002b4c:	6839      	ldr	r1, [r7, #0]
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff fef4 	bl	800293c <xEventGroupClearBits>
}
 8002b54:	bf00      	nop
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d107      	bne.n	8002b82 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	e007      	b.n	8002b92 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4013      	ands	r3, r2
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d101      	bne.n	8002b92 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8002b92:	697b      	ldr	r3, [r7, #20]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	371c      	adds	r7, #28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	68f9      	ldr	r1, [r7, #12]
 8002bb2:	4804      	ldr	r0, [pc, #16]	; (8002bc4 <xEventGroupSetBitsFromISR+0x24>)
 8002bb4:	f002 f8a8 	bl	8004d08 <xTimerPendFunctionCallFromISR>
 8002bb8:	6178      	str	r0, [r7, #20]

		return xReturn;
 8002bba:	697b      	ldr	r3, [r7, #20]
	}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	08002b29 	.word	0x08002b29

08002bc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f103 0208 	add.w	r2, r3, #8
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002be0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f103 0208 	add.w	r2, r3, #8
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f103 0208 	add.w	r2, r3, #8
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c22:	b480      	push	{r7}
 8002c24:	b085      	sub	sp, #20
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
 8002c2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	601a      	str	r2, [r3, #0]
}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b085      	sub	sp, #20
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c80:	d103      	bne.n	8002c8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	e00c      	b.n	8002ca4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3308      	adds	r3, #8
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	e002      	b.n	8002c98 <vListInsert+0x2e>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d2f6      	bcs.n	8002c92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	601a      	str	r2, [r3, #0]
}
 8002cd0:	bf00      	nop
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6892      	ldr	r2, [r2, #8]
 8002cf2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6852      	ldr	r2, [r2, #4]
 8002cfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d103      	bne.n	8002d10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	1e5a      	subs	r2, r3, #1
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d109      	bne.n	8002d58 <xQueueGenericReset+0x28>
 8002d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d48:	f383 8811 	msr	BASEPRI, r3
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	e7fe      	b.n	8002d56 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002d58:	f002 f920 	bl	8004f9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d64:	68f9      	ldr	r1, [r7, #12]
 8002d66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	441a      	add	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	68f9      	ldr	r1, [r7, #12]
 8002d8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	441a      	add	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	22ff      	movs	r2, #255	; 0xff
 8002d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	22ff      	movs	r2, #255	; 0xff
 8002da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d114      	bne.n	8002dd8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d01a      	beq.n	8002dec <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	3310      	adds	r3, #16
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f001 f91a 	bl	8003ff4 <xTaskRemoveFromEventList>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d012      	beq.n	8002dec <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <xQueueGenericReset+0xcc>)
 8002dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	f3bf 8f4f 	dsb	sy
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	e009      	b.n	8002dec <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	3310      	adds	r3, #16
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fef3 	bl	8002bc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3324      	adds	r3, #36	; 0x24
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff feee 	bl	8002bc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002dec:	f002 f904 	bl	8004ff8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002df0:	2301      	movs	r3, #1
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	e000ed04 	.word	0xe000ed04

08002e00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08e      	sub	sp, #56	; 0x38
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d109      	bne.n	8002e28 <xQueueGenericCreateStatic+0x28>
 8002e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e18:	f383 8811 	msr	BASEPRI, r3
 8002e1c:	f3bf 8f6f 	isb	sy
 8002e20:	f3bf 8f4f 	dsb	sy
 8002e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e26:	e7fe      	b.n	8002e26 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <xQueueGenericCreateStatic+0x42>
 8002e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e40:	e7fe      	b.n	8002e40 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <xQueueGenericCreateStatic+0x4e>
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <xQueueGenericCreateStatic+0x52>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <xQueueGenericCreateStatic+0x54>
 8002e52:	2300      	movs	r3, #0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d109      	bne.n	8002e6c <xQueueGenericCreateStatic+0x6c>
 8002e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5c:	f383 8811 	msr	BASEPRI, r3
 8002e60:	f3bf 8f6f 	isb	sy
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	623b      	str	r3, [r7, #32]
 8002e6a:	e7fe      	b.n	8002e6a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d102      	bne.n	8002e78 <xQueueGenericCreateStatic+0x78>
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <xQueueGenericCreateStatic+0x7c>
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e000      	b.n	8002e7e <xQueueGenericCreateStatic+0x7e>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <xQueueGenericCreateStatic+0x96>
 8002e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e86:	f383 8811 	msr	BASEPRI, r3
 8002e8a:	f3bf 8f6f 	isb	sy
 8002e8e:	f3bf 8f4f 	dsb	sy
 8002e92:	61fb      	str	r3, [r7, #28]
 8002e94:	e7fe      	b.n	8002e94 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e96:	2350      	movs	r3, #80	; 0x50
 8002e98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2b50      	cmp	r3, #80	; 0x50
 8002e9e:	d009      	beq.n	8002eb4 <xQueueGenericCreateStatic+0xb4>
 8002ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea4:	f383 8811 	msr	BASEPRI, r3
 8002ea8:	f3bf 8f6f 	isb	sy
 8002eac:	f3bf 8f4f 	dsb	sy
 8002eb0:	61bb      	str	r3, [r7, #24]
 8002eb2:	e7fe      	b.n	8002eb2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002eb4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00d      	beq.n	8002edc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ec8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f805 	bl	8002ee6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3730      	adds	r7, #48	; 0x30
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b084      	sub	sp, #16
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d103      	bne.n	8002f02 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	e002      	b.n	8002f08 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f14:	2101      	movs	r1, #1
 8002f16:	69b8      	ldr	r0, [r7, #24]
 8002f18:	f7ff ff0a 	bl	8002d30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08e      	sub	sp, #56	; 0x38
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d109      	bne.n	8002f5c <xQueueGenericSend+0x30>
 8002f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f5a:	e7fe      	b.n	8002f5a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d103      	bne.n	8002f6a <xQueueGenericSend+0x3e>
 8002f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <xQueueGenericSend+0x42>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <xQueueGenericSend+0x44>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d109      	bne.n	8002f88 <xQueueGenericSend+0x5c>
 8002f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f78:	f383 8811 	msr	BASEPRI, r3
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
 8002f86:	e7fe      	b.n	8002f86 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d103      	bne.n	8002f96 <xQueueGenericSend+0x6a>
 8002f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <xQueueGenericSend+0x6e>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <xQueueGenericSend+0x70>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d109      	bne.n	8002fb4 <xQueueGenericSend+0x88>
 8002fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa4:	f383 8811 	msr	BASEPRI, r3
 8002fa8:	f3bf 8f6f 	isb	sy
 8002fac:	f3bf 8f4f 	dsb	sy
 8002fb0:	623b      	str	r3, [r7, #32]
 8002fb2:	e7fe      	b.n	8002fb2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fb4:	f001 fa6c 	bl	8004490 <xTaskGetSchedulerState>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d102      	bne.n	8002fc4 <xQueueGenericSend+0x98>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <xQueueGenericSend+0x9c>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <xQueueGenericSend+0x9e>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d109      	bne.n	8002fe2 <xQueueGenericSend+0xb6>
 8002fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd2:	f383 8811 	msr	BASEPRI, r3
 8002fd6:	f3bf 8f6f 	isb	sy
 8002fda:	f3bf 8f4f 	dsb	sy
 8002fde:	61fb      	str	r3, [r7, #28]
 8002fe0:	e7fe      	b.n	8002fe0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fe2:	f001 ffdb 	bl	8004f9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d302      	bcc.n	8002ff8 <xQueueGenericSend+0xcc>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d129      	bne.n	800304c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	68b9      	ldr	r1, [r7, #8]
 8002ffc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ffe:	f000 f9ff 	bl	8003400 <prvCopyDataToQueue>
 8003002:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	2b00      	cmp	r3, #0
 800300a:	d010      	beq.n	800302e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300e:	3324      	adds	r3, #36	; 0x24
 8003010:	4618      	mov	r0, r3
 8003012:	f000 ffef 	bl	8003ff4 <xTaskRemoveFromEventList>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d013      	beq.n	8003044 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800301c:	4b3f      	ldr	r3, [pc, #252]	; (800311c <xQueueGenericSend+0x1f0>)
 800301e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	f3bf 8f6f 	isb	sy
 800302c:	e00a      	b.n	8003044 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800302e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003030:	2b00      	cmp	r3, #0
 8003032:	d007      	beq.n	8003044 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003034:	4b39      	ldr	r3, [pc, #228]	; (800311c <xQueueGenericSend+0x1f0>)
 8003036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003044:	f001 ffd8 	bl	8004ff8 <vPortExitCritical>
				return pdPASS;
 8003048:	2301      	movs	r3, #1
 800304a:	e063      	b.n	8003114 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d103      	bne.n	800305a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003052:	f001 ffd1 	bl	8004ff8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003056:	2300      	movs	r3, #0
 8003058:	e05c      	b.n	8003114 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800305a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305c:	2b00      	cmp	r3, #0
 800305e:	d106      	bne.n	800306e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003060:	f107 0314 	add.w	r3, r7, #20
 8003064:	4618      	mov	r0, r3
 8003066:	f001 f887 	bl	8004178 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800306a:	2301      	movs	r3, #1
 800306c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800306e:	f001 ffc3 	bl	8004ff8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003072:	f000 fd69 	bl	8003b48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003076:	f001 ff91 	bl	8004f9c <vPortEnterCritical>
 800307a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003080:	b25b      	sxtb	r3, r3
 8003082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003086:	d103      	bne.n	8003090 <xQueueGenericSend+0x164>
 8003088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003096:	b25b      	sxtb	r3, r3
 8003098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309c:	d103      	bne.n	80030a6 <xQueueGenericSend+0x17a>
 800309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030a6:	f001 ffa7 	bl	8004ff8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030aa:	1d3a      	adds	r2, r7, #4
 80030ac:	f107 0314 	add.w	r3, r7, #20
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f001 f876 	bl	80041a4 <xTaskCheckForTimeOut>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d124      	bne.n	8003108 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80030be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030c0:	f000 fa96 	bl	80035f0 <prvIsQueueFull>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d018      	beq.n	80030fc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80030ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030cc:	3310      	adds	r3, #16
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	4611      	mov	r1, r2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 ff06 	bl	8003ee4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80030d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030da:	f000 fa21 	bl	8003520 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80030de:	f000 fd41 	bl	8003b64 <xTaskResumeAll>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f47f af7c 	bne.w	8002fe2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80030ea:	4b0c      	ldr	r3, [pc, #48]	; (800311c <xQueueGenericSend+0x1f0>)
 80030ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	f3bf 8f4f 	dsb	sy
 80030f6:	f3bf 8f6f 	isb	sy
 80030fa:	e772      	b.n	8002fe2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80030fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030fe:	f000 fa0f 	bl	8003520 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003102:	f000 fd2f 	bl	8003b64 <xTaskResumeAll>
 8003106:	e76c      	b.n	8002fe2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800310a:	f000 fa09 	bl	8003520 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800310e:	f000 fd29 	bl	8003b64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003112:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003114:	4618      	mov	r0, r3
 8003116:	3738      	adds	r7, #56	; 0x38
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	e000ed04 	.word	0xe000ed04

08003120 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08e      	sub	sp, #56	; 0x38
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
 800312c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003134:	2b00      	cmp	r3, #0
 8003136:	d109      	bne.n	800314c <xQueueGenericSendFromISR+0x2c>
 8003138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
 800314a:	e7fe      	b.n	800314a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d103      	bne.n	800315a <xQueueGenericSendFromISR+0x3a>
 8003152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <xQueueGenericSendFromISR+0x3e>
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <xQueueGenericSendFromISR+0x40>
 800315e:	2300      	movs	r3, #0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d109      	bne.n	8003178 <xQueueGenericSendFromISR+0x58>
 8003164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003168:	f383 8811 	msr	BASEPRI, r3
 800316c:	f3bf 8f6f 	isb	sy
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	623b      	str	r3, [r7, #32]
 8003176:	e7fe      	b.n	8003176 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	2b02      	cmp	r3, #2
 800317c:	d103      	bne.n	8003186 <xQueueGenericSendFromISR+0x66>
 800317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	2b01      	cmp	r3, #1
 8003184:	d101      	bne.n	800318a <xQueueGenericSendFromISR+0x6a>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <xQueueGenericSendFromISR+0x6c>
 800318a:	2300      	movs	r3, #0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d109      	bne.n	80031a4 <xQueueGenericSendFromISR+0x84>
 8003190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003194:	f383 8811 	msr	BASEPRI, r3
 8003198:	f3bf 8f6f 	isb	sy
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	61fb      	str	r3, [r7, #28]
 80031a2:	e7fe      	b.n	80031a2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031a4:	f001 ffd6 	bl	8005154 <vPortValidateInterruptPriority>
	__asm volatile
 80031a8:	f3ef 8211 	mrs	r2, BASEPRI
 80031ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b0:	f383 8811 	msr	BASEPRI, r3
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	61ba      	str	r2, [r7, #24]
 80031be:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80031c0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d302      	bcc.n	80031d6 <xQueueGenericSendFromISR+0xb6>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d12c      	bne.n	8003230 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031e6:	f000 f90b 	bl	8003400 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80031ea:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f2:	d112      	bne.n	800321a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d016      	beq.n	800322a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fe:	3324      	adds	r3, #36	; 0x24
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fef7 	bl	8003ff4 <xTaskRemoveFromEventList>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00e      	beq.n	800322a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00b      	beq.n	800322a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	e007      	b.n	800322a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800321a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800321e:	3301      	adds	r3, #1
 8003220:	b2db      	uxtb	r3, r3
 8003222:	b25a      	sxtb	r2, r3
 8003224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800322a:	2301      	movs	r3, #1
 800322c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800322e:	e001      	b.n	8003234 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003230:	2300      	movs	r3, #0
 8003232:	637b      	str	r3, [r7, #52]	; 0x34
 8003234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003236:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800323e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003240:	4618      	mov	r0, r3
 8003242:	3738      	adds	r7, #56	; 0x38
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08c      	sub	sp, #48	; 0x30
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003254:	2300      	movs	r3, #0
 8003256:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800325c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325e:	2b00      	cmp	r3, #0
 8003260:	d109      	bne.n	8003276 <xQueueReceive+0x2e>
	__asm volatile
 8003262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003266:	f383 8811 	msr	BASEPRI, r3
 800326a:	f3bf 8f6f 	isb	sy
 800326e:	f3bf 8f4f 	dsb	sy
 8003272:	623b      	str	r3, [r7, #32]
 8003274:	e7fe      	b.n	8003274 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d103      	bne.n	8003284 <xQueueReceive+0x3c>
 800327c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <xQueueReceive+0x40>
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <xQueueReceive+0x42>
 8003288:	2300      	movs	r3, #0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d109      	bne.n	80032a2 <xQueueReceive+0x5a>
 800328e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	61fb      	str	r3, [r7, #28]
 80032a0:	e7fe      	b.n	80032a0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032a2:	f001 f8f5 	bl	8004490 <xTaskGetSchedulerState>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d102      	bne.n	80032b2 <xQueueReceive+0x6a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <xQueueReceive+0x6e>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <xQueueReceive+0x70>
 80032b6:	2300      	movs	r3, #0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d109      	bne.n	80032d0 <xQueueReceive+0x88>
 80032bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c0:	f383 8811 	msr	BASEPRI, r3
 80032c4:	f3bf 8f6f 	isb	sy
 80032c8:	f3bf 8f4f 	dsb	sy
 80032cc:	61bb      	str	r3, [r7, #24]
 80032ce:	e7fe      	b.n	80032ce <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032d0:	f001 fe64 	bl	8004f9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d01f      	beq.n	8003320 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032e4:	f000 f8f6 	bl	80034d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	1e5a      	subs	r2, r3, #1
 80032ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ee:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00f      	beq.n	8003318 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fa:	3310      	adds	r3, #16
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 fe79 	bl	8003ff4 <xTaskRemoveFromEventList>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d007      	beq.n	8003318 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003308:	4b3c      	ldr	r3, [pc, #240]	; (80033fc <xQueueReceive+0x1b4>)
 800330a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003318:	f001 fe6e 	bl	8004ff8 <vPortExitCritical>
				return pdPASS;
 800331c:	2301      	movs	r3, #1
 800331e:	e069      	b.n	80033f4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d103      	bne.n	800332e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003326:	f001 fe67 	bl	8004ff8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800332a:	2300      	movs	r3, #0
 800332c:	e062      	b.n	80033f4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800332e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003330:	2b00      	cmp	r3, #0
 8003332:	d106      	bne.n	8003342 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003334:	f107 0310 	add.w	r3, r7, #16
 8003338:	4618      	mov	r0, r3
 800333a:	f000 ff1d 	bl	8004178 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800333e:	2301      	movs	r3, #1
 8003340:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003342:	f001 fe59 	bl	8004ff8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003346:	f000 fbff 	bl	8003b48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800334a:	f001 fe27 	bl	8004f9c <vPortEnterCritical>
 800334e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003350:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003354:	b25b      	sxtb	r3, r3
 8003356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335a:	d103      	bne.n	8003364 <xQueueReceive+0x11c>
 800335c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003366:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800336a:	b25b      	sxtb	r3, r3
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003370:	d103      	bne.n	800337a <xQueueReceive+0x132>
 8003372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800337a:	f001 fe3d 	bl	8004ff8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800337e:	1d3a      	adds	r2, r7, #4
 8003380:	f107 0310 	add.w	r3, r7, #16
 8003384:	4611      	mov	r1, r2
 8003386:	4618      	mov	r0, r3
 8003388:	f000 ff0c 	bl	80041a4 <xTaskCheckForTimeOut>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d123      	bne.n	80033da <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003394:	f000 f916 	bl	80035c4 <prvIsQueueEmpty>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d017      	beq.n	80033ce <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800339e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a0:	3324      	adds	r3, #36	; 0x24
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	4611      	mov	r1, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fd9c 	bl	8003ee4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033ae:	f000 f8b7 	bl	8003520 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033b2:	f000 fbd7 	bl	8003b64 <xTaskResumeAll>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d189      	bne.n	80032d0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80033bc:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <xQueueReceive+0x1b4>)
 80033be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	e780      	b.n	80032d0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80033ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033d0:	f000 f8a6 	bl	8003520 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033d4:	f000 fbc6 	bl	8003b64 <xTaskResumeAll>
 80033d8:	e77a      	b.n	80032d0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80033da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033dc:	f000 f8a0 	bl	8003520 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033e0:	f000 fbc0 	bl	8003b64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033e6:	f000 f8ed 	bl	80035c4 <prvIsQueueEmpty>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f43f af6f 	beq.w	80032d0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3730      	adds	r7, #48	; 0x30
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	e000ed04 	.word	0xe000ed04

08003400 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003414:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10d      	bne.n	800343a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d14d      	bne.n	80034c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	4618      	mov	r0, r3
 800342c:	f001 f84e 	bl	80044cc <xTaskPriorityDisinherit>
 8003430:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	e043      	b.n	80034c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d119      	bne.n	8003474 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6858      	ldr	r0, [r3, #4]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	461a      	mov	r2, r3
 800344a:	68b9      	ldr	r1, [r7, #8]
 800344c:	f002 fd86 	bl	8005f5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	441a      	add	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	429a      	cmp	r2, r3
 8003468:	d32b      	bcc.n	80034c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	605a      	str	r2, [r3, #4]
 8003472:	e026      	b.n	80034c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	68d8      	ldr	r0, [r3, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	461a      	mov	r2, r3
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	f002 fd6c 	bl	8005f5c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	425b      	negs	r3, r3
 800348e:	441a      	add	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d207      	bcs.n	80034b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	425b      	negs	r3, r3
 80034aa:	441a      	add	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d105      	bne.n	80034c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	3b01      	subs	r3, #1
 80034c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80034ca:	697b      	ldr	r3, [r7, #20]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d018      	beq.n	8003518 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	441a      	add	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d303      	bcc.n	8003508 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68d9      	ldr	r1, [r3, #12]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	461a      	mov	r2, r3
 8003512:	6838      	ldr	r0, [r7, #0]
 8003514:	f002 fd22 	bl	8005f5c <memcpy>
	}
}
 8003518:	bf00      	nop
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003528:	f001 fd38 	bl	8004f9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003532:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003534:	e011      	b.n	800355a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	2b00      	cmp	r3, #0
 800353c:	d012      	beq.n	8003564 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3324      	adds	r3, #36	; 0x24
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fd56 	bl	8003ff4 <xTaskRemoveFromEventList>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800354e:	f000 fe89 	bl	8004264 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	3b01      	subs	r3, #1
 8003556:	b2db      	uxtb	r3, r3
 8003558:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800355a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355e:	2b00      	cmp	r3, #0
 8003560:	dce9      	bgt.n	8003536 <prvUnlockQueue+0x16>
 8003562:	e000      	b.n	8003566 <prvUnlockQueue+0x46>
					break;
 8003564:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	22ff      	movs	r2, #255	; 0xff
 800356a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800356e:	f001 fd43 	bl	8004ff8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003572:	f001 fd13 	bl	8004f9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800357c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800357e:	e011      	b.n	80035a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d012      	beq.n	80035ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3310      	adds	r3, #16
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fd31 	bl	8003ff4 <xTaskRemoveFromEventList>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003598:	f000 fe64 	bl	8004264 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800359c:	7bbb      	ldrb	r3, [r7, #14]
 800359e:	3b01      	subs	r3, #1
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	dce9      	bgt.n	8003580 <prvUnlockQueue+0x60>
 80035ac:	e000      	b.n	80035b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80035ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	22ff      	movs	r2, #255	; 0xff
 80035b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80035b8:	f001 fd1e 	bl	8004ff8 <vPortExitCritical>
}
 80035bc:	bf00      	nop
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035cc:	f001 fce6 	bl	8004f9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d102      	bne.n	80035de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80035d8:	2301      	movs	r3, #1
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	e001      	b.n	80035e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035e2:	f001 fd09 	bl	8004ff8 <vPortExitCritical>

	return xReturn;
 80035e6:	68fb      	ldr	r3, [r7, #12]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035f8:	f001 fcd0 	bl	8004f9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003604:	429a      	cmp	r2, r3
 8003606:	d102      	bne.n	800360e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003608:	2301      	movs	r3, #1
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	e001      	b.n	8003612 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800360e:	2300      	movs	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003612:	f001 fcf1 	bl	8004ff8 <vPortExitCritical>

	return xReturn;
 8003616:	68fb      	ldr	r3, [r7, #12]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	e014      	b.n	800365a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003630:	4a0e      	ldr	r2, [pc, #56]	; (800366c <vQueueAddToRegistry+0x4c>)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10b      	bne.n	8003654 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800363c:	490b      	ldr	r1, [pc, #44]	; (800366c <vQueueAddToRegistry+0x4c>)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003646:	4a09      	ldr	r2, [pc, #36]	; (800366c <vQueueAddToRegistry+0x4c>)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4413      	add	r3, r2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003652:	e005      	b.n	8003660 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	3301      	adds	r3, #1
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b07      	cmp	r3, #7
 800365e:	d9e7      	bls.n	8003630 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003660:	bf00      	nop
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	20004948 	.word	0x20004948

08003670 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003680:	f001 fc8c 	bl	8004f9c <vPortEnterCritical>
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800368a:	b25b      	sxtb	r3, r3
 800368c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003690:	d103      	bne.n	800369a <vQueueWaitForMessageRestricted+0x2a>
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036a0:	b25b      	sxtb	r3, r3
 80036a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a6:	d103      	bne.n	80036b0 <vQueueWaitForMessageRestricted+0x40>
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036b0:	f001 fca2 	bl	8004ff8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d106      	bne.n	80036ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	3324      	adds	r3, #36	; 0x24
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	68b9      	ldr	r1, [r7, #8]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fc6b 	bl	8003fa0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80036ca:	6978      	ldr	r0, [r7, #20]
 80036cc:	f7ff ff28 	bl	8003520 <prvUnlockQueue>
	}
 80036d0:	bf00      	nop
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08e      	sub	sp, #56	; 0x38
 80036dc:	af04      	add	r7, sp, #16
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80036e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d109      	bne.n	8003700 <xTaskCreateStatic+0x28>
 80036ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f0:	f383 8811 	msr	BASEPRI, r3
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	623b      	str	r3, [r7, #32]
 80036fe:	e7fe      	b.n	80036fe <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003702:	2b00      	cmp	r3, #0
 8003704:	d109      	bne.n	800371a <xTaskCreateStatic+0x42>
 8003706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370a:	f383 8811 	msr	BASEPRI, r3
 800370e:	f3bf 8f6f 	isb	sy
 8003712:	f3bf 8f4f 	dsb	sy
 8003716:	61fb      	str	r3, [r7, #28]
 8003718:	e7fe      	b.n	8003718 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800371a:	2360      	movs	r3, #96	; 0x60
 800371c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	2b60      	cmp	r3, #96	; 0x60
 8003722:	d009      	beq.n	8003738 <xTaskCreateStatic+0x60>
 8003724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003728:	f383 8811 	msr	BASEPRI, r3
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	61bb      	str	r3, [r7, #24]
 8003736:	e7fe      	b.n	8003736 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003738:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800373a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01e      	beq.n	800377e <xTaskCreateStatic+0xa6>
 8003740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003742:	2b00      	cmp	r3, #0
 8003744:	d01b      	beq.n	800377e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800374e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	2202      	movs	r2, #2
 8003754:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003758:	2300      	movs	r3, #0
 800375a:	9303      	str	r3, [sp, #12]
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	9302      	str	r3, [sp, #8]
 8003760:	f107 0314 	add.w	r3, r7, #20
 8003764:	9301      	str	r3, [sp, #4]
 8003766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	68b9      	ldr	r1, [r7, #8]
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 f850 	bl	8003816 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003776:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003778:	f000 f8de 	bl	8003938 <prvAddNewTaskToReadyList>
 800377c:	e001      	b.n	8003782 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800377e:	2300      	movs	r3, #0
 8003780:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003782:	697b      	ldr	r3, [r7, #20]
	}
 8003784:	4618      	mov	r0, r3
 8003786:	3728      	adds	r7, #40	; 0x28
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08c      	sub	sp, #48	; 0x30
 8003790:	af04      	add	r7, sp, #16
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	4613      	mov	r3, r2
 800379a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800379c:	88fb      	ldrh	r3, [r7, #6]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4618      	mov	r0, r3
 80037a2:	f001 fd15 	bl	80051d0 <pvPortMalloc>
 80037a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00e      	beq.n	80037cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80037ae:	2060      	movs	r0, #96	; 0x60
 80037b0:	f001 fd0e 	bl	80051d0 <pvPortMalloc>
 80037b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	631a      	str	r2, [r3, #48]	; 0x30
 80037c2:	e005      	b.n	80037d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80037c4:	6978      	ldr	r0, [r7, #20]
 80037c6:	f001 fdc5 	bl	8005354 <vPortFree>
 80037ca:	e001      	b.n	80037d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d017      	beq.n	8003806 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80037de:	88fa      	ldrh	r2, [r7, #6]
 80037e0:	2300      	movs	r3, #0
 80037e2:	9303      	str	r3, [sp, #12]
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	9302      	str	r3, [sp, #8]
 80037e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ea:	9301      	str	r3, [sp, #4]
 80037ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	68b9      	ldr	r1, [r7, #8]
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 f80e 	bl	8003816 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037fa:	69f8      	ldr	r0, [r7, #28]
 80037fc:	f000 f89c 	bl	8003938 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003800:	2301      	movs	r3, #1
 8003802:	61bb      	str	r3, [r7, #24]
 8003804:	e002      	b.n	800380c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003806:	f04f 33ff 	mov.w	r3, #4294967295
 800380a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800380c:	69bb      	ldr	r3, [r7, #24]
	}
 800380e:	4618      	mov	r0, r3
 8003810:	3720      	adds	r7, #32
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b088      	sub	sp, #32
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
 8003822:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003826:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	461a      	mov	r2, r3
 800382e:	21a5      	movs	r1, #165	; 0xa5
 8003830:	f002 fb9f 	bl	8005f72 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800383e:	3b01      	subs	r3, #1
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f023 0307 	bic.w	r3, r3, #7
 800384c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	2b00      	cmp	r3, #0
 8003856:	d009      	beq.n	800386c <prvInitialiseNewTask+0x56>
 8003858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	e7fe      	b.n	800386a <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800386c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d01f      	beq.n	80038b8 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003878:	2300      	movs	r3, #0
 800387a:	61fb      	str	r3, [r7, #28]
 800387c:	e012      	b.n	80038a4 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	4413      	add	r3, r2
 8003884:	7819      	ldrb	r1, [r3, #0]
 8003886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	4413      	add	r3, r2
 800388c:	3334      	adds	r3, #52	; 0x34
 800388e:	460a      	mov	r2, r1
 8003890:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	4413      	add	r3, r2
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d006      	beq.n	80038ac <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	3301      	adds	r3, #1
 80038a2:	61fb      	str	r3, [r7, #28]
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	2b0f      	cmp	r3, #15
 80038a8:	d9e9      	bls.n	800387e <prvInitialiseNewTask+0x68>
 80038aa:	e000      	b.n	80038ae <prvInitialiseNewTask+0x98>
			{
				break;
 80038ac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038b6:	e003      	b.n	80038c0 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80038b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80038c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c2:	2b37      	cmp	r3, #55	; 0x37
 80038c4:	d901      	bls.n	80038ca <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80038c6:	2337      	movs	r3, #55	; 0x37
 80038c8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80038ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038ce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038d4:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	2200      	movs	r2, #0
 80038da:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80038dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038de:	3304      	adds	r3, #4
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff f991 	bl	8002c08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80038e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e8:	3318      	adds	r3, #24
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff f98c 	bl	8002c08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80038f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80038fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003904:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003908:	2200      	movs	r2, #0
 800390a:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390e:	2200      	movs	r2, #0
 8003910:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	68f9      	ldr	r1, [r7, #12]
 8003918:	69b8      	ldr	r0, [r7, #24]
 800391a:	f001 fa15 	bl	8004d48 <pxPortInitialiseStack>
 800391e:	4602      	mov	r2, r0
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003926:	2b00      	cmp	r3, #0
 8003928:	d002      	beq.n	8003930 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800392a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800392e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003930:	bf00      	nop
 8003932:	3720      	adds	r7, #32
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003940:	f001 fb2c 	bl	8004f9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003944:	4b2d      	ldr	r3, [pc, #180]	; (80039fc <prvAddNewTaskToReadyList+0xc4>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3301      	adds	r3, #1
 800394a:	4a2c      	ldr	r2, [pc, #176]	; (80039fc <prvAddNewTaskToReadyList+0xc4>)
 800394c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800394e:	4b2c      	ldr	r3, [pc, #176]	; (8003a00 <prvAddNewTaskToReadyList+0xc8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d109      	bne.n	800396a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003956:	4a2a      	ldr	r2, [pc, #168]	; (8003a00 <prvAddNewTaskToReadyList+0xc8>)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800395c:	4b27      	ldr	r3, [pc, #156]	; (80039fc <prvAddNewTaskToReadyList+0xc4>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d110      	bne.n	8003986 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003964:	f000 fca2 	bl	80042ac <prvInitialiseTaskLists>
 8003968:	e00d      	b.n	8003986 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800396a:	4b26      	ldr	r3, [pc, #152]	; (8003a04 <prvAddNewTaskToReadyList+0xcc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d109      	bne.n	8003986 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003972:	4b23      	ldr	r3, [pc, #140]	; (8003a00 <prvAddNewTaskToReadyList+0xc8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	429a      	cmp	r2, r3
 800397e:	d802      	bhi.n	8003986 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003980:	4a1f      	ldr	r2, [pc, #124]	; (8003a00 <prvAddNewTaskToReadyList+0xc8>)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003986:	4b20      	ldr	r3, [pc, #128]	; (8003a08 <prvAddNewTaskToReadyList+0xd0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3301      	adds	r3, #1
 800398c:	4a1e      	ldr	r2, [pc, #120]	; (8003a08 <prvAddNewTaskToReadyList+0xd0>)
 800398e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003990:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <prvAddNewTaskToReadyList+0xd0>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399c:	4b1b      	ldr	r3, [pc, #108]	; (8003a0c <prvAddNewTaskToReadyList+0xd4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d903      	bls.n	80039ac <prvAddNewTaskToReadyList+0x74>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	4a18      	ldr	r2, [pc, #96]	; (8003a0c <prvAddNewTaskToReadyList+0xd4>)
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4a15      	ldr	r2, [pc, #84]	; (8003a10 <prvAddNewTaskToReadyList+0xd8>)
 80039ba:	441a      	add	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3304      	adds	r3, #4
 80039c0:	4619      	mov	r1, r3
 80039c2:	4610      	mov	r0, r2
 80039c4:	f7ff f92d 	bl	8002c22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80039c8:	f001 fb16 	bl	8004ff8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80039cc:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <prvAddNewTaskToReadyList+0xcc>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00e      	beq.n	80039f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80039d4:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <prvAddNewTaskToReadyList+0xc8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	429a      	cmp	r2, r3
 80039e0:	d207      	bcs.n	80039f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80039e2:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <prvAddNewTaskToReadyList+0xdc>)
 80039e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	f3bf 8f4f 	dsb	sy
 80039ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000bc4 	.word	0x20000bc4
 8003a00:	200006f0 	.word	0x200006f0
 8003a04:	20000bd0 	.word	0x20000bd0
 8003a08:	20000be0 	.word	0x20000be0
 8003a0c:	20000bcc 	.word	0x20000bcc
 8003a10:	200006f4 	.word	0x200006f4
 8003a14:	e000ed04 	.word	0xe000ed04

08003a18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d016      	beq.n	8003a58 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a2a:	4b13      	ldr	r3, [pc, #76]	; (8003a78 <vTaskDelay+0x60>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <vTaskDelay+0x2e>
 8003a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	60bb      	str	r3, [r7, #8]
 8003a44:	e7fe      	b.n	8003a44 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003a46:	f000 f87f 	bl	8003b48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fdc1 	bl	80045d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a52:	f000 f887 	bl	8003b64 <xTaskResumeAll>
 8003a56:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d107      	bne.n	8003a6e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003a5e:	4b07      	ldr	r3, [pc, #28]	; (8003a7c <vTaskDelay+0x64>)
 8003a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a6e:	bf00      	nop
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000bec 	.word	0x20000bec
 8003a7c:	e000ed04 	.word	0xe000ed04

08003a80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08a      	sub	sp, #40	; 0x28
 8003a84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a8e:	463a      	mov	r2, r7
 8003a90:	1d39      	adds	r1, r7, #4
 8003a92:	f107 0308 	add.w	r3, r7, #8
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe fe02 	bl	80026a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a9c:	6839      	ldr	r1, [r7, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	9202      	str	r2, [sp, #8]
 8003aa4:	9301      	str	r3, [sp, #4]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	460a      	mov	r2, r1
 8003aae:	4920      	ldr	r1, [pc, #128]	; (8003b30 <vTaskStartScheduler+0xb0>)
 8003ab0:	4820      	ldr	r0, [pc, #128]	; (8003b34 <vTaskStartScheduler+0xb4>)
 8003ab2:	f7ff fe11 	bl	80036d8 <xTaskCreateStatic>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	4b1f      	ldr	r3, [pc, #124]	; (8003b38 <vTaskStartScheduler+0xb8>)
 8003aba:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003abc:	4b1e      	ldr	r3, [pc, #120]	; (8003b38 <vTaskStartScheduler+0xb8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	e001      	b.n	8003ace <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d102      	bne.n	8003ada <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003ad4:	f000 fdd2 	bl	800467c <xTimerCreateTimerTask>
 8003ad8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d115      	bne.n	8003b0c <vTaskStartScheduler+0x8c>
 8003ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003af2:	4b12      	ldr	r3, [pc, #72]	; (8003b3c <vTaskStartScheduler+0xbc>)
 8003af4:	f04f 32ff 	mov.w	r2, #4294967295
 8003af8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003afa:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <vTaskStartScheduler+0xc0>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b00:	4b10      	ldr	r3, [pc, #64]	; (8003b44 <vTaskStartScheduler+0xc4>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b06:	f001 f9ab 	bl	8004e60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b0a:	e00d      	b.n	8003b28 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b12:	d109      	bne.n	8003b28 <vTaskStartScheduler+0xa8>
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	e7fe      	b.n	8003b26 <vTaskStartScheduler+0xa6>
}
 8003b28:	bf00      	nop
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	08005f9c 	.word	0x08005f9c
 8003b34:	0800427d 	.word	0x0800427d
 8003b38:	20000be8 	.word	0x20000be8
 8003b3c:	20000be4 	.word	0x20000be4
 8003b40:	20000bd0 	.word	0x20000bd0
 8003b44:	20000bc8 	.word	0x20000bc8

08003b48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003b4c:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <vTaskSuspendAll+0x18>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3301      	adds	r3, #1
 8003b52:	4a03      	ldr	r2, [pc, #12]	; (8003b60 <vTaskSuspendAll+0x18>)
 8003b54:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003b56:	bf00      	nop
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	20000bec 	.word	0x20000bec

08003b64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b72:	4b41      	ldr	r3, [pc, #260]	; (8003c78 <xTaskResumeAll+0x114>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d109      	bne.n	8003b8e <xTaskResumeAll+0x2a>
 8003b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	e7fe      	b.n	8003b8c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b8e:	f001 fa05 	bl	8004f9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b92:	4b39      	ldr	r3, [pc, #228]	; (8003c78 <xTaskResumeAll+0x114>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	4a37      	ldr	r2, [pc, #220]	; (8003c78 <xTaskResumeAll+0x114>)
 8003b9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b9c:	4b36      	ldr	r3, [pc, #216]	; (8003c78 <xTaskResumeAll+0x114>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d162      	bne.n	8003c6a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ba4:	4b35      	ldr	r3, [pc, #212]	; (8003c7c <xTaskResumeAll+0x118>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d05e      	beq.n	8003c6a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bac:	e02f      	b.n	8003c0e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bae:	4b34      	ldr	r3, [pc, #208]	; (8003c80 <xTaskResumeAll+0x11c>)
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	3318      	adds	r3, #24
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff f88e 	bl	8002cdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff f889 	bl	8002cdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bce:	4b2d      	ldr	r3, [pc, #180]	; (8003c84 <xTaskResumeAll+0x120>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d903      	bls.n	8003bde <xTaskResumeAll+0x7a>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	4a2a      	ldr	r2, [pc, #168]	; (8003c84 <xTaskResumeAll+0x120>)
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4a27      	ldr	r2, [pc, #156]	; (8003c88 <xTaskResumeAll+0x124>)
 8003bec:	441a      	add	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	f7ff f814 	bl	8002c22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfe:	4b23      	ldr	r3, [pc, #140]	; (8003c8c <xTaskResumeAll+0x128>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d302      	bcc.n	8003c0e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003c08:	4b21      	ldr	r3, [pc, #132]	; (8003c90 <xTaskResumeAll+0x12c>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c0e:	4b1c      	ldr	r3, [pc, #112]	; (8003c80 <xTaskResumeAll+0x11c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1cb      	bne.n	8003bae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c1c:	f000 fc18 	bl	8004450 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003c20:	4b1c      	ldr	r3, [pc, #112]	; (8003c94 <xTaskResumeAll+0x130>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d010      	beq.n	8003c4e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c2c:	f000 f846 	bl	8003cbc <xTaskIncrementTick>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003c36:	4b16      	ldr	r3, [pc, #88]	; (8003c90 <xTaskResumeAll+0x12c>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1f1      	bne.n	8003c2c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003c48:	4b12      	ldr	r3, [pc, #72]	; (8003c94 <xTaskResumeAll+0x130>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c4e:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <xTaskResumeAll+0x12c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d009      	beq.n	8003c6a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c56:	2301      	movs	r3, #1
 8003c58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c5a:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <xTaskResumeAll+0x134>)
 8003c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c6a:	f001 f9c5 	bl	8004ff8 <vPortExitCritical>

	return xAlreadyYielded;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20000bec 	.word	0x20000bec
 8003c7c:	20000bc4 	.word	0x20000bc4
 8003c80:	20000b84 	.word	0x20000b84
 8003c84:	20000bcc 	.word	0x20000bcc
 8003c88:	200006f4 	.word	0x200006f4
 8003c8c:	200006f0 	.word	0x200006f0
 8003c90:	20000bd8 	.word	0x20000bd8
 8003c94:	20000bd4 	.word	0x20000bd4
 8003c98:	e000ed04 	.word	0xe000ed04

08003c9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003ca2:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <xTaskGetTickCount+0x1c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ca8:	687b      	ldr	r3, [r7, #4]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	20000bc8 	.word	0x20000bc8

08003cbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cc6:	4b4e      	ldr	r3, [pc, #312]	; (8003e00 <xTaskIncrementTick+0x144>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f040 8088 	bne.w	8003de0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003cd0:	4b4c      	ldr	r3, [pc, #304]	; (8003e04 <xTaskIncrementTick+0x148>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003cd8:	4a4a      	ldr	r2, [pc, #296]	; (8003e04 <xTaskIncrementTick+0x148>)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d11f      	bne.n	8003d24 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ce4:	4b48      	ldr	r3, [pc, #288]	; (8003e08 <xTaskIncrementTick+0x14c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d009      	beq.n	8003d02 <xTaskIncrementTick+0x46>
 8003cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	e7fe      	b.n	8003d00 <xTaskIncrementTick+0x44>
 8003d02:	4b41      	ldr	r3, [pc, #260]	; (8003e08 <xTaskIncrementTick+0x14c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	4b40      	ldr	r3, [pc, #256]	; (8003e0c <xTaskIncrementTick+0x150>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a3e      	ldr	r2, [pc, #248]	; (8003e08 <xTaskIncrementTick+0x14c>)
 8003d0e:	6013      	str	r3, [r2, #0]
 8003d10:	4a3e      	ldr	r2, [pc, #248]	; (8003e0c <xTaskIncrementTick+0x150>)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	4b3e      	ldr	r3, [pc, #248]	; (8003e10 <xTaskIncrementTick+0x154>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	4a3c      	ldr	r2, [pc, #240]	; (8003e10 <xTaskIncrementTick+0x154>)
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	f000 fb96 	bl	8004450 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d24:	4b3b      	ldr	r3, [pc, #236]	; (8003e14 <xTaskIncrementTick+0x158>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d349      	bcc.n	8003dc2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d2e:	4b36      	ldr	r3, [pc, #216]	; (8003e08 <xTaskIncrementTick+0x14c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d104      	bne.n	8003d42 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d38:	4b36      	ldr	r3, [pc, #216]	; (8003e14 <xTaskIncrementTick+0x158>)
 8003d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d3e:	601a      	str	r2, [r3, #0]
					break;
 8003d40:	e03f      	b.n	8003dc2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d42:	4b31      	ldr	r3, [pc, #196]	; (8003e08 <xTaskIncrementTick+0x14c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d203      	bcs.n	8003d62 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d5a:	4a2e      	ldr	r2, [pc, #184]	; (8003e14 <xTaskIncrementTick+0x158>)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d60:	e02f      	b.n	8003dc2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	3304      	adds	r3, #4
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fe ffb8 	bl	8002cdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d004      	beq.n	8003d7e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	3318      	adds	r3, #24
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fe ffaf 	bl	8002cdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d82:	4b25      	ldr	r3, [pc, #148]	; (8003e18 <xTaskIncrementTick+0x15c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d903      	bls.n	8003d92 <xTaskIncrementTick+0xd6>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	4a22      	ldr	r2, [pc, #136]	; (8003e18 <xTaskIncrementTick+0x15c>)
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4a1f      	ldr	r2, [pc, #124]	; (8003e1c <xTaskIncrementTick+0x160>)
 8003da0:	441a      	add	r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	3304      	adds	r3, #4
 8003da6:	4619      	mov	r1, r3
 8003da8:	4610      	mov	r0, r2
 8003daa:	f7fe ff3a 	bl	8002c22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db2:	4b1b      	ldr	r3, [pc, #108]	; (8003e20 <xTaskIncrementTick+0x164>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d3b8      	bcc.n	8003d2e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dc0:	e7b5      	b.n	8003d2e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003dc2:	4b17      	ldr	r3, [pc, #92]	; (8003e20 <xTaskIncrementTick+0x164>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc8:	4914      	ldr	r1, [pc, #80]	; (8003e1c <xTaskIncrementTick+0x160>)
 8003dca:	4613      	mov	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d907      	bls.n	8003dea <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	e004      	b.n	8003dea <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003de0:	4b10      	ldr	r3, [pc, #64]	; (8003e24 <xTaskIncrementTick+0x168>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3301      	adds	r3, #1
 8003de6:	4a0f      	ldr	r2, [pc, #60]	; (8003e24 <xTaskIncrementTick+0x168>)
 8003de8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003dea:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <xTaskIncrementTick+0x16c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003df2:	2301      	movs	r3, #1
 8003df4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003df6:	697b      	ldr	r3, [r7, #20]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20000bec 	.word	0x20000bec
 8003e04:	20000bc8 	.word	0x20000bc8
 8003e08:	20000b7c 	.word	0x20000b7c
 8003e0c:	20000b80 	.word	0x20000b80
 8003e10:	20000bdc 	.word	0x20000bdc
 8003e14:	20000be4 	.word	0x20000be4
 8003e18:	20000bcc 	.word	0x20000bcc
 8003e1c:	200006f4 	.word	0x200006f4
 8003e20:	200006f0 	.word	0x200006f0
 8003e24:	20000bd4 	.word	0x20000bd4
 8003e28:	20000bd8 	.word	0x20000bd8

08003e2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e32:	4b27      	ldr	r3, [pc, #156]	; (8003ed0 <vTaskSwitchContext+0xa4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e3a:	4b26      	ldr	r3, [pc, #152]	; (8003ed4 <vTaskSwitchContext+0xa8>)
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e40:	e040      	b.n	8003ec4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003e42:	4b24      	ldr	r3, [pc, #144]	; (8003ed4 <vTaskSwitchContext+0xa8>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e48:	4b23      	ldr	r3, [pc, #140]	; (8003ed8 <vTaskSwitchContext+0xac>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	e00f      	b.n	8003e70 <vTaskSwitchContext+0x44>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d109      	bne.n	8003e6a <vTaskSwitchContext+0x3e>
 8003e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	607b      	str	r3, [r7, #4]
 8003e68:	e7fe      	b.n	8003e68 <vTaskSwitchContext+0x3c>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	491a      	ldr	r1, [pc, #104]	; (8003edc <vTaskSwitchContext+0xb0>)
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0e5      	beq.n	8003e50 <vTaskSwitchContext+0x24>
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4613      	mov	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4a13      	ldr	r2, [pc, #76]	; (8003edc <vTaskSwitchContext+0xb0>)
 8003e90:	4413      	add	r3, r2
 8003e92:	60bb      	str	r3, [r7, #8]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	605a      	str	r2, [r3, #4]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	3308      	adds	r3, #8
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d104      	bne.n	8003eb4 <vTaskSwitchContext+0x88>
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	605a      	str	r2, [r3, #4]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	4a09      	ldr	r2, [pc, #36]	; (8003ee0 <vTaskSwitchContext+0xb4>)
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	4a06      	ldr	r2, [pc, #24]	; (8003ed8 <vTaskSwitchContext+0xac>)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6013      	str	r3, [r2, #0]
}
 8003ec4:	bf00      	nop
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	20000bec 	.word	0x20000bec
 8003ed4:	20000bd8 	.word	0x20000bd8
 8003ed8:	20000bcc 	.word	0x20000bcc
 8003edc:	200006f4 	.word	0x200006f4
 8003ee0:	200006f0 	.word	0x200006f0

08003ee4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d109      	bne.n	8003f08 <vTaskPlaceOnEventList+0x24>
 8003ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef8:	f383 8811 	msr	BASEPRI, r3
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	e7fe      	b.n	8003f06 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f08:	4b07      	ldr	r3, [pc, #28]	; (8003f28 <vTaskPlaceOnEventList+0x44>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3318      	adds	r3, #24
 8003f0e:	4619      	mov	r1, r3
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7fe feaa 	bl	8002c6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f16:	2101      	movs	r1, #1
 8003f18:	6838      	ldr	r0, [r7, #0]
 8003f1a:	f000 fb5b 	bl	80045d4 <prvAddCurrentTaskToDelayedList>
}
 8003f1e:	bf00      	nop
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	200006f0 	.word	0x200006f0

08003f2c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d109      	bne.n	8003f52 <vTaskPlaceOnUnorderedEventList+0x26>
 8003f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	e7fe      	b.n	8003f50 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8003f52:	4b11      	ldr	r3, [pc, #68]	; (8003f98 <vTaskPlaceOnUnorderedEventList+0x6c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d109      	bne.n	8003f6e <vTaskPlaceOnUnorderedEventList+0x42>
 8003f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5e:	f383 8811 	msr	BASEPRI, r3
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	e7fe      	b.n	8003f6c <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003f6e:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <vTaskPlaceOnUnorderedEventList+0x70>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003f78:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f7a:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <vTaskPlaceOnUnorderedEventList+0x70>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	3318      	adds	r3, #24
 8003f80:	4619      	mov	r1, r3
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f7fe fe4d 	bl	8002c22 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f88:	2101      	movs	r1, #1
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 fb22 	bl	80045d4 <prvAddCurrentTaskToDelayedList>
}
 8003f90:	bf00      	nop
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20000bec 	.word	0x20000bec
 8003f9c:	200006f0 	.word	0x200006f0

08003fa0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d109      	bne.n	8003fc6 <vTaskPlaceOnEventListRestricted+0x26>
 8003fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	e7fe      	b.n	8003fc4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fc6:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <vTaskPlaceOnEventListRestricted+0x50>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3318      	adds	r3, #24
 8003fcc:	4619      	mov	r1, r3
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f7fe fe27 	bl	8002c22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003fda:	f04f 33ff 	mov.w	r3, #4294967295
 8003fde:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	68b8      	ldr	r0, [r7, #8]
 8003fe4:	f000 faf6 	bl	80045d4 <prvAddCurrentTaskToDelayedList>
	}
 8003fe8:	bf00      	nop
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	200006f0 	.word	0x200006f0

08003ff4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d109      	bne.n	800401e <xTaskRemoveFromEventList+0x2a>
 800400a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400e:	f383 8811 	msr	BASEPRI, r3
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	e7fe      	b.n	800401c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	3318      	adds	r3, #24
 8004022:	4618      	mov	r0, r3
 8004024:	f7fe fe5a 	bl	8002cdc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004028:	4b1d      	ldr	r3, [pc, #116]	; (80040a0 <xTaskRemoveFromEventList+0xac>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d11d      	bne.n	800406c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	3304      	adds	r3, #4
 8004034:	4618      	mov	r0, r3
 8004036:	f7fe fe51 	bl	8002cdc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800403e:	4b19      	ldr	r3, [pc, #100]	; (80040a4 <xTaskRemoveFromEventList+0xb0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d903      	bls.n	800404e <xTaskRemoveFromEventList+0x5a>
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	4a16      	ldr	r2, [pc, #88]	; (80040a4 <xTaskRemoveFromEventList+0xb0>)
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004052:	4613      	mov	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4413      	add	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4a13      	ldr	r2, [pc, #76]	; (80040a8 <xTaskRemoveFromEventList+0xb4>)
 800405c:	441a      	add	r2, r3
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	3304      	adds	r3, #4
 8004062:	4619      	mov	r1, r3
 8004064:	4610      	mov	r0, r2
 8004066:	f7fe fddc 	bl	8002c22 <vListInsertEnd>
 800406a:	e005      	b.n	8004078 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	3318      	adds	r3, #24
 8004070:	4619      	mov	r1, r3
 8004072:	480e      	ldr	r0, [pc, #56]	; (80040ac <xTaskRemoveFromEventList+0xb8>)
 8004074:	f7fe fdd5 	bl	8002c22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407c:	4b0c      	ldr	r3, [pc, #48]	; (80040b0 <xTaskRemoveFromEventList+0xbc>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	429a      	cmp	r2, r3
 8004084:	d905      	bls.n	8004092 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004086:	2301      	movs	r3, #1
 8004088:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800408a:	4b0a      	ldr	r3, [pc, #40]	; (80040b4 <xTaskRemoveFromEventList+0xc0>)
 800408c:	2201      	movs	r2, #1
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	e001      	b.n	8004096 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004092:	2300      	movs	r3, #0
 8004094:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004096:	697b      	ldr	r3, [r7, #20]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3718      	adds	r7, #24
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	20000bec 	.word	0x20000bec
 80040a4:	20000bcc 	.word	0x20000bcc
 80040a8:	200006f4 	.word	0x200006f4
 80040ac:	20000b84 	.word	0x20000b84
 80040b0:	200006f0 	.word	0x200006f0
 80040b4:	20000bd8 	.word	0x20000bd8

080040b8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80040c2:	4b28      	ldr	r3, [pc, #160]	; (8004164 <vTaskRemoveFromUnorderedEventList+0xac>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d109      	bne.n	80040de <vTaskRemoveFromUnorderedEventList+0x26>
 80040ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	e7fe      	b.n	80040dc <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d109      	bne.n	8004108 <vTaskRemoveFromUnorderedEventList+0x50>
 80040f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	e7fe      	b.n	8004106 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7fe fde7 	bl	8002cdc <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	3304      	adds	r3, #4
 8004112:	4618      	mov	r0, r3
 8004114:	f7fe fde2 	bl	8002cdc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411c:	4b12      	ldr	r3, [pc, #72]	; (8004168 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d903      	bls.n	800412c <vTaskRemoveFromUnorderedEventList+0x74>
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	4a0f      	ldr	r2, [pc, #60]	; (8004168 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4a0c      	ldr	r2, [pc, #48]	; (800416c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800413a:	441a      	add	r2, r3
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	3304      	adds	r3, #4
 8004140:	4619      	mov	r1, r3
 8004142:	4610      	mov	r0, r2
 8004144:	f7fe fd6d 	bl	8002c22 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414c:	4b08      	ldr	r3, [pc, #32]	; (8004170 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	429a      	cmp	r2, r3
 8004154:	d902      	bls.n	800415c <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8004156:	4b07      	ldr	r3, [pc, #28]	; (8004174 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8004158:	2201      	movs	r2, #1
 800415a:	601a      	str	r2, [r3, #0]
	}
}
 800415c:	bf00      	nop
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	20000bec 	.word	0x20000bec
 8004168:	20000bcc 	.word	0x20000bcc
 800416c:	200006f4 	.word	0x200006f4
 8004170:	200006f0 	.word	0x200006f0
 8004174:	20000bd8 	.word	0x20000bd8

08004178 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004180:	4b06      	ldr	r3, [pc, #24]	; (800419c <vTaskInternalSetTimeOutState+0x24>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <vTaskInternalSetTimeOutState+0x28>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	605a      	str	r2, [r3, #4]
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	20000bdc 	.word	0x20000bdc
 80041a0:	20000bc8 	.word	0x20000bc8

080041a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d109      	bne.n	80041c8 <xTaskCheckForTimeOut+0x24>
 80041b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	e7fe      	b.n	80041c6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d109      	bne.n	80041e2 <xTaskCheckForTimeOut+0x3e>
 80041ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	e7fe      	b.n	80041e0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80041e2:	f000 fedb 	bl	8004f9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80041e6:	4b1d      	ldr	r3, [pc, #116]	; (800425c <xTaskCheckForTimeOut+0xb8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fe:	d102      	bne.n	8004206 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004200:	2300      	movs	r3, #0
 8004202:	61fb      	str	r3, [r7, #28]
 8004204:	e023      	b.n	800424e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	4b15      	ldr	r3, [pc, #84]	; (8004260 <xTaskCheckForTimeOut+0xbc>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d007      	beq.n	8004222 <xTaskCheckForTimeOut+0x7e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	429a      	cmp	r2, r3
 800421a:	d302      	bcc.n	8004222 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800421c:	2301      	movs	r3, #1
 800421e:	61fb      	str	r3, [r7, #28]
 8004220:	e015      	b.n	800424e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	429a      	cmp	r2, r3
 800422a:	d20b      	bcs.n	8004244 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	1ad2      	subs	r2, r2, r3
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff ff9d 	bl	8004178 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800423e:	2300      	movs	r3, #0
 8004240:	61fb      	str	r3, [r7, #28]
 8004242:	e004      	b.n	800424e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	2200      	movs	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800424a:	2301      	movs	r3, #1
 800424c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800424e:	f000 fed3 	bl	8004ff8 <vPortExitCritical>

	return xReturn;
 8004252:	69fb      	ldr	r3, [r7, #28]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3720      	adds	r7, #32
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20000bc8 	.word	0x20000bc8
 8004260:	20000bdc 	.word	0x20000bdc

08004264 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004268:	4b03      	ldr	r3, [pc, #12]	; (8004278 <vTaskMissedYield+0x14>)
 800426a:	2201      	movs	r2, #1
 800426c:	601a      	str	r2, [r3, #0]
}
 800426e:	bf00      	nop
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	20000bd8 	.word	0x20000bd8

0800427c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004284:	f000 f852 	bl	800432c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004288:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <prvIdleTask+0x28>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d9f9      	bls.n	8004284 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004290:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <prvIdleTask+0x2c>)
 8004292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042a0:	e7f0      	b.n	8004284 <prvIdleTask+0x8>
 80042a2:	bf00      	nop
 80042a4:	200006f4 	.word	0x200006f4
 80042a8:	e000ed04 	.word	0xe000ed04

080042ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042b2:	2300      	movs	r3, #0
 80042b4:	607b      	str	r3, [r7, #4]
 80042b6:	e00c      	b.n	80042d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4a12      	ldr	r2, [pc, #72]	; (800430c <prvInitialiseTaskLists+0x60>)
 80042c4:	4413      	add	r3, r2
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fe fc7e 	bl	8002bc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3301      	adds	r3, #1
 80042d0:	607b      	str	r3, [r7, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b37      	cmp	r3, #55	; 0x37
 80042d6:	d9ef      	bls.n	80042b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042d8:	480d      	ldr	r0, [pc, #52]	; (8004310 <prvInitialiseTaskLists+0x64>)
 80042da:	f7fe fc75 	bl	8002bc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042de:	480d      	ldr	r0, [pc, #52]	; (8004314 <prvInitialiseTaskLists+0x68>)
 80042e0:	f7fe fc72 	bl	8002bc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042e4:	480c      	ldr	r0, [pc, #48]	; (8004318 <prvInitialiseTaskLists+0x6c>)
 80042e6:	f7fe fc6f 	bl	8002bc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80042ea:	480c      	ldr	r0, [pc, #48]	; (800431c <prvInitialiseTaskLists+0x70>)
 80042ec:	f7fe fc6c 	bl	8002bc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80042f0:	480b      	ldr	r0, [pc, #44]	; (8004320 <prvInitialiseTaskLists+0x74>)
 80042f2:	f7fe fc69 	bl	8002bc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042f6:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <prvInitialiseTaskLists+0x78>)
 80042f8:	4a05      	ldr	r2, [pc, #20]	; (8004310 <prvInitialiseTaskLists+0x64>)
 80042fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042fc:	4b0a      	ldr	r3, [pc, #40]	; (8004328 <prvInitialiseTaskLists+0x7c>)
 80042fe:	4a05      	ldr	r2, [pc, #20]	; (8004314 <prvInitialiseTaskLists+0x68>)
 8004300:	601a      	str	r2, [r3, #0]
}
 8004302:	bf00      	nop
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	200006f4 	.word	0x200006f4
 8004310:	20000b54 	.word	0x20000b54
 8004314:	20000b68 	.word	0x20000b68
 8004318:	20000b84 	.word	0x20000b84
 800431c:	20000b98 	.word	0x20000b98
 8004320:	20000bb0 	.word	0x20000bb0
 8004324:	20000b7c 	.word	0x20000b7c
 8004328:	20000b80 	.word	0x20000b80

0800432c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004332:	e019      	b.n	8004368 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004334:	f000 fe32 	bl	8004f9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004338:	4b0f      	ldr	r3, [pc, #60]	; (8004378 <prvCheckTasksWaitingTermination+0x4c>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3304      	adds	r3, #4
 8004344:	4618      	mov	r0, r3
 8004346:	f7fe fcc9 	bl	8002cdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800434a:	4b0c      	ldr	r3, [pc, #48]	; (800437c <prvCheckTasksWaitingTermination+0x50>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3b01      	subs	r3, #1
 8004350:	4a0a      	ldr	r2, [pc, #40]	; (800437c <prvCheckTasksWaitingTermination+0x50>)
 8004352:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004354:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <prvCheckTasksWaitingTermination+0x54>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3b01      	subs	r3, #1
 800435a:	4a09      	ldr	r2, [pc, #36]	; (8004380 <prvCheckTasksWaitingTermination+0x54>)
 800435c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800435e:	f000 fe4b 	bl	8004ff8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f846 	bl	80043f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004368:	4b05      	ldr	r3, [pc, #20]	; (8004380 <prvCheckTasksWaitingTermination+0x54>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e1      	bne.n	8004334 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004370:	bf00      	nop
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	20000b98 	.word	0x20000b98
 800437c:	20000bc4 	.word	0x20000bc4
 8004380:	20000bac 	.word	0x20000bac

08004384 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004390:	e005      	b.n	800439e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3301      	adds	r3, #1
 8004396:	607b      	str	r3, [r7, #4]
			ulCount++;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	3301      	adds	r3, #1
 800439c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2ba5      	cmp	r3, #165	; 0xa5
 80043a4:	d0f5      	beq.n	8004392 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	089b      	lsrs	r3, r3, #2
 80043aa:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	b29b      	uxth	r3, r3
	}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d102      	bne.n	80043d0 <uxTaskGetStackHighWaterMark+0x14>
 80043ca:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <uxTaskGetStackHighWaterMark+0x34>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	e000      	b.n	80043d2 <uxTaskGetStackHighWaterMark+0x16>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d8:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80043da:	6938      	ldr	r0, [r7, #16]
 80043dc:	f7ff ffd2 	bl	8004384 <prvTaskCheckFreeStackSpace>
 80043e0:	4603      	mov	r3, r0
 80043e2:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80043e4:	68fb      	ldr	r3, [r7, #12]
	}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	200006f0 	.word	0x200006f0

080043f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004402:	2b00      	cmp	r3, #0
 8004404:	d108      	bne.n	8004418 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	4618      	mov	r0, r3
 800440c:	f000 ffa2 	bl	8005354 <vPortFree>
				vPortFree( pxTCB );
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 ff9f 	bl	8005354 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004416:	e017      	b.n	8004448 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800441e:	2b01      	cmp	r3, #1
 8004420:	d103      	bne.n	800442a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 ff96 	bl	8005354 <vPortFree>
	}
 8004428:	e00e      	b.n	8004448 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004430:	2b02      	cmp	r3, #2
 8004432:	d009      	beq.n	8004448 <prvDeleteTCB+0x54>
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	e7fe      	b.n	8004446 <prvDeleteTCB+0x52>
	}
 8004448:	bf00      	nop
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004456:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <prvResetNextTaskUnblockTime+0x38>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d104      	bne.n	800446a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004460:	4b0a      	ldr	r3, [pc, #40]	; (800448c <prvResetNextTaskUnblockTime+0x3c>)
 8004462:	f04f 32ff 	mov.w	r2, #4294967295
 8004466:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004468:	e008      	b.n	800447c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800446a:	4b07      	ldr	r3, [pc, #28]	; (8004488 <prvResetNextTaskUnblockTime+0x38>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	4a04      	ldr	r2, [pc, #16]	; (800448c <prvResetNextTaskUnblockTime+0x3c>)
 800447a:	6013      	str	r3, [r2, #0]
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	20000b7c 	.word	0x20000b7c
 800448c:	20000be4 	.word	0x20000be4

08004490 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004496:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <xTaskGetSchedulerState+0x34>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d102      	bne.n	80044a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800449e:	2301      	movs	r3, #1
 80044a0:	607b      	str	r3, [r7, #4]
 80044a2:	e008      	b.n	80044b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044a4:	4b08      	ldr	r3, [pc, #32]	; (80044c8 <xTaskGetSchedulerState+0x38>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d102      	bne.n	80044b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044ac:	2302      	movs	r3, #2
 80044ae:	607b      	str	r3, [r7, #4]
 80044b0:	e001      	b.n	80044b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044b2:	2300      	movs	r3, #0
 80044b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044b6:	687b      	ldr	r3, [r7, #4]
	}
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	20000bd0 	.word	0x20000bd0
 80044c8:	20000bec 	.word	0x20000bec

080044cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80044d8:	2300      	movs	r3, #0
 80044da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d054      	beq.n	800458c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80044e2:	4b2d      	ldr	r3, [pc, #180]	; (8004598 <xTaskPriorityDisinherit+0xcc>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d009      	beq.n	8004500 <xTaskPriorityDisinherit+0x34>
 80044ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f0:	f383 8811 	msr	BASEPRI, r3
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	e7fe      	b.n	80044fe <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004504:	2b00      	cmp	r3, #0
 8004506:	d109      	bne.n	800451c <xTaskPriorityDisinherit+0x50>
 8004508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450c:	f383 8811 	msr	BASEPRI, r3
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	e7fe      	b.n	800451a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004520:	1e5a      	subs	r2, r3, #1
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800452e:	429a      	cmp	r2, r3
 8004530:	d02c      	beq.n	800458c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004536:	2b00      	cmp	r3, #0
 8004538:	d128      	bne.n	800458c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	3304      	adds	r3, #4
 800453e:	4618      	mov	r0, r3
 8004540:	f7fe fbcc 	bl	8002cdc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455c:	4b0f      	ldr	r3, [pc, #60]	; (800459c <xTaskPriorityDisinherit+0xd0>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d903      	bls.n	800456c <xTaskPriorityDisinherit+0xa0>
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	4a0c      	ldr	r2, [pc, #48]	; (800459c <xTaskPriorityDisinherit+0xd0>)
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004570:	4613      	mov	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4a09      	ldr	r2, [pc, #36]	; (80045a0 <xTaskPriorityDisinherit+0xd4>)
 800457a:	441a      	add	r2, r3
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	3304      	adds	r3, #4
 8004580:	4619      	mov	r1, r3
 8004582:	4610      	mov	r0, r2
 8004584:	f7fe fb4d 	bl	8002c22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004588:	2301      	movs	r3, #1
 800458a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800458c:	697b      	ldr	r3, [r7, #20]
	}
 800458e:	4618      	mov	r0, r3
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	200006f0 	.word	0x200006f0
 800459c:	20000bcc 	.word	0x20000bcc
 80045a0:	200006f4 	.word	0x200006f4

080045a4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80045aa:	4b09      	ldr	r3, [pc, #36]	; (80045d0 <uxTaskResetEventItemValue+0x2c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045b2:	4b07      	ldr	r3, [pc, #28]	; (80045d0 <uxTaskResetEventItemValue+0x2c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b8:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <uxTaskResetEventItemValue+0x2c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80045c0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80045c2:	687b      	ldr	r3, [r7, #4]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	200006f0 	.word	0x200006f0

080045d4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045de:	4b21      	ldr	r3, [pc, #132]	; (8004664 <prvAddCurrentTaskToDelayedList+0x90>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045e4:	4b20      	ldr	r3, [pc, #128]	; (8004668 <prvAddCurrentTaskToDelayedList+0x94>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3304      	adds	r3, #4
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fe fb76 	bl	8002cdc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f6:	d10a      	bne.n	800460e <prvAddCurrentTaskToDelayedList+0x3a>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d007      	beq.n	800460e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045fe:	4b1a      	ldr	r3, [pc, #104]	; (8004668 <prvAddCurrentTaskToDelayedList+0x94>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3304      	adds	r3, #4
 8004604:	4619      	mov	r1, r3
 8004606:	4819      	ldr	r0, [pc, #100]	; (800466c <prvAddCurrentTaskToDelayedList+0x98>)
 8004608:	f7fe fb0b 	bl	8002c22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800460c:	e026      	b.n	800465c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4413      	add	r3, r2
 8004614:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004616:	4b14      	ldr	r3, [pc, #80]	; (8004668 <prvAddCurrentTaskToDelayedList+0x94>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	429a      	cmp	r2, r3
 8004624:	d209      	bcs.n	800463a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004626:	4b12      	ldr	r3, [pc, #72]	; (8004670 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <prvAddCurrentTaskToDelayedList+0x94>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3304      	adds	r3, #4
 8004630:	4619      	mov	r1, r3
 8004632:	4610      	mov	r0, r2
 8004634:	f7fe fb19 	bl	8002c6a <vListInsert>
}
 8004638:	e010      	b.n	800465c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800463a:	4b0e      	ldr	r3, [pc, #56]	; (8004674 <prvAddCurrentTaskToDelayedList+0xa0>)
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	4b0a      	ldr	r3, [pc, #40]	; (8004668 <prvAddCurrentTaskToDelayedList+0x94>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3304      	adds	r3, #4
 8004644:	4619      	mov	r1, r3
 8004646:	4610      	mov	r0, r2
 8004648:	f7fe fb0f 	bl	8002c6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800464c:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <prvAddCurrentTaskToDelayedList+0xa4>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	429a      	cmp	r2, r3
 8004654:	d202      	bcs.n	800465c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004656:	4a08      	ldr	r2, [pc, #32]	; (8004678 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	6013      	str	r3, [r2, #0]
}
 800465c:	bf00      	nop
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	20000bc8 	.word	0x20000bc8
 8004668:	200006f0 	.word	0x200006f0
 800466c:	20000bb0 	.word	0x20000bb0
 8004670:	20000b80 	.word	0x20000b80
 8004674:	20000b7c 	.word	0x20000b7c
 8004678:	20000be4 	.word	0x20000be4

0800467c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08a      	sub	sp, #40	; 0x28
 8004680:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004686:	f000 faff 	bl	8004c88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800468a:	4b1c      	ldr	r3, [pc, #112]	; (80046fc <xTimerCreateTimerTask+0x80>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d021      	beq.n	80046d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004692:	2300      	movs	r3, #0
 8004694:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004696:	2300      	movs	r3, #0
 8004698:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800469a:	1d3a      	adds	r2, r7, #4
 800469c:	f107 0108 	add.w	r1, r7, #8
 80046a0:	f107 030c 	add.w	r3, r7, #12
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fe f815 	bl	80026d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	9202      	str	r2, [sp, #8]
 80046b2:	9301      	str	r3, [sp, #4]
 80046b4:	2302      	movs	r3, #2
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	2300      	movs	r3, #0
 80046ba:	460a      	mov	r2, r1
 80046bc:	4910      	ldr	r1, [pc, #64]	; (8004700 <xTimerCreateTimerTask+0x84>)
 80046be:	4811      	ldr	r0, [pc, #68]	; (8004704 <xTimerCreateTimerTask+0x88>)
 80046c0:	f7ff f80a 	bl	80036d8 <xTaskCreateStatic>
 80046c4:	4602      	mov	r2, r0
 80046c6:	4b10      	ldr	r3, [pc, #64]	; (8004708 <xTimerCreateTimerTask+0x8c>)
 80046c8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80046ca:	4b0f      	ldr	r3, [pc, #60]	; (8004708 <xTimerCreateTimerTask+0x8c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80046d2:	2301      	movs	r3, #1
 80046d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d109      	bne.n	80046f0 <xTimerCreateTimerTask+0x74>
 80046dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	e7fe      	b.n	80046ee <xTimerCreateTimerTask+0x72>
	return xReturn;
 80046f0:	697b      	ldr	r3, [r7, #20]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20000c20 	.word	0x20000c20
 8004700:	08005fa4 	.word	0x08005fa4
 8004704:	0800483d 	.word	0x0800483d
 8004708:	20000c24 	.word	0x20000c24

0800470c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08a      	sub	sp, #40	; 0x28
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800471a:	2300      	movs	r3, #0
 800471c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d109      	bne.n	8004738 <xTimerGenericCommand+0x2c>
 8004724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	623b      	str	r3, [r7, #32]
 8004736:	e7fe      	b.n	8004736 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004738:	4b19      	ldr	r3, [pc, #100]	; (80047a0 <xTimerGenericCommand+0x94>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d02a      	beq.n	8004796 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b05      	cmp	r3, #5
 8004750:	dc18      	bgt.n	8004784 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004752:	f7ff fe9d 	bl	8004490 <xTaskGetSchedulerState>
 8004756:	4603      	mov	r3, r0
 8004758:	2b02      	cmp	r3, #2
 800475a:	d109      	bne.n	8004770 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800475c:	4b10      	ldr	r3, [pc, #64]	; (80047a0 <xTimerGenericCommand+0x94>)
 800475e:	6818      	ldr	r0, [r3, #0]
 8004760:	f107 0110 	add.w	r1, r7, #16
 8004764:	2300      	movs	r3, #0
 8004766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004768:	f7fe fbe0 	bl	8002f2c <xQueueGenericSend>
 800476c:	6278      	str	r0, [r7, #36]	; 0x24
 800476e:	e012      	b.n	8004796 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004770:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <xTimerGenericCommand+0x94>)
 8004772:	6818      	ldr	r0, [r3, #0]
 8004774:	f107 0110 	add.w	r1, r7, #16
 8004778:	2300      	movs	r3, #0
 800477a:	2200      	movs	r2, #0
 800477c:	f7fe fbd6 	bl	8002f2c <xQueueGenericSend>
 8004780:	6278      	str	r0, [r7, #36]	; 0x24
 8004782:	e008      	b.n	8004796 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004784:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <xTimerGenericCommand+0x94>)
 8004786:	6818      	ldr	r0, [r3, #0]
 8004788:	f107 0110 	add.w	r1, r7, #16
 800478c:	2300      	movs	r3, #0
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	f7fe fcc6 	bl	8003120 <xQueueGenericSendFromISR>
 8004794:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004798:	4618      	mov	r0, r3
 800479a:	3728      	adds	r7, #40	; 0x28
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	20000c20 	.word	0x20000c20

080047a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b088      	sub	sp, #32
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047ae:	4b22      	ldr	r3, [pc, #136]	; (8004838 <prvProcessExpiredTimer+0x94>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	3304      	adds	r3, #4
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fe fa8d 	bl	8002cdc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d021      	beq.n	8004814 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	699a      	ldr	r2, [r3, #24]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	18d1      	adds	r1, r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	6978      	ldr	r0, [r7, #20]
 80047de:	f000 f8d1 	bl	8004984 <prvInsertTimerInActiveList>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d01e      	beq.n	8004826 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047e8:	2300      	movs	r3, #0
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	2300      	movs	r3, #0
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	2100      	movs	r1, #0
 80047f2:	6978      	ldr	r0, [r7, #20]
 80047f4:	f7ff ff8a 	bl	800470c <xTimerGenericCommand>
 80047f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d112      	bne.n	8004826 <prvProcessExpiredTimer+0x82>
 8004800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	e7fe      	b.n	8004812 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800481a:	f023 0301 	bic.w	r3, r3, #1
 800481e:	b2da      	uxtb	r2, r3
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	6978      	ldr	r0, [r7, #20]
 800482c:	4798      	blx	r3
}
 800482e:	bf00      	nop
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000c18 	.word	0x20000c18

0800483c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004844:	f107 0308 	add.w	r3, r7, #8
 8004848:	4618      	mov	r0, r3
 800484a:	f000 f857 	bl	80048fc <prvGetNextExpireTime>
 800484e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	4619      	mov	r1, r3
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 f803 	bl	8004860 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800485a:	f000 f8d5 	bl	8004a08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800485e:	e7f1      	b.n	8004844 <prvTimerTask+0x8>

08004860 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800486a:	f7ff f96d 	bl	8003b48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800486e:	f107 0308 	add.w	r3, r7, #8
 8004872:	4618      	mov	r0, r3
 8004874:	f000 f866 	bl	8004944 <prvSampleTimeNow>
 8004878:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d130      	bne.n	80048e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10a      	bne.n	800489c <prvProcessTimerOrBlockTask+0x3c>
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	429a      	cmp	r2, r3
 800488c:	d806      	bhi.n	800489c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800488e:	f7ff f969 	bl	8003b64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004892:	68f9      	ldr	r1, [r7, #12]
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7ff ff85 	bl	80047a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800489a:	e024      	b.n	80048e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d008      	beq.n	80048b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80048a2:	4b13      	ldr	r3, [pc, #76]	; (80048f0 <prvProcessTimerOrBlockTask+0x90>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <prvProcessTimerOrBlockTask+0x50>
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <prvProcessTimerOrBlockTask+0x52>
 80048b0:	2300      	movs	r3, #0
 80048b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80048b4:	4b0f      	ldr	r3, [pc, #60]	; (80048f4 <prvProcessTimerOrBlockTask+0x94>)
 80048b6:	6818      	ldr	r0, [r3, #0]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	4619      	mov	r1, r3
 80048c2:	f7fe fed5 	bl	8003670 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80048c6:	f7ff f94d 	bl	8003b64 <xTaskResumeAll>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10a      	bne.n	80048e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80048d0:	4b09      	ldr	r3, [pc, #36]	; (80048f8 <prvProcessTimerOrBlockTask+0x98>)
 80048d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	f3bf 8f6f 	isb	sy
}
 80048e0:	e001      	b.n	80048e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80048e2:	f7ff f93f 	bl	8003b64 <xTaskResumeAll>
}
 80048e6:	bf00      	nop
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000c1c 	.word	0x20000c1c
 80048f4:	20000c20 	.word	0x20000c20
 80048f8:	e000ed04 	.word	0xe000ed04

080048fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004904:	4b0e      	ldr	r3, [pc, #56]	; (8004940 <prvGetNextExpireTime+0x44>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <prvGetNextExpireTime+0x16>
 800490e:	2201      	movs	r2, #1
 8004910:	e000      	b.n	8004914 <prvGetNextExpireTime+0x18>
 8004912:	2200      	movs	r2, #0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d105      	bne.n	800492c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004920:	4b07      	ldr	r3, [pc, #28]	; (8004940 <prvGetNextExpireTime+0x44>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	e001      	b.n	8004930 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004930:	68fb      	ldr	r3, [r7, #12]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	20000c18 	.word	0x20000c18

08004944 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800494c:	f7ff f9a6 	bl	8003c9c <xTaskGetTickCount>
 8004950:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004952:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <prvSampleTimeNow+0x3c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	429a      	cmp	r2, r3
 800495a:	d205      	bcs.n	8004968 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800495c:	f000 f930 	bl	8004bc0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	e002      	b.n	800496e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800496e:	4a04      	ldr	r2, [pc, #16]	; (8004980 <prvSampleTimeNow+0x3c>)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004974:	68fb      	ldr	r3, [r7, #12]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20000c28 	.word	0x20000c28

08004984 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
 8004990:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004992:	2300      	movs	r3, #0
 8004994:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d812      	bhi.n	80049d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	1ad2      	subs	r2, r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d302      	bcc.n	80049be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80049b8:	2301      	movs	r3, #1
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	e01b      	b.n	80049f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80049be:	4b10      	ldr	r3, [pc, #64]	; (8004a00 <prvInsertTimerInActiveList+0x7c>)
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	3304      	adds	r3, #4
 80049c6:	4619      	mov	r1, r3
 80049c8:	4610      	mov	r0, r2
 80049ca:	f7fe f94e 	bl	8002c6a <vListInsert>
 80049ce:	e012      	b.n	80049f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d206      	bcs.n	80049e6 <prvInsertTimerInActiveList+0x62>
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d302      	bcc.n	80049e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80049e0:	2301      	movs	r3, #1
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	e007      	b.n	80049f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049e6:	4b07      	ldr	r3, [pc, #28]	; (8004a04 <prvInsertTimerInActiveList+0x80>)
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3304      	adds	r3, #4
 80049ee:	4619      	mov	r1, r3
 80049f0:	4610      	mov	r0, r2
 80049f2:	f7fe f93a 	bl	8002c6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80049f6:	697b      	ldr	r3, [r7, #20]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	20000c1c 	.word	0x20000c1c
 8004a04:	20000c18 	.word	0x20000c18

08004a08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08e      	sub	sp, #56	; 0x38
 8004a0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a0e:	e0c6      	b.n	8004b9e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	da17      	bge.n	8004a46 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004a16:	1d3b      	adds	r3, r7, #4
 8004a18:	3304      	adds	r3, #4
 8004a1a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d109      	bne.n	8004a36 <prvProcessReceivedCommands+0x2e>
 8004a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	61fb      	str	r3, [r7, #28]
 8004a34:	e7fe      	b.n	8004a34 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a3c:	6850      	ldr	r0, [r2, #4]
 8004a3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a40:	6892      	ldr	r2, [r2, #8]
 8004a42:	4611      	mov	r1, r2
 8004a44:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f2c0 80a7 	blt.w	8004b9c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d004      	beq.n	8004a64 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fe f93c 	bl	8002cdc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a64:	463b      	mov	r3, r7
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff ff6c 	bl	8004944 <prvSampleTimeNow>
 8004a6c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b09      	cmp	r3, #9
 8004a72:	f200 8094 	bhi.w	8004b9e <prvProcessReceivedCommands+0x196>
 8004a76:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <prvProcessReceivedCommands+0x74>)
 8004a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7c:	08004aa5 	.word	0x08004aa5
 8004a80:	08004aa5 	.word	0x08004aa5
 8004a84:	08004aa5 	.word	0x08004aa5
 8004a88:	08004b17 	.word	0x08004b17
 8004a8c:	08004b2b 	.word	0x08004b2b
 8004a90:	08004b73 	.word	0x08004b73
 8004a94:	08004aa5 	.word	0x08004aa5
 8004a98:	08004aa5 	.word	0x08004aa5
 8004a9c:	08004b17 	.word	0x08004b17
 8004aa0:	08004b2b 	.word	0x08004b2b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aaa:	f043 0301 	orr.w	r3, r3, #1
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	18d1      	adds	r1, r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ac4:	f7ff ff5e 	bl	8004984 <prvInsertTimerInActiveList>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d067      	beq.n	8004b9e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ad4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d05c      	beq.n	8004b9e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	441a      	add	r2, r3
 8004aec:	2300      	movs	r3, #0
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	2300      	movs	r3, #0
 8004af2:	2100      	movs	r1, #0
 8004af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004af6:	f7ff fe09 	bl	800470c <xTimerGenericCommand>
 8004afa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d14d      	bne.n	8004b9e <prvProcessReceivedCommands+0x196>
 8004b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	61bb      	str	r3, [r7, #24]
 8004b14:	e7fe      	b.n	8004b14 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b1c:	f023 0301 	bic.w	r3, r3, #1
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004b28:	e039      	b.n	8004b9e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b30:	f043 0301 	orr.w	r3, r3, #1
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b40:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d109      	bne.n	8004b5e <prvProcessReceivedCommands+0x156>
 8004b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	617b      	str	r3, [r7, #20]
 8004b5c:	e7fe      	b.n	8004b5c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b60:	699a      	ldr	r2, [r3, #24]
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	18d1      	adds	r1, r2, r3
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b6c:	f7ff ff0a 	bl	8004984 <prvInsertTimerInActiveList>
					break;
 8004b70:	e015      	b.n	8004b9e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d103      	bne.n	8004b88 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8004b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b82:	f000 fbe7 	bl	8005354 <vPortFree>
 8004b86:	e00a      	b.n	8004b9e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b8e:	f023 0301 	bic.w	r3, r3, #1
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b9a:	e000      	b.n	8004b9e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004b9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b9e:	4b07      	ldr	r3, [pc, #28]	; (8004bbc <prvProcessReceivedCommands+0x1b4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	1d39      	adds	r1, r7, #4
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7fe fb4e 	bl	8003248 <xQueueReceive>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f47f af2e 	bne.w	8004a10 <prvProcessReceivedCommands+0x8>
	}
}
 8004bb4:	bf00      	nop
 8004bb6:	3730      	adds	r7, #48	; 0x30
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	20000c20 	.word	0x20000c20

08004bc0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b088      	sub	sp, #32
 8004bc4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bc6:	e047      	b.n	8004c58 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bc8:	4b2d      	ldr	r3, [pc, #180]	; (8004c80 <prvSwitchTimerLists+0xc0>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bd2:	4b2b      	ldr	r3, [pc, #172]	; (8004c80 <prvSwitchTimerLists+0xc0>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	3304      	adds	r3, #4
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fe f87b 	bl	8002cdc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d02d      	beq.n	8004c58 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4413      	add	r3, r2
 8004c04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d90e      	bls.n	8004c2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c1a:	4b19      	ldr	r3, [pc, #100]	; (8004c80 <prvSwitchTimerLists+0xc0>)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	3304      	adds	r3, #4
 8004c22:	4619      	mov	r1, r3
 8004c24:	4610      	mov	r0, r2
 8004c26:	f7fe f820 	bl	8002c6a <vListInsert>
 8004c2a:	e015      	b.n	8004c58 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	2300      	movs	r3, #0
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	2100      	movs	r1, #0
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f7ff fd68 	bl	800470c <xTimerGenericCommand>
 8004c3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d109      	bne.n	8004c58 <prvSwitchTimerLists+0x98>
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	603b      	str	r3, [r7, #0]
 8004c56:	e7fe      	b.n	8004c56 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c58:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <prvSwitchTimerLists+0xc0>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1b2      	bne.n	8004bc8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c62:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <prvSwitchTimerLists+0xc0>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c68:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <prvSwitchTimerLists+0xc4>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a04      	ldr	r2, [pc, #16]	; (8004c80 <prvSwitchTimerLists+0xc0>)
 8004c6e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c70:	4a04      	ldr	r2, [pc, #16]	; (8004c84 <prvSwitchTimerLists+0xc4>)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	6013      	str	r3, [r2, #0]
}
 8004c76:	bf00      	nop
 8004c78:	3718      	adds	r7, #24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000c18 	.word	0x20000c18
 8004c84:	20000c1c 	.word	0x20000c1c

08004c88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c8e:	f000 f985 	bl	8004f9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c92:	4b15      	ldr	r3, [pc, #84]	; (8004ce8 <prvCheckForValidListAndQueue+0x60>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d120      	bne.n	8004cdc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c9a:	4814      	ldr	r0, [pc, #80]	; (8004cec <prvCheckForValidListAndQueue+0x64>)
 8004c9c:	f7fd ff94 	bl	8002bc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ca0:	4813      	ldr	r0, [pc, #76]	; (8004cf0 <prvCheckForValidListAndQueue+0x68>)
 8004ca2:	f7fd ff91 	bl	8002bc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ca6:	4b13      	ldr	r3, [pc, #76]	; (8004cf4 <prvCheckForValidListAndQueue+0x6c>)
 8004ca8:	4a10      	ldr	r2, [pc, #64]	; (8004cec <prvCheckForValidListAndQueue+0x64>)
 8004caa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004cac:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <prvCheckForValidListAndQueue+0x70>)
 8004cae:	4a10      	ldr	r2, [pc, #64]	; (8004cf0 <prvCheckForValidListAndQueue+0x68>)
 8004cb0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <prvCheckForValidListAndQueue+0x74>)
 8004cb8:	4a11      	ldr	r2, [pc, #68]	; (8004d00 <prvCheckForValidListAndQueue+0x78>)
 8004cba:	2110      	movs	r1, #16
 8004cbc:	200a      	movs	r0, #10
 8004cbe:	f7fe f89f 	bl	8002e00 <xQueueGenericCreateStatic>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	4b08      	ldr	r3, [pc, #32]	; (8004ce8 <prvCheckForValidListAndQueue+0x60>)
 8004cc6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004cc8:	4b07      	ldr	r3, [pc, #28]	; (8004ce8 <prvCheckForValidListAndQueue+0x60>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d005      	beq.n	8004cdc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004cd0:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <prvCheckForValidListAndQueue+0x60>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	490b      	ldr	r1, [pc, #44]	; (8004d04 <prvCheckForValidListAndQueue+0x7c>)
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fe fca2 	bl	8003620 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cdc:	f000 f98c 	bl	8004ff8 <vPortExitCritical>
}
 8004ce0:	bf00      	nop
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20000c20 	.word	0x20000c20
 8004cec:	20000bf0 	.word	0x20000bf0
 8004cf0:	20000c04 	.word	0x20000c04
 8004cf4:	20000c18 	.word	0x20000c18
 8004cf8:	20000c1c 	.word	0x20000c1c
 8004cfc:	20000ccc 	.word	0x20000ccc
 8004d00:	20000c2c 	.word	0x20000c2c
 8004d04:	08005fac 	.word	0x08005fac

08004d08 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08a      	sub	sp, #40	; 0x28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
 8004d14:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8004d16:	f06f 0301 	mvn.w	r3, #1
 8004d1a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d28:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <xTimerPendFunctionCallFromISR+0x3c>)
 8004d2a:	6818      	ldr	r0, [r3, #0]
 8004d2c:	f107 0114 	add.w	r1, r7, #20
 8004d30:	2300      	movs	r3, #0
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	f7fe f9f4 	bl	8003120 <xQueueGenericSendFromISR>
 8004d38:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3728      	adds	r7, #40	; 0x28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	20000c20 	.word	0x20000c20

08004d48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	3b04      	subs	r3, #4
 8004d58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	3b04      	subs	r3, #4
 8004d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f023 0201 	bic.w	r2, r3, #1
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	3b04      	subs	r3, #4
 8004d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d78:	4a0c      	ldr	r2, [pc, #48]	; (8004dac <pxPortInitialiseStack+0x64>)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	3b14      	subs	r3, #20
 8004d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3b04      	subs	r3, #4
 8004d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f06f 0202 	mvn.w	r2, #2
 8004d96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3b20      	subs	r3, #32
 8004d9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	08004db1 	.word	0x08004db1

08004db0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004dba:	4b11      	ldr	r3, [pc, #68]	; (8004e00 <prvTaskExitError+0x50>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc2:	d009      	beq.n	8004dd8 <prvTaskExitError+0x28>
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	e7fe      	b.n	8004dd6 <prvTaskExitError+0x26>
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004dea:	bf00      	nop
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0fc      	beq.n	8004dec <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	20000008 	.word	0x20000008
	...

08004e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e10:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <pxCurrentTCBConst2>)
 8004e12:	6819      	ldr	r1, [r3, #0]
 8004e14:	6808      	ldr	r0, [r1, #0]
 8004e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e1a:	f380 8809 	msr	PSP, r0
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f04f 0000 	mov.w	r0, #0
 8004e26:	f380 8811 	msr	BASEPRI, r0
 8004e2a:	4770      	bx	lr
 8004e2c:	f3af 8000 	nop.w

08004e30 <pxCurrentTCBConst2>:
 8004e30:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop

08004e38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004e38:	4808      	ldr	r0, [pc, #32]	; (8004e5c <prvPortStartFirstTask+0x24>)
 8004e3a:	6800      	ldr	r0, [r0, #0]
 8004e3c:	6800      	ldr	r0, [r0, #0]
 8004e3e:	f380 8808 	msr	MSP, r0
 8004e42:	f04f 0000 	mov.w	r0, #0
 8004e46:	f380 8814 	msr	CONTROL, r0
 8004e4a:	b662      	cpsie	i
 8004e4c:	b661      	cpsie	f
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	df00      	svc	0
 8004e58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e5a:	bf00      	nop
 8004e5c:	e000ed08 	.word	0xe000ed08

08004e60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e66:	4b44      	ldr	r3, [pc, #272]	; (8004f78 <xPortStartScheduler+0x118>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a44      	ldr	r2, [pc, #272]	; (8004f7c <xPortStartScheduler+0x11c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d109      	bne.n	8004e84 <xPortStartScheduler+0x24>
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	613b      	str	r3, [r7, #16]
 8004e82:	e7fe      	b.n	8004e82 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e84:	4b3c      	ldr	r3, [pc, #240]	; (8004f78 <xPortStartScheduler+0x118>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a3d      	ldr	r2, [pc, #244]	; (8004f80 <xPortStartScheduler+0x120>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d109      	bne.n	8004ea2 <xPortStartScheduler+0x42>
 8004e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	e7fe      	b.n	8004ea0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ea2:	4b38      	ldr	r3, [pc, #224]	; (8004f84 <xPortStartScheduler+0x124>)
 8004ea4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	22ff      	movs	r2, #255	; 0xff
 8004eb2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ebc:	78fb      	ldrb	r3, [r7, #3]
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	4b30      	ldr	r3, [pc, #192]	; (8004f88 <xPortStartScheduler+0x128>)
 8004ec8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004eca:	4b30      	ldr	r3, [pc, #192]	; (8004f8c <xPortStartScheduler+0x12c>)
 8004ecc:	2207      	movs	r2, #7
 8004ece:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ed0:	e009      	b.n	8004ee6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004ed2:	4b2e      	ldr	r3, [pc, #184]	; (8004f8c <xPortStartScheduler+0x12c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	4a2c      	ldr	r2, [pc, #176]	; (8004f8c <xPortStartScheduler+0x12c>)
 8004eda:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ee6:	78fb      	ldrb	r3, [r7, #3]
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eee:	2b80      	cmp	r3, #128	; 0x80
 8004ef0:	d0ef      	beq.n	8004ed2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ef2:	4b26      	ldr	r3, [pc, #152]	; (8004f8c <xPortStartScheduler+0x12c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f1c3 0307 	rsb	r3, r3, #7
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d009      	beq.n	8004f12 <xPortStartScheduler+0xb2>
 8004efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	60bb      	str	r3, [r7, #8]
 8004f10:	e7fe      	b.n	8004f10 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f12:	4b1e      	ldr	r3, [pc, #120]	; (8004f8c <xPortStartScheduler+0x12c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	021b      	lsls	r3, r3, #8
 8004f18:	4a1c      	ldr	r2, [pc, #112]	; (8004f8c <xPortStartScheduler+0x12c>)
 8004f1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f1c:	4b1b      	ldr	r3, [pc, #108]	; (8004f8c <xPortStartScheduler+0x12c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f24:	4a19      	ldr	r2, [pc, #100]	; (8004f8c <xPortStartScheduler+0x12c>)
 8004f26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f30:	4b17      	ldr	r3, [pc, #92]	; (8004f90 <xPortStartScheduler+0x130>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a16      	ldr	r2, [pc, #88]	; (8004f90 <xPortStartScheduler+0x130>)
 8004f36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f3c:	4b14      	ldr	r3, [pc, #80]	; (8004f90 <xPortStartScheduler+0x130>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a13      	ldr	r2, [pc, #76]	; (8004f90 <xPortStartScheduler+0x130>)
 8004f42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f48:	f000 f8d6 	bl	80050f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f4c:	4b11      	ldr	r3, [pc, #68]	; (8004f94 <xPortStartScheduler+0x134>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f52:	f000 f8f5 	bl	8005140 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f56:	4b10      	ldr	r3, [pc, #64]	; (8004f98 <xPortStartScheduler+0x138>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a0f      	ldr	r2, [pc, #60]	; (8004f98 <xPortStartScheduler+0x138>)
 8004f5c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f60:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f62:	f7ff ff69 	bl	8004e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f66:	f7fe ff61 	bl	8003e2c <vTaskSwitchContext>
	prvTaskExitError();
 8004f6a:	f7ff ff21 	bl	8004db0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	e000ed00 	.word	0xe000ed00
 8004f7c:	410fc271 	.word	0x410fc271
 8004f80:	410fc270 	.word	0x410fc270
 8004f84:	e000e400 	.word	0xe000e400
 8004f88:	20000d1c 	.word	0x20000d1c
 8004f8c:	20000d20 	.word	0x20000d20
 8004f90:	e000ed20 	.word	0xe000ed20
 8004f94:	20000008 	.word	0x20000008
 8004f98:	e000ef34 	.word	0xe000ef34

08004f9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004fb4:	4b0e      	ldr	r3, [pc, #56]	; (8004ff0 <vPortEnterCritical+0x54>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	4a0d      	ldr	r2, [pc, #52]	; (8004ff0 <vPortEnterCritical+0x54>)
 8004fbc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004fbe:	4b0c      	ldr	r3, [pc, #48]	; (8004ff0 <vPortEnterCritical+0x54>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d10e      	bne.n	8004fe4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004fc6:	4b0b      	ldr	r3, [pc, #44]	; (8004ff4 <vPortEnterCritical+0x58>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d009      	beq.n	8004fe4 <vPortEnterCritical+0x48>
 8004fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	603b      	str	r3, [r7, #0]
 8004fe2:	e7fe      	b.n	8004fe2 <vPortEnterCritical+0x46>
	}
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	20000008 	.word	0x20000008
 8004ff4:	e000ed04 	.word	0xe000ed04

08004ff8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ffe:	4b11      	ldr	r3, [pc, #68]	; (8005044 <vPortExitCritical+0x4c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d109      	bne.n	800501a <vPortExitCritical+0x22>
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	607b      	str	r3, [r7, #4]
 8005018:	e7fe      	b.n	8005018 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800501a:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <vPortExitCritical+0x4c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3b01      	subs	r3, #1
 8005020:	4a08      	ldr	r2, [pc, #32]	; (8005044 <vPortExitCritical+0x4c>)
 8005022:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005024:	4b07      	ldr	r3, [pc, #28]	; (8005044 <vPortExitCritical+0x4c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d104      	bne.n	8005036 <vPortExitCritical+0x3e>
 800502c:	2300      	movs	r3, #0
 800502e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	20000008 	.word	0x20000008
	...

08005050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005050:	f3ef 8009 	mrs	r0, PSP
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	4b15      	ldr	r3, [pc, #84]	; (80050b0 <pxCurrentTCBConst>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	f01e 0f10 	tst.w	lr, #16
 8005060:	bf08      	it	eq
 8005062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800506a:	6010      	str	r0, [r2, #0]
 800506c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005070:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005074:	f380 8811 	msr	BASEPRI, r0
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f7fe fed4 	bl	8003e2c <vTaskSwitchContext>
 8005084:	f04f 0000 	mov.w	r0, #0
 8005088:	f380 8811 	msr	BASEPRI, r0
 800508c:	bc09      	pop	{r0, r3}
 800508e:	6819      	ldr	r1, [r3, #0]
 8005090:	6808      	ldr	r0, [r1, #0]
 8005092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005096:	f01e 0f10 	tst.w	lr, #16
 800509a:	bf08      	it	eq
 800509c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80050a0:	f380 8809 	msr	PSP, r0
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	f3af 8000 	nop.w

080050b0 <pxCurrentTCBConst>:
 80050b0:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80050b4:	bf00      	nop
 80050b6:	bf00      	nop

080050b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050d0:	f7fe fdf4 	bl	8003cbc <xTaskIncrementTick>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050da:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <SysTick_Handler+0x3c>)
 80050dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	2300      	movs	r3, #0
 80050e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80050ec:	bf00      	nop
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	e000ed04 	.word	0xe000ed04

080050f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050fc:	4b0b      	ldr	r3, [pc, #44]	; (800512c <vPortSetupTimerInterrupt+0x34>)
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005102:	4b0b      	ldr	r3, [pc, #44]	; (8005130 <vPortSetupTimerInterrupt+0x38>)
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005108:	4b0a      	ldr	r3, [pc, #40]	; (8005134 <vPortSetupTimerInterrupt+0x3c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a0a      	ldr	r2, [pc, #40]	; (8005138 <vPortSetupTimerInterrupt+0x40>)
 800510e:	fba2 2303 	umull	r2, r3, r2, r3
 8005112:	099b      	lsrs	r3, r3, #6
 8005114:	4a09      	ldr	r2, [pc, #36]	; (800513c <vPortSetupTimerInterrupt+0x44>)
 8005116:	3b01      	subs	r3, #1
 8005118:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800511a:	4b04      	ldr	r3, [pc, #16]	; (800512c <vPortSetupTimerInterrupt+0x34>)
 800511c:	2207      	movs	r2, #7
 800511e:	601a      	str	r2, [r3, #0]
}
 8005120:	bf00      	nop
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	e000e010 	.word	0xe000e010
 8005130:	e000e018 	.word	0xe000e018
 8005134:	2000000c 	.word	0x2000000c
 8005138:	10624dd3 	.word	0x10624dd3
 800513c:	e000e014 	.word	0xe000e014

08005140 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005140:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005150 <vPortEnableVFP+0x10>
 8005144:	6801      	ldr	r1, [r0, #0]
 8005146:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800514a:	6001      	str	r1, [r0, #0]
 800514c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800514e:	bf00      	nop
 8005150:	e000ed88 	.word	0xe000ed88

08005154 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800515a:	f3ef 8305 	mrs	r3, IPSR
 800515e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b0f      	cmp	r3, #15
 8005164:	d913      	bls.n	800518e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005166:	4a16      	ldr	r2, [pc, #88]	; (80051c0 <vPortValidateInterruptPriority+0x6c>)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4413      	add	r3, r2
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005170:	4b14      	ldr	r3, [pc, #80]	; (80051c4 <vPortValidateInterruptPriority+0x70>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	7afa      	ldrb	r2, [r7, #11]
 8005176:	429a      	cmp	r2, r3
 8005178:	d209      	bcs.n	800518e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	607b      	str	r3, [r7, #4]
 800518c:	e7fe      	b.n	800518c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800518e:	4b0e      	ldr	r3, [pc, #56]	; (80051c8 <vPortValidateInterruptPriority+0x74>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005196:	4b0d      	ldr	r3, [pc, #52]	; (80051cc <vPortValidateInterruptPriority+0x78>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d909      	bls.n	80051b2 <vPortValidateInterruptPriority+0x5e>
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	603b      	str	r3, [r7, #0]
 80051b0:	e7fe      	b.n	80051b0 <vPortValidateInterruptPriority+0x5c>
	}
 80051b2:	bf00      	nop
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	e000e3f0 	.word	0xe000e3f0
 80051c4:	20000d1c 	.word	0x20000d1c
 80051c8:	e000ed0c 	.word	0xe000ed0c
 80051cc:	20000d20 	.word	0x20000d20

080051d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08a      	sub	sp, #40	; 0x28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051d8:	2300      	movs	r3, #0
 80051da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051dc:	f7fe fcb4 	bl	8003b48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051e0:	4b57      	ldr	r3, [pc, #348]	; (8005340 <pvPortMalloc+0x170>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051e8:	f000 f90c 	bl	8005404 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051ec:	4b55      	ldr	r3, [pc, #340]	; (8005344 <pvPortMalloc+0x174>)
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4013      	ands	r3, r2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f040 808c 	bne.w	8005312 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d01c      	beq.n	800523a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005200:	2208      	movs	r2, #8
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4413      	add	r3, r2
 8005206:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f003 0307 	and.w	r3, r3, #7
 800520e:	2b00      	cmp	r3, #0
 8005210:	d013      	beq.n	800523a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f023 0307 	bic.w	r3, r3, #7
 8005218:	3308      	adds	r3, #8
 800521a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f003 0307 	and.w	r3, r3, #7
 8005222:	2b00      	cmp	r3, #0
 8005224:	d009      	beq.n	800523a <pvPortMalloc+0x6a>
 8005226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	e7fe      	b.n	8005238 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d068      	beq.n	8005312 <pvPortMalloc+0x142>
 8005240:	4b41      	ldr	r3, [pc, #260]	; (8005348 <pvPortMalloc+0x178>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	429a      	cmp	r2, r3
 8005248:	d863      	bhi.n	8005312 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800524a:	4b40      	ldr	r3, [pc, #256]	; (800534c <pvPortMalloc+0x17c>)
 800524c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800524e:	4b3f      	ldr	r3, [pc, #252]	; (800534c <pvPortMalloc+0x17c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005254:	e004      	b.n	8005260 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	429a      	cmp	r2, r3
 8005268:	d903      	bls.n	8005272 <pvPortMalloc+0xa2>
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1f1      	bne.n	8005256 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005272:	4b33      	ldr	r3, [pc, #204]	; (8005340 <pvPortMalloc+0x170>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005278:	429a      	cmp	r2, r3
 800527a:	d04a      	beq.n	8005312 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2208      	movs	r2, #8
 8005282:	4413      	add	r3, r2
 8005284:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	1ad2      	subs	r2, r2, r3
 8005296:	2308      	movs	r3, #8
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	429a      	cmp	r2, r3
 800529c:	d91e      	bls.n	80052dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800529e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4413      	add	r3, r2
 80052a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d009      	beq.n	80052c4 <pvPortMalloc+0xf4>
 80052b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	613b      	str	r3, [r7, #16]
 80052c2:	e7fe      	b.n	80052c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	1ad2      	subs	r2, r2, r3
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052d6:	69b8      	ldr	r0, [r7, #24]
 80052d8:	f000 f8f6 	bl	80054c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052dc:	4b1a      	ldr	r3, [pc, #104]	; (8005348 <pvPortMalloc+0x178>)
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	4a18      	ldr	r2, [pc, #96]	; (8005348 <pvPortMalloc+0x178>)
 80052e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052ea:	4b17      	ldr	r3, [pc, #92]	; (8005348 <pvPortMalloc+0x178>)
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	4b18      	ldr	r3, [pc, #96]	; (8005350 <pvPortMalloc+0x180>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d203      	bcs.n	80052fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052f6:	4b14      	ldr	r3, [pc, #80]	; (8005348 <pvPortMalloc+0x178>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a15      	ldr	r2, [pc, #84]	; (8005350 <pvPortMalloc+0x180>)
 80052fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	4b10      	ldr	r3, [pc, #64]	; (8005344 <pvPortMalloc+0x174>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	431a      	orrs	r2, r3
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	2200      	movs	r2, #0
 8005310:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005312:	f7fe fc27 	bl	8003b64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	2b00      	cmp	r3, #0
 800531e:	d009      	beq.n	8005334 <pvPortMalloc+0x164>
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	e7fe      	b.n	8005332 <pvPortMalloc+0x162>
	return pvReturn;
 8005334:	69fb      	ldr	r3, [r7, #28]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3728      	adds	r7, #40	; 0x28
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	2000492c 	.word	0x2000492c
 8005344:	20004938 	.word	0x20004938
 8005348:	20004930 	.word	0x20004930
 800534c:	20004924 	.word	0x20004924
 8005350:	20004934 	.word	0x20004934

08005354 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d046      	beq.n	80053f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005366:	2308      	movs	r3, #8
 8005368:	425b      	negs	r3, r3
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	4413      	add	r3, r2
 800536e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	4b20      	ldr	r3, [pc, #128]	; (80053fc <vPortFree+0xa8>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4013      	ands	r3, r2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d109      	bne.n	8005396 <vPortFree+0x42>
 8005382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	e7fe      	b.n	8005394 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d009      	beq.n	80053b2 <vPortFree+0x5e>
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	60bb      	str	r3, [r7, #8]
 80053b0:	e7fe      	b.n	80053b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	4b11      	ldr	r3, [pc, #68]	; (80053fc <vPortFree+0xa8>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4013      	ands	r3, r2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d019      	beq.n	80053f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d115      	bne.n	80053f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	4b0b      	ldr	r3, [pc, #44]	; (80053fc <vPortFree+0xa8>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	43db      	mvns	r3, r3
 80053d2:	401a      	ands	r2, r3
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053d8:	f7fe fbb6 	bl	8003b48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	4b07      	ldr	r3, [pc, #28]	; (8005400 <vPortFree+0xac>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4413      	add	r3, r2
 80053e6:	4a06      	ldr	r2, [pc, #24]	; (8005400 <vPortFree+0xac>)
 80053e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053ea:	6938      	ldr	r0, [r7, #16]
 80053ec:	f000 f86c 	bl	80054c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80053f0:	f7fe fbb8 	bl	8003b64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053f4:	bf00      	nop
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20004938 	.word	0x20004938
 8005400:	20004930 	.word	0x20004930

08005404 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800540a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800540e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005410:	4b27      	ldr	r3, [pc, #156]	; (80054b0 <prvHeapInit+0xac>)
 8005412:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00c      	beq.n	8005438 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	3307      	adds	r3, #7
 8005422:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0307 	bic.w	r3, r3, #7
 800542a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	4a1f      	ldr	r2, [pc, #124]	; (80054b0 <prvHeapInit+0xac>)
 8005434:	4413      	add	r3, r2
 8005436:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800543c:	4a1d      	ldr	r2, [pc, #116]	; (80054b4 <prvHeapInit+0xb0>)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005442:	4b1c      	ldr	r3, [pc, #112]	; (80054b4 <prvHeapInit+0xb0>)
 8005444:	2200      	movs	r2, #0
 8005446:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	4413      	add	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005450:	2208      	movs	r2, #8
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	1a9b      	subs	r3, r3, r2
 8005456:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 0307 	bic.w	r3, r3, #7
 800545e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4a15      	ldr	r2, [pc, #84]	; (80054b8 <prvHeapInit+0xb4>)
 8005464:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005466:	4b14      	ldr	r3, [pc, #80]	; (80054b8 <prvHeapInit+0xb4>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2200      	movs	r2, #0
 800546c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800546e:	4b12      	ldr	r3, [pc, #72]	; (80054b8 <prvHeapInit+0xb4>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	1ad2      	subs	r2, r2, r3
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005484:	4b0c      	ldr	r3, [pc, #48]	; (80054b8 <prvHeapInit+0xb4>)
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	4a0a      	ldr	r2, [pc, #40]	; (80054bc <prvHeapInit+0xb8>)
 8005492:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	4a09      	ldr	r2, [pc, #36]	; (80054c0 <prvHeapInit+0xbc>)
 800549a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800549c:	4b09      	ldr	r3, [pc, #36]	; (80054c4 <prvHeapInit+0xc0>)
 800549e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80054a2:	601a      	str	r2, [r3, #0]
}
 80054a4:	bf00      	nop
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	20000d24 	.word	0x20000d24
 80054b4:	20004924 	.word	0x20004924
 80054b8:	2000492c 	.word	0x2000492c
 80054bc:	20004934 	.word	0x20004934
 80054c0:	20004930 	.word	0x20004930
 80054c4:	20004938 	.word	0x20004938

080054c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054d0:	4b28      	ldr	r3, [pc, #160]	; (8005574 <prvInsertBlockIntoFreeList+0xac>)
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	e002      	b.n	80054dc <prvInsertBlockIntoFreeList+0x14>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d8f7      	bhi.n	80054d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	4413      	add	r3, r2
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d108      	bne.n	800550a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	441a      	add	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	441a      	add	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	429a      	cmp	r2, r3
 800551c:	d118      	bne.n	8005550 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	4b15      	ldr	r3, [pc, #84]	; (8005578 <prvInsertBlockIntoFreeList+0xb0>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d00d      	beq.n	8005546 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	441a      	add	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	e008      	b.n	8005558 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005546:	4b0c      	ldr	r3, [pc, #48]	; (8005578 <prvInsertBlockIntoFreeList+0xb0>)
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	e003      	b.n	8005558 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	429a      	cmp	r2, r3
 800555e:	d002      	beq.n	8005566 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005566:	bf00      	nop
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	20004924 	.word	0x20004924
 8005578:	2000492c 	.word	0x2000492c

0800557c <buzzer_init>:
void do_buzz_done_init();
void do_buzz_warn_low();
void do_buzz_warn_critical();

//============= PUBLIC FUNCTION DEFINITIONS =============
void buzzer_init() {
 800557c:	b580      	push	{r7, lr}
 800557e:	b08a      	sub	sp, #40	; 0x28
 8005580:	af00      	add	r7, sp, #0
	//initialize the signal flags for the buzzer thread
	buzzer_action_flags= osEventFlagsNew(NULL);
 8005582:	2000      	movs	r0, #0
 8005584:	f7fc fef4 	bl	8002370 <osEventFlagsNew>
 8005588:	4602      	mov	r2, r0
 800558a:	4b11      	ldr	r3, [pc, #68]	; (80055d0 <buzzer_init+0x54>)
 800558c:	601a      	str	r2, [r3, #0]
	osEventFlagsSet(buzzer_action_flags, BIT_BOOT_UP); //set the boot up bit right away
 800558e:	4b10      	ldr	r3, [pc, #64]	; (80055d0 <buzzer_init+0x54>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2101      	movs	r1, #1
 8005594:	4618      	mov	r0, r3
 8005596:	f7fc ff3d 	bl	8002414 <osEventFlagsSet>

	//initialize the main buzzer thread
	const osThreadAttr_t buzzer_atributes = {
 800559a:	1d3b      	adds	r3, r7, #4
 800559c:	2224      	movs	r2, #36	; 0x24
 800559e:	2100      	movs	r1, #0
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 fce6 	bl	8005f72 <memset>
 80055a6:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <buzzer_init+0x58>)
 80055a8:	607b      	str	r3, [r7, #4]
 80055aa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80055ae:	61bb      	str	r3, [r7, #24]
 80055b0:	2320      	movs	r3, #32
 80055b2:	61fb      	str	r3, [r7, #28]
			.name = "buzzer",
			.priority = (osPriority_t) osPriorityAboveNormal,
			.stack_size = 320
	};
	buzzer_handle = osThreadNew(buzzer_thread, NULL, &buzzer_atributes);
 80055b4:	1d3b      	adds	r3, r7, #4
 80055b6:	461a      	mov	r2, r3
 80055b8:	2100      	movs	r1, #0
 80055ba:	4807      	ldr	r0, [pc, #28]	; (80055d8 <buzzer_init+0x5c>)
 80055bc:	f7fc fdd6 	bl	800216c <osThreadNew>
 80055c0:	4602      	mov	r2, r0
 80055c2:	4b06      	ldr	r3, [pc, #24]	; (80055dc <buzzer_init+0x60>)
 80055c4:	601a      	str	r2, [r3, #0]
}
 80055c6:	bf00      	nop
 80055c8:	3728      	adds	r7, #40	; 0x28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20004940 	.word	0x20004940
 80055d4:	08005fb4 	.word	0x08005fb4
 80055d8:	08005641 	.word	0x08005641
 80055dc:	2000493c 	.word	0x2000493c

080055e0 <buzz_done_init>:

//just set the action flag for the buzzer thread and return
void buzz_done_init() { osEventFlagsSet(buzzer_action_flags, BIT_DONE_INIT); }
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	4b03      	ldr	r3, [pc, #12]	; (80055f4 <buzz_done_init+0x14>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2102      	movs	r1, #2
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fc ff12 	bl	8002414 <osEventFlagsSet>
 80055f0:	bf00      	nop
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	20004940 	.word	0x20004940

080055f8 <buzz_warn_low>:
void buzz_warn_low() {osEventFlagsSet(buzzer_action_flags, BIT_WARN_LOW); }
 80055f8:	b580      	push	{r7, lr}
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	4b03      	ldr	r3, [pc, #12]	; (800560c <buzz_warn_low+0x14>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2104      	movs	r1, #4
 8005602:	4618      	mov	r0, r3
 8005604:	f7fc ff06 	bl	8002414 <osEventFlagsSet>
 8005608:	bf00      	nop
 800560a:	bd80      	pop	{r7, pc}
 800560c:	20004940 	.word	0x20004940

08005610 <buzz_warn_critical>:
void buzz_warn_critical() {osEventFlagsSet(buzzer_action_flags, BIT_WARN_CRIT); }
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0
 8005614:	4b03      	ldr	r3, [pc, #12]	; (8005624 <buzz_warn_critical+0x14>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2108      	movs	r1, #8
 800561a:	4618      	mov	r0, r3
 800561c:	f7fc fefa 	bl	8002414 <osEventFlagsSet>
 8005620:	bf00      	nop
 8005622:	bd80      	pop	{r7, pc}
 8005624:	20004940 	.word	0x20004940

08005628 <buzzer_stack_space>:

//return the free stack space for the buzzer thread
uint32_t buzzer_stack_space() {return osThreadGetStackSpace(buzzer_handle);}
 8005628:	b580      	push	{r7, lr}
 800562a:	af00      	add	r7, sp, #0
 800562c:	4b03      	ldr	r3, [pc, #12]	; (800563c <buzzer_stack_space+0x14>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4618      	mov	r0, r3
 8005632:	f7fc fe41 	bl	80022b8 <osThreadGetStackSpace>
 8005636:	4603      	mov	r3, r0
 8005638:	4618      	mov	r0, r3
 800563a:	bd80      	pop	{r7, pc}
 800563c:	2000493c 	.word	0x2000493c

08005640 <buzzer_thread>:


//====================== PRIVATE FUNCTION DEFINITIONS ======================

//buzzer main thread function
void buzzer_thread() {
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
	while(1) {
		//suspend this thread until any flag is set (and don't clear the set flag)
		osEventFlagsWait(buzzer_action_flags, BIT_ALL_FLAGS, osFlagsNoClear, osWaitForever);
 8005644:	4b29      	ldr	r3, [pc, #164]	; (80056ec <buzzer_thread+0xac>)
 8005646:	6818      	ldr	r0, [r3, #0]
 8005648:	f04f 33ff 	mov.w	r3, #4294967295
 800564c:	2202      	movs	r2, #2
 800564e:	210f      	movs	r1, #15
 8005650:	f7fc ffb0 	bl	80025b4 <osEventFlagsWait>

		//if a flag bit is set, run the appropriate buzzer routine
		//order of the conditionals indicates the priority of the buzz routines
		//each routine will fully complete before going to another routine
		if(osEventFlagsGet(buzzer_action_flags) & BIT_WARN_CRIT) {
 8005654:	4b25      	ldr	r3, [pc, #148]	; (80056ec <buzzer_thread+0xac>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4618      	mov	r0, r3
 800565a:	f7fc ff77 	bl	800254c <osEventFlagsGet>
 800565e:	4603      	mov	r3, r0
 8005660:	f003 0308 	and.w	r3, r3, #8
 8005664:	2b00      	cmp	r3, #0
 8005666:	d008      	beq.n	800567a <buzzer_thread+0x3a>
			do_buzz_warn_critical();
 8005668:	f000 f8fa 	bl	8005860 <do_buzz_warn_critical>
			osEventFlagsClear(buzzer_action_flags, BIT_WARN_CRIT); //clear the flag manually
 800566c:	4b1f      	ldr	r3, [pc, #124]	; (80056ec <buzzer_thread+0xac>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2108      	movs	r1, #8
 8005672:	4618      	mov	r0, r3
 8005674:	f7fc ff26 	bl	80024c4 <osEventFlagsClear>
 8005678:	e7e4      	b.n	8005644 <buzzer_thread+0x4>
		}
		else if (osEventFlagsGet(buzzer_action_flags) & BIT_WARN_LOW) {
 800567a:	4b1c      	ldr	r3, [pc, #112]	; (80056ec <buzzer_thread+0xac>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f7fc ff64 	bl	800254c <osEventFlagsGet>
 8005684:	4603      	mov	r3, r0
 8005686:	f003 0304 	and.w	r3, r3, #4
 800568a:	2b00      	cmp	r3, #0
 800568c:	d008      	beq.n	80056a0 <buzzer_thread+0x60>
			do_buzz_warn_low();
 800568e:	f000 f8af 	bl	80057f0 <do_buzz_warn_low>
			osEventFlagsClear(buzzer_action_flags, BIT_WARN_LOW);
 8005692:	4b16      	ldr	r3, [pc, #88]	; (80056ec <buzzer_thread+0xac>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2104      	movs	r1, #4
 8005698:	4618      	mov	r0, r3
 800569a:	f7fc ff13 	bl	80024c4 <osEventFlagsClear>
 800569e:	e7d1      	b.n	8005644 <buzzer_thread+0x4>
		}
		else if (osEventFlagsGet(buzzer_action_flags) & BIT_DONE_INIT) {
 80056a0:	4b12      	ldr	r3, [pc, #72]	; (80056ec <buzzer_thread+0xac>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fc ff51 	bl	800254c <osEventFlagsGet>
 80056aa:	4603      	mov	r3, r0
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d008      	beq.n	80056c6 <buzzer_thread+0x86>
			do_buzz_done_init();
 80056b4:	f000 f856 	bl	8005764 <do_buzz_done_init>
			osEventFlagsClear(buzzer_action_flags, BIT_DONE_INIT);
 80056b8:	4b0c      	ldr	r3, [pc, #48]	; (80056ec <buzzer_thread+0xac>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2102      	movs	r1, #2
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fc ff00 	bl	80024c4 <osEventFlagsClear>
 80056c4:	e7be      	b.n	8005644 <buzzer_thread+0x4>
		}
		else if (osEventFlagsGet(buzzer_action_flags) & BIT_BOOT_UP) {
 80056c6:	4b09      	ldr	r3, [pc, #36]	; (80056ec <buzzer_thread+0xac>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fc ff3e 	bl	800254c <osEventFlagsGet>
 80056d0:	4603      	mov	r3, r0
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d0b4      	beq.n	8005644 <buzzer_thread+0x4>
			do_buzz_boot_up();
 80056da:	f000 f809 	bl	80056f0 <do_buzz_boot_up>
			osEventFlagsClear(buzzer_action_flags, BIT_BOOT_UP);
 80056de:	4b03      	ldr	r3, [pc, #12]	; (80056ec <buzzer_thread+0xac>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2101      	movs	r1, #1
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7fc feed 	bl	80024c4 <osEventFlagsClear>
		osEventFlagsWait(buzzer_action_flags, BIT_ALL_FLAGS, osFlagsNoClear, osWaitForever);
 80056ea:	e7ab      	b.n	8005644 <buzzer_thread+0x4>
 80056ec:	20004940 	.word	0x20004940

080056f0 <do_buzz_boot_up>:
	}
	//gracefully exiting if it somehow gets here
	osThreadExit();
}

void do_buzz_boot_up() {
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
	TIME_PERIOD(1000);
 80056f4:	4b1a      	ldr	r3, [pc, #104]	; (8005760 <do_buzz_boot_up+0x70>)
 80056f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056fa:	60da      	str	r2, [r3, #12]
 80056fc:	4818      	ldr	r0, [pc, #96]	; (8005760 <do_buzz_boot_up+0x70>)
 80056fe:	f7fb fe2f 	bl	8001360 <HAL_TIM_Base_Init>
	START();
 8005702:	2108      	movs	r1, #8
 8005704:	4816      	ldr	r0, [pc, #88]	; (8005760 <do_buzz_boot_up+0x70>)
 8005706:	f7fb feaf 	bl	8001468 <HAL_TIM_OC_Start>
	osDelay(BOOT_BUZZ_DELAY);
 800570a:	2096      	movs	r0, #150	; 0x96
 800570c:	f7fc fe02 	bl	8002314 <osDelay>

	TIME_PERIOD(800); //major 3rd from base
 8005710:	4b13      	ldr	r3, [pc, #76]	; (8005760 <do_buzz_boot_up+0x70>)
 8005712:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005716:	60da      	str	r2, [r3, #12]
 8005718:	4811      	ldr	r0, [pc, #68]	; (8005760 <do_buzz_boot_up+0x70>)
 800571a:	f7fb fe21 	bl	8001360 <HAL_TIM_Base_Init>
	osDelay(BOOT_BUZZ_DELAY);
 800571e:	2096      	movs	r0, #150	; 0x96
 8005720:	f7fc fdf8 	bl	8002314 <osDelay>

	TIME_PERIOD(666); //perfect 5th from base
 8005724:	4b0e      	ldr	r3, [pc, #56]	; (8005760 <do_buzz_boot_up+0x70>)
 8005726:	f240 229a 	movw	r2, #666	; 0x29a
 800572a:	60da      	str	r2, [r3, #12]
 800572c:	480c      	ldr	r0, [pc, #48]	; (8005760 <do_buzz_boot_up+0x70>)
 800572e:	f7fb fe17 	bl	8001360 <HAL_TIM_Base_Init>
	osDelay(BOOT_BUZZ_DELAY);
 8005732:	2096      	movs	r0, #150	; 0x96
 8005734:	f7fc fdee 	bl	8002314 <osDelay>

	TIME_PERIOD(500); //perfect octave from base
 8005738:	4b09      	ldr	r3, [pc, #36]	; (8005760 <do_buzz_boot_up+0x70>)
 800573a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800573e:	60da      	str	r2, [r3, #12]
 8005740:	4807      	ldr	r0, [pc, #28]	; (8005760 <do_buzz_boot_up+0x70>)
 8005742:	f7fb fe0d 	bl	8001360 <HAL_TIM_Base_Init>
	osDelay(BOOT_BUZZ_DELAY);
 8005746:	2096      	movs	r0, #150	; 0x96
 8005748:	f7fc fde4 	bl	8002314 <osDelay>

	STOP();
 800574c:	2108      	movs	r1, #8
 800574e:	4804      	ldr	r0, [pc, #16]	; (8005760 <do_buzz_boot_up+0x70>)
 8005750:	f7fb febc 	bl	80014cc <HAL_TIM_OC_Stop>
	osDelay(250); //chill for a bit before returning
 8005754:	20fa      	movs	r0, #250	; 0xfa
 8005756:	f7fc fddd 	bl	8002314 <osDelay>
}
 800575a:	bf00      	nop
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	2000498c 	.word	0x2000498c

08005764 <do_buzz_done_init>:

void do_buzz_done_init() {
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
	for(int i = 0; i < 1; i++) {
 800576a:	2300      	movs	r3, #0
 800576c:	607b      	str	r3, [r7, #4]
 800576e:	e035      	b.n	80057dc <do_buzz_done_init+0x78>
		TIME_PERIOD(1000);
 8005770:	4b1e      	ldr	r3, [pc, #120]	; (80057ec <do_buzz_done_init+0x88>)
 8005772:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005776:	60da      	str	r2, [r3, #12]
 8005778:	481c      	ldr	r0, [pc, #112]	; (80057ec <do_buzz_done_init+0x88>)
 800577a:	f7fb fdf1 	bl	8001360 <HAL_TIM_Base_Init>
		START();
 800577e:	2108      	movs	r1, #8
 8005780:	481a      	ldr	r0, [pc, #104]	; (80057ec <do_buzz_done_init+0x88>)
 8005782:	f7fb fe71 	bl	8001468 <HAL_TIM_OC_Start>
		osDelay(INIT_DONE_DELAY);
 8005786:	2032      	movs	r0, #50	; 0x32
 8005788:	f7fc fdc4 	bl	8002314 <osDelay>

		TIME_PERIOD(800); //major third above base note
 800578c:	4b17      	ldr	r3, [pc, #92]	; (80057ec <do_buzz_done_init+0x88>)
 800578e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005792:	60da      	str	r2, [r3, #12]
 8005794:	4815      	ldr	r0, [pc, #84]	; (80057ec <do_buzz_done_init+0x88>)
 8005796:	f7fb fde3 	bl	8001360 <HAL_TIM_Base_Init>
		osDelay(INIT_DONE_DELAY);
 800579a:	2032      	movs	r0, #50	; 0x32
 800579c:	f7fc fdba 	bl	8002314 <osDelay>

		TIME_PERIOD(666); //perfect fifth from base note
 80057a0:	4b12      	ldr	r3, [pc, #72]	; (80057ec <do_buzz_done_init+0x88>)
 80057a2:	f240 229a 	movw	r2, #666	; 0x29a
 80057a6:	60da      	str	r2, [r3, #12]
 80057a8:	4810      	ldr	r0, [pc, #64]	; (80057ec <do_buzz_done_init+0x88>)
 80057aa:	f7fb fdd9 	bl	8001360 <HAL_TIM_Base_Init>
		osDelay(INIT_DONE_DELAY);
 80057ae:	2032      	movs	r0, #50	; 0x32
 80057b0:	f7fc fdb0 	bl	8002314 <osDelay>

		TIME_PERIOD(500); //octave from base note
 80057b4:	4b0d      	ldr	r3, [pc, #52]	; (80057ec <do_buzz_done_init+0x88>)
 80057b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80057ba:	60da      	str	r2, [r3, #12]
 80057bc:	480b      	ldr	r0, [pc, #44]	; (80057ec <do_buzz_done_init+0x88>)
 80057be:	f7fb fdcf 	bl	8001360 <HAL_TIM_Base_Init>
		osDelay(INIT_DONE_DELAY);
 80057c2:	2032      	movs	r0, #50	; 0x32
 80057c4:	f7fc fda6 	bl	8002314 <osDelay>

		STOP();
 80057c8:	2108      	movs	r1, #8
 80057ca:	4808      	ldr	r0, [pc, #32]	; (80057ec <do_buzz_done_init+0x88>)
 80057cc:	f7fb fe7e 	bl	80014cc <HAL_TIM_OC_Stop>
		osDelay(INIT_DONE_PAUSE);
 80057d0:	2096      	movs	r0, #150	; 0x96
 80057d2:	f7fc fd9f 	bl	8002314 <osDelay>
	for(int i = 0; i < 1; i++) {
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3301      	adds	r3, #1
 80057da:	607b      	str	r3, [r7, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	ddc6      	ble.n	8005770 <do_buzz_done_init+0xc>
	}
}
 80057e2:	bf00      	nop
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	2000498c 	.word	0x2000498c

080057f0 <do_buzz_warn_low>:

void do_buzz_warn_low() {
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++) {
 80057f6:	2300      	movs	r3, #0
 80057f8:	607b      	str	r3, [r7, #4]
 80057fa:	e028      	b.n	800584e <do_buzz_warn_low+0x5e>
		TIME_PERIOD(125);
 80057fc:	4b17      	ldr	r3, [pc, #92]	; (800585c <do_buzz_warn_low+0x6c>)
 80057fe:	227d      	movs	r2, #125	; 0x7d
 8005800:	60da      	str	r2, [r3, #12]
 8005802:	4816      	ldr	r0, [pc, #88]	; (800585c <do_buzz_warn_low+0x6c>)
 8005804:	f7fb fdac 	bl	8001360 <HAL_TIM_Base_Init>
		START();
 8005808:	2108      	movs	r1, #8
 800580a:	4814      	ldr	r0, [pc, #80]	; (800585c <do_buzz_warn_low+0x6c>)
 800580c:	f7fb fe2c 	bl	8001468 <HAL_TIM_OC_Start>
		osDelay(WARN_BUZZ_TIME);
 8005810:	204b      	movs	r0, #75	; 0x4b
 8005812:	f7fc fd7f 	bl	8002314 <osDelay>
		TIME_PERIOD(188);
 8005816:	4b11      	ldr	r3, [pc, #68]	; (800585c <do_buzz_warn_low+0x6c>)
 8005818:	22bc      	movs	r2, #188	; 0xbc
 800581a:	60da      	str	r2, [r3, #12]
 800581c:	480f      	ldr	r0, [pc, #60]	; (800585c <do_buzz_warn_low+0x6c>)
 800581e:	f7fb fd9f 	bl	8001360 <HAL_TIM_Base_Init>
		osDelay(WARN_BUZZ_TIME);
 8005822:	204b      	movs	r0, #75	; 0x4b
 8005824:	f7fc fd76 	bl	8002314 <osDelay>
		TIME_PERIOD(250);
 8005828:	4b0c      	ldr	r3, [pc, #48]	; (800585c <do_buzz_warn_low+0x6c>)
 800582a:	22fa      	movs	r2, #250	; 0xfa
 800582c:	60da      	str	r2, [r3, #12]
 800582e:	480b      	ldr	r0, [pc, #44]	; (800585c <do_buzz_warn_low+0x6c>)
 8005830:	f7fb fd96 	bl	8001360 <HAL_TIM_Base_Init>
		osDelay(WARN_BUZZ_TIME);
 8005834:	204b      	movs	r0, #75	; 0x4b
 8005836:	f7fc fd6d 	bl	8002314 <osDelay>
		STOP();
 800583a:	2108      	movs	r1, #8
 800583c:	4807      	ldr	r0, [pc, #28]	; (800585c <do_buzz_warn_low+0x6c>)
 800583e:	f7fb fe45 	bl	80014cc <HAL_TIM_OC_Stop>

		osDelay(WARN_OFF_TIME);
 8005842:	20fa      	movs	r0, #250	; 0xfa
 8005844:	f7fc fd66 	bl	8002314 <osDelay>
	for(int i = 0; i < 8; i++) {
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3301      	adds	r3, #1
 800584c:	607b      	str	r3, [r7, #4]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b07      	cmp	r3, #7
 8005852:	ddd3      	ble.n	80057fc <do_buzz_warn_low+0xc>
	}

}
 8005854:	bf00      	nop
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	2000498c 	.word	0x2000498c

08005860 <do_buzz_warn_critical>:
void do_buzz_warn_critical() {
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++) {
 8005866:	2300      	movs	r3, #0
 8005868:	607b      	str	r3, [r7, #4]
 800586a:	e017      	b.n	800589c <do_buzz_warn_critical+0x3c>
		TIME_PERIOD(125);
 800586c:	4b0f      	ldr	r3, [pc, #60]	; (80058ac <do_buzz_warn_critical+0x4c>)
 800586e:	227d      	movs	r2, #125	; 0x7d
 8005870:	60da      	str	r2, [r3, #12]
 8005872:	480e      	ldr	r0, [pc, #56]	; (80058ac <do_buzz_warn_critical+0x4c>)
 8005874:	f7fb fd74 	bl	8001360 <HAL_TIM_Base_Init>
		START();
 8005878:	2108      	movs	r1, #8
 800587a:	480c      	ldr	r0, [pc, #48]	; (80058ac <do_buzz_warn_critical+0x4c>)
 800587c:	f7fb fdf4 	bl	8001468 <HAL_TIM_OC_Start>
		osDelay(CRITIAL_ON_TIME);
 8005880:	f44f 7061 	mov.w	r0, #900	; 0x384
 8005884:	f7fc fd46 	bl	8002314 <osDelay>

		STOP();
 8005888:	2108      	movs	r1, #8
 800588a:	4808      	ldr	r0, [pc, #32]	; (80058ac <do_buzz_warn_critical+0x4c>)
 800588c:	f7fb fe1e 	bl	80014cc <HAL_TIM_OC_Stop>
		osDelay(CRITICAL_OFF_TIME);
 8005890:	2064      	movs	r0, #100	; 0x64
 8005892:	f7fc fd3f 	bl	8002314 <osDelay>
	for(int i = 0; i < 8; i++) {
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	3301      	adds	r3, #1
 800589a:	607b      	str	r3, [r7, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b07      	cmp	r3, #7
 80058a0:	dde4      	ble.n	800586c <do_buzz_warn_critical+0xc>
	}
}
 80058a2:	bf00      	nop
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	2000498c 	.word	0x2000498c

080058b0 <doStateMachine>:

extern osThreadId_t StateMachineHandle;
extern TIM_HandleTypeDef htim2;

//basically our main code goes here
void doStateMachine(void *argument) {
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
	buzzer_init();
 80058b8:	f7ff fe60 	bl	800557c <buzzer_init>
	osDelay(100);
 80058bc:	2064      	movs	r0, #100	; 0x64
 80058be:	f7fc fd29 	bl	8002314 <osDelay>
	buzz_done_init();
 80058c2:	f7ff fe8d 	bl	80055e0 <buzz_done_init>
	osDelay(1000);
 80058c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058ca:	f7fc fd23 	bl	8002314 <osDelay>

	buzz_warn_low();
 80058ce:	f7ff fe93 	bl	80055f8 <buzz_warn_low>

	osDelay(3000);
 80058d2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80058d6:	f7fc fd1d 	bl	8002314 <osDelay>

	buzz_warn_critical();
 80058da:	f7ff fe99 	bl	8005610 <buzz_warn_critical>
	osDelay(10000);
 80058de:	f242 7010 	movw	r0, #10000	; 0x2710
 80058e2:	f7fc fd17 	bl	8002314 <osDelay>

	uint32_t buzz_stack;
	buzz_stack = buzzer_stack_space();
 80058e6:	f7ff fe9f 	bl	8005628 <buzzer_stack_space>
 80058ea:	60f8      	str	r0, [r7, #12]

	while(1) {
		osDelay(1);
 80058ec:	2001      	movs	r0, #1
 80058ee:	f7fc fd11 	bl	8002314 <osDelay>
 80058f2:	e7fb      	b.n	80058ec <doStateMachine+0x3c>

080058f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80058f8:	f7fa fdf2 	bl	80004e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80058fc:	f000 f81c 	bl	8005938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005900:	f000 f8fa 	bl	8005af8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8005904:	f000 f882 	bl	8005a0c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 8005908:	4807      	ldr	r0, [pc, #28]	; (8005928 <main+0x34>)
 800590a:	f7fb fd54 	bl	80013b6 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800590e:	f7fc fbc3 	bl	8002098 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StateMachine */
  StateMachineHandle = osThreadNew(doStateMachine, NULL, &StateMachine_attributes);
 8005912:	4a06      	ldr	r2, [pc, #24]	; (800592c <main+0x38>)
 8005914:	2100      	movs	r1, #0
 8005916:	4806      	ldr	r0, [pc, #24]	; (8005930 <main+0x3c>)
 8005918:	f7fc fc28 	bl	800216c <osThreadNew>
 800591c:	4602      	mov	r2, r0
 800591e:	4b05      	ldr	r3, [pc, #20]	; (8005934 <main+0x40>)
 8005920:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8005922:	f7fc fbed 	bl	8002100 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005926:	e7fe      	b.n	8005926 <main+0x32>
 8005928:	200049cc 	.word	0x200049cc
 800592c:	08005fcc 	.word	0x08005fcc
 8005930:	080058b1 	.word	0x080058b1
 8005934:	20004988 	.word	0x20004988

08005938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b094      	sub	sp, #80	; 0x50
 800593c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800593e:	f107 0320 	add.w	r3, r7, #32
 8005942:	2230      	movs	r2, #48	; 0x30
 8005944:	2100      	movs	r1, #0
 8005946:	4618      	mov	r0, r3
 8005948:	f000 fb13 	bl	8005f72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800594c:	f107 030c 	add.w	r3, r7, #12
 8005950:	2200      	movs	r2, #0
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	605a      	str	r2, [r3, #4]
 8005956:	609a      	str	r2, [r3, #8]
 8005958:	60da      	str	r2, [r3, #12]
 800595a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800595c:	2300      	movs	r3, #0
 800595e:	60bb      	str	r3, [r7, #8]
 8005960:	4b28      	ldr	r3, [pc, #160]	; (8005a04 <SystemClock_Config+0xcc>)
 8005962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005964:	4a27      	ldr	r2, [pc, #156]	; (8005a04 <SystemClock_Config+0xcc>)
 8005966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800596a:	6413      	str	r3, [r2, #64]	; 0x40
 800596c:	4b25      	ldr	r3, [pc, #148]	; (8005a04 <SystemClock_Config+0xcc>)
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005974:	60bb      	str	r3, [r7, #8]
 8005976:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8005978:	2300      	movs	r3, #0
 800597a:	607b      	str	r3, [r7, #4]
 800597c:	4b22      	ldr	r3, [pc, #136]	; (8005a08 <SystemClock_Config+0xd0>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005984:	4a20      	ldr	r2, [pc, #128]	; (8005a08 <SystemClock_Config+0xd0>)
 8005986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800598a:	6013      	str	r3, [r2, #0]
 800598c:	4b1e      	ldr	r3, [pc, #120]	; (8005a08 <SystemClock_Config+0xd0>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005994:	607b      	str	r3, [r7, #4]
 8005996:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005998:	2301      	movs	r3, #1
 800599a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800599c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80059a2:	2302      	movs	r3, #2
 80059a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80059a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80059aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80059ac:	2304      	movs	r3, #4
 80059ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80059b0:	2340      	movs	r3, #64	; 0x40
 80059b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80059b4:	2302      	movs	r3, #2
 80059b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80059b8:	2304      	movs	r3, #4
 80059ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80059bc:	f107 0320 	add.w	r3, r7, #32
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7fb f84d 	bl	8000a60 <HAL_RCC_OscConfig>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d001      	beq.n	80059d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80059cc:	f000 f958 	bl	8005c80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80059d0:	230f      	movs	r3, #15
 80059d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80059d4:	2302      	movs	r3, #2
 80059d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80059d8:	2300      	movs	r3, #0
 80059da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80059dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80059e2:	2300      	movs	r3, #0
 80059e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80059e6:	f107 030c 	add.w	r3, r7, #12
 80059ea:	2102      	movs	r1, #2
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7fb faa7 	bl	8000f40 <HAL_RCC_ClockConfig>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80059f8:	f000 f942 	bl	8005c80 <Error_Handler>
  }
}
 80059fc:	bf00      	nop
 80059fe:	3750      	adds	r7, #80	; 0x50
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	40023800 	.word	0x40023800
 8005a08:	40007000 	.word	0x40007000

08005a0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08e      	sub	sp, #56	; 0x38
 8005a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a16:	2200      	movs	r2, #0
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	605a      	str	r2, [r3, #4]
 8005a1c:	609a      	str	r2, [r3, #8]
 8005a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a20:	f107 0320 	add.w	r3, r7, #32
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a2a:	1d3b      	adds	r3, r7, #4
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	605a      	str	r2, [r3, #4]
 8005a32:	609a      	str	r2, [r3, #8]
 8005a34:	60da      	str	r2, [r3, #12]
 8005a36:	611a      	str	r2, [r3, #16]
 8005a38:	615a      	str	r2, [r3, #20]
 8005a3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005a3c:	4b2d      	ldr	r3, [pc, #180]	; (8005af4 <MX_TIM2_Init+0xe8>)
 8005a3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005a42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8005a44:	4b2b      	ldr	r3, [pc, #172]	; (8005af4 <MX_TIM2_Init+0xe8>)
 8005a46:	2240      	movs	r2, #64	; 0x40
 8005a48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a4a:	4b2a      	ldr	r3, [pc, #168]	; (8005af4 <MX_TIM2_Init+0xe8>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8005a50:	4b28      	ldr	r3, [pc, #160]	; (8005af4 <MX_TIM2_Init+0xe8>)
 8005a52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a58:	4b26      	ldr	r3, [pc, #152]	; (8005af4 <MX_TIM2_Init+0xe8>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a5e:	4b25      	ldr	r3, [pc, #148]	; (8005af4 <MX_TIM2_Init+0xe8>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005a64:	4823      	ldr	r0, [pc, #140]	; (8005af4 <MX_TIM2_Init+0xe8>)
 8005a66:	f7fb fc7b 	bl	8001360 <HAL_TIM_Base_Init>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8005a70:	f000 f906 	bl	8005c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a78:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005a7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a7e:	4619      	mov	r1, r3
 8005a80:	481c      	ldr	r0, [pc, #112]	; (8005af4 <MX_TIM2_Init+0xe8>)
 8005a82:	f7fb fed3 	bl	800182c <HAL_TIM_ConfigClockSource>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d001      	beq.n	8005a90 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8005a8c:	f000 f8f8 	bl	8005c80 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8005a90:	4818      	ldr	r0, [pc, #96]	; (8005af4 <MX_TIM2_Init+0xe8>)
 8005a92:	f7fb fcb4 	bl	80013fe <HAL_TIM_OC_Init>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8005a9c:	f000 f8f0 	bl	8005c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005aa8:	f107 0320 	add.w	r3, r7, #32
 8005aac:	4619      	mov	r1, r3
 8005aae:	4811      	ldr	r0, [pc, #68]	; (8005af4 <MX_TIM2_Init+0xe8>)
 8005ab0:	f7fc fa68 	bl	8001f84 <HAL_TIMEx_MasterConfigSynchronization>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8005aba:	f000 f8e1 	bl	8005c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8005abe:	2330      	movs	r3, #48	; 0x30
 8005ac0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005aca:	2300      	movs	r3, #0
 8005acc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005ace:	1d3b      	adds	r3, r7, #4
 8005ad0:	2208      	movs	r2, #8
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	4807      	ldr	r0, [pc, #28]	; (8005af4 <MX_TIM2_Init+0xe8>)
 8005ad6:	f7fb fe49 	bl	800176c <HAL_TIM_OC_ConfigChannel>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8005ae0:	f000 f8ce 	bl	8005c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005ae4:	4803      	ldr	r0, [pc, #12]	; (8005af4 <MX_TIM2_Init+0xe8>)
 8005ae6:	f000 f91f 	bl	8005d28 <HAL_TIM_MspPostInit>

}
 8005aea:	bf00      	nop
 8005aec:	3738      	adds	r7, #56	; 0x38
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	2000498c 	.word	0x2000498c

08005af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08a      	sub	sp, #40	; 0x28
 8005afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005afe:	f107 0314 	add.w	r3, r7, #20
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	605a      	str	r2, [r3, #4]
 8005b08:	609a      	str	r2, [r3, #8]
 8005b0a:	60da      	str	r2, [r3, #12]
 8005b0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005b0e:	2300      	movs	r3, #0
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	4b4d      	ldr	r3, [pc, #308]	; (8005c48 <MX_GPIO_Init+0x150>)
 8005b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b16:	4a4c      	ldr	r2, [pc, #304]	; (8005c48 <MX_GPIO_Init+0x150>)
 8005b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b1e:	4b4a      	ldr	r3, [pc, #296]	; (8005c48 <MX_GPIO_Init+0x150>)
 8005b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b26:	613b      	str	r3, [r7, #16]
 8005b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	4b46      	ldr	r3, [pc, #280]	; (8005c48 <MX_GPIO_Init+0x150>)
 8005b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b32:	4a45      	ldr	r2, [pc, #276]	; (8005c48 <MX_GPIO_Init+0x150>)
 8005b34:	f043 0302 	orr.w	r3, r3, #2
 8005b38:	6313      	str	r3, [r2, #48]	; 0x30
 8005b3a:	4b43      	ldr	r3, [pc, #268]	; (8005c48 <MX_GPIO_Init+0x150>)
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3e:	f003 0302 	and.w	r3, r3, #2
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b46:	2300      	movs	r3, #0
 8005b48:	60bb      	str	r3, [r7, #8]
 8005b4a:	4b3f      	ldr	r3, [pc, #252]	; (8005c48 <MX_GPIO_Init+0x150>)
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4e:	4a3e      	ldr	r2, [pc, #248]	; (8005c48 <MX_GPIO_Init+0x150>)
 8005b50:	f043 0304 	orr.w	r3, r3, #4
 8005b54:	6313      	str	r3, [r2, #48]	; 0x30
 8005b56:	4b3c      	ldr	r3, [pc, #240]	; (8005c48 <MX_GPIO_Init+0x150>)
 8005b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5a:	f003 0304 	and.w	r3, r3, #4
 8005b5e:	60bb      	str	r3, [r7, #8]
 8005b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b62:	2300      	movs	r3, #0
 8005b64:	607b      	str	r3, [r7, #4]
 8005b66:	4b38      	ldr	r3, [pc, #224]	; (8005c48 <MX_GPIO_Init+0x150>)
 8005b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6a:	4a37      	ldr	r2, [pc, #220]	; (8005c48 <MX_GPIO_Init+0x150>)
 8005b6c:	f043 0301 	orr.w	r3, r3, #1
 8005b70:	6313      	str	r3, [r2, #48]	; 0x30
 8005b72:	4b35      	ldr	r3, [pc, #212]	; (8005c48 <MX_GPIO_Init+0x150>)
 8005b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	607b      	str	r3, [r7, #4]
 8005b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005b7e:	2300      	movs	r3, #0
 8005b80:	603b      	str	r3, [r7, #0]
 8005b82:	4b31      	ldr	r3, [pc, #196]	; (8005c48 <MX_GPIO_Init+0x150>)
 8005b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b86:	4a30      	ldr	r2, [pc, #192]	; (8005c48 <MX_GPIO_Init+0x150>)
 8005b88:	f043 0308 	orr.w	r3, r3, #8
 8005b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b8e:	4b2e      	ldr	r3, [pc, #184]	; (8005c48 <MX_GPIO_Init+0x150>)
 8005b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	603b      	str	r3, [r7, #0]
 8005b98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED0_Pin|LED3_Pin, GPIO_PIN_RESET);
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8005ba0:	482a      	ldr	r0, [pc, #168]	; (8005c4c <MX_GPIO_Init+0x154>)
 8005ba2:	f7fa ff43 	bl	8000a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED5_Pin|LED4_Pin|LED7_Pin, GPIO_PIN_RESET);
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8005bac:	4828      	ldr	r0, [pc, #160]	; (8005c50 <MX_GPIO_Init+0x158>)
 8005bae:	f7fa ff3d 	bl	8000a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED6_Pin|LED9_Pin|LED8_Pin, GPIO_PIN_RESET);
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005bb8:	4826      	ldr	r0, [pc, #152]	; (8005c54 <MX_GPIO_Init+0x15c>)
 8005bba:	f7fa ff37 	bl	8000a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INT_OUT_GPIO_Port, INT_OUT_Pin, GPIO_PIN_RESET);
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2104      	movs	r1, #4
 8005bc2:	4825      	ldr	r0, [pc, #148]	; (8005c58 <MX_GPIO_Init+0x160>)
 8005bc4:	f7fa ff32 	bl	8000a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED0_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED0_Pin|LED3_Pin;
 8005bc8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bda:	f107 0314 	add.w	r3, r7, #20
 8005bde:	4619      	mov	r1, r3
 8005be0:	481a      	ldr	r0, [pc, #104]	; (8005c4c <MX_GPIO_Init+0x154>)
 8005be2:	f7fa fda1 	bl	8000728 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED5_Pin LED4_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED5_Pin|LED4_Pin|LED7_Pin;
 8005be6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bec:	2301      	movs	r3, #1
 8005bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005bf8:	f107 0314 	add.w	r3, r7, #20
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	4814      	ldr	r0, [pc, #80]	; (8005c50 <MX_GPIO_Init+0x158>)
 8005c00:	f7fa fd92 	bl	8000728 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED6_Pin LED9_Pin LED8_Pin */
  GPIO_InitStruct.Pin = LED6_Pin|LED9_Pin|LED8_Pin;
 8005c04:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c12:	2300      	movs	r3, #0
 8005c14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c16:	f107 0314 	add.w	r3, r7, #20
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	480d      	ldr	r0, [pc, #52]	; (8005c54 <MX_GPIO_Init+0x15c>)
 8005c1e:	f7fa fd83 	bl	8000728 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_OUT_Pin */
  GPIO_InitStruct.Pin = INT_OUT_Pin;
 8005c22:	2304      	movs	r3, #4
 8005c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c26:	2301      	movs	r3, #1
 8005c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INT_OUT_GPIO_Port, &GPIO_InitStruct);
 8005c32:	f107 0314 	add.w	r3, r7, #20
 8005c36:	4619      	mov	r1, r3
 8005c38:	4807      	ldr	r0, [pc, #28]	; (8005c58 <MX_GPIO_Init+0x160>)
 8005c3a:	f7fa fd75 	bl	8000728 <HAL_GPIO_Init>

}
 8005c3e:	bf00      	nop
 8005c40:	3728      	adds	r7, #40	; 0x28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	40023800 	.word	0x40023800
 8005c4c:	40020400 	.word	0x40020400
 8005c50:	40020800 	.word	0x40020800
 8005c54:	40020000 	.word	0x40020000
 8005c58:	40020c00 	.word	0x40020c00

08005c5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a04      	ldr	r2, [pc, #16]	; (8005c7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d101      	bne.n	8005c72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005c6e:	f7fa fc59 	bl	8000524 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005c72:	bf00      	nop
 8005c74:	3708      	adds	r7, #8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	40000c00 	.word	0x40000c00

08005c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005c84:	bf00      	nop
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
	...

08005c90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c96:	2300      	movs	r3, #0
 8005c98:	607b      	str	r3, [r7, #4]
 8005c9a:	4b12      	ldr	r3, [pc, #72]	; (8005ce4 <HAL_MspInit+0x54>)
 8005c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9e:	4a11      	ldr	r2, [pc, #68]	; (8005ce4 <HAL_MspInit+0x54>)
 8005ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8005ca6:	4b0f      	ldr	r3, [pc, #60]	; (8005ce4 <HAL_MspInit+0x54>)
 8005ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cae:	607b      	str	r3, [r7, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	603b      	str	r3, [r7, #0]
 8005cb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <HAL_MspInit+0x54>)
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	4a0a      	ldr	r2, [pc, #40]	; (8005ce4 <HAL_MspInit+0x54>)
 8005cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8005cc2:	4b08      	ldr	r3, [pc, #32]	; (8005ce4 <HAL_MspInit+0x54>)
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cca:	603b      	str	r3, [r7, #0]
 8005ccc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005cce:	2200      	movs	r2, #0
 8005cd0:	210f      	movs	r1, #15
 8005cd2:	f06f 0001 	mvn.w	r0, #1
 8005cd6:	f7fa fcfd 	bl	80006d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005cda:	bf00      	nop
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	40023800 	.word	0x40023800

08005ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf8:	d10d      	bne.n	8005d16 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	60fb      	str	r3, [r7, #12]
 8005cfe:	4b09      	ldr	r3, [pc, #36]	; (8005d24 <HAL_TIM_Base_MspInit+0x3c>)
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	4a08      	ldr	r2, [pc, #32]	; (8005d24 <HAL_TIM_Base_MspInit+0x3c>)
 8005d04:	f043 0301 	orr.w	r3, r3, #1
 8005d08:	6413      	str	r3, [r2, #64]	; 0x40
 8005d0a:	4b06      	ldr	r3, [pc, #24]	; (8005d24 <HAL_TIM_Base_MspInit+0x3c>)
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005d16:	bf00      	nop
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40023800 	.word	0x40023800

08005d28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d30:	f107 030c 	add.w	r3, r7, #12
 8005d34:	2200      	movs	r2, #0
 8005d36:	601a      	str	r2, [r3, #0]
 8005d38:	605a      	str	r2, [r3, #4]
 8005d3a:	609a      	str	r2, [r3, #8]
 8005d3c:	60da      	str	r2, [r3, #12]
 8005d3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d48:	d11e      	bne.n	8005d88 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60bb      	str	r3, [r7, #8]
 8005d4e:	4b10      	ldr	r3, [pc, #64]	; (8005d90 <HAL_TIM_MspPostInit+0x68>)
 8005d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d52:	4a0f      	ldr	r2, [pc, #60]	; (8005d90 <HAL_TIM_MspPostInit+0x68>)
 8005d54:	f043 0302 	orr.w	r3, r3, #2
 8005d58:	6313      	str	r3, [r2, #48]	; 0x30
 8005d5a:	4b0d      	ldr	r3, [pc, #52]	; (8005d90 <HAL_TIM_MspPostInit+0x68>)
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	60bb      	str	r3, [r7, #8]
 8005d64:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d70:	2300      	movs	r3, #0
 8005d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d74:	2300      	movs	r3, #0
 8005d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d7c:	f107 030c 	add.w	r3, r7, #12
 8005d80:	4619      	mov	r1, r3
 8005d82:	4804      	ldr	r0, [pc, #16]	; (8005d94 <HAL_TIM_MspPostInit+0x6c>)
 8005d84:	f7fa fcd0 	bl	8000728 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005d88:	bf00      	nop
 8005d8a:	3720      	adds	r7, #32
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40023800 	.word	0x40023800
 8005d94:	40020400 	.word	0x40020400

08005d98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b08c      	sub	sp, #48	; 0x30
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005da0:	2300      	movs	r3, #0
 8005da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005da4:	2300      	movs	r3, #0
 8005da6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8005da8:	2200      	movs	r2, #0
 8005daa:	6879      	ldr	r1, [r7, #4]
 8005dac:	2032      	movs	r0, #50	; 0x32
 8005dae:	f7fa fc91 	bl	80006d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005db2:	2032      	movs	r0, #50	; 0x32
 8005db4:	f7fa fcaa 	bl	800070c <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8005db8:	2300      	movs	r3, #0
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	4b1f      	ldr	r3, [pc, #124]	; (8005e3c <HAL_InitTick+0xa4>)
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc0:	4a1e      	ldr	r2, [pc, #120]	; (8005e3c <HAL_InitTick+0xa4>)
 8005dc2:	f043 0308 	orr.w	r3, r3, #8
 8005dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8005dc8:	4b1c      	ldr	r3, [pc, #112]	; (8005e3c <HAL_InitTick+0xa4>)
 8005dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dcc:	f003 0308 	and.w	r3, r3, #8
 8005dd0:	60fb      	str	r3, [r7, #12]
 8005dd2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005dd4:	f107 0210 	add.w	r2, r7, #16
 8005dd8:	f107 0314 	add.w	r3, r7, #20
 8005ddc:	4611      	mov	r1, r2
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fb fa8c 	bl	80012fc <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005de4:	f7fb fa76 	bl	80012d4 <HAL_RCC_GetPCLK1Freq>
 8005de8:	4603      	mov	r3, r0
 8005dea:	005b      	lsls	r3, r3, #1
 8005dec:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df0:	4a13      	ldr	r2, [pc, #76]	; (8005e40 <HAL_InitTick+0xa8>)
 8005df2:	fba2 2303 	umull	r2, r3, r2, r3
 8005df6:	0c9b      	lsrs	r3, r3, #18
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8005dfc:	4b11      	ldr	r3, [pc, #68]	; (8005e44 <HAL_InitTick+0xac>)
 8005dfe:	4a12      	ldr	r2, [pc, #72]	; (8005e48 <HAL_InitTick+0xb0>)
 8005e00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8005e02:	4b10      	ldr	r3, [pc, #64]	; (8005e44 <HAL_InitTick+0xac>)
 8005e04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005e08:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8005e0a:	4a0e      	ldr	r2, [pc, #56]	; (8005e44 <HAL_InitTick+0xac>)
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8005e10:	4b0c      	ldr	r3, [pc, #48]	; (8005e44 <HAL_InitTick+0xac>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e16:	4b0b      	ldr	r3, [pc, #44]	; (8005e44 <HAL_InitTick+0xac>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8005e1c:	4809      	ldr	r0, [pc, #36]	; (8005e44 <HAL_InitTick+0xac>)
 8005e1e:	f7fb fa9f 	bl	8001360 <HAL_TIM_Base_Init>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d104      	bne.n	8005e32 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8005e28:	4806      	ldr	r0, [pc, #24]	; (8005e44 <HAL_InitTick+0xac>)
 8005e2a:	f7fb fac4 	bl	80013b6 <HAL_TIM_Base_Start_IT>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	e000      	b.n	8005e34 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3730      	adds	r7, #48	; 0x30
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	40023800 	.word	0x40023800
 8005e40:	431bde83 	.word	0x431bde83
 8005e44:	200049cc 	.word	0x200049cc
 8005e48:	40000c00 	.word	0x40000c00

08005e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005e50:	bf00      	nop
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e5e:	e7fe      	b.n	8005e5e <HardFault_Handler+0x4>

08005e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e64:	e7fe      	b.n	8005e64 <MemManage_Handler+0x4>

08005e66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e66:	b480      	push	{r7}
 8005e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e6a:	e7fe      	b.n	8005e6a <BusFault_Handler+0x4>

08005e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e70:	e7fe      	b.n	8005e70 <UsageFault_Handler+0x4>

08005e72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e72:	b480      	push	{r7}
 8005e74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e76:	bf00      	nop
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005e84:	4802      	ldr	r0, [pc, #8]	; (8005e90 <TIM5_IRQHandler+0x10>)
 8005e86:	f7fb fb69 	bl	800155c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005e8a:	bf00      	nop
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	200049cc 	.word	0x200049cc

08005e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005e94:	b480      	push	{r7}
 8005e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e98:	4b08      	ldr	r3, [pc, #32]	; (8005ebc <SystemInit+0x28>)
 8005e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9e:	4a07      	ldr	r2, [pc, #28]	; (8005ebc <SystemInit+0x28>)
 8005ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005ea8:	4b04      	ldr	r3, [pc, #16]	; (8005ebc <SystemInit+0x28>)
 8005eaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005eae:	609a      	str	r2, [r3, #8]
#endif
}
 8005eb0:	bf00      	nop
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	e000ed00 	.word	0xe000ed00

08005ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005ef8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005ec4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005ec6:	e003      	b.n	8005ed0 <LoopCopyDataInit>

08005ec8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005ec8:	4b0c      	ldr	r3, [pc, #48]	; (8005efc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005eca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005ecc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005ece:	3104      	adds	r1, #4

08005ed0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005ed0:	480b      	ldr	r0, [pc, #44]	; (8005f00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005ed2:	4b0c      	ldr	r3, [pc, #48]	; (8005f04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005ed4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005ed6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005ed8:	d3f6      	bcc.n	8005ec8 <CopyDataInit>
  ldr  r2, =_sbss
 8005eda:	4a0b      	ldr	r2, [pc, #44]	; (8005f08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005edc:	e002      	b.n	8005ee4 <LoopFillZerobss>

08005ede <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005ede:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005ee0:	f842 3b04 	str.w	r3, [r2], #4

08005ee4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005ee4:	4b09      	ldr	r3, [pc, #36]	; (8005f0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005ee6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005ee8:	d3f9      	bcc.n	8005ede <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005eea:	f7ff ffd3 	bl	8005e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005eee:	f000 f811 	bl	8005f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005ef2:	f7ff fcff 	bl	80058f4 <main>
  bx  lr    
 8005ef6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005ef8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8005efc:	08006018 	.word	0x08006018
  ldr  r0, =_sdata
 8005f00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005f04:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8005f08:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8005f0c:	20004a0c 	.word	0x20004a0c

08005f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005f10:	e7fe      	b.n	8005f10 <ADC_IRQHandler>
	...

08005f14 <__libc_init_array>:
 8005f14:	b570      	push	{r4, r5, r6, lr}
 8005f16:	4e0d      	ldr	r6, [pc, #52]	; (8005f4c <__libc_init_array+0x38>)
 8005f18:	4c0d      	ldr	r4, [pc, #52]	; (8005f50 <__libc_init_array+0x3c>)
 8005f1a:	1ba4      	subs	r4, r4, r6
 8005f1c:	10a4      	asrs	r4, r4, #2
 8005f1e:	2500      	movs	r5, #0
 8005f20:	42a5      	cmp	r5, r4
 8005f22:	d109      	bne.n	8005f38 <__libc_init_array+0x24>
 8005f24:	4e0b      	ldr	r6, [pc, #44]	; (8005f54 <__libc_init_array+0x40>)
 8005f26:	4c0c      	ldr	r4, [pc, #48]	; (8005f58 <__libc_init_array+0x44>)
 8005f28:	f000 f82c 	bl	8005f84 <_init>
 8005f2c:	1ba4      	subs	r4, r4, r6
 8005f2e:	10a4      	asrs	r4, r4, #2
 8005f30:	2500      	movs	r5, #0
 8005f32:	42a5      	cmp	r5, r4
 8005f34:	d105      	bne.n	8005f42 <__libc_init_array+0x2e>
 8005f36:	bd70      	pop	{r4, r5, r6, pc}
 8005f38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f3c:	4798      	blx	r3
 8005f3e:	3501      	adds	r5, #1
 8005f40:	e7ee      	b.n	8005f20 <__libc_init_array+0xc>
 8005f42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f46:	4798      	blx	r3
 8005f48:	3501      	adds	r5, #1
 8005f4a:	e7f2      	b.n	8005f32 <__libc_init_array+0x1e>
 8005f4c:	08006010 	.word	0x08006010
 8005f50:	08006010 	.word	0x08006010
 8005f54:	08006010 	.word	0x08006010
 8005f58:	08006014 	.word	0x08006014

08005f5c <memcpy>:
 8005f5c:	b510      	push	{r4, lr}
 8005f5e:	1e43      	subs	r3, r0, #1
 8005f60:	440a      	add	r2, r1
 8005f62:	4291      	cmp	r1, r2
 8005f64:	d100      	bne.n	8005f68 <memcpy+0xc>
 8005f66:	bd10      	pop	{r4, pc}
 8005f68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f70:	e7f7      	b.n	8005f62 <memcpy+0x6>

08005f72 <memset>:
 8005f72:	4402      	add	r2, r0
 8005f74:	4603      	mov	r3, r0
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d100      	bne.n	8005f7c <memset+0xa>
 8005f7a:	4770      	bx	lr
 8005f7c:	f803 1b01 	strb.w	r1, [r3], #1
 8005f80:	e7f9      	b.n	8005f76 <memset+0x4>
	...

08005f84 <_init>:
 8005f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f86:	bf00      	nop
 8005f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f8a:	bc08      	pop	{r3}
 8005f8c:	469e      	mov	lr, r3
 8005f8e:	4770      	bx	lr

08005f90 <_fini>:
 8005f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f92:	bf00      	nop
 8005f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f96:	bc08      	pop	{r3}
 8005f98:	469e      	mov	lr, r3
 8005f9a:	4770      	bx	lr
