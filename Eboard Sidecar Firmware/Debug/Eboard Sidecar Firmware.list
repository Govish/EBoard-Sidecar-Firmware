
Eboard Sidecar Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010784  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08010928  08010928  00020928  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c50  08010c50  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  08010c50  08010c50  00020c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010c58  08010c58  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010c58  08010c58  00020c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010c5c  08010c5c  00020c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08010c60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a8d8  20000354  08010fb4  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000ac2c  08010fb4  0003ac2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a6ad  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005848  00000000  00000000  0005aa31  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001cb8  00000000  00000000  00060280  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a40  00000000  00000000  00061f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001db86  00000000  00000000  00063978  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d392  00000000  00000000  000814fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009f18b  00000000  00000000  0009e890  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013da1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dcc  00000000  00000000  0013da98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000354 	.word	0x20000354
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801090c 	.word	0x0801090c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000358 	.word	0x20000358
 80001dc:	0801090c 	.word	0x0801090c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2f>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b20:	bf24      	itt	cs
 8000b22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2a:	d90d      	bls.n	8000b48 <__aeabi_d2f+0x30>
 8000b2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b40:	bf08      	it	eq
 8000b42:	f020 0001 	biceq.w	r0, r0, #1
 8000b46:	4770      	bx	lr
 8000b48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b4c:	d121      	bne.n	8000b92 <__aeabi_d2f+0x7a>
 8000b4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b52:	bfbc      	itt	lt
 8000b54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	4770      	bxlt	lr
 8000b5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b62:	f1c2 0218 	rsb	r2, r2, #24
 8000b66:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b72:	bf18      	it	ne
 8000b74:	f040 0001 	orrne.w	r0, r0, #1
 8000b78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b84:	ea40 000c 	orr.w	r0, r0, ip
 8000b88:	fa23 f302 	lsr.w	r3, r3, r2
 8000b8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b90:	e7cc      	b.n	8000b2c <__aeabi_d2f+0x14>
 8000b92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b96:	d107      	bne.n	8000ba8 <__aeabi_d2f+0x90>
 8000b98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b9c:	bf1e      	ittt	ne
 8000b9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba6:	4770      	bxne	lr
 8000ba8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <bargraph_output>:

//simple wrapper header file for the ports and pins

//set the bargraph LED pins according to the value passed into this function
//similar to the busOut() interface in MBed
void bargraph_output(uint16_t states) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, (states & 1<<0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	461a      	mov	r2, r3
 8000ece:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ed2:	4838      	ldr	r0, [pc, #224]	; (8000fb4 <bargraph_output+0xfc>)
 8000ed4:	f003 fe2e 	bl	8004b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, (states & 1<<1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	105b      	asrs	r3, r3, #1
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eea:	4832      	ldr	r0, [pc, #200]	; (8000fb4 <bargraph_output+0xfc>)
 8000eec:	f003 fe22 	bl	8004b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, (states & 1<<2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	109b      	asrs	r3, r3, #2
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	461a      	mov	r2, r3
 8000efe:	2140      	movs	r1, #64	; 0x40
 8000f00:	482d      	ldr	r0, [pc, #180]	; (8000fb8 <bargraph_output+0x100>)
 8000f02:	f003 fe17 	bl	8004b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, (states & 1<<3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	10db      	asrs	r3, r3, #3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	461a      	mov	r2, r3
 8000f14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f18:	4826      	ldr	r0, [pc, #152]	; (8000fb4 <bargraph_output+0xfc>)
 8000f1a:	f003 fe0b 	bl	8004b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, (states & 1<<4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	111b      	asrs	r3, r3, #4
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f30:	4821      	ldr	r0, [pc, #132]	; (8000fb8 <bargraph_output+0x100>)
 8000f32:	f003 fdff 	bl	8004b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, (states & 1<<5) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	115b      	asrs	r3, r3, #5
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	461a      	mov	r2, r3
 8000f44:	2180      	movs	r1, #128	; 0x80
 8000f46:	481c      	ldr	r0, [pc, #112]	; (8000fb8 <bargraph_output+0x100>)
 8000f48:	f003 fdf4 	bl	8004b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, (states & 1<<6) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	119b      	asrs	r3, r3, #6
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5e:	4817      	ldr	r0, [pc, #92]	; (8000fbc <bargraph_output+0x104>)
 8000f60:	f003 fde8 	bl	8004b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, (states & 1<<7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000f64:	88fb      	ldrh	r3, [r7, #6]
 8000f66:	11db      	asrs	r3, r3, #7
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	461a      	mov	r2, r3
 8000f72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f76:	4810      	ldr	r0, [pc, #64]	; (8000fb8 <bargraph_output+0x100>)
 8000f78:	f003 fddc 	bl	8004b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, (states & 1<<8) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	121b      	asrs	r3, r3, #8
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	461a      	mov	r2, r3
 8000f8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f8e:	480b      	ldr	r0, [pc, #44]	; (8000fbc <bargraph_output+0x104>)
 8000f90:	f003 fdd0 	bl	8004b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, (states & 1<<9) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	125b      	asrs	r3, r3, #9
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <bargraph_output+0x104>)
 8000fa8:	f003 fdc4 	bl	8004b34 <HAL_GPIO_WritePin>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40020400 	.word	0x40020400
 8000fb8:	40020800 	.word	0x40020800
 8000fbc:	40020000 	.word	0x40020000

08000fc0 <bargraph_init>:
//====================== PRIVATE FUNCTION PROTOTYPES ======================
static void draw_bargraph(void *argument); //runs in a thread context
static void animate_bargraph(void *argument); //runs in a thread context

//====================== PUBLIC FUNCTIONS =========================
void bargraph_init(osMessageQueueId_t soc_buf_id) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b094      	sub	sp, #80	; 0x50
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	//create the flags to notify the status of the animation thread
	//want to tell the "draw_soc" function whether the animator is running or not
	animator_run_flags = osEventFlagsNew(NULL);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f009 fc85 	bl	800a8d8 <osEventFlagsNew>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	; (800104c <bargraph_init+0x8c>)
 8000fd2:	601a      	str	r2, [r3, #0]

	//create the queue to send the bytes to the draw buffer
	//just need one element to ferry the new "image" over to the thread safely
	drawbuf_queue = osMessageQueueNew(1, sizeof(uint16_t), NULL);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f009 fe15 	bl	800ac08 <osMessageQueueNew>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <bargraph_init+0x90>)
 8000fe2:	601a      	str	r2, [r3, #0]

	//create the bargraph drawing thread
	const osThreadAttr_t draw_attributes = {
 8000fe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe8:	2224      	movs	r2, #36	; 0x24
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f00d ff24 	bl	800ee3a <memset>
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <bargraph_init+0x94>)
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ff6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ffa:	643b      	str	r3, [r7, #64]	; 0x40
 8000ffc:	2328      	movs	r3, #40	; 0x28
 8000ffe:	647b      	str	r3, [r7, #68]	; 0x44
			.name = "draw",
			.priority = (osPriority_t) osPriorityHigh,
			.stack_size = 256
	};
	//suspends itself right at startup
	drawHandle = osThreadNew(draw_bargraph, NULL, &draw_attributes);
 8001000:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001004:	461a      	mov	r2, r3
 8001006:	2100      	movs	r1, #0
 8001008:	4813      	ldr	r0, [pc, #76]	; (8001058 <bargraph_init+0x98>)
 800100a:	f009 fae9 	bl	800a5e0 <osThreadNew>
 800100e:	4602      	mov	r2, r0
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <bargraph_init+0x9c>)
 8001012:	601a      	str	r2, [r3, #0]

	//start a new animation thread too
	//this thread immediately suspends itself until it gets resumed by the draw_soc function
	//pass the soc_buf_id to the animator handle to grab the SOC value from
	const osThreadAttr_t animator_attributes = {
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	2224      	movs	r2, #36	; 0x24
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f00d ff0c 	bl	800ee3a <memset>
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <bargraph_init+0xa0>)
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800102a:	61fb      	str	r3, [r7, #28]
 800102c:	2320      	movs	r3, #32
 800102e:	623b      	str	r3, [r7, #32]
			.name = "animator",
			.priority = (osPriority_t) osPriorityAboveNormal,
			.stack_size = 512
	};
	animatorHandle = osThreadNew(animate_bargraph, (void*)soc_buf_id, &animator_attributes);
 8001030:	f107 0308 	add.w	r3, r7, #8
 8001034:	461a      	mov	r2, r3
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	480a      	ldr	r0, [pc, #40]	; (8001064 <bargraph_init+0xa4>)
 800103a:	f009 fad1 	bl	800a5e0 <osThreadNew>
 800103e:	4602      	mov	r2, r0
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <bargraph_init+0xa8>)
 8001042:	601a      	str	r2, [r3, #0]
}
 8001044:	bf00      	nop
 8001046:	3750      	adds	r7, #80	; 0x50
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000374 	.word	0x20000374
 8001050:	20000370 	.word	0x20000370
 8001054:	08010928 	.word	0x08010928
 8001058:	080012e5 	.word	0x080012e5
 800105c:	20000378 	.word	0x20000378
 8001060:	08010930 	.word	0x08010930
 8001064:	080010a5 	.word	0x080010a5
 8001068:	2000037c 	.word	0x2000037c

0800106c <bargraph_draw_soc>:

//draw a particular SOC on the bargraph display
void bargraph_draw_soc() {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
	//only restart the animation when the animator is suspended
	if(osEventFlagsGet(animator_run_flags) & ANIMATOR_READY) {
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <bargraph_draw_soc+0x34>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f009 fd1c 	bl	800aab4 <osEventFlagsGet>
 800107c:	4603      	mov	r3, r0
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	d007      	beq.n	8001096 <bargraph_draw_soc+0x2a>
		osStatus_t status;
		status = osEventFlagsSet(animator_run_flags, RUN_ANIMATION);
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <bargraph_draw_soc+0x34>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2102      	movs	r1, #2
 800108c:	4618      	mov	r0, r3
 800108e:	f009 fc75 	bl	800a97c <osEventFlagsSet>
 8001092:	4603      	mov	r3, r0
 8001094:	607b      	str	r3, [r7, #4]
		UNUSED(status);
	}
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000374 	.word	0x20000374

080010a4 <animate_bargraph>:

//===================== PRIVATE/THREAD FUNCTION DEFINITIONS ====================

//draw the SOC animation on the LED bargraph
//gets called in a thread context
void animate_bargraph(void* argument) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	osMessageQueueId_t soc_queue;
	soc_queue = (osMessageQueueId_t)argument; //grab the message queue ID of the soc buffer (and cast it correctly)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	61bb      	str	r3, [r7, #24]
	float soc = 0;
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]

	osEventFlagsClear(animator_run_flags, RUN_ANIMATION); //make sure the run flag is cleared on startup
 80010b6:	4b87      	ldr	r3, [pc, #540]	; (80012d4 <animate_bargraph+0x230>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2102      	movs	r1, #2
 80010bc:	4618      	mov	r0, r3
 80010be:	f009 fcb5 	bl	800aa2c <osEventFlagsClear>

	while(true) {
		//suspend this thread on startup
		osEventFlagsSet(animator_run_flags, ANIMATOR_READY); //ready to re-run animation
 80010c2:	4b84      	ldr	r3, [pc, #528]	; (80012d4 <animate_bargraph+0x230>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2101      	movs	r1, #1
 80010c8:	4618      	mov	r0, r3
 80010ca:	f009 fc57 	bl	800a97c <osEventFlagsSet>
		osEventFlagsWait(animator_run_flags, RUN_ANIMATION, osFlagsWaitAny, osWaitForever);
 80010ce:	4b81      	ldr	r3, [pc, #516]	; (80012d4 <animate_bargraph+0x230>)
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	2200      	movs	r2, #0
 80010d8:	2102      	movs	r1, #2
 80010da:	f009 fd1f 	bl	800ab1c <osEventFlagsWait>

		//============= resuming the animation thread ==========
		uint16_t display_buffer = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	817b      	strh	r3, [r7, #10]
		osEventFlagsClear(animator_run_flags, ANIMATOR_READY); //running animation, clear flags
 80010e2:	4b7c      	ldr	r3, [pc, #496]	; (80012d4 <animate_bargraph+0x230>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2101      	movs	r1, #1
 80010e8:	4618      	mov	r0, r3
 80010ea:	f009 fc9f 	bl	800aa2c <osEventFlagsClear>
		//pull the SOC from the queue
		if(osMessageQueueGetCount(soc_queue) > 0) {
 80010ee:	69b8      	ldr	r0, [r7, #24]
 80010f0:	f009 fef6 	bl	800aee0 <osMessageQueueGetCount>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d007      	beq.n	800110a <animate_bargraph+0x66>
			osStatus_t status; //storing status for debugging purposes
			status = osMessageQueueGet(soc_queue, &soc, NULL, 0);
 80010fa:	f107 010c 	add.w	r1, r7, #12
 80010fe:	2300      	movs	r3, #0
 8001100:	2200      	movs	r2, #0
 8001102:	69b8      	ldr	r0, [r7, #24]
 8001104:	f009 fe7a 	bl	800adfc <osMessageQueueGet>
 8001108:	6178      	str	r0, [r7, #20]
			UNUSED(status);
		}
		Q_UPDATE(drawbuf_queue, display_buffer); //start with drawing nothing
 800110a:	4b73      	ldr	r3, [pc, #460]	; (80012d8 <animate_bargraph+0x234>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f009 ff18 	bl	800af44 <osMessageQueueReset>
 8001114:	4b70      	ldr	r3, [pc, #448]	; (80012d8 <animate_bargraph+0x234>)
 8001116:	6818      	ldr	r0, [r3, #0]
 8001118:	f107 010a 	add.w	r1, r7, #10
 800111c:	2300      	movs	r3, #0
 800111e:	2200      	movs	r2, #0
 8001120:	f009 fdf8 	bl	800ad14 <osMessageQueuePut>
		osThreadResume(drawHandle); //restart the draw thread
 8001124:	4b6d      	ldr	r3, [pc, #436]	; (80012dc <animate_bargraph+0x238>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f009 fb33 	bl	800a794 <osThreadResume>

		//================= running the animation =================
		soc = soc >= 1 ? 0.999 : (soc < 0 ? 0 : soc); //constraining SOC between 0 and 1 exclusive
 800112e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001132:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800113a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113e:	db01      	blt.n	8001144 <animate_bargraph+0xa0>
 8001140:	4b67      	ldr	r3, [pc, #412]	; (80012e0 <animate_bargraph+0x23c>)
 8001142:	e00a      	b.n	800115a <animate_bargraph+0xb6>
 8001144:	edd7 7a03 	vldr	s15, [r7, #12]
 8001148:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800114c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001150:	d502      	bpl.n	8001158 <animate_bargraph+0xb4>
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	e000      	b.n	800115a <animate_bargraph+0xb6>
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	60fb      	str	r3, [r7, #12]
		//gives us an integer version of the SOC that we can work with to draw the bargraph
		//a "solid" light will denote a x6-10 SOC
		//i.e. a full SOC (96-100%) will have all lights lit
		//and a 54% SOC will have the first 5 lights be solid and the 6th light blinking
		uint8_t scaled_soc = (uint8_t)(soc*20);
 800115c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001160:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800116c:	edc7 7a00 	vstr	s15, [r7]
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	74fb      	strb	r3, [r7, #19]

		//flash the bottom most LED if the SOC is "critical"
		//involves updating display buffer, clearing the queue, and pushing it into the queue
		if(scaled_soc < 1) {
 8001174:	7cfb      	ldrb	r3, [r7, #19]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d12d      	bne.n	80011d6 <animate_bargraph+0x132>
			for(int i = 0; i < CRITICAL_FLASH_COUNT; i++) {
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
 800117e:	e026      	b.n	80011ce <animate_bargraph+0x12a>
				display_buffer = 1;
 8001180:	2301      	movs	r3, #1
 8001182:	817b      	strh	r3, [r7, #10]
				Q_UPDATE(drawbuf_queue, display_buffer);
 8001184:	4b54      	ldr	r3, [pc, #336]	; (80012d8 <animate_bargraph+0x234>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f009 fedb 	bl	800af44 <osMessageQueueReset>
 800118e:	4b52      	ldr	r3, [pc, #328]	; (80012d8 <animate_bargraph+0x234>)
 8001190:	6818      	ldr	r0, [r3, #0]
 8001192:	f107 010a 	add.w	r1, r7, #10
 8001196:	2300      	movs	r3, #0
 8001198:	2200      	movs	r2, #0
 800119a:	f009 fdbb 	bl	800ad14 <osMessageQueuePut>
				osDelay(CRITICAL_FLASH_RATE);
 800119e:	204b      	movs	r0, #75	; 0x4b
 80011a0:	f009 fb6c 	bl	800a87c <osDelay>

				display_buffer = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	817b      	strh	r3, [r7, #10]
				Q_UPDATE(drawbuf_queue, display_buffer);
 80011a8:	4b4b      	ldr	r3, [pc, #300]	; (80012d8 <animate_bargraph+0x234>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f009 fec9 	bl	800af44 <osMessageQueueReset>
 80011b2:	4b49      	ldr	r3, [pc, #292]	; (80012d8 <animate_bargraph+0x234>)
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	f107 010a 	add.w	r1, r7, #10
 80011ba:	2300      	movs	r3, #0
 80011bc:	2200      	movs	r2, #0
 80011be:	f009 fda9 	bl	800ad14 <osMessageQueuePut>
				osDelay(CRITICAL_FLASH_RATE);
 80011c2:	204b      	movs	r0, #75	; 0x4b
 80011c4:	f009 fb5a 	bl	800a87c <osDelay>
			for(int i = 0; i < CRITICAL_FLASH_COUNT; i++) {
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	3301      	adds	r3, #1
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	2b09      	cmp	r3, #9
 80011d2:	ddd5      	ble.n	8001180 <animate_bargraph+0xdc>
 80011d4:	e074      	b.n	80012c0 <animate_bargraph+0x21c>
		}

		//if the SOC is greater than 5%
		else {
			//draw an animation to light up all the "solid lights" before the last one
			display_buffer = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	817b      	strh	r3, [r7, #10]
			for(int i = 0; i < (scaled_soc>>1); i++) {
 80011da:	2300      	movs	r3, #0
 80011dc:	623b      	str	r3, [r7, #32]
 80011de:	e01d      	b.n	800121c <animate_bargraph+0x178>
				display_buffer |= (1<<i);
 80011e0:	2201      	movs	r2, #1
 80011e2:	6a3b      	ldr	r3, [r7, #32]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	897b      	ldrh	r3, [r7, #10]
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	817b      	strh	r3, [r7, #10]
				Q_UPDATE(drawbuf_queue, display_buffer);
 80011f6:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <animate_bargraph+0x234>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f009 fea2 	bl	800af44 <osMessageQueueReset>
 8001200:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <animate_bargraph+0x234>)
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	f107 010a 	add.w	r1, r7, #10
 8001208:	2300      	movs	r3, #0
 800120a:	2200      	movs	r2, #0
 800120c:	f009 fd82 	bl	800ad14 <osMessageQueuePut>
				osDelay(BUILDUP_DELAY);
 8001210:	2032      	movs	r0, #50	; 0x32
 8001212:	f009 fb33 	bl	800a87c <osDelay>
			for(int i = 0; i < (scaled_soc>>1); i++) {
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	3301      	adds	r3, #1
 800121a:	623b      	str	r3, [r7, #32]
 800121c:	7cfb      	ldrb	r3, [r7, #19]
 800121e:	085b      	lsrs	r3, r3, #1
 8001220:	b2db      	uxtb	r3, r3
 8001222:	461a      	mov	r2, r3
 8001224:	6a3b      	ldr	r3, [r7, #32]
 8001226:	4293      	cmp	r3, r2
 8001228:	dbda      	blt.n	80011e0 <animate_bargraph+0x13c>
			}

			//if the top number is odd, then make the LED solid
			if(scaled_soc & 0x01) {
 800122a:	7cfb      	ldrb	r3, [r7, #19]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	2b00      	cmp	r3, #0
 8001232:	d01e      	beq.n	8001272 <animate_bargraph+0x1ce>
				display_buffer |= (1 << (scaled_soc >> 1)); //add the extra LED lit up
 8001234:	7cfb      	ldrb	r3, [r7, #19]
 8001236:	085b      	lsrs	r3, r3, #1
 8001238:	b2db      	uxtb	r3, r3
 800123a:	461a      	mov	r2, r3
 800123c:	2301      	movs	r3, #1
 800123e:	4093      	lsls	r3, r2
 8001240:	b21a      	sxth	r2, r3
 8001242:	897b      	ldrh	r3, [r7, #10]
 8001244:	b21b      	sxth	r3, r3
 8001246:	4313      	orrs	r3, r2
 8001248:	b21b      	sxth	r3, r3
 800124a:	b29b      	uxth	r3, r3
 800124c:	817b      	strh	r3, [r7, #10]
				Q_UPDATE(drawbuf_queue, display_buffer);
 800124e:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <animate_bargraph+0x234>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f009 fe76 	bl	800af44 <osMessageQueueReset>
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <animate_bargraph+0x234>)
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	f107 010a 	add.w	r1, r7, #10
 8001260:	2300      	movs	r3, #0
 8001262:	2200      	movs	r2, #0
 8001264:	f009 fd56 	bl	800ad14 <osMessageQueuePut>
				osDelay(FLASH_DELAY * FLASH_COUNT * 2);
 8001268:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800126c:	f009 fb06 	bl	800a87c <osDelay>
 8001270:	e026      	b.n	80012c0 <animate_bargraph+0x21c>
			}

			//if the scaled SOC is even, flash the top LED
			else {
				for(int i = 0; i < FLASH_COUNT<<1; i++) {
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	e020      	b.n	80012ba <animate_bargraph+0x216>
					display_buffer ^= 1 << (scaled_soc>>1); //toggle this particular bit in the buffer
 8001278:	7cfb      	ldrb	r3, [r7, #19]
 800127a:	085b      	lsrs	r3, r3, #1
 800127c:	b2db      	uxtb	r3, r3
 800127e:	461a      	mov	r2, r3
 8001280:	2301      	movs	r3, #1
 8001282:	4093      	lsls	r3, r2
 8001284:	b21a      	sxth	r2, r3
 8001286:	897b      	ldrh	r3, [r7, #10]
 8001288:	b21b      	sxth	r3, r3
 800128a:	4053      	eors	r3, r2
 800128c:	b21b      	sxth	r3, r3
 800128e:	b29b      	uxth	r3, r3
 8001290:	817b      	strh	r3, [r7, #10]
					Q_UPDATE(drawbuf_queue, display_buffer);
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <animate_bargraph+0x234>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f009 fe54 	bl	800af44 <osMessageQueueReset>
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <animate_bargraph+0x234>)
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	f107 010a 	add.w	r1, r7, #10
 80012a4:	2300      	movs	r3, #0
 80012a6:	2200      	movs	r2, #0
 80012a8:	f009 fd34 	bl	800ad14 <osMessageQueuePut>
					osDelay(FLASH_DELAY);
 80012ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012b0:	f009 fae4 	bl	800a87c <osDelay>
				for(int i = 0; i < FLASH_COUNT<<1; i++) {
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	3301      	adds	r3, #1
 80012b8:	61fb      	str	r3, [r7, #28]
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	2b07      	cmp	r3, #7
 80012be:	dddb      	ble.n	8001278 <animate_bargraph+0x1d4>
				}
			}
		}

		//====== shutting the draw thread down ======
		osThreadSuspend(drawHandle); //suspend the drawing thread since we're done animating
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <animate_bargraph+0x238>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f009 fa31 	bl	800a72c <osThreadSuspend>
		bargraph_output(0); //clear the bargraph pins
 80012ca:	2000      	movs	r0, #0
 80012cc:	f7ff fdf4 	bl	8000eb8 <bargraph_output>
	while(true) {
 80012d0:	e6f7      	b.n	80010c2 <animate_bargraph+0x1e>
 80012d2:	bf00      	nop
 80012d4:	20000374 	.word	0x20000374
 80012d8:	20000370 	.word	0x20000370
 80012dc:	20000378 	.word	0x20000378
 80012e0:	3f7fbe77 	.word	0x3f7fbe77

080012e4 <draw_bargraph>:


//draws the bargraph
//gets called in a thread context
//@param argument: doesn't matter, not used
static void draw_bargraph(void *argument) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	uint16_t draw_buffer = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	81fb      	strh	r3, [r7, #14]
	bool polarity = false; //tells us whether we're drawing odds or evens
 80012f0:	2300      	movs	r3, #0
 80012f2:	75fb      	strb	r3, [r7, #23]
	osThreadSuspend(drawHandle); //suspend right at startup
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <draw_bargraph+0x88>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f009 fa17 	bl	800a72c <osThreadSuspend>

	while(true) {
		//if we have a new message from the queue, update the draw buffer
		if(osMessageQueueGetCount(drawbuf_queue) > 0) {
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <draw_bargraph+0x8c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f009 fdec 	bl	800aee0 <osMessageQueueGetCount>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d008      	beq.n	8001320 <draw_bargraph+0x3c>
			osStatus_t status; //storing status for debugging purposes
			status = osMessageQueueGet(drawbuf_queue, &draw_buffer, NULL, 0);
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <draw_bargraph+0x8c>)
 8001310:	6818      	ldr	r0, [r3, #0]
 8001312:	f107 010e 	add.w	r1, r7, #14
 8001316:	2300      	movs	r3, #0
 8001318:	2200      	movs	r2, #0
 800131a:	f009 fd6f 	bl	800adfc <osMessageQueueGet>
 800131e:	6138      	str	r0, [r7, #16]
			UNUSED(status);
		}

		if(polarity) bargraph_output(draw_buffer & 0x155); //turn on the corresponding ODD leds according to the display buffer
 8001320:	7dfb      	ldrb	r3, [r7, #23]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d008      	beq.n	8001338 <draw_bargraph+0x54>
 8001326:	89fa      	ldrh	r2, [r7, #14]
 8001328:	f240 1355 	movw	r3, #341	; 0x155
 800132c:	4013      	ands	r3, r2
 800132e:	b29b      	uxth	r3, r3
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fdc1 	bl	8000eb8 <bargraph_output>
 8001336:	e007      	b.n	8001348 <draw_bargraph+0x64>
		else bargraph_output(draw_buffer & 0x2AA); //turn on the corresponding EVEN leds according to the display buffer
 8001338:	89fa      	ldrh	r2, [r7, #14]
 800133a:	f240 23aa 	movw	r3, #682	; 0x2aa
 800133e:	4013      	ands	r3, r2
 8001340:	b29b      	uxth	r3, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fdb8 	bl	8000eb8 <bargraph_output>
		polarity = !polarity;
 8001348:	7dfb      	ldrb	r3, [r7, #23]
 800134a:	2b00      	cmp	r3, #0
 800134c:	bf14      	ite	ne
 800134e:	2301      	movne	r3, #1
 8001350:	2300      	moveq	r3, #0
 8001352:	b2db      	uxtb	r3, r3
 8001354:	f083 0301 	eor.w	r3, r3, #1
 8001358:	b2db      	uxtb	r3, r3
 800135a:	75fb      	strb	r3, [r7, #23]
 800135c:	7dfb      	ldrb	r3, [r7, #23]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	75fb      	strb	r3, [r7, #23]

		//delay for the next screen update
		osDelay(BARGRAPH_UPDATE_DELAY);
 8001364:	2002      	movs	r0, #2
 8001366:	f009 fa89 	bl	800a87c <osDelay>
		if(osMessageQueueGetCount(drawbuf_queue) > 0) {
 800136a:	e7c8      	b.n	80012fe <draw_bargraph+0x1a>
 800136c:	20000378 	.word	0x20000378
 8001370:	20000370 	.word	0x20000370

08001374 <monitor_init>:
//perform an ADC DMA read
//return type is os status e.g. osOK
static uint32_t do_adc_dma(ADC_HandleTypeDef *hadc, uint16_t *buffer, uint32_t len, uint32_t timeout);

// ================== PUBLIC FUNCTION DEFS ==================
osMessageQueueId_t monitor_init() {
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	monitor_util_flags = osEventFlagsNew(NULL); //create the monitor signaling flag
 8001378:	2000      	movs	r0, #0
 800137a:	f009 faad 	bl	800a8d8 <osEventFlagsNew>
 800137e:	4602      	mov	r2, r0
 8001380:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <monitor_init+0x34>)
 8001382:	601a      	str	r2, [r3, #0]
	soc_buf = osMessageQueueNew(1, sizeof(float), NULL); //creating the SOC buffer/queue
 8001384:	2200      	movs	r2, #0
 8001386:	2104      	movs	r1, #4
 8001388:	2001      	movs	r0, #1
 800138a:	f009 fc3d 	bl	800ac08 <osMessageQueueNew>
 800138e:	4602      	mov	r2, r0
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <monitor_init+0x38>)
 8001392:	601a      	str	r2, [r3, #0]

	osEventFlagsSet(monitor_util_flags, ADC_READY_FLAG); //adc is now ready since everything is initialized
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <monitor_init+0x34>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2102      	movs	r1, #2
 800139a:	4618      	mov	r0, r3
 800139c:	f009 faee 	bl	800a97c <osEventFlagsSet>

	return soc_buf;
 80013a0:	4b02      	ldr	r3, [pc, #8]	; (80013ac <monitor_init+0x38>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000380 	.word	0x20000380
 80013ac:	20000384 	.word	0x20000384

080013b0 <monitor_start>:

//initialize and start the monitor thread function
void monitor_start(ADC_HandleTypeDef *hadc) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08c      	sub	sp, #48	; 0x30
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	const osThreadAttr_t monitor_attributes = {
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	2224      	movs	r2, #36	; 0x24
 80013be:	2100      	movs	r1, #0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f00d fd3a 	bl	800ee3a <memset>
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <monitor_start+0x40>)
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013ce:	623b      	str	r3, [r7, #32]
 80013d0:	2320      	movs	r3, #32
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
			.name = "monitor",
			.priority = (osPriority_t) osPriorityAboveNormal,
			.stack_size = 2048
	};
	monitor_handle = osThreadNew(run_monitor, (void*)hadc, &monitor_attributes);
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	461a      	mov	r2, r3
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	4805      	ldr	r0, [pc, #20]	; (80013f4 <monitor_start+0x44>)
 80013de:	f009 f8ff 	bl	800a5e0 <osThreadNew>
 80013e2:	4602      	mov	r2, r0
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <monitor_start+0x48>)
 80013e6:	601a      	str	r2, [r3, #0]
}
 80013e8:	bf00      	nop
 80013ea:	3730      	adds	r7, #48	; 0x30
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	0801093c 	.word	0x0801093c
 80013f4:	080015d9 	.word	0x080015d9
 80013f8:	20000388 	.word	0x20000388
 80013fc:	00000000 	.word	0x00000000

08001400 <v_sys_check>:

bool v_sys_check(float min_voltage, ADC_HandleTypeDef *hadc) {
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b08f      	sub	sp, #60	; 0x3c
 8001404:	af00      	add	r7, sp, #0
 8001406:	ed87 0a01 	vstr	s0, [r7, #4]
 800140a:	6038      	str	r0, [r7, #0]
	uint16_t adc_results[ADC_OVERSAMPLES];
	uint32_t adc_status;

	//floor the min_voltage to SANE_VOLTAGE_LOWER_LIMIT
	min_voltage = min_voltage < SANE_VOLTAGE_LOWER_LIMIT ? SANE_VOLTAGE_LOWER_LIMIT : min_voltage;
 800140c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001410:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001414:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141c:	d501      	bpl.n	8001422 <v_sys_check+0x22>
 800141e:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <v_sys_check+0xe8>)
 8001420:	e000      	b.n	8001424 <v_sys_check+0x24>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	607b      	str	r3, [r7, #4]

	//read the ADC via DMA
	adc_status = do_adc_dma(hadc, adc_results, ADC_OVERSAMPLES, ADC_READ_TIMEOUT);
 8001426:	f107 0108 	add.w	r1, r7, #8
 800142a:	2364      	movs	r3, #100	; 0x64
 800142c:	2210      	movs	r2, #16
 800142e:	6838      	ldr	r0, [r7, #0]
 8001430:	f000 fa1c 	bl	800186c <do_adc_dma>
 8001434:	62f8      	str	r0, [r7, #44]	; 0x2c
	if(adc_status & (1<<31)) return false; //if we timed out or something weird happened, fail the check
 8001436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001438:	2b00      	cmp	r3, #0
 800143a:	da01      	bge.n	8001440 <v_sys_check+0x40>
 800143c:	2300      	movs	r3, #0
 800143e:	e049      	b.n	80014d4 <v_sys_check+0xd4>

	//compute the system voltage from the average of the ADC readings
	uint32_t adc_sum = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	637b      	str	r3, [r7, #52]	; 0x34
	float v_sys = 0;
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int i = 0; i < ADC_OVERSAMPLES; i++) {
 800144a:	2300      	movs	r3, #0
 800144c:	633b      	str	r3, [r7, #48]	; 0x30
 800144e:	e00d      	b.n	800146c <v_sys_check+0x6c>
		adc_sum += adc_results[i];
 8001450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001458:	4413      	add	r3, r2
 800145a:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800145e:	461a      	mov	r2, r3
 8001460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001462:	4413      	add	r3, r2
 8001464:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i = 0; i < ADC_OVERSAMPLES; i++) {
 8001466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001468:	3301      	adds	r3, #1
 800146a:	633b      	str	r3, [r7, #48]	; 0x30
 800146c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800146e:	2b0f      	cmp	r3, #15
 8001470:	ddee      	ble.n	8001450 <v_sys_check+0x50>
	}
	v_sys = adc_sum * DIVIDER_RATIO / ADC_OVERSAMPLES;
 8001472:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001474:	f7fe fffe 	bl	8000474 <__aeabi_ui2d>
 8001478:	a319      	add	r3, pc, #100	; (adr r3, 80014e0 <v_sys_check+0xe0>)
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	f7ff f873 	bl	8000568 <__aeabi_dmul>
 8001482:	4603      	mov	r3, r0
 8001484:	460c      	mov	r4, r1
 8001486:	4618      	mov	r0, r3
 8001488:	4621      	mov	r1, r4
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <v_sys_check+0xec>)
 8001490:	f7ff f994 	bl	80007bc <__aeabi_ddiv>
 8001494:	4603      	mov	r3, r0
 8001496:	460c      	mov	r4, r1
 8001498:	4618      	mov	r0, r3
 800149a:	4621      	mov	r1, r4
 800149c:	f7ff fb3c 	bl	8000b18 <__aeabi_d2f>
 80014a0:	4603      	mov	r3, r0
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28

	//if the measured system voltage is sane
	return (v_sys > min_voltage) && (v_sys < SANE_VOLTAGE_UPPER_LIMIT);
 80014a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80014a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b4:	dd0a      	ble.n	80014cc <v_sys_check+0xcc>
 80014b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80014ba:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80014f0 <v_sys_check+0xf0>
 80014be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c6:	d501      	bpl.n	80014cc <v_sys_check+0xcc>
 80014c8:	2301      	movs	r3, #1
 80014ca:	e000      	b.n	80014ce <v_sys_check+0xce>
 80014cc:	2300      	movs	r3, #0
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	b2db      	uxtb	r3, r3
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	373c      	adds	r7, #60	; 0x3c
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd90      	pop	{r4, r7, pc}
 80014dc:	f3af 8000 	nop.w
 80014e0:	de129a61 	.word	0xde129a61
 80014e4:	3f822f58 	.word	0x3f822f58
 80014e8:	41200000 	.word	0x41200000
 80014ec:	40300000 	.word	0x40300000
 80014f0:	420c0000 	.word	0x420c0000

080014f4 <monitor_soc_low>:

bool monitor_soc_low(bool clear_flag) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
	bool result = osEventFlagsGet(monitor_util_flags) & SOC_LOW_FLAG;
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <monitor_soc_low+0x48>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f009 fad6 	bl	800aab4 <osEventFlagsGet>
 8001508:	4603      	mov	r3, r0
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	2b00      	cmp	r3, #0
 8001510:	bf14      	ite	ne
 8001512:	2301      	movne	r3, #1
 8001514:	2300      	moveq	r3, #0
 8001516:	73fb      	strb	r3, [r7, #15]
	if(result && clear_flag) osEventFlagsClear(monitor_util_flags, SOC_LOW_FLAG);
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d008      	beq.n	8001530 <monitor_soc_low+0x3c>
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <monitor_soc_low+0x3c>
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <monitor_soc_low+0x48>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2104      	movs	r1, #4
 800152a:	4618      	mov	r0, r3
 800152c:	f009 fa7e 	bl	800aa2c <osEventFlagsClear>
	return result;
 8001530:	7bfb      	ldrb	r3, [r7, #15]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000380 	.word	0x20000380

08001540 <monitor_soc_crit>:

bool monitor_soc_crit(bool clear_flag) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
	bool result = osEventFlagsGet(monitor_util_flags) & SOC_CRIT_FLAG;
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <monitor_soc_crit+0x48>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f009 fab0 	bl	800aab4 <osEventFlagsGet>
 8001554:	4603      	mov	r3, r0
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b00      	cmp	r3, #0
 800155c:	bf14      	ite	ne
 800155e:	2301      	movne	r3, #1
 8001560:	2300      	moveq	r3, #0
 8001562:	73fb      	strb	r3, [r7, #15]
	if(result && clear_flag) osEventFlagsClear(monitor_util_flags, SOC_CRIT_FLAG);
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d008      	beq.n	800157c <monitor_soc_crit+0x3c>
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <monitor_soc_crit+0x3c>
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <monitor_soc_crit+0x48>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2108      	movs	r1, #8
 8001576:	4618      	mov	r0, r3
 8001578:	f009 fa58 	bl	800aa2c <osEventFlagsClear>
	return result;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000380 	.word	0x20000380

0800158c <monitor_read_fail>:

bool monitor_read_fail(bool clear_flag) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
	bool result = osEventFlagsGet(monitor_util_flags) & SOC_MEASURE_FAIL;
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <monitor_read_fail+0x48>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f009 fa8a 	bl	800aab4 <osEventFlagsGet>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	bf14      	ite	ne
 80015aa:	2301      	movne	r3, #1
 80015ac:	2300      	moveq	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]
	if(result && clear_flag) osEventFlagsClear(monitor_util_flags, SOC_MEASURE_FAIL);
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d008      	beq.n	80015c8 <monitor_read_fail+0x3c>
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <monitor_read_fail+0x3c>
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <monitor_read_fail+0x48>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2110      	movs	r1, #16
 80015c2:	4618      	mov	r0, r3
 80015c4:	f009 fa32 	bl	800aa2c <osEventFlagsClear>
	return result;
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000380 	.word	0x20000380

080015d8 <run_monitor>:

//return the free stack space of the monitor thread
uint32_t monitor_stack_space() {return osThreadGetStackSpace(monitor_handle);}

// ==================== PRIVATE FUNCTION DEFINITIONS =====================
static void run_monitor(void* argument) {
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
 80015de:	af00      	add	r7, sp, #0
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	6018      	str	r0, [r3, #0]
	ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef*) argument;
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
	float sample_buffer[SAMPLE_BUFFER_LEN]; //buffer to compute the moving average voltage reading
	float mav_voltage = 0, soc = 0; //moving average of system voltage measurement
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	f207 4254 	addw	r2, r7, #1108	; 0x454
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
	uint16_t buffer_pointer = 0; //for our circular buffer
 8001600:	2300      	movs	r3, #0
 8001602:	f8a7 3452 	strh.w	r3, [r7, #1106]	; 0x452
	uint8_t read_fail_counter = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	f887 3451 	strb.w	r3, [r7, #1105]	; 0x451
	bool soc_low_asserted = false;
 800160c:	2300      	movs	r3, #0
 800160e:	f887 3450 	strb.w	r3, [r7, #1104]	; 0x450

	//initialize all values of the sample buffer array
	for(int i = 0; i < SAMPLE_BUFFER_LEN; i++) {
 8001612:	2300      	movs	r3, #0
 8001614:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 8001618:	e00c      	b.n	8001634 <run_monitor+0x5c>
		sample_buffer[i] = MAV_INIT_VALUE;
 800161a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800161e:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	4a8a      	ldr	r2, [pc, #552]	; (8001850 <run_monitor+0x278>)
 8001628:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < SAMPLE_BUFFER_LEN; i++) {
 800162a:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800162e:	3301      	adds	r3, #1
 8001630:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 8001634:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8001638:	2bff      	cmp	r3, #255	; 0xff
 800163a:	ddee      	ble.n	800161a <run_monitor+0x42>
		uint32_t adc_status;
		uint16_t adc_results[ADC_OVERSAMPLES];
		float adc_voltage;

		//attempt to read the ADC
		adc_status = do_adc_dma(hadc, adc_results, ADC_OVERSAMPLES, ADC_READ_TIMEOUT);
 800163c:	f107 010c 	add.w	r1, r7, #12
 8001640:	2364      	movs	r3, #100	; 0x64
 8001642:	2210      	movs	r2, #16
 8001644:	f8d7 043c 	ldr.w	r0, [r7, #1084]	; 0x43c
 8001648:	f000 f910 	bl	800186c <do_adc_dma>
 800164c:	f8c7 0438 	str.w	r0, [r7, #1080]	; 0x438

		//compute the ADC voltage (will be invalid if the adc timed out, but whatev, we'll handle that)
		uint32_t adc_sum = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
		for(int i = 0; i < ADC_OVERSAMPLES; i++) {
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 800165c:	e010      	b.n	8001680 <run_monitor+0xa8>
			adc_sum += adc_results[i];
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8001666:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800166a:	461a      	mov	r2, r3
 800166c:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8001670:	4413      	add	r3, r2
 8001672:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
		for(int i = 0; i < ADC_OVERSAMPLES; i++) {
 8001676:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 800167a:	3301      	adds	r3, #1
 800167c:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 8001680:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8001684:	2b0f      	cmp	r3, #15
 8001686:	ddea      	ble.n	800165e <run_monitor+0x86>
		}
		adc_voltage = adc_sum * DIVIDER_RATIO / ADC_OVERSAMPLES;
 8001688:	f8d7 0448 	ldr.w	r0, [r7, #1096]	; 0x448
 800168c:	f7fe fef2 	bl	8000474 <__aeabi_ui2d>
 8001690:	a36d      	add	r3, pc, #436	; (adr r3, 8001848 <run_monitor+0x270>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	f7fe ff67 	bl	8000568 <__aeabi_dmul>
 800169a:	4603      	mov	r3, r0
 800169c:	460c      	mov	r4, r1
 800169e:	4618      	mov	r0, r3
 80016a0:	4621      	mov	r1, r4
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4b6b      	ldr	r3, [pc, #428]	; (8001854 <run_monitor+0x27c>)
 80016a8:	f7ff f888 	bl	80007bc <__aeabi_ddiv>
 80016ac:	4603      	mov	r3, r0
 80016ae:	460c      	mov	r4, r1
 80016b0:	4618      	mov	r0, r3
 80016b2:	4621      	mov	r1, r4
 80016b4:	f7ff fa30 	bl	8000b18 <__aeabi_d2f>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f207 4234 	addw	r2, r7, #1076	; 0x434
 80016be:	6013      	str	r3, [r2, #0]

		//if the ADC read was successful and the voltage is sane
		if(((adc_status & (1<<31)) == 0) && (adc_voltage < SANE_VOLTAGE_UPPER_LIMIT) && (adc_voltage > SANE_VOLTAGE_LOWER_LIMIT)) {
 80016c0:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f2c0 80ac 	blt.w	8001822 <run_monitor+0x24a>
 80016ca:	f207 4334 	addw	r3, r7, #1076	; 0x434
 80016ce:	edd3 7a00 	vldr	s15, [r3]
 80016d2:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001858 <run_monitor+0x280>
 80016d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016de:	f140 80a0 	bpl.w	8001822 <run_monitor+0x24a>
 80016e2:	f207 4334 	addw	r3, r7, #1076	; 0x434
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80016ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f6:	f340 8094 	ble.w	8001822 <run_monitor+0x24a>

			//divide the ADC voltage by SAMPLE_BUFFER_LENGTH and store it at the current pointer location
			float scaled_voltage = adc_voltage / (float)SAMPLE_BUFFER_LEN;
 80016fa:	f207 4334 	addw	r3, r7, #1076	; 0x434
 80016fe:	ed93 7a00 	vldr	s14, [r3]
 8001702:	eddf 6a56 	vldr	s13, [pc, #344]	; 800185c <run_monitor+0x284>
 8001706:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800170a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800170e:	edc3 7a00 	vstr	s15, [r3]
			sample_buffer[buffer_pointer] = scaled_voltage;
 8001712:	f8b7 3452 	ldrh.w	r3, [r7, #1106]	; 0x452
 8001716:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	601a      	str	r2, [r3, #0]

			//sum up the entire contents of the sample buffer
			mav_voltage = 0;
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	f207 4254 	addw	r2, r7, #1108	; 0x454
 800172e:	6013      	str	r3, [r2, #0]
			for(int i = 0; i < SAMPLE_BUFFER_LEN; i++) {
 8001730:	2300      	movs	r3, #0
 8001732:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8001736:	e016      	b.n	8001766 <run_monitor+0x18e>
				mav_voltage += sample_buffer[i];
 8001738:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800173c:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	f207 4354 	addw	r3, r7, #1108	; 0x454
 800174c:	ed93 7a00 	vldr	s14, [r3]
 8001750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001754:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8001758:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < SAMPLE_BUFFER_LEN; i++) {
 800175c:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8001760:	3301      	adds	r3, #1
 8001762:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8001766:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800176a:	2bff      	cmp	r3, #255	; 0xff
 800176c:	dde4      	ble.n	8001738 <run_monitor+0x160>
			}

			//compute the SOC from 0 to 1 and store that in the soc queue
			soc = (mav_voltage - MIN_VOLTAGE)/(MAX_VOLTAGE - MIN_VOLTAGE);
 800176e:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 800177a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800177e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001860 <run_monitor+0x288>
 8001782:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001786:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800178a:	edc3 7a00 	vstr	s15, [r3]
			osMessageQueueReset(soc_buf);
 800178e:	4b35      	ldr	r3, [pc, #212]	; (8001864 <run_monitor+0x28c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f009 fbd6 	bl	800af44 <osMessageQueueReset>
			osMessageQueuePut(soc_buf, &soc, 0, 0);
 8001798:	4b32      	ldr	r3, [pc, #200]	; (8001864 <run_monitor+0x28c>)
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80017a0:	2300      	movs	r3, #0
 80017a2:	2200      	movs	r2, #0
 80017a4:	f009 fab6 	bl	800ad14 <osMessageQueuePut>


			//check if that sum meets the thresholds for low and critical levels (and assert those flags if appropriate)
			if(mav_voltage < SOC_VOLTAGE_CRITICAL) {
 80017a8:	f207 4354 	addw	r3, r7, #1108	; 0x454
 80017ac:	edd3 7a00 	vldr	s15, [r3]
 80017b0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80017b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017bc:	d506      	bpl.n	80017cc <run_monitor+0x1f4>
				osEventFlagsSet(monitor_util_flags, SOC_CRIT_FLAG);
 80017be:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <run_monitor+0x290>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2108      	movs	r1, #8
 80017c4:	4618      	mov	r0, r3
 80017c6:	f009 f8d9 	bl	800a97c <osEventFlagsSet>
 80017ca:	e01a      	b.n	8001802 <run_monitor+0x22a>
			}
			else if(mav_voltage < SOC_VOLTAGE_LOW && !soc_low_asserted) {
 80017cc:	f207 4354 	addw	r3, r7, #1108	; 0x454
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80017d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e0:	d50f      	bpl.n	8001802 <run_monitor+0x22a>
 80017e2:	f897 3450 	ldrb.w	r3, [r7, #1104]	; 0x450
 80017e6:	f083 0301 	eor.w	r3, r3, #1
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <run_monitor+0x22a>
				osEventFlagsSet(monitor_util_flags, SOC_LOW_FLAG);
 80017f0:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <run_monitor+0x290>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2104      	movs	r1, #4
 80017f6:	4618      	mov	r0, r3
 80017f8:	f009 f8c0 	bl	800a97c <osEventFlagsSet>
				soc_low_asserted = true; //latch this so we only trigger once
 80017fc:	2301      	movs	r3, #1
 80017fe:	f887 3450 	strb.w	r3, [r7, #1104]	; 0x450
			}

			//increment/wrap around the buffer pointer
			buffer_pointer = (buffer_pointer >= (SAMPLE_BUFFER_LEN-1)) ? 0 : buffer_pointer+1;
 8001802:	f8b7 3452 	ldrh.w	r3, [r7, #1106]	; 0x452
 8001806:	2bfe      	cmp	r3, #254	; 0xfe
 8001808:	d804      	bhi.n	8001814 <run_monitor+0x23c>
 800180a:	f8b7 3452 	ldrh.w	r3, [r7, #1106]	; 0x452
 800180e:	3301      	adds	r3, #1
 8001810:	b29b      	uxth	r3, r3
 8001812:	e000      	b.n	8001816 <run_monitor+0x23e>
 8001814:	2300      	movs	r3, #0
 8001816:	f8a7 3452 	strh.w	r3, [r7, #1106]	; 0x452

			//reset the read fail counter
			read_fail_counter = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	f887 3451 	strb.w	r3, [r7, #1105]	; 0x451
		if(((adc_status & (1<<31)) == 0) && (adc_voltage < SANE_VOLTAGE_UPPER_LIMIT) && (adc_voltage > SANE_VOLTAGE_LOWER_LIMIT)) {
 8001820:	e00e      	b.n	8001840 <run_monitor+0x268>
		}
		//if the ADC read was unsuccessful or the voltage is insane
		else {
			//increment the read fail counter
			read_fail_counter++;
 8001822:	f897 3451 	ldrb.w	r3, [r7, #1105]	; 0x451
 8001826:	3301      	adds	r3, #1
 8001828:	f887 3451 	strb.w	r3, [r7, #1105]	; 0x451

			//if the read fail counter exceeds the fail threshold, assert the appropriate flag
			if(read_fail_counter >= ADC_MAX_READ_FAILS) osEventFlagsSet(monitor_util_flags, SOC_MEASURE_FAIL);
 800182c:	f897 3451 	ldrb.w	r3, [r7, #1105]	; 0x451
 8001830:	2b07      	cmp	r3, #7
 8001832:	d905      	bls.n	8001840 <run_monitor+0x268>
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <run_monitor+0x290>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2110      	movs	r1, #16
 800183a:	4618      	mov	r0, r3
 800183c:	f009 f89e 	bl	800a97c <osEventFlagsSet>
		}

		osDelay(MONITOR_UPDATE_DELAY);
 8001840:	200a      	movs	r0, #10
 8001842:	f009 f81b 	bl	800a87c <osDelay>
	while(1) {
 8001846:	e6f9      	b.n	800163c <run_monitor+0x64>
 8001848:	de129a61 	.word	0xde129a61
 800184c:	3f822f58 	.word	0x3f822f58
 8001850:	3dd80000 	.word	0x3dd80000
 8001854:	40300000 	.word	0x40300000
 8001858:	420c0000 	.word	0x420c0000
 800185c:	43800000 	.word	0x43800000
 8001860:	41199998 	.word	0x41199998
 8001864:	20000384 	.word	0x20000384
 8001868:	20000380 	.word	0x20000380

0800186c <do_adc_dma>:
	}

	osThreadExit(); //exit gracefully if the function somehow gets here?
}

static uint32_t do_adc_dma(ADC_HandleTypeDef *hadc, uint16_t *buffer, uint32_t len, uint32_t timeout) {
 800186c:	b590      	push	{r4, r7, lr}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	603b      	str	r3, [r7, #0]
	uint32_t start_tick = HAL_GetTick();
 800187a:	f001 febd 	bl	80035f8 <HAL_GetTick>
 800187e:	61f8      	str	r0, [r7, #28]
	uint32_t status; //see if our event flag wait timed out or not
	uint32_t dma_timeout; //computed after the resource is released

	//wait for the ADC to be free, then lock it out (subject to a timeout)
	status = osEventFlagsWait(monitor_util_flags, ADC_READY_FLAG, osFlagsWaitAny, timeout);
 8001880:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <do_adc_dma+0x80>)
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	2200      	movs	r2, #0
 8001888:	2102      	movs	r1, #2
 800188a:	f009 f947 	bl	800ab1c <osEventFlagsWait>
 800188e:	61b8      	str	r0, [r7, #24]
	if(status & (1<<31)) return status;
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	2b00      	cmp	r3, #0
 8001894:	da01      	bge.n	800189a <do_adc_dma+0x2e>
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	e024      	b.n	80018e4 <do_adc_dma+0x78>
	dma_timeout = (timeout + start_tick) - HAL_GetTick(); //how much remaining time the DMA read should take to meet the timeout
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	18d4      	adds	r4, r2, r3
 80018a0:	f001 feaa 	bl	80035f8 <HAL_GetTick>
 80018a4:	4603      	mov	r3, r0
 80018a6:	1ae3      	subs	r3, r4, r3
 80018a8:	617b      	str	r3, [r7, #20]

	//read adc via DMA and wait till it's done
	osEventFlagsClear(monitor_util_flags, DMA_COMPLETE_FLAG); //clear the DMA complete flag before starting the next DMA request (just to make sure)
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <do_adc_dma+0x80>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2101      	movs	r1, #1
 80018b0:	4618      	mov	r0, r3
 80018b2:	f009 f8bb 	bl	800aa2c <osEventFlagsClear>
	HAL_ADC_Stop_DMA(hadc); //clear the appropriate DMA bits
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f001 ffe4 	bl	8003884 <HAL_ADC_Stop_DMA>
	HAL_ADC_Start_DMA(hadc, (uint32_t*)buffer, len); //restart the DMA request
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	68b9      	ldr	r1, [r7, #8]
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f001 ff0b 	bl	80036dc <HAL_ADC_Start_DMA>
	status = osEventFlagsWait(monitor_util_flags, DMA_COMPLETE_FLAG, osFlagsWaitAny, dma_timeout); //wait for DMA to be complete
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <do_adc_dma+0x80>)
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	2200      	movs	r2, #0
 80018ce:	2101      	movs	r1, #1
 80018d0:	f009 f924 	bl	800ab1c <osEventFlagsWait>
 80018d4:	61b8      	str	r0, [r7, #24]

	//release the ADC resource
	osEventFlagsSet(monitor_util_flags, ADC_READY_FLAG);
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <do_adc_dma+0x80>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2102      	movs	r1, #2
 80018dc:	4618      	mov	r0, r3
 80018de:	f009 f84d 	bl	800a97c <osEventFlagsSet>
	return status; //return whether the DMA completed successfully or whether it timed out
 80018e2:	69bb      	ldr	r3, [r7, #24]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3724      	adds	r7, #36	; 0x24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd90      	pop	{r4, r7, pc}
 80018ec:	20000380 	.word	0x20000380

080018f0 <HAL_ADC_ConvCpltCallback>:

// ======================== ISRs =========================

//service the interrupt that gets called when the ADC DMA request completes
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	//just set the DMA completion event flag here
	osEventFlagsSet(monitor_util_flags, DMA_COMPLETE_FLAG);
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <HAL_ADC_ConvCpltCallback+0x1c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2101      	movs	r1, #1
 80018fe:	4618      	mov	r0, r3
 8001900:	f009 f83c 	bl	800a97c <osEventFlagsSet>
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000380 	.word	0x20000380

08001910 <board_lights_init>:
static void do_tail_solid_head();
static void do_tail_and_head();

//====================== PUBLIC FUNCTIONS =========================
//initialize the threads for the headlights and taillights
void board_lights_init(TIM_HandleTypeDef* h) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b094      	sub	sp, #80	; 0x50
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	pulse_tim = h;
 8001918:	4a2a      	ldr	r2, [pc, #168]	; (80019c4 <board_lights_init+0xb4>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6013      	str	r3, [r2, #0]

	flash_flags = osEventFlagsNew(NULL);
 800191e:	2000      	movs	r0, #0
 8001920:	f008 ffda 	bl	800a8d8 <osEventFlagsNew>
 8001924:	4602      	mov	r2, r0
 8001926:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <board_lights_init+0xb8>)
 8001928:	601a      	str	r2, [r3, #0]
	pulse_buf = osMessageQueueNew(1, sizeof(uint16_t), NULL); //creating the pulse width buffer/queue
 800192a:	2200      	movs	r2, #0
 800192c:	2102      	movs	r1, #2
 800192e:	2001      	movs	r0, #1
 8001930:	f009 f96a 	bl	800ac08 <osMessageQueueNew>
 8001934:	4602      	mov	r2, r0
 8001936:	4b25      	ldr	r3, [pc, #148]	; (80019cc <board_lights_init+0xbc>)
 8001938:	601a      	str	r2, [r3, #0]

	//create the "supervisor" thread
	const osThreadAttr_t lights_sup_attributes = {
 800193a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800193e:	2224      	movs	r2, #36	; 0x24
 8001940:	2100      	movs	r1, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f00d fa79 	bl	800ee3a <memset>
 8001948:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <board_lights_init+0xc0>)
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800194c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001950:	643b      	str	r3, [r7, #64]	; 0x40
 8001952:	2310      	movs	r3, #16
 8001954:	647b      	str	r3, [r7, #68]	; 0x44
			.name = "lights supervisor",
			.priority = (osPriority_t) osPriorityBelowNormal,
			.stack_size = 2048
	};
	lights_sup_handle = osThreadNew(run_lights_supervisor, NULL, &lights_sup_attributes); //start the board lights thread
 8001956:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800195a:	461a      	mov	r2, r3
 800195c:	2100      	movs	r1, #0
 800195e:	481d      	ldr	r0, [pc, #116]	; (80019d4 <board_lights_init+0xc4>)
 8001960:	f008 fe3e 	bl	800a5e0 <osThreadNew>
 8001964:	4602      	mov	r2, r0
 8001966:	4b1c      	ldr	r3, [pc, #112]	; (80019d8 <board_lights_init+0xc8>)
 8001968:	601a      	str	r2, [r3, #0]

	//create the "animator" thread
	const osThreadAttr_t lights_anim_attributes = {
 800196a:	f107 0308 	add.w	r3, r7, #8
 800196e:	2224      	movs	r2, #36	; 0x24
 8001970:	2100      	movs	r1, #0
 8001972:	4618      	mov	r0, r3
 8001974:	f00d fa61 	bl	800ee3a <memset>
 8001978:	4b18      	ldr	r3, [pc, #96]	; (80019dc <board_lights_init+0xcc>)
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	2328      	movs	r3, #40	; 0x28
 8001984:	623b      	str	r3, [r7, #32]
			.name = "lights animator",
			.priority = (osPriority_t) osPriorityHigh,
			.stack_size = 2048
	};
	lights_anim_handle = osThreadNew(run_board_lights, NULL, &lights_anim_attributes); //start the board lights thread
 8001986:	f107 0308 	add.w	r3, r7, #8
 800198a:	461a      	mov	r2, r3
 800198c:	2100      	movs	r1, #0
 800198e:	4814      	ldr	r0, [pc, #80]	; (80019e0 <board_lights_init+0xd0>)
 8001990:	f008 fe26 	bl	800a5e0 <osThreadNew>
 8001994:	4602      	mov	r2, r0
 8001996:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <board_lights_init+0xd4>)
 8001998:	601a      	str	r2, [r3, #0]

	//start the RC interrupt and microsecond timer
	HAL_TIM_Base_Start_IT(pulse_tim);
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <board_lights_init+0xb4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f004 ff29 	bl	80067f6 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80019a4:	2007      	movs	r0, #7
 80019a6:	f002 fb3f 	bl	8004028 <HAL_NVIC_EnableIRQ>

	//start the PWM timers for the constant current drivers
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80019aa:	2108      	movs	r1, #8
 80019ac:	480e      	ldr	r0, [pc, #56]	; (80019e8 <board_lights_init+0xd8>)
 80019ae:	f005 f817 	bl	80069e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80019b2:	210c      	movs	r1, #12
 80019b4:	480c      	ldr	r0, [pc, #48]	; (80019e8 <board_lights_init+0xd8>)
 80019b6:	f005 f813 	bl	80069e0 <HAL_TIM_PWM_Start>
}
 80019ba:	bf00      	nop
 80019bc:	3750      	adds	r7, #80	; 0x50
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000038c 	.word	0x2000038c
 80019c8:	20000394 	.word	0x20000394
 80019cc:	20000390 	.word	0x20000390
 80019d0:	08010944 	.word	0x08010944
 80019d4:	08001a65 	.word	0x08001a65
 80019d8:	20000398 	.word	0x20000398
 80019dc:	08010958 	.word	0x08010958
 80019e0:	08001bb1 	.word	0x08001bb1
 80019e4:	2000039c 	.word	0x2000039c
 80019e8:	200090f8 	.word	0x200090f8

080019ec <board_lights_shutdown>:

//shutdown the headlights gracefully
void board_lights_shutdown() {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	//kill the lights threads
	if(lights_sup_handle != NULL) osThreadTerminate(lights_sup_handle);
 80019f0:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <board_lights_shutdown+0x3c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d004      	beq.n	8001a02 <board_lights_shutdown+0x16>
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <board_lights_shutdown+0x3c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f008 fefd 	bl	800a7fc <osThreadTerminate>
	if(lights_anim_handle != NULL) osThreadTerminate(lights_anim_handle);
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <board_lights_shutdown+0x40>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d004      	beq.n	8001a14 <board_lights_shutdown+0x28>
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <board_lights_shutdown+0x40>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f008 fef4 	bl	800a7fc <osThreadTerminate>

	//disable the constant current drivers before power down(just to be gentle to them)
	CHAN_HEAD_COUNT = 0;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <board_lights_shutdown+0x44>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	641a      	str	r2, [r3, #64]	; 0x40
	CHAN_TAIL_COUNT = 0;
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <board_lights_shutdown+0x44>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2200      	movs	r2, #0
 8001a22:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000398 	.word	0x20000398
 8001a2c:	2000039c 	.word	0x2000039c
 8001a30:	200090f8 	.word	0x200090f8

08001a34 <board_lights_tim_overflow>:

//called on pulse timer overflow
void board_lights_tim_overflow() {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
	uint16_t pulse_width = 0; //set the pulse width to 0 on overflow
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	80fb      	strh	r3, [r7, #6]
	osMessageQueueReset(pulse_buf);
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <board_lights_tim_overflow+0x2c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f009 fa7e 	bl	800af44 <osMessageQueueReset>
	osMessageQueuePut(pulse_buf, &pulse_width, 0, 0);
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <board_lights_tim_overflow+0x2c>)
 8001a4a:	6818      	ldr	r0, [r3, #0]
 8001a4c:	1db9      	adds	r1, r7, #6
 8001a4e:	2300      	movs	r3, #0
 8001a50:	2200      	movs	r2, #0
 8001a52:	f009 f95f 	bl	800ad14 <osMessageQueuePut>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000390 	.word	0x20000390

08001a64 <run_lights_supervisor>:
uint32_t board_lights_stack_space() { return osThreadGetStackSpace(lights_sup_handle); }

//===================== PRIVATE/THREAD FUNCTION DEFINITIONS ====================
//lights supervisor function
//controls which lights flashing program to run
static void run_lights_supervisor(void* argument) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	uint16_t pulse_width;
	uint16_t p_widths[DEBOUNCER_SAMPLES] = {0}; //a simple moving average/debouncer
 8001a6c:	f107 030c 	add.w	r3, r7, #12
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	811a      	strh	r2, [r3, #8]
	uint8_t buf_pointer = 0; //implementing debouncer as a circular buffer
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t filt_p_width = 0; //variable that holds the sum of the moving averager
 8001a7e:	2300      	movs	r3, #0
 8001a80:	623b      	str	r3, [r7, #32]

	uint8_t which_animation = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	77fb      	strb	r3, [r7, #31]
	uint8_t timeout_latch = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	77bb      	strb	r3, [r7, #30]
	uint8_t change_polarity = 1; //1 indicates RISING edge required to change lights
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	777b      	strb	r3, [r7, #29]

	while(true) {
		//update the pulse width value
		if(osMessageQueueGetCount(pulse_buf) > 0) osMessageQueueGet(pulse_buf, &pulse_width, NULL, 0);
 8001a8e:	4b44      	ldr	r3, [pc, #272]	; (8001ba0 <run_lights_supervisor+0x13c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f009 fa24 	bl	800aee0 <osMessageQueueGetCount>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d008      	beq.n	8001ab0 <run_lights_supervisor+0x4c>
 8001a9e:	4b40      	ldr	r3, [pc, #256]	; (8001ba0 <run_lights_supervisor+0x13c>)
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	f107 0116 	add.w	r1, r7, #22
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f009 f9a7 	bl	800adfc <osMessageQueueGet>
 8001aae:	e001      	b.n	8001ab4 <run_lights_supervisor+0x50>
		else pulse_width = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	82fb      	strh	r3, [r7, #22]

		//save the new pulse width to the debouncer
		p_widths[buf_pointer] = pulse_width;
 8001ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ab8:	8afa      	ldrh	r2, [r7, #22]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001ac0:	440b      	add	r3, r1
 8001ac2:	f823 2c1c 	strh.w	r2, [r3, #-28]

		//update the moving average sum
		filt_p_width = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	623b      	str	r3, [r7, #32]
		for(int i = 0; i < DEBOUNCER_SAMPLES; i++) filt_p_width += p_widths[i];
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
 8001ace:	e00d      	b.n	8001aec <run_lights_supervisor+0x88>
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ad8:	4413      	add	r3, r2
 8001ada:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	623b      	str	r3, [r7, #32]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	61bb      	str	r3, [r7, #24]
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	ddee      	ble.n	8001ad0 <run_lights_supervisor+0x6c>
		filt_p_width = filt_p_width / DEBOUNCER_SAMPLES;
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	4a2b      	ldr	r2, [pc, #172]	; (8001ba4 <run_lights_supervisor+0x140>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	089b      	lsrs	r3, r3, #2
 8001afc:	623b      	str	r3, [r7, #32]

		//update the buffer pointer
		buf_pointer = (buf_pointer + 1) % DEBOUNCER_SAMPLES;
 8001afe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	4b28      	ldr	r3, [pc, #160]	; (8001ba8 <run_lights_supervisor+0x144>)
 8001b06:	fb83 1302 	smull	r1, r3, r3, r2
 8001b0a:	1059      	asrs	r1, r3, #1
 8001b0c:	17d3      	asrs	r3, r2, #31
 8001b0e:	1ac9      	subs	r1, r1, r3
 8001b10:	460b      	mov	r3, r1
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	1ad1      	subs	r1, r2, r3
 8001b18:	460b      	mov	r3, r1
 8001b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(filt_p_width == 0 && !timeout_latch) {
 8001b1e:	6a3b      	ldr	r3, [r7, #32]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10d      	bne.n	8001b40 <run_lights_supervisor+0xdc>
 8001b24:	7fbb      	ldrb	r3, [r7, #30]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10a      	bne.n	8001b40 <run_lights_supervisor+0xdc>
			osEventFlagsSet(flash_flags, LIGHTS_OFF);
 8001b2a:	4b20      	ldr	r3, [pc, #128]	; (8001bac <run_lights_supervisor+0x148>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2101      	movs	r1, #1
 8001b30:	4618      	mov	r0, r3
 8001b32:	f008 ff23 	bl	800a97c <osEventFlagsSet>
			which_animation = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	77fb      	strb	r3, [r7, #31]
			timeout_latch = 1;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	77bb      	strb	r3, [r7, #30]
 8001b3e:	e02b      	b.n	8001b98 <run_lights_supervisor+0x134>
		}
		else{
			//if the controller button was pressed and the RC input represents that
			//hysteresis for noise reduction
			if( ((filt_p_width > THRESHOLD_HIGH) && change_polarity) ||
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d902      	bls.n	8001b50 <run_lights_supervisor+0xec>
 8001b4a:	7f7b      	ldrb	r3, [r7, #29]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d107      	bne.n	8001b60 <run_lights_supervisor+0xfc>
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	f240 5213 	movw	r2, #1299	; 0x513
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d81e      	bhi.n	8001b98 <run_lights_supervisor+0x134>
				((filt_p_width < THRESHOLD_LOW) && !change_polarity)) {
 8001b5a:	7f7b      	ldrb	r3, [r7, #29]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d11b      	bne.n	8001b98 <run_lights_supervisor+0x134>

				//increment the animation that we wanna run and set the appropriate event flag
				which_animation = (which_animation + 1) % NUM_FLASH_PATTERNS;
 8001b60:	7ffb      	ldrb	r3, [r7, #31]
 8001b62:	3301      	adds	r3, #1
 8001b64:	425a      	negs	r2, r3
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	f002 0203 	and.w	r2, r2, #3
 8001b6e:	bf58      	it	pl
 8001b70:	4253      	negpl	r3, r2
 8001b72:	77fb      	strb	r3, [r7, #31]
				osEventFlagsSet(flash_flags, (1<<which_animation));
 8001b74:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <run_lights_supervisor+0x148>)
 8001b76:	6818      	ldr	r0, [r3, #0]
 8001b78:	7ffb      	ldrb	r3, [r7, #31]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	4619      	mov	r1, r3
 8001b82:	f008 fefb 	bl	800a97c <osEventFlagsSet>

				change_polarity = !change_polarity;
 8001b86:	7f7b      	ldrb	r3, [r7, #29]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	bf0c      	ite	eq
 8001b8c:	2301      	moveq	r3, #1
 8001b8e:	2300      	movne	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	777b      	strb	r3, [r7, #29]
				timeout_latch = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	77bb      	strb	r3, [r7, #30]
			}
		}

		osDelay(SUPERVISOR_DELAY);
 8001b98:	2032      	movs	r0, #50	; 0x32
 8001b9a:	f008 fe6f 	bl	800a87c <osDelay>
		if(osMessageQueueGetCount(pulse_buf) > 0) osMessageQueueGet(pulse_buf, &pulse_width, NULL, 0);
 8001b9e:	e776      	b.n	8001a8e <run_lights_supervisor+0x2a>
 8001ba0:	20000390 	.word	0x20000390
 8001ba4:	cccccccd 	.word	0xcccccccd
 8001ba8:	66666667 	.word	0x66666667
 8001bac:	20000394 	.word	0x20000394

08001bb0 <run_board_lights>:
	}
	osThreadExit();
}

static void run_board_lights(void* argument) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	while(true) {
		//suspend this thread until any flag is set (and don't clear the set flag)
		osEventFlagsWait(flash_flags, ALL_LIGHTS_FLAGS, osFlagsNoClear, osWaitForever);
 8001bb8:	4b29      	ldr	r3, [pc, #164]	; (8001c60 <run_board_lights+0xb0>)
 8001bba:	6818      	ldr	r0, [r3, #0]
 8001bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	210f      	movs	r1, #15
 8001bc4:	f008 ffaa 	bl	800ab1c <osEventFlagsWait>

		//if a flag bit is set, run the appropriate flashing routine
		//order of the conditionals indicates the priority of the flash routines
		if(osEventFlagsGet(flash_flags) & LIGHTS_OFF) {
 8001bc8:	4b25      	ldr	r3, [pc, #148]	; (8001c60 <run_board_lights+0xb0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f008 ff71 	bl	800aab4 <osEventFlagsGet>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d008      	beq.n	8001bee <run_board_lights+0x3e>
			osEventFlagsClear(flash_flags, LIGHTS_OFF); //clear the flag manually
 8001bdc:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <run_board_lights+0xb0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2101      	movs	r1, #1
 8001be2:	4618      	mov	r0, r3
 8001be4:	f008 ff22 	bl	800aa2c <osEventFlagsClear>
			do_lights_out();
 8001be8:	f000 f83c 	bl	8001c64 <do_lights_out>
 8001bec:	e7e4      	b.n	8001bb8 <run_board_lights+0x8>
		}
		else if (osEventFlagsGet(flash_flags) & TAILLIGHT_ONLY) {
 8001bee:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <run_board_lights+0xb0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f008 ff5e 	bl	800aab4 <osEventFlagsGet>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d008      	beq.n	8001c14 <run_board_lights+0x64>
			osEventFlagsClear(flash_flags, TAILLIGHT_ONLY);
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <run_board_lights+0xb0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2102      	movs	r1, #2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f008 ff0f 	bl	800aa2c <osEventFlagsClear>
			do_taillight_only();
 8001c0e:	f000 f83b 	bl	8001c88 <do_taillight_only>
 8001c12:	e7d1      	b.n	8001bb8 <run_board_lights+0x8>
		}
		else if (osEventFlagsGet(flash_flags) & TAIL_SOLID_HEAD) {
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <run_board_lights+0xb0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f008 ff4b 	bl	800aab4 <osEventFlagsGet>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d008      	beq.n	8001c3a <run_board_lights+0x8a>
			osEventFlagsClear(flash_flags, TAIL_SOLID_HEAD);
 8001c28:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <run_board_lights+0xb0>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2104      	movs	r1, #4
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f008 fefc 	bl	800aa2c <osEventFlagsClear>
			do_tail_solid_head();
 8001c34:	f000 f860 	bl	8001cf8 <do_tail_solid_head>
 8001c38:	e7be      	b.n	8001bb8 <run_board_lights+0x8>
		}
		else if (osEventFlagsGet(flash_flags) & TAIL_AND_HEAD) {
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <run_board_lights+0xb0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f008 ff38 	bl	800aab4 <osEventFlagsGet>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0b4      	beq.n	8001bb8 <run_board_lights+0x8>
			osEventFlagsClear(flash_flags, TAIL_AND_HEAD);
 8001c4e:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <run_board_lights+0xb0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2108      	movs	r1, #8
 8001c54:	4618      	mov	r0, r3
 8001c56:	f008 fee9 	bl	800aa2c <osEventFlagsClear>
			do_tail_and_head();
 8001c5a:	f000 f885 	bl	8001d68 <do_tail_and_head>
		osEventFlagsWait(flash_flags, ALL_LIGHTS_FLAGS, osFlagsNoClear, osWaitForever);
 8001c5e:	e7ab      	b.n	8001bb8 <run_board_lights+0x8>
 8001c60:	20000394 	.word	0x20000394

08001c64 <do_lights_out>:
	}

	osThreadExit();
}

static void do_lights_out() {
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
	//set the PWM compare registers to 0
	CHAN_HEAD_COUNT = 0;
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <do_lights_out+0x20>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	641a      	str	r2, [r3, #64]	; 0x40
	CHAN_TAIL_COUNT = 0;
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <do_lights_out+0x20>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2200      	movs	r2, #0
 8001c76:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	200090f8 	.word	0x200090f8

08001c88 <do_taillight_only>:

static void do_taillight_only() {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
	CHAN_HEAD_COUNT = 0; //turn off headlights
 8001c8e:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <do_taillight_only+0x68>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2200      	movs	r2, #0
 8001c94:	641a      	str	r2, [r3, #64]	; 0x40

	//infinite loop, but we'll break out of it when any other event flags are asserted
	osStatus_t status;
	while(true) {
		CHAN_TAIL_COUNT = 750;
 8001c96:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <do_taillight_only+0x68>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001c9e:	63da      	str	r2, [r3, #60]	; 0x3c
		status = osEventFlagsWait(flash_flags, ALL_LIGHTS_FLAGS, osFlagsNoClear, 925); //non blocking delay with escape
 8001ca0:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <do_taillight_only+0x6c>)
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	f240 339d 	movw	r3, #925	; 0x39d
 8001ca8:	2202      	movs	r2, #2
 8001caa:	210f      	movs	r1, #15
 8001cac:	f008 ff36 	bl	800ab1c <osEventFlagsWait>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	607b      	str	r3, [r7, #4]
		if(status != osErrorTimeout) return;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f113 0f02 	cmn.w	r3, #2
 8001cba:	d112      	bne.n	8001ce2 <do_taillight_only+0x5a>

		CHAN_TAIL_COUNT = 1000;
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <do_taillight_only+0x68>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cc4:	63da      	str	r2, [r3, #60]	; 0x3c
		status = osEventFlagsWait(flash_flags, ALL_LIGHTS_FLAGS, osFlagsNoClear, 75); //non blocking delay with escape
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <do_taillight_only+0x6c>)
 8001cc8:	6818      	ldr	r0, [r3, #0]
 8001cca:	234b      	movs	r3, #75	; 0x4b
 8001ccc:	2202      	movs	r2, #2
 8001cce:	210f      	movs	r1, #15
 8001cd0:	f008 ff24 	bl	800ab1c <osEventFlagsWait>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	607b      	str	r3, [r7, #4]
		if(status != osErrorTimeout) return;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f113 0f02 	cmn.w	r3, #2
 8001cde:	d102      	bne.n	8001ce6 <do_taillight_only+0x5e>
		CHAN_TAIL_COUNT = 750;
 8001ce0:	e7d9      	b.n	8001c96 <do_taillight_only+0xe>
		if(status != osErrorTimeout) return;
 8001ce2:	bf00      	nop
 8001ce4:	e000      	b.n	8001ce8 <do_taillight_only+0x60>
		if(status != osErrorTimeout) return;
 8001ce6:	bf00      	nop
	}
}
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200090f8 	.word	0x200090f8
 8001cf4:	20000394 	.word	0x20000394

08001cf8 <do_tail_solid_head>:

static void do_tail_solid_head() {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
	CHAN_HEAD_COUNT = 1000; //turn on headlights
 8001cfe:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <do_tail_solid_head+0x68>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d06:	641a      	str	r2, [r3, #64]	; 0x40

	//infinite loop, but we'll break out of it when any other event flags are asserted
	osStatus_t status;
	while(true) {
		CHAN_TAIL_COUNT = 750;
 8001d08:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <do_tail_solid_head+0x68>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001d10:	63da      	str	r2, [r3, #60]	; 0x3c
		status = osEventFlagsWait(flash_flags, ALL_LIGHTS_FLAGS, osFlagsNoClear, 925); //non blocking delay with escape
 8001d12:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <do_tail_solid_head+0x6c>)
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	f240 339d 	movw	r3, #925	; 0x39d
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	210f      	movs	r1, #15
 8001d1e:	f008 fefd 	bl	800ab1c <osEventFlagsWait>
 8001d22:	4603      	mov	r3, r0
 8001d24:	607b      	str	r3, [r7, #4]
		if(status != osErrorTimeout) return;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f113 0f02 	cmn.w	r3, #2
 8001d2c:	d112      	bne.n	8001d54 <do_tail_solid_head+0x5c>

		CHAN_TAIL_COUNT = 1000;
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <do_tail_solid_head+0x68>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d36:	63da      	str	r2, [r3, #60]	; 0x3c
		status = osEventFlagsWait(flash_flags, ALL_LIGHTS_FLAGS, osFlagsNoClear, 75); //non blocking delay with escape
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <do_tail_solid_head+0x6c>)
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	234b      	movs	r3, #75	; 0x4b
 8001d3e:	2202      	movs	r2, #2
 8001d40:	210f      	movs	r1, #15
 8001d42:	f008 feeb 	bl	800ab1c <osEventFlagsWait>
 8001d46:	4603      	mov	r3, r0
 8001d48:	607b      	str	r3, [r7, #4]
		if(status != osErrorTimeout) return;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f113 0f02 	cmn.w	r3, #2
 8001d50:	d102      	bne.n	8001d58 <do_tail_solid_head+0x60>
		CHAN_TAIL_COUNT = 750;
 8001d52:	e7d9      	b.n	8001d08 <do_tail_solid_head+0x10>
		if(status != osErrorTimeout) return;
 8001d54:	bf00      	nop
 8001d56:	e000      	b.n	8001d5a <do_tail_solid_head+0x62>
		if(status != osErrorTimeout) return;
 8001d58:	bf00      	nop
	}
}
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	200090f8 	.word	0x200090f8
 8001d64:	20000394 	.word	0x20000394

08001d68 <do_tail_and_head>:

static void do_tail_and_head() {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
	//infinite loop, but we'll break out of it when any other event flags are asserted
	osStatus_t status;
	while(true) {
		CHAN_TAIL_COUNT = 750;
 8001d6e:	4b2f      	ldr	r3, [pc, #188]	; (8001e2c <do_tail_and_head+0xc4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001d76:	63da      	str	r2, [r3, #60]	; 0x3c
		CHAN_HEAD_COUNT = 1000;
 8001d78:	4b2c      	ldr	r3, [pc, #176]	; (8001e2c <do_tail_and_head+0xc4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40
		status = osEventFlagsWait(flash_flags, ALL_LIGHTS_FLAGS, osFlagsNoClear, 425); //non blocking delay with escape
 8001d82:	4b2b      	ldr	r3, [pc, #172]	; (8001e30 <do_tail_and_head+0xc8>)
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	210f      	movs	r1, #15
 8001d8e:	f008 fec5 	bl	800ab1c <osEventFlagsWait>
 8001d92:	4603      	mov	r3, r0
 8001d94:	607b      	str	r3, [r7, #4]
		if(status != osErrorTimeout) return;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f113 0f02 	cmn.w	r3, #2
 8001d9c:	d13c      	bne.n	8001e18 <do_tail_and_head+0xb0>

		CHAN_HEAD_COUNT = 750;
 8001d9e:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <do_tail_and_head+0xc4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001da6:	641a      	str	r2, [r3, #64]	; 0x40
		status = osEventFlagsWait(flash_flags, ALL_LIGHTS_FLAGS, osFlagsNoClear, 75); //non blocking delay with escape
 8001da8:	4b21      	ldr	r3, [pc, #132]	; (8001e30 <do_tail_and_head+0xc8>)
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	234b      	movs	r3, #75	; 0x4b
 8001dae:	2202      	movs	r2, #2
 8001db0:	210f      	movs	r1, #15
 8001db2:	f008 feb3 	bl	800ab1c <osEventFlagsWait>
 8001db6:	4603      	mov	r3, r0
 8001db8:	607b      	str	r3, [r7, #4]
		if(status != osErrorTimeout) return;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f113 0f02 	cmn.w	r3, #2
 8001dc0:	d12c      	bne.n	8001e1c <do_tail_and_head+0xb4>

		CHAN_HEAD_COUNT = 1000;
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <do_tail_and_head+0xc4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dca:	641a      	str	r2, [r3, #64]	; 0x40
		status = osEventFlagsWait(flash_flags, ALL_LIGHTS_FLAGS, osFlagsNoClear, 425); //non blocking delay with escape
 8001dcc:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <do_tail_and_head+0xc8>)
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	210f      	movs	r1, #15
 8001dd8:	f008 fea0 	bl	800ab1c <osEventFlagsWait>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	607b      	str	r3, [r7, #4]
		if(status != osErrorTimeout) return;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f113 0f02 	cmn.w	r3, #2
 8001de6:	d11b      	bne.n	8001e20 <do_tail_and_head+0xb8>

		CHAN_HEAD_COUNT = 750;
 8001de8:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <do_tail_and_head+0xc4>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40
		CHAN_TAIL_COUNT = 1000;
 8001df2:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <do_tail_and_head+0xc4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dfa:	63da      	str	r2, [r3, #60]	; 0x3c
		status = osEventFlagsWait(flash_flags, ALL_LIGHTS_FLAGS, osFlagsNoClear, 75); //non blocking delay with escape
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <do_tail_and_head+0xc8>)
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	234b      	movs	r3, #75	; 0x4b
 8001e02:	2202      	movs	r2, #2
 8001e04:	210f      	movs	r1, #15
 8001e06:	f008 fe89 	bl	800ab1c <osEventFlagsWait>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	607b      	str	r3, [r7, #4]
		if(status != osErrorTimeout) return;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f113 0f02 	cmn.w	r3, #2
 8001e14:	d106      	bne.n	8001e24 <do_tail_and_head+0xbc>
		CHAN_TAIL_COUNT = 750;
 8001e16:	e7aa      	b.n	8001d6e <do_tail_and_head+0x6>
		if(status != osErrorTimeout) return;
 8001e18:	bf00      	nop
 8001e1a:	e004      	b.n	8001e26 <do_tail_and_head+0xbe>
		if(status != osErrorTimeout) return;
 8001e1c:	bf00      	nop
 8001e1e:	e002      	b.n	8001e26 <do_tail_and_head+0xbe>
		if(status != osErrorTimeout) return;
 8001e20:	bf00      	nop
 8001e22:	e000      	b.n	8001e26 <do_tail_and_head+0xbe>
		if(status != osErrorTimeout) return;
 8001e24:	bf00      	nop
	}
}
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	200090f8 	.word	0x200090f8
 8001e30:	20000394 	.word	0x20000394

08001e34 <HAL_GPIO_EXTI_Callback>:


//============================ ISRs ===========================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == RC_IN_Pin) {
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d11f      	bne.n	8001e84 <HAL_GPIO_EXTI_Callback+0x50>
		//if the pin is high, reset the timer
		if(HAL_GPIO_ReadPin(RC_IN_GPIO_Port, RC_IN_Pin) == GPIO_PIN_SET) {
 8001e44:	2102      	movs	r1, #2
 8001e46:	4811      	ldr	r0, [pc, #68]	; (8001e8c <HAL_GPIO_EXTI_Callback+0x58>)
 8001e48:	f002 fe5c 	bl	8004b04 <HAL_GPIO_ReadPin>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d105      	bne.n	8001e5e <HAL_GPIO_EXTI_Callback+0x2a>
			pulse_tim->Instance->CNT = 0; //reset the timer
 8001e52:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	625a      	str	r2, [r3, #36]	; 0x24
			pulse_width = pulse_tim->Instance->CNT;
			osMessageQueueReset(pulse_buf);
			osMessageQueuePut(pulse_buf, &pulse_width, 0, 0);
		}
	}
}
 8001e5c:	e012      	b.n	8001e84 <HAL_GPIO_EXTI_Callback+0x50>
			pulse_width = pulse_tim->Instance->CNT;
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	81fb      	strh	r3, [r7, #14]
			osMessageQueueReset(pulse_buf);
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <HAL_GPIO_EXTI_Callback+0x60>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f009 f868 	bl	800af44 <osMessageQueueReset>
			osMessageQueuePut(pulse_buf, &pulse_width, 0, 0);
 8001e74:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <HAL_GPIO_EXTI_Callback+0x60>)
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	f107 010e 	add.w	r1, r7, #14
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f008 ff48 	bl	800ad14 <osMessageQueuePut>
}
 8001e84:	bf00      	nop
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40020000 	.word	0x40020000
 8001e90:	2000038c 	.word	0x2000038c
 8001e94:	20000390 	.word	0x20000390

08001e98 <buzzer_init>:
static void do_buzz_warn_low();
static void do_buzz_warn_critical();
static void do_buzz_shutdown();

//============= PUBLIC FUNCTION DEFINITIONS =============
void buzzer_init() {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af00      	add	r7, sp, #0
	//initialize the signal flags for the buzzer thread
	buzzer_action_flags= osEventFlagsNew(NULL);
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f008 fd1a 	bl	800a8d8 <osEventFlagsNew>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <buzzer_init+0x54>)
 8001ea8:	601a      	str	r2, [r3, #0]
	osEventFlagsSet(buzzer_action_flags, BIT_BOOT_UP); //set the boot up bit right away
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <buzzer_init+0x54>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2101      	movs	r1, #1
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f008 fd63 	bl	800a97c <osEventFlagsSet>

	//initialize the main buzzer thread
	const osThreadAttr_t buzzer_atributes = {
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	2224      	movs	r2, #36	; 0x24
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f00c ffbc 	bl	800ee3a <memset>
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <buzzer_init+0x58>)
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8001eca:	61bb      	str	r3, [r7, #24]
 8001ecc:	2320      	movs	r3, #32
 8001ece:	61fb      	str	r3, [r7, #28]
			.name = "buzzer",
			.priority = (osPriority_t) osPriorityAboveNormal,
			.stack_size = 350 //possibly shrink this a little
	};
	buzzer_handle = osThreadNew(buzzer_thread, NULL, &buzzer_atributes);
 8001ed0:	1d3b      	adds	r3, r7, #4
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4807      	ldr	r0, [pc, #28]	; (8001ef4 <buzzer_init+0x5c>)
 8001ed8:	f008 fb82 	bl	800a5e0 <osThreadNew>
 8001edc:	4602      	mov	r2, r0
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <buzzer_init+0x60>)
 8001ee0:	601a      	str	r2, [r3, #0]
}
 8001ee2:	bf00      	nop
 8001ee4:	3728      	adds	r7, #40	; 0x28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	200003a4 	.word	0x200003a4
 8001ef0:	08010968 	.word	0x08010968
 8001ef4:	08001f5d 	.word	0x08001f5d
 8001ef8:	200003a0 	.word	0x200003a0

08001efc <buzz_done_init>:

//just set the action flag for the buzzer thread and return
void buzz_done_init() { osEventFlagsSet(buzzer_action_flags, BIT_DONE_INIT); }
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <buzz_done_init+0x14>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2102      	movs	r1, #2
 8001f06:	4618      	mov	r0, r3
 8001f08:	f008 fd38 	bl	800a97c <osEventFlagsSet>
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	200003a4 	.word	0x200003a4

08001f14 <buzz_warn_low>:
void buzz_warn_low() {osEventFlagsSet(buzzer_action_flags, BIT_WARN_LOW); }
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4b03      	ldr	r3, [pc, #12]	; (8001f28 <buzz_warn_low+0x14>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2104      	movs	r1, #4
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f008 fd2c 	bl	800a97c <osEventFlagsSet>
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	200003a4 	.word	0x200003a4

08001f2c <buzz_warn_critical>:
void buzz_warn_critical() {osEventFlagsSet(buzzer_action_flags, BIT_WARN_CRIT); }
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <buzz_warn_critical+0x14>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2108      	movs	r1, #8
 8001f36:	4618      	mov	r0, r3
 8001f38:	f008 fd20 	bl	800a97c <osEventFlagsSet>
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	200003a4 	.word	0x200003a4

08001f44 <buzz_shutdown>:
void buzz_shutdown() {osEventFlagsSet(buzzer_action_flags, BIT_SHUTDOWN); }
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <buzz_shutdown+0x14>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2110      	movs	r1, #16
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f008 fd14 	bl	800a97c <osEventFlagsSet>
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	200003a4 	.word	0x200003a4

08001f5c <buzzer_thread>:


//====================== PRIVATE FUNCTION DEFINITIONS ======================

//buzzer main thread function
static void buzzer_thread(void* argument) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	while(1) {
		//suspend this thread until any flag is set (and don't clear the set flag)
		osEventFlagsWait(buzzer_action_flags, BIT_ALL_FLAGS, osFlagsNoClear, osWaitForever);
 8001f64:	4b33      	ldr	r3, [pc, #204]	; (8002034 <buzzer_thread+0xd8>)
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	211f      	movs	r1, #31
 8001f70:	f008 fdd4 	bl	800ab1c <osEventFlagsWait>

		//if a flag bit is set, run the appropriate buzzer routine
		//order of the conditionals indicates the priority of the buzz routines
		//each routine will fully complete before going to another routine
		if(osEventFlagsGet(buzzer_action_flags) & BIT_WARN_CRIT) {
 8001f74:	4b2f      	ldr	r3, [pc, #188]	; (8002034 <buzzer_thread+0xd8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f008 fd9b 	bl	800aab4 <osEventFlagsGet>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <buzzer_thread+0x3e>
			do_buzz_warn_critical();
 8001f88:	f000 f90e 	bl	80021a8 <do_buzz_warn_critical>
			osEventFlagsClear(buzzer_action_flags, BIT_WARN_CRIT); //clear the flag manually
 8001f8c:	4b29      	ldr	r3, [pc, #164]	; (8002034 <buzzer_thread+0xd8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2108      	movs	r1, #8
 8001f92:	4618      	mov	r0, r3
 8001f94:	f008 fd4a 	bl	800aa2c <osEventFlagsClear>
 8001f98:	e7e4      	b.n	8001f64 <buzzer_thread+0x8>
		}
		else if (osEventFlagsGet(buzzer_action_flags) & BIT_WARN_LOW) {
 8001f9a:	4b26      	ldr	r3, [pc, #152]	; (8002034 <buzzer_thread+0xd8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f008 fd88 	bl	800aab4 <osEventFlagsGet>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d008      	beq.n	8001fc0 <buzzer_thread+0x64>
			do_buzz_warn_low();
 8001fae:	f000 f8c3 	bl	8002138 <do_buzz_warn_low>
			osEventFlagsClear(buzzer_action_flags, BIT_WARN_LOW);
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <buzzer_thread+0xd8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2104      	movs	r1, #4
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f008 fd37 	bl	800aa2c <osEventFlagsClear>
 8001fbe:	e7d1      	b.n	8001f64 <buzzer_thread+0x8>
		}
		else if (osEventFlagsGet(buzzer_action_flags) & BIT_DONE_INIT) {
 8001fc0:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <buzzer_thread+0xd8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f008 fd75 	bl	800aab4 <osEventFlagsGet>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d008      	beq.n	8001fe6 <buzzer_thread+0x8a>
			do_buzz_done_init();
 8001fd4:	f000 f86a 	bl	80020ac <do_buzz_done_init>
			osEventFlagsClear(buzzer_action_flags, BIT_DONE_INIT);
 8001fd8:	4b16      	ldr	r3, [pc, #88]	; (8002034 <buzzer_thread+0xd8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2102      	movs	r1, #2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f008 fd24 	bl	800aa2c <osEventFlagsClear>
 8001fe4:	e7be      	b.n	8001f64 <buzzer_thread+0x8>
		}
		else if (osEventFlagsGet(buzzer_action_flags) & BIT_BOOT_UP) {
 8001fe6:	4b13      	ldr	r3, [pc, #76]	; (8002034 <buzzer_thread+0xd8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f008 fd62 	bl	800aab4 <osEventFlagsGet>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d008      	beq.n	800200c <buzzer_thread+0xb0>
			do_buzz_boot_up();
 8001ffa:	f000 f81d 	bl	8002038 <do_buzz_boot_up>
			osEventFlagsClear(buzzer_action_flags, BIT_BOOT_UP);
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <buzzer_thread+0xd8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2101      	movs	r1, #1
 8002004:	4618      	mov	r0, r3
 8002006:	f008 fd11 	bl	800aa2c <osEventFlagsClear>
 800200a:	e7ab      	b.n	8001f64 <buzzer_thread+0x8>
		}
		else if (osEventFlagsGet(buzzer_action_flags) & BIT_SHUTDOWN) {
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <buzzer_thread+0xd8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f008 fd4f 	bl	800aab4 <osEventFlagsGet>
 8002016:	4603      	mov	r3, r0
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0a1      	beq.n	8001f64 <buzzer_thread+0x8>
			do_buzz_shutdown();
 8002020:	f000 f8ea 	bl	80021f8 <do_buzz_shutdown>
			osEventFlagsClear(buzzer_action_flags, BIT_SHUTDOWN);
 8002024:	4b03      	ldr	r3, [pc, #12]	; (8002034 <buzzer_thread+0xd8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2110      	movs	r1, #16
 800202a:	4618      	mov	r0, r3
 800202c:	f008 fcfe 	bl	800aa2c <osEventFlagsClear>
		osEventFlagsWait(buzzer_action_flags, BIT_ALL_FLAGS, osFlagsNoClear, osWaitForever);
 8002030:	e798      	b.n	8001f64 <buzzer_thread+0x8>
 8002032:	bf00      	nop
 8002034:	200003a4 	.word	0x200003a4

08002038 <do_buzz_boot_up>:
	}
	//gracefully exiting if it somehow gets here
	osThreadExit();
}

static void do_buzz_boot_up() {
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
	TIME_PERIOD(1000);
 800203c:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <do_buzz_boot_up+0x70>)
 800203e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002042:	60da      	str	r2, [r3, #12]
 8002044:	4818      	ldr	r0, [pc, #96]	; (80020a8 <do_buzz_boot_up+0x70>)
 8002046:	f004 fbab 	bl	80067a0 <HAL_TIM_Base_Init>
	START();
 800204a:	2108      	movs	r1, #8
 800204c:	4816      	ldr	r0, [pc, #88]	; (80020a8 <do_buzz_boot_up+0x70>)
 800204e:	f004 fc21 	bl	8006894 <HAL_TIM_OC_Start>
	osDelay(BOOT_BUZZ_DELAY);
 8002052:	2096      	movs	r0, #150	; 0x96
 8002054:	f008 fc12 	bl	800a87c <osDelay>

	TIME_PERIOD(800); //major 3rd from base
 8002058:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <do_buzz_boot_up+0x70>)
 800205a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800205e:	60da      	str	r2, [r3, #12]
 8002060:	4811      	ldr	r0, [pc, #68]	; (80020a8 <do_buzz_boot_up+0x70>)
 8002062:	f004 fb9d 	bl	80067a0 <HAL_TIM_Base_Init>
	osDelay(BOOT_BUZZ_DELAY);
 8002066:	2096      	movs	r0, #150	; 0x96
 8002068:	f008 fc08 	bl	800a87c <osDelay>

	TIME_PERIOD(666); //perfect 5th from base
 800206c:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <do_buzz_boot_up+0x70>)
 800206e:	f240 229a 	movw	r2, #666	; 0x29a
 8002072:	60da      	str	r2, [r3, #12]
 8002074:	480c      	ldr	r0, [pc, #48]	; (80020a8 <do_buzz_boot_up+0x70>)
 8002076:	f004 fb93 	bl	80067a0 <HAL_TIM_Base_Init>
	osDelay(BOOT_BUZZ_DELAY);
 800207a:	2096      	movs	r0, #150	; 0x96
 800207c:	f008 fbfe 	bl	800a87c <osDelay>

	TIME_PERIOD(500); //perfect octave from base
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <do_buzz_boot_up+0x70>)
 8002082:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002086:	60da      	str	r2, [r3, #12]
 8002088:	4807      	ldr	r0, [pc, #28]	; (80020a8 <do_buzz_boot_up+0x70>)
 800208a:	f004 fb89 	bl	80067a0 <HAL_TIM_Base_Init>
	osDelay(BOOT_BUZZ_DELAY);
 800208e:	2096      	movs	r0, #150	; 0x96
 8002090:	f008 fbf4 	bl	800a87c <osDelay>

	STOP();
 8002094:	2108      	movs	r1, #8
 8002096:	4804      	ldr	r0, [pc, #16]	; (80020a8 <do_buzz_boot_up+0x70>)
 8002098:	f004 fc2e 	bl	80068f8 <HAL_TIM_OC_Stop>
	osDelay(250); //chill for a bit before returning
 800209c:	20fa      	movs	r0, #250	; 0xfa
 800209e:	f008 fbed 	bl	800a87c <osDelay>
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20009288 	.word	0x20009288

080020ac <do_buzz_done_init>:

static void do_buzz_done_init() {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 1; i++) {
 80020b2:	2300      	movs	r3, #0
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	e035      	b.n	8002124 <do_buzz_done_init+0x78>
		TIME_PERIOD(1000);
 80020b8:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <do_buzz_done_init+0x88>)
 80020ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020be:	60da      	str	r2, [r3, #12]
 80020c0:	481c      	ldr	r0, [pc, #112]	; (8002134 <do_buzz_done_init+0x88>)
 80020c2:	f004 fb6d 	bl	80067a0 <HAL_TIM_Base_Init>
		START();
 80020c6:	2108      	movs	r1, #8
 80020c8:	481a      	ldr	r0, [pc, #104]	; (8002134 <do_buzz_done_init+0x88>)
 80020ca:	f004 fbe3 	bl	8006894 <HAL_TIM_OC_Start>
		osDelay(INIT_DONE_DELAY);
 80020ce:	2032      	movs	r0, #50	; 0x32
 80020d0:	f008 fbd4 	bl	800a87c <osDelay>

		TIME_PERIOD(800); //major third above base note
 80020d4:	4b17      	ldr	r3, [pc, #92]	; (8002134 <do_buzz_done_init+0x88>)
 80020d6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80020da:	60da      	str	r2, [r3, #12]
 80020dc:	4815      	ldr	r0, [pc, #84]	; (8002134 <do_buzz_done_init+0x88>)
 80020de:	f004 fb5f 	bl	80067a0 <HAL_TIM_Base_Init>
		osDelay(INIT_DONE_DELAY);
 80020e2:	2032      	movs	r0, #50	; 0x32
 80020e4:	f008 fbca 	bl	800a87c <osDelay>

		TIME_PERIOD(666); //perfect fifth from base note
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <do_buzz_done_init+0x88>)
 80020ea:	f240 229a 	movw	r2, #666	; 0x29a
 80020ee:	60da      	str	r2, [r3, #12]
 80020f0:	4810      	ldr	r0, [pc, #64]	; (8002134 <do_buzz_done_init+0x88>)
 80020f2:	f004 fb55 	bl	80067a0 <HAL_TIM_Base_Init>
		osDelay(INIT_DONE_DELAY);
 80020f6:	2032      	movs	r0, #50	; 0x32
 80020f8:	f008 fbc0 	bl	800a87c <osDelay>

		TIME_PERIOD(500); //octave from base note
 80020fc:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <do_buzz_done_init+0x88>)
 80020fe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002102:	60da      	str	r2, [r3, #12]
 8002104:	480b      	ldr	r0, [pc, #44]	; (8002134 <do_buzz_done_init+0x88>)
 8002106:	f004 fb4b 	bl	80067a0 <HAL_TIM_Base_Init>
		osDelay(INIT_DONE_DELAY);
 800210a:	2032      	movs	r0, #50	; 0x32
 800210c:	f008 fbb6 	bl	800a87c <osDelay>

		STOP();
 8002110:	2108      	movs	r1, #8
 8002112:	4808      	ldr	r0, [pc, #32]	; (8002134 <do_buzz_done_init+0x88>)
 8002114:	f004 fbf0 	bl	80068f8 <HAL_TIM_OC_Stop>
		osDelay(INIT_DONE_PAUSE);
 8002118:	2096      	movs	r0, #150	; 0x96
 800211a:	f008 fbaf 	bl	800a87c <osDelay>
	for(int i = 0; i < 1; i++) {
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3301      	adds	r3, #1
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	ddc6      	ble.n	80020b8 <do_buzz_done_init+0xc>
	}
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20009288 	.word	0x20009288

08002138 <do_buzz_warn_low>:

static void do_buzz_warn_low() {
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++) {
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]
 8002142:	e028      	b.n	8002196 <do_buzz_warn_low+0x5e>
		TIME_PERIOD(125);
 8002144:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <do_buzz_warn_low+0x6c>)
 8002146:	227d      	movs	r2, #125	; 0x7d
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	4816      	ldr	r0, [pc, #88]	; (80021a4 <do_buzz_warn_low+0x6c>)
 800214c:	f004 fb28 	bl	80067a0 <HAL_TIM_Base_Init>
		START();
 8002150:	2108      	movs	r1, #8
 8002152:	4814      	ldr	r0, [pc, #80]	; (80021a4 <do_buzz_warn_low+0x6c>)
 8002154:	f004 fb9e 	bl	8006894 <HAL_TIM_OC_Start>
		osDelay(WARN_BUZZ_TIME);
 8002158:	204b      	movs	r0, #75	; 0x4b
 800215a:	f008 fb8f 	bl	800a87c <osDelay>
		TIME_PERIOD(188);
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <do_buzz_warn_low+0x6c>)
 8002160:	22bc      	movs	r2, #188	; 0xbc
 8002162:	60da      	str	r2, [r3, #12]
 8002164:	480f      	ldr	r0, [pc, #60]	; (80021a4 <do_buzz_warn_low+0x6c>)
 8002166:	f004 fb1b 	bl	80067a0 <HAL_TIM_Base_Init>
		osDelay(WARN_BUZZ_TIME);
 800216a:	204b      	movs	r0, #75	; 0x4b
 800216c:	f008 fb86 	bl	800a87c <osDelay>
		TIME_PERIOD(250);
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <do_buzz_warn_low+0x6c>)
 8002172:	22fa      	movs	r2, #250	; 0xfa
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	480b      	ldr	r0, [pc, #44]	; (80021a4 <do_buzz_warn_low+0x6c>)
 8002178:	f004 fb12 	bl	80067a0 <HAL_TIM_Base_Init>
		osDelay(WARN_BUZZ_TIME);
 800217c:	204b      	movs	r0, #75	; 0x4b
 800217e:	f008 fb7d 	bl	800a87c <osDelay>
		STOP();
 8002182:	2108      	movs	r1, #8
 8002184:	4807      	ldr	r0, [pc, #28]	; (80021a4 <do_buzz_warn_low+0x6c>)
 8002186:	f004 fbb7 	bl	80068f8 <HAL_TIM_OC_Stop>

		osDelay(WARN_OFF_TIME);
 800218a:	20fa      	movs	r0, #250	; 0xfa
 800218c:	f008 fb76 	bl	800a87c <osDelay>
	for(int i = 0; i < 8; i++) {
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3301      	adds	r3, #1
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b07      	cmp	r3, #7
 800219a:	ddd3      	ble.n	8002144 <do_buzz_warn_low+0xc>
	}

}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20009288 	.word	0x20009288

080021a8 <do_buzz_warn_critical>:

static void do_buzz_warn_critical() {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++) {
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	e017      	b.n	80021e4 <do_buzz_warn_critical+0x3c>
		TIME_PERIOD(125); //125 before, making 250 to make testing less annoying
 80021b4:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <do_buzz_warn_critical+0x4c>)
 80021b6:	227d      	movs	r2, #125	; 0x7d
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	480e      	ldr	r0, [pc, #56]	; (80021f4 <do_buzz_warn_critical+0x4c>)
 80021bc:	f004 faf0 	bl	80067a0 <HAL_TIM_Base_Init>
		START();
 80021c0:	2108      	movs	r1, #8
 80021c2:	480c      	ldr	r0, [pc, #48]	; (80021f4 <do_buzz_warn_critical+0x4c>)
 80021c4:	f004 fb66 	bl	8006894 <HAL_TIM_OC_Start>
		osDelay(CRITIAL_ON_TIME);
 80021c8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80021cc:	f008 fb56 	bl	800a87c <osDelay>

		STOP();
 80021d0:	2108      	movs	r1, #8
 80021d2:	4808      	ldr	r0, [pc, #32]	; (80021f4 <do_buzz_warn_critical+0x4c>)
 80021d4:	f004 fb90 	bl	80068f8 <HAL_TIM_OC_Stop>
		osDelay(CRITICAL_OFF_TIME);
 80021d8:	2064      	movs	r0, #100	; 0x64
 80021da:	f008 fb4f 	bl	800a87c <osDelay>
	for(int i = 0; i < 8; i++) {
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3301      	adds	r3, #1
 80021e2:	607b      	str	r3, [r7, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b07      	cmp	r3, #7
 80021e8:	dde4      	ble.n	80021b4 <do_buzz_warn_critical+0xc>
	}
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20009288 	.word	0x20009288

080021f8 <do_buzz_shutdown>:

static void do_buzz_shutdown() {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
	TIME_PERIOD(500);
 80021fc:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <do_buzz_shutdown+0x70>)
 80021fe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002202:	60da      	str	r2, [r3, #12]
 8002204:	4818      	ldr	r0, [pc, #96]	; (8002268 <do_buzz_shutdown+0x70>)
 8002206:	f004 facb 	bl	80067a0 <HAL_TIM_Base_Init>
	START();
 800220a:	2108      	movs	r1, #8
 800220c:	4816      	ldr	r0, [pc, #88]	; (8002268 <do_buzz_shutdown+0x70>)
 800220e:	f004 fb41 	bl	8006894 <HAL_TIM_OC_Start>
	osDelay(BOOT_BUZZ_DELAY);
 8002212:	2096      	movs	r0, #150	; 0x96
 8002214:	f008 fb32 	bl	800a87c <osDelay>

	TIME_PERIOD(666); //major 3rd from base
 8002218:	4b13      	ldr	r3, [pc, #76]	; (8002268 <do_buzz_shutdown+0x70>)
 800221a:	f240 229a 	movw	r2, #666	; 0x29a
 800221e:	60da      	str	r2, [r3, #12]
 8002220:	4811      	ldr	r0, [pc, #68]	; (8002268 <do_buzz_shutdown+0x70>)
 8002222:	f004 fabd 	bl	80067a0 <HAL_TIM_Base_Init>
	osDelay(BOOT_BUZZ_DELAY);
 8002226:	2096      	movs	r0, #150	; 0x96
 8002228:	f008 fb28 	bl	800a87c <osDelay>

	TIME_PERIOD(800); //perfect 5th from base
 800222c:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <do_buzz_shutdown+0x70>)
 800222e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002232:	60da      	str	r2, [r3, #12]
 8002234:	480c      	ldr	r0, [pc, #48]	; (8002268 <do_buzz_shutdown+0x70>)
 8002236:	f004 fab3 	bl	80067a0 <HAL_TIM_Base_Init>
	osDelay(BOOT_BUZZ_DELAY);
 800223a:	2096      	movs	r0, #150	; 0x96
 800223c:	f008 fb1e 	bl	800a87c <osDelay>

	TIME_PERIOD(1000); //perfect octave from base
 8002240:	4b09      	ldr	r3, [pc, #36]	; (8002268 <do_buzz_shutdown+0x70>)
 8002242:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002246:	60da      	str	r2, [r3, #12]
 8002248:	4807      	ldr	r0, [pc, #28]	; (8002268 <do_buzz_shutdown+0x70>)
 800224a:	f004 faa9 	bl	80067a0 <HAL_TIM_Base_Init>
	osDelay(BOOT_BUZZ_DELAY);
 800224e:	2096      	movs	r0, #150	; 0x96
 8002250:	f008 fb14 	bl	800a87c <osDelay>

	STOP();
 8002254:	2108      	movs	r1, #8
 8002256:	4804      	ldr	r0, [pc, #16]	; (8002268 <do_buzz_shutdown+0x70>)
 8002258:	f004 fb4e 	bl	80068f8 <HAL_TIM_OC_Stop>
	osDelay(250); //chill for a bit before returning
 800225c:	20fa      	movs	r0, #250	; 0xfa
 800225e:	f008 fb0d 	bl	800a87c <osDelay>
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20009288 	.word	0x20009288

0800226c <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <shutdown>:
osMessageQueueId_t soc_buf;

#define ADC_OVERSAMPLES 16
volatile uint16_t adc_results[ADC_OVERSAMPLES];

void shutdown() {
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
	//remember to de-init the filesystem
	pushbutton_led_off();
 8002288:	f000 fc8c 	bl	8002ba4 <pushbutton_led_off>
	buzz_shutdown();
 800228c:	f7ff fe5a 	bl	8001f44 <buzz_shutdown>
	board_lights_shutdown();
 8002290:	f7ff fbac 	bl	80019ec <board_lights_shutdown>
	osDelay(600);
 8002294:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002298:	f008 faf0 	bl	800a87c <osDelay>
	HAL_GPIO_WritePin(FET_DRV_GPIO_Port, FET_DRV_Pin, GPIO_PIN_RESET); //logic rail should be enabled long enough to finish buzz
 800229c:	2200      	movs	r2, #0
 800229e:	2104      	movs	r1, #4
 80022a0:	4804      	ldr	r0, [pc, #16]	; (80022b4 <shutdown+0x30>)
 80022a2:	f002 fc47 	bl	8004b34 <HAL_GPIO_WritePin>
	osDelay(400);
 80022a6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80022aa:	f008 fae7 	bl	800a87c <osDelay>
	HAL_DeInit();
 80022ae:	f001 f95b 	bl	8003568 <HAL_DeInit>
	while(true);
 80022b2:	e7fe      	b.n	80022b2 <shutdown+0x2e>
 80022b4:	40020800 	.word	0x40020800

080022b8 <doStateMachine>:
}

//basically our main code goes here
void doStateMachine(void *argument) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	//initialize the pushbutton "module"
	//and store the pointer to its event flags
	pb_flags = pushbutton_init();
 80022c0:	f000 fc10 	bl	8002ae4 <pushbutton_init>
 80022c4:	4602      	mov	r2, r0
 80022c6:	4b4f      	ldr	r3, [pc, #316]	; (8002404 <doStateMachine+0x14c>)
 80022c8:	601a      	str	r2, [r3, #0]
	soc_buf = monitor_init();
 80022ca:	f7ff f853 	bl	8001374 <monitor_init>
 80022ce:	4602      	mov	r2, r0
 80022d0:	4b4d      	ldr	r3, [pc, #308]	; (8002408 <doStateMachine+0x150>)
 80022d2:	601a      	str	r2, [r3, #0]
	buzzer_init(); //buzz that we've booted and start the buzzer thread
 80022d4:	f7ff fde0 	bl	8001e98 <buzzer_init>
	pushbutton_led_fade(); //fade the LED button on the precharge animation
 80022d8:	f000 fc70 	bl	8002bbc <pushbutton_led_fade>

	osEventFlagsWait(pb_flags, BUTTON_LONG_PRESSED, osFlagsWaitAny, osWaitForever); //precharge for 3 seconds
 80022dc:	4b49      	ldr	r3, [pc, #292]	; (8002404 <doStateMachine+0x14c>)
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	f04f 33ff 	mov.w	r3, #4294967295
 80022e4:	2200      	movs	r2, #0
 80022e6:	2108      	movs	r1, #8
 80022e8:	f008 fc18 	bl	800ab1c <osEventFlagsWait>
	if(!v_sys_check(20, &hadc1)) shutdown(); //only start the main thread if the voltage is above 20V
 80022ec:	4847      	ldr	r0, [pc, #284]	; (800240c <doStateMachine+0x154>)
 80022ee:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80022f2:	f7ff f885 	bl	8001400 <v_sys_check>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f083 0301 	eor.w	r3, r3, #1
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <doStateMachine+0x4e>
 8002302:	f7ff ffbf 	bl	8002284 <shutdown>

	HAL_GPIO_WritePin(FET_DRV_GPIO_Port, FET_DRV_Pin, GPIO_PIN_SET); //enable the high side FETs to latch power on
 8002306:	2201      	movs	r2, #1
 8002308:	2104      	movs	r1, #4
 800230a:	4841      	ldr	r0, [pc, #260]	; (8002410 <doStateMachine+0x158>)
 800230c:	f002 fc12 	bl	8004b34 <HAL_GPIO_WritePin>

	monitor_start(&hadc1); //start the battery monitor
 8002310:	483e      	ldr	r0, [pc, #248]	; (800240c <doStateMachine+0x154>)
 8002312:	f7ff f84d 	bl	80013b0 <monitor_start>
	bargraph_init(soc_buf); //start the bargraph and pass it the ID of the SOC buffer
 8002316:	4b3c      	ldr	r3, [pc, #240]	; (8002408 <doStateMachine+0x150>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe fe50 	bl	8000fc0 <bargraph_init>
	board_lights_init(&htim3); //start the headlights/taillights thread and a timer for it to use
 8002320:	483c      	ldr	r0, [pc, #240]	; (8002414 <doStateMachine+0x15c>)
 8002322:	f7ff faf5 	bl	8001910 <board_lights_init>

	buzz_done_init(); //finished all the initialization and fully powered up
 8002326:	f7ff fde9 	bl	8001efc <buzz_done_init>
	pushbutton_led_on();
 800232a:	f000 fc2f 	bl	8002b8c <pushbutton_led_on>
	osEventFlagsClear(pb_flags, BUTTON_FLAGS_ALL); //clear all button flags so the board isn't shut down immediately
 800232e:	4b35      	ldr	r3, [pc, #212]	; (8002404 <doStateMachine+0x14c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	210f      	movs	r1, #15
 8002334:	4618      	mov	r0, r3
 8002336:	f008 fb79 	bl	800aa2c <osEventFlagsClear>

	uint32_t shutdown_tick = -1; //basically never shut down unless SOC critical or monitor failure
 800233a:	f04f 33ff 	mov.w	r3, #4294967295
 800233e:	60fb      	str	r3, [r7, #12]
	bool shutdown_latched = false; //flag that says we latched a shutdown signal
 8002340:	2300      	movs	r3, #0
 8002342:	72fb      	strb	r3, [r7, #11]

	while(1) {
		//do datalogging
		//handle the remote control input
		if(pushbutton_bumped(true)) bargraph_draw_soc(); //report SOC on short button press
 8002344:	2001      	movs	r0, #1
 8002346:	f000 fc77 	bl	8002c38 <pushbutton_bumped>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <doStateMachine+0x9c>
 8002350:	f7fe fe8c 	bl	800106c <bargraph_draw_soc>
		if(pushbutton_short_pressed(true)) pushbutton_led_flash(); //alert the user that a continued hold will shut down the board
 8002354:	2001      	movs	r0, #1
 8002356:	f000 fc95 	bl	8002c84 <pushbutton_short_pressed>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <doStateMachine+0xac>
 8002360:	f000 fc38 	bl	8002bd4 <pushbutton_led_flash>
		if(pushbutton_long_pressed(true)) shutdown(); //shutdown the board on long-press
 8002364:	2001      	movs	r0, #1
 8002366:	f000 fcb3 	bl	8002cd0 <pushbutton_long_pressed>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <doStateMachine+0xbc>
 8002370:	f7ff ff88 	bl	8002284 <shutdown>
		if(pushbutton_released(true)) pushbutton_led_on(); //light the LED solid when the button is released (in case of flashing)
 8002374:	2001      	movs	r0, #1
 8002376:	f000 fc39 	bl	8002bec <pushbutton_released>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <doStateMachine+0xcc>
 8002380:	f000 fc04 	bl	8002b8c <pushbutton_led_on>

		if(monitor_soc_crit(true) && !shutdown_latched) { //splitting this and the following so we can store separate log messages
 8002384:	2001      	movs	r0, #1
 8002386:	f7ff f8db 	bl	8001540 <monitor_soc_crit>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d010      	beq.n	80023b2 <doStateMachine+0xfa>
 8002390:	7afb      	ldrb	r3, [r7, #11]
 8002392:	f083 0301 	eor.w	r3, r3, #1
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <doStateMachine+0xfa>
			buzz_warn_critical();
 800239c:	f7ff fdc6 	bl	8001f2c <buzz_warn_critical>
			shutdown_tick = HAL_GetTick() + 10000;
 80023a0:	f001 f92a 	bl	80035f8 <HAL_GetTick>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80023aa:	3310      	adds	r3, #16
 80023ac:	60fb      	str	r3, [r7, #12]
			shutdown_latched = true;
 80023ae:	2301      	movs	r3, #1
 80023b0:	72fb      	strb	r3, [r7, #11]
		}
		if(monitor_read_fail(true) && !shutdown_latched) {
 80023b2:	2001      	movs	r0, #1
 80023b4:	f7ff f8ea 	bl	800158c <monitor_read_fail>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d010      	beq.n	80023e0 <doStateMachine+0x128>
 80023be:	7afb      	ldrb	r3, [r7, #11]
 80023c0:	f083 0301 	eor.w	r3, r3, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <doStateMachine+0x128>
			buzz_warn_critical();
 80023ca:	f7ff fdaf 	bl	8001f2c <buzz_warn_critical>
			shutdown_tick = HAL_GetTick() + 10000;
 80023ce:	f001 f913 	bl	80035f8 <HAL_GetTick>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80023d8:	3310      	adds	r3, #16
 80023da:	60fb      	str	r3, [r7, #12]
			shutdown_latched = true;
 80023dc:	2301      	movs	r3, #1
 80023de:	72fb      	strb	r3, [r7, #11]
		}
		if(monitor_soc_low(true)) buzz_warn_low();
 80023e0:	2001      	movs	r0, #1
 80023e2:	f7ff f887 	bl	80014f4 <monitor_soc_low>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <doStateMachine+0x138>
 80023ec:	f7ff fd92 	bl	8001f14 <buzz_warn_low>
		if(HAL_GetTick() > shutdown_tick) shutdown();
 80023f0:	f001 f902 	bl	80035f8 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d2a3      	bcs.n	8002344 <doStateMachine+0x8c>
 80023fc:	f7ff ff42 	bl	8002284 <shutdown>
		if(pushbutton_bumped(true)) bargraph_draw_soc(); //report SOC on short button press
 8002400:	e7a0      	b.n	8002344 <doStateMachine+0x8c>
 8002402:	bf00      	nop
 8002404:	200090f4 	.word	0x200090f4
 8002408:	20009138 	.word	0x20009138
 800240c:	200091c0 	.word	0x200091c0
 8002410:	40020800 	.word	0x40020800
 8002414:	20009180 	.word	0x20009180

08002418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800241c:	f001 f882 	bl	8003524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002420:	f000 f828 	bl	8002474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002424:	f000 fa8e 	bl	8002944 <MX_GPIO_Init>
  MX_DMA_Init();
 8002428:	f000 fa6c 	bl	8002904 <MX_DMA_Init>
  MX_TIM2_Init();
 800242c:	f000 f8e0 	bl	80025f0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002430:	f000 fa0e 	bl	8002850 <MX_TIM5_Init>
  MX_ADC1_Init();
 8002434:	f000 f88a 	bl	800254c <MX_ADC1_Init>
  MX_TIM3_Init();
 8002438:	f000 f950 	bl	80026dc <MX_TIM3_Init>
  MX_TIM4_Init();
 800243c:	f000 f9a4 	bl	8002788 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11);
 8002440:	4808      	ldr	r0, [pc, #32]	; (8002464 <main+0x4c>)
 8002442:	f004 f9d8 	bl	80067f6 <HAL_TIM_Base_Start_IT>
  MX_USB_DEVICE_Init();
 8002446:	f00b ffd9 	bl	800e3fc <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800244a:	f008 f85f 	bl	800a50c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of state_machine */
  state_machineHandle = osThreadNew(doStateMachine, NULL, &state_machine_attributes);
 800244e:	4a06      	ldr	r2, [pc, #24]	; (8002468 <main+0x50>)
 8002450:	2100      	movs	r1, #0
 8002452:	4806      	ldr	r0, [pc, #24]	; (800246c <main+0x54>)
 8002454:	f008 f8c4 	bl	800a5e0 <osThreadNew>
 8002458:	4602      	mov	r2, r0
 800245a:	4b05      	ldr	r3, [pc, #20]	; (8002470 <main+0x58>)
 800245c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800245e:	f008 f889 	bl	800a574 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002462:	e7fe      	b.n	8002462 <main+0x4a>
 8002464:	200092cc 	.word	0x200092cc
 8002468:	080109e4 	.word	0x080109e4
 800246c:	080022b9 	.word	0x080022b9
 8002470:	200092c8 	.word	0x200092c8

08002474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b094      	sub	sp, #80	; 0x50
 8002478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800247a:	f107 0320 	add.w	r3, r7, #32
 800247e:	2230      	movs	r2, #48	; 0x30
 8002480:	2100      	movs	r1, #0
 8002482:	4618      	mov	r0, r3
 8002484:	f00c fcd9 	bl	800ee3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002498:	2300      	movs	r3, #0
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	4b29      	ldr	r3, [pc, #164]	; (8002544 <SystemClock_Config+0xd0>)
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	4a28      	ldr	r2, [pc, #160]	; (8002544 <SystemClock_Config+0xd0>)
 80024a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a6:	6413      	str	r3, [r2, #64]	; 0x40
 80024a8:	4b26      	ldr	r3, [pc, #152]	; (8002544 <SystemClock_Config+0xd0>)
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80024b4:	2300      	movs	r3, #0
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	4b23      	ldr	r3, [pc, #140]	; (8002548 <SystemClock_Config+0xd4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80024c0:	4a21      	ldr	r2, [pc, #132]	; (8002548 <SystemClock_Config+0xd4>)
 80024c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	4b1f      	ldr	r3, [pc, #124]	; (8002548 <SystemClock_Config+0xd4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024d0:	607b      	str	r3, [r7, #4]
 80024d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024d4:	2301      	movs	r3, #1
 80024d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80024d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024de:	2302      	movs	r3, #2
 80024e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80024e8:	2304      	movs	r3, #4
 80024ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80024ec:	23c0      	movs	r3, #192	; 0xc0
 80024ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80024f0:	2306      	movs	r3, #6
 80024f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80024f4:	2308      	movs	r3, #8
 80024f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024f8:	f107 0320 	add.w	r3, r7, #32
 80024fc:	4618      	mov	r0, r3
 80024fe:	f003 fccf 	bl	8005ea0 <HAL_RCC_OscConfig>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002508:	f000 fae4 	bl	8002ad4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800250c:	230f      	movs	r3, #15
 800250e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002510:	2302      	movs	r3, #2
 8002512:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800251c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800251e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002522:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002524:	f107 030c 	add.w	r3, r7, #12
 8002528:	2102      	movs	r1, #2
 800252a:	4618      	mov	r0, r3
 800252c:	f003 ff28 	bl	8006380 <HAL_RCC_ClockConfig>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002536:	f000 facd 	bl	8002ad4 <Error_Handler>
  }
}
 800253a:	bf00      	nop
 800253c:	3750      	adds	r7, #80	; 0x50
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40023800 	.word	0x40023800
 8002548:	40007000 	.word	0x40007000

0800254c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002552:	463b      	mov	r3, r7
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	609a      	str	r2, [r3, #8]
 800255c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800255e:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <MX_ADC1_Init+0x98>)
 8002560:	4a21      	ldr	r2, [pc, #132]	; (80025e8 <MX_ADC1_Init+0x9c>)
 8002562:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002564:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <MX_ADC1_Init+0x98>)
 8002566:	2200      	movs	r2, #0
 8002568:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800256a:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <MX_ADC1_Init+0x98>)
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002570:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <MX_ADC1_Init+0x98>)
 8002572:	2200      	movs	r2, #0
 8002574:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002576:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <MX_ADC1_Init+0x98>)
 8002578:	2201      	movs	r2, #1
 800257a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800257c:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <MX_ADC1_Init+0x98>)
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002584:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <MX_ADC1_Init+0x98>)
 8002586:	2200      	movs	r2, #0
 8002588:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800258a:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <MX_ADC1_Init+0x98>)
 800258c:	4a17      	ldr	r2, [pc, #92]	; (80025ec <MX_ADC1_Init+0xa0>)
 800258e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002590:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <MX_ADC1_Init+0x98>)
 8002592:	2200      	movs	r2, #0
 8002594:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <MX_ADC1_Init+0x98>)
 8002598:	2201      	movs	r2, #1
 800259a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <MX_ADC1_Init+0x98>)
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025a4:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <MX_ADC1_Init+0x98>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025aa:	480e      	ldr	r0, [pc, #56]	; (80025e4 <MX_ADC1_Init+0x98>)
 80025ac:	f001 f852 	bl	8003654 <HAL_ADC_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80025b6:	f000 fa8d 	bl	8002ad4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80025ba:	230a      	movs	r3, #10
 80025bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80025be:	2301      	movs	r3, #1
 80025c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025c6:	463b      	mov	r3, r7
 80025c8:	4619      	mov	r1, r3
 80025ca:	4806      	ldr	r0, [pc, #24]	; (80025e4 <MX_ADC1_Init+0x98>)
 80025cc:	f001 f9b8 	bl	8003940 <HAL_ADC_ConfigChannel>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80025d6:	f000 fa7d 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	200091c0 	.word	0x200091c0
 80025e8:	40012000 	.word	0x40012000
 80025ec:	0f000001 	.word	0x0f000001

080025f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08e      	sub	sp, #56	; 0x38
 80025f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	605a      	str	r2, [r3, #4]
 8002600:	609a      	str	r2, [r3, #8]
 8002602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002604:	f107 0320 	add.w	r3, r7, #32
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800260e:	1d3b      	adds	r3, r7, #4
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	611a      	str	r2, [r3, #16]
 800261c:	615a      	str	r2, [r3, #20]
 800261e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002620:	4b2d      	ldr	r3, [pc, #180]	; (80026d8 <MX_TIM2_Init+0xe8>)
 8002622:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002626:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8002628:	4b2b      	ldr	r3, [pc, #172]	; (80026d8 <MX_TIM2_Init+0xe8>)
 800262a:	2240      	movs	r2, #64	; 0x40
 800262c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800262e:	4b2a      	ldr	r3, [pc, #168]	; (80026d8 <MX_TIM2_Init+0xe8>)
 8002630:	2200      	movs	r2, #0
 8002632:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002634:	4b28      	ldr	r3, [pc, #160]	; (80026d8 <MX_TIM2_Init+0xe8>)
 8002636:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800263a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800263c:	4b26      	ldr	r3, [pc, #152]	; (80026d8 <MX_TIM2_Init+0xe8>)
 800263e:	2200      	movs	r2, #0
 8002640:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002642:	4b25      	ldr	r3, [pc, #148]	; (80026d8 <MX_TIM2_Init+0xe8>)
 8002644:	2200      	movs	r2, #0
 8002646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002648:	4823      	ldr	r0, [pc, #140]	; (80026d8 <MX_TIM2_Init+0xe8>)
 800264a:	f004 f8a9 	bl	80067a0 <HAL_TIM_Base_Init>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002654:	f000 fa3e 	bl	8002ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800265e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002662:	4619      	mov	r1, r3
 8002664:	481c      	ldr	r0, [pc, #112]	; (80026d8 <MX_TIM2_Init+0xe8>)
 8002666:	f004 fc1b 	bl	8006ea0 <HAL_TIM_ConfigClockSource>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002670:	f000 fa30 	bl	8002ad4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002674:	4818      	ldr	r0, [pc, #96]	; (80026d8 <MX_TIM2_Init+0xe8>)
 8002676:	f004 f8e2 	bl	800683e <HAL_TIM_OC_Init>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002680:	f000 fa28 	bl	8002ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002684:	2300      	movs	r3, #0
 8002686:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002688:	2300      	movs	r3, #0
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800268c:	f107 0320 	add.w	r3, r7, #32
 8002690:	4619      	mov	r1, r3
 8002692:	4811      	ldr	r0, [pc, #68]	; (80026d8 <MX_TIM2_Init+0xe8>)
 8002694:	f004 ffb0 	bl	80075f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800269e:	f000 fa19 	bl	8002ad4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80026a2:	2330      	movs	r3, #48	; 0x30
 80026a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	2208      	movs	r2, #8
 80026b6:	4619      	mov	r1, r3
 80026b8:	4807      	ldr	r0, [pc, #28]	; (80026d8 <MX_TIM2_Init+0xe8>)
 80026ba:	f004 facb 	bl	8006c54 <HAL_TIM_OC_ConfigChannel>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80026c4:	f000 fa06 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80026c8:	4803      	ldr	r0, [pc, #12]	; (80026d8 <MX_TIM2_Init+0xe8>)
 80026ca:	f000 fd89 	bl	80031e0 <HAL_TIM_MspPostInit>

}
 80026ce:	bf00      	nop
 80026d0:	3738      	adds	r7, #56	; 0x38
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20009288 	.word	0x20009288

080026dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	; 0x28
 80026e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026e2:	f107 0320 	add.w	r3, r7, #32
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026ec:	1d3b      	adds	r3, r7, #4
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	60da      	str	r2, [r3, #12]
 80026f8:	611a      	str	r2, [r3, #16]
 80026fa:	615a      	str	r2, [r3, #20]
 80026fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026fe:	4b20      	ldr	r3, [pc, #128]	; (8002780 <MX_TIM3_Init+0xa4>)
 8002700:	4a20      	ldr	r2, [pc, #128]	; (8002784 <MX_TIM3_Init+0xa8>)
 8002702:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8002704:	4b1e      	ldr	r3, [pc, #120]	; (8002780 <MX_TIM3_Init+0xa4>)
 8002706:	223f      	movs	r2, #63	; 0x3f
 8002708:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800270a:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <MX_TIM3_Init+0xa4>)
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8002710:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <MX_TIM3_Init+0xa4>)
 8002712:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002716:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002718:	4b19      	ldr	r3, [pc, #100]	; (8002780 <MX_TIM3_Init+0xa4>)
 800271a:	2200      	movs	r2, #0
 800271c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800271e:	4b18      	ldr	r3, [pc, #96]	; (8002780 <MX_TIM3_Init+0xa4>)
 8002720:	2200      	movs	r2, #0
 8002722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002724:	4816      	ldr	r0, [pc, #88]	; (8002780 <MX_TIM3_Init+0xa4>)
 8002726:	f004 f88a 	bl	800683e <HAL_TIM_OC_Init>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002730:	f000 f9d0 	bl	8002ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002734:	2300      	movs	r3, #0
 8002736:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002738:	2300      	movs	r3, #0
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800273c:	f107 0320 	add.w	r3, r7, #32
 8002740:	4619      	mov	r1, r3
 8002742:	480f      	ldr	r0, [pc, #60]	; (8002780 <MX_TIM3_Init+0xa4>)
 8002744:	f004 ff58 	bl	80075f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800274e:	f000 f9c1 	bl	8002ad4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002752:	2300      	movs	r3, #0
 8002754:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002762:	1d3b      	adds	r3, r7, #4
 8002764:	2200      	movs	r2, #0
 8002766:	4619      	mov	r1, r3
 8002768:	4805      	ldr	r0, [pc, #20]	; (8002780 <MX_TIM3_Init+0xa4>)
 800276a:	f004 fa73 	bl	8006c54 <HAL_TIM_OC_ConfigChannel>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002774:	f000 f9ae 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002778:	bf00      	nop
 800277a:	3728      	adds	r7, #40	; 0x28
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20009180 	.word	0x20009180
 8002784:	40000400 	.word	0x40000400

08002788 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	; 0x28
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800278e:	f107 0320 	add.w	r3, r7, #32
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002798:	1d3b      	adds	r3, r7, #4
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	60da      	str	r2, [r3, #12]
 80027a4:	611a      	str	r2, [r3, #16]
 80027a6:	615a      	str	r2, [r3, #20]
 80027a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027aa:	4b27      	ldr	r3, [pc, #156]	; (8002848 <MX_TIM4_Init+0xc0>)
 80027ac:	4a27      	ldr	r2, [pc, #156]	; (800284c <MX_TIM4_Init+0xc4>)
 80027ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 80027b0:	4b25      	ldr	r3, [pc, #148]	; (8002848 <MX_TIM4_Init+0xc0>)
 80027b2:	223f      	movs	r2, #63	; 0x3f
 80027b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b6:	4b24      	ldr	r3, [pc, #144]	; (8002848 <MX_TIM4_Init+0xc0>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80027bc:	4b22      	ldr	r3, [pc, #136]	; (8002848 <MX_TIM4_Init+0xc0>)
 80027be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c4:	4b20      	ldr	r3, [pc, #128]	; (8002848 <MX_TIM4_Init+0xc0>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ca:	4b1f      	ldr	r3, [pc, #124]	; (8002848 <MX_TIM4_Init+0xc0>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80027d0:	481d      	ldr	r0, [pc, #116]	; (8002848 <MX_TIM4_Init+0xc0>)
 80027d2:	f004 f8d9 	bl	8006988 <HAL_TIM_PWM_Init>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80027dc:	f000 f97a 	bl	8002ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e0:	2300      	movs	r3, #0
 80027e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80027e8:	f107 0320 	add.w	r3, r7, #32
 80027ec:	4619      	mov	r1, r3
 80027ee:	4816      	ldr	r0, [pc, #88]	; (8002848 <MX_TIM4_Init+0xc0>)
 80027f0:	f004 ff02 	bl	80075f8 <HAL_TIMEx_MasterConfigSynchronization>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80027fa:	f000 f96b 	bl	8002ad4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027fe:	2360      	movs	r3, #96	; 0x60
 8002800:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800280e:	1d3b      	adds	r3, r7, #4
 8002810:	2208      	movs	r2, #8
 8002812:	4619      	mov	r1, r3
 8002814:	480c      	ldr	r0, [pc, #48]	; (8002848 <MX_TIM4_Init+0xc0>)
 8002816:	f004 fa7d 	bl	8006d14 <HAL_TIM_PWM_ConfigChannel>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002820:	f000 f958 	bl	8002ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002824:	1d3b      	adds	r3, r7, #4
 8002826:	220c      	movs	r2, #12
 8002828:	4619      	mov	r1, r3
 800282a:	4807      	ldr	r0, [pc, #28]	; (8002848 <MX_TIM4_Init+0xc0>)
 800282c:	f004 fa72 	bl	8006d14 <HAL_TIM_PWM_ConfigChannel>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002836:	f000 f94d 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800283a:	4803      	ldr	r0, [pc, #12]	; (8002848 <MX_TIM4_Init+0xc0>)
 800283c:	f000 fcd0 	bl	80031e0 <HAL_TIM_MspPostInit>

}
 8002840:	bf00      	nop
 8002842:	3728      	adds	r7, #40	; 0x28
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	200090f8 	.word	0x200090f8
 800284c:	40000800 	.word	0x40000800

08002850 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08a      	sub	sp, #40	; 0x28
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002856:	f107 0320 	add.w	r3, r7, #32
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002860:	1d3b      	adds	r3, r7, #4
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	60da      	str	r2, [r3, #12]
 800286c:	611a      	str	r2, [r3, #16]
 800286e:	615a      	str	r2, [r3, #20]
 8002870:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002872:	4b22      	ldr	r3, [pc, #136]	; (80028fc <MX_TIM5_Init+0xac>)
 8002874:	4a22      	ldr	r2, [pc, #136]	; (8002900 <MX_TIM5_Init+0xb0>)
 8002876:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63;
 8002878:	4b20      	ldr	r3, [pc, #128]	; (80028fc <MX_TIM5_Init+0xac>)
 800287a:	223f      	movs	r2, #63	; 0x3f
 800287c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800287e:	4b1f      	ldr	r3, [pc, #124]	; (80028fc <MX_TIM5_Init+0xac>)
 8002880:	2200      	movs	r2, #0
 8002882:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8002884:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <MX_TIM5_Init+0xac>)
 8002886:	f240 32e7 	movw	r2, #999	; 0x3e7
 800288a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800288c:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <MX_TIM5_Init+0xac>)
 800288e:	2200      	movs	r2, #0
 8002890:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002892:	4b1a      	ldr	r3, [pc, #104]	; (80028fc <MX_TIM5_Init+0xac>)
 8002894:	2200      	movs	r2, #0
 8002896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002898:	4818      	ldr	r0, [pc, #96]	; (80028fc <MX_TIM5_Init+0xac>)
 800289a:	f004 f875 	bl	8006988 <HAL_TIM_PWM_Init>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80028a4:	f000 f916 	bl	8002ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028a8:	2300      	movs	r3, #0
 80028aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ac:	2300      	movs	r3, #0
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80028b0:	f107 0320 	add.w	r3, r7, #32
 80028b4:	4619      	mov	r1, r3
 80028b6:	4811      	ldr	r0, [pc, #68]	; (80028fc <MX_TIM5_Init+0xac>)
 80028b8:	f004 fe9e 	bl	80075f8 <HAL_TIMEx_MasterConfigSynchronization>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80028c2:	f000 f907 	bl	8002ad4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028c6:	2360      	movs	r3, #96	; 0x60
 80028c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 127;
 80028ca:	237f      	movs	r3, #127	; 0x7f
 80028cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	2200      	movs	r2, #0
 80028da:	4619      	mov	r1, r3
 80028dc:	4807      	ldr	r0, [pc, #28]	; (80028fc <MX_TIM5_Init+0xac>)
 80028de:	f004 fa19 	bl	8006d14 <HAL_TIM_PWM_ConfigChannel>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80028e8:	f000 f8f4 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80028ec:	4803      	ldr	r0, [pc, #12]	; (80028fc <MX_TIM5_Init+0xac>)
 80028ee:	f000 fc77 	bl	80031e0 <HAL_TIM_MspPostInit>

}
 80028f2:	bf00      	nop
 80028f4:	3728      	adds	r7, #40	; 0x28
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20009140 	.word	0x20009140
 8002900:	40000c00 	.word	0x40000c00

08002904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	607b      	str	r3, [r7, #4]
 800290e:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <MX_DMA_Init+0x3c>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	4a0b      	ldr	r2, [pc, #44]	; (8002940 <MX_DMA_Init+0x3c>)
 8002914:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002918:	6313      	str	r3, [r2, #48]	; 0x30
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <MX_DMA_Init+0x3c>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002922:	607b      	str	r3, [r7, #4]
 8002924:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 9, 0);
 8002926:	2200      	movs	r2, #0
 8002928:	2109      	movs	r1, #9
 800292a:	2038      	movs	r0, #56	; 0x38
 800292c:	f001 fb60 	bl	8003ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002930:	2038      	movs	r0, #56	; 0x38
 8002932:	f001 fb79 	bl	8004028 <HAL_NVIC_EnableIRQ>

}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800

08002944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294a:	f107 0314 	add.w	r3, r7, #20
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
 8002954:	609a      	str	r2, [r3, #8]
 8002956:	60da      	str	r2, [r3, #12]
 8002958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	4b4b      	ldr	r3, [pc, #300]	; (8002a8c <MX_GPIO_Init+0x148>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a4a      	ldr	r2, [pc, #296]	; (8002a8c <MX_GPIO_Init+0x148>)
 8002964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b48      	ldr	r3, [pc, #288]	; (8002a8c <MX_GPIO_Init+0x148>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	4b44      	ldr	r3, [pc, #272]	; (8002a8c <MX_GPIO_Init+0x148>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a43      	ldr	r2, [pc, #268]	; (8002a8c <MX_GPIO_Init+0x148>)
 8002980:	f043 0304 	orr.w	r3, r3, #4
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b41      	ldr	r3, [pc, #260]	; (8002a8c <MX_GPIO_Init+0x148>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	4b3d      	ldr	r3, [pc, #244]	; (8002a8c <MX_GPIO_Init+0x148>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	4a3c      	ldr	r2, [pc, #240]	; (8002a8c <MX_GPIO_Init+0x148>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	6313      	str	r3, [r2, #48]	; 0x30
 80029a2:	4b3a      	ldr	r3, [pc, #232]	; (8002a8c <MX_GPIO_Init+0x148>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]
 80029b2:	4b36      	ldr	r3, [pc, #216]	; (8002a8c <MX_GPIO_Init+0x148>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	4a35      	ldr	r2, [pc, #212]	; (8002a8c <MX_GPIO_Init+0x148>)
 80029b8:	f043 0302 	orr.w	r3, r3, #2
 80029bc:	6313      	str	r3, [r2, #48]	; 0x30
 80029be:	4b33      	ldr	r3, [pc, #204]	; (8002a8c <MX_GPIO_Init+0x148>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	607b      	str	r3, [r7, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FET_DRV_Pin|LED2_Pin|LED5_Pin|LED4_Pin
 80029ca:	2200      	movs	r2, #0
 80029cc:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 80029d0:	482f      	ldr	r0, [pc, #188]	; (8002a90 <MX_GPIO_Init+0x14c>)
 80029d2:	f002 f8af 	bl	8004b34 <HAL_GPIO_WritePin>
                          |LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED0_Pin|LED3_Pin, GPIO_PIN_RESET);
 80029d6:	2200      	movs	r2, #0
 80029d8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80029dc:	482d      	ldr	r0, [pc, #180]	; (8002a94 <MX_GPIO_Init+0x150>)
 80029de:	f002 f8a9 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED6_Pin|LED9_Pin|LED8_Pin, GPIO_PIN_RESET);
 80029e2:	2200      	movs	r2, #0
 80029e4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80029e8:	482b      	ldr	r0, [pc, #172]	; (8002a98 <MX_GPIO_Init+0x154>)
 80029ea:	f002 f8a3 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FET_DRV_Pin LED2_Pin LED5_Pin LED4_Pin
                           LED7_Pin */
  GPIO_InitStruct.Pin = FET_DRV_Pin|LED2_Pin|LED5_Pin|LED4_Pin
 80029ee:	f44f 7371 	mov.w	r3, #964	; 0x3c4
 80029f2:	617b      	str	r3, [r7, #20]
                          |LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f4:	2301      	movs	r3, #1
 80029f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fc:	2300      	movs	r3, #0
 80029fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a00:	f107 0314 	add.w	r3, r7, #20
 8002a04:	4619      	mov	r1, r3
 8002a06:	4822      	ldr	r0, [pc, #136]	; (8002a90 <MX_GPIO_Init+0x14c>)
 8002a08:	f001 fefa 	bl	8004800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB_IN_Pin */
  GPIO_InitStruct.Pin = PB_IN_Pin;
 8002a0c:	2308      	movs	r3, #8
 8002a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a14:	2301      	movs	r3, #1
 8002a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB_IN_GPIO_Port, &GPIO_InitStruct);
 8002a18:	f107 0314 	add.w	r3, r7, #20
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	481c      	ldr	r0, [pc, #112]	; (8002a90 <MX_GPIO_Init+0x14c>)
 8002a20:	f001 feee 	bl	8004800 <HAL_GPIO_Init>

  /*Configure GPIO pin : RC_IN_Pin */
  GPIO_InitStruct.Pin = RC_IN_Pin;
 8002a24:	2302      	movs	r3, #2
 8002a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002a28:	4b1c      	ldr	r3, [pc, #112]	; (8002a9c <MX_GPIO_Init+0x158>)
 8002a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RC_IN_GPIO_Port, &GPIO_InitStruct);
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	4619      	mov	r1, r3
 8002a36:	4818      	ldr	r0, [pc, #96]	; (8002a98 <MX_GPIO_Init+0x154>)
 8002a38:	f001 fee2 	bl	8004800 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED0_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED0_Pin|LED3_Pin;
 8002a3c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a42:	2301      	movs	r3, #1
 8002a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a4e:	f107 0314 	add.w	r3, r7, #20
 8002a52:	4619      	mov	r1, r3
 8002a54:	480f      	ldr	r0, [pc, #60]	; (8002a94 <MX_GPIO_Init+0x150>)
 8002a56:	f001 fed3 	bl	8004800 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED6_Pin LED9_Pin LED8_Pin */
  GPIO_InitStruct.Pin = LED6_Pin|LED9_Pin|LED8_Pin;
 8002a5a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a60:	2301      	movs	r3, #1
 8002a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	4619      	mov	r1, r3
 8002a72:	4809      	ldr	r0, [pc, #36]	; (8002a98 <MX_GPIO_Init+0x154>)
 8002a74:	f001 fec4 	bl	8004800 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2107      	movs	r1, #7
 8002a7c:	2007      	movs	r0, #7
 8002a7e:	f001 fab7 	bl	8003ff0 <HAL_NVIC_SetPriority>
  //HAL_NVIC_EnableIRQ(EXTI1_IRQn);

}
 8002a82:	bf00      	nop
 8002a84:	3728      	adds	r7, #40	; 0x28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40020800 	.word	0x40020800
 8002a94:	40020400 	.word	0x40020400
 8002a98:	40020000 	.word	0x40020000
 8002a9c:	10310000 	.word	0x10310000

08002aa0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	//if it's our pulse timer, call the overflow function
	if(htim->Instance == TIM3) {
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a07      	ldr	r2, [pc, #28]	; (8002acc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d101      	bne.n	8002ab6 <HAL_TIM_PeriodElapsedCallback+0x16>
		board_lights_tim_overflow();
 8002ab2:	f7fe ffbf 	bl	8001a34 <board_lights_tim_overflow>
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d101      	bne.n	8002ac4 <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 8002ac0:	f000 fd86 	bl	80035d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	40014800 	.word	0x40014800

08002ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
	...

08002ae4 <pushbutton_init>:
static void do_led_fade();
static void do_led_flash();


//============= PUBLIC FUNCTION DEFINITIONS =============
osEventFlagsId_t pushbutton_init() {
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b092      	sub	sp, #72	; 0x48
 8002ae8:	af00      	add	r7, sp, #0
	//initialize the signal flags for the LED thread and the pushbutton status flags
	led_action_flags = osEventFlagsNew(NULL);
 8002aea:	2000      	movs	r0, #0
 8002aec:	f007 fef4 	bl	800a8d8 <osEventFlagsNew>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <pushbutton_init+0x88>)
 8002af4:	601a      	str	r2, [r3, #0]
	pushbutton_flags = osEventFlagsNew(NULL);
 8002af6:	2000      	movs	r0, #0
 8002af8:	f007 feee 	bl	800a8d8 <osEventFlagsNew>
 8002afc:	4602      	mov	r2, r0
 8002afe:	4b1c      	ldr	r3, [pc, #112]	; (8002b70 <pushbutton_init+0x8c>)
 8002b00:	601a      	str	r2, [r3, #0]

	//initialize the led thread
	const osThreadAttr_t led_attributes = {
 8002b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b06:	2224      	movs	r2, #36	; 0x24
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f00c f995 	bl	800ee3a <memset>
 8002b10:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <pushbutton_init+0x90>)
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
 8002b14:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b1a:	2318      	movs	r3, #24
 8002b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
			.name = "led",
			.priority = (osPriority_t) osPriorityNormal,
			.stack_size = 288
	};
	led_thread_handle = osThreadNew(led_thread, NULL, &led_attributes);
 8002b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b22:	461a      	mov	r2, r3
 8002b24:	2100      	movs	r1, #0
 8002b26:	4814      	ldr	r0, [pc, #80]	; (8002b78 <pushbutton_init+0x94>)
 8002b28:	f007 fd5a 	bl	800a5e0 <osThreadNew>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	4b13      	ldr	r3, [pc, #76]	; (8002b7c <pushbutton_init+0x98>)
 8002b30:	601a      	str	r2, [r3, #0]

	//initialize the main button thread
	const osThreadAttr_t button_attributes = {
 8002b32:	463b      	mov	r3, r7
 8002b34:	2224      	movs	r2, #36	; 0x24
 8002b36:	2100      	movs	r1, #0
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f00c f97e 	bl	800ee3a <memset>
 8002b3e:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <pushbutton_init+0x9c>)
 8002b40:	603b      	str	r3, [r7, #0]
 8002b42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	2320      	movs	r3, #32
 8002b4a:	61bb      	str	r3, [r7, #24]
			.name = "button",
			.priority = (osPriority_t) osPriorityAboveNormal,
			.stack_size = 256
	};
	button_thread_handle = osThreadNew(button_thread, NULL, &button_attributes);
 8002b4c:	463b      	mov	r3, r7
 8002b4e:	461a      	mov	r2, r3
 8002b50:	2100      	movs	r1, #0
 8002b52:	480c      	ldr	r0, [pc, #48]	; (8002b84 <pushbutton_init+0xa0>)
 8002b54:	f007 fd44 	bl	800a5e0 <osThreadNew>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <pushbutton_init+0xa4>)
 8002b5c:	601a      	str	r2, [r3, #0]

	//return the ID of the pushbutton event flags
	return pushbutton_flags;
 8002b5e:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <pushbutton_init+0x8c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3748      	adds	r7, #72	; 0x48
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	200003a8 	.word	0x200003a8
 8002b70:	2000913c 	.word	0x2000913c
 8002b74:	08010980 	.word	0x08010980
 8002b78:	08002e01 	.word	0x08002e01
 8002b7c:	200003ac 	.word	0x200003ac
 8002b80:	08010984 	.word	0x08010984
 8002b84:	08002d1d 	.word	0x08002d1d
 8002b88:	200003b0 	.word	0x200003b0

08002b8c <pushbutton_led_on>:

void pushbutton_led_on() {osEventFlagsSet(led_action_flags, BIT_LED_ON); }
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	4b03      	ldr	r3, [pc, #12]	; (8002ba0 <pushbutton_led_on+0x14>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2101      	movs	r1, #1
 8002b96:	4618      	mov	r0, r3
 8002b98:	f007 fef0 	bl	800a97c <osEventFlagsSet>
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	200003a8 	.word	0x200003a8

08002ba4 <pushbutton_led_off>:
void pushbutton_led_off() {osEventFlagsSet(led_action_flags, BIT_LED_OFF); }
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <pushbutton_led_off+0x14>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2102      	movs	r1, #2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f007 fee4 	bl	800a97c <osEventFlagsSet>
 8002bb4:	bf00      	nop
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	200003a8 	.word	0x200003a8

08002bbc <pushbutton_led_fade>:
void pushbutton_led_fade() {osEventFlagsSet(led_action_flags, BIT_LED_FADE); }
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <pushbutton_led_fade+0x14>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2104      	movs	r1, #4
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f007 fed8 	bl	800a97c <osEventFlagsSet>
 8002bcc:	bf00      	nop
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	200003a8 	.word	0x200003a8

08002bd4 <pushbutton_led_flash>:
void pushbutton_led_flash() {osEventFlagsSet(led_action_flags, BIT_LED_FLASH); }
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <pushbutton_led_flash+0x14>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2108      	movs	r1, #8
 8002bde:	4618      	mov	r0, r3
 8002be0:	f007 fecc 	bl	800a97c <osEventFlagsSet>
 8002be4:	bf00      	nop
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	200003a8 	.word	0x200003a8

08002bec <pushbutton_released>:

bool pushbutton_released(bool clear_flag) {
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
	bool result = osEventFlagsGet(pushbutton_flags) & BUTTON_RELEASED;
 8002bf6:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <pushbutton_released+0x48>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f007 ff5a 	bl	800aab4 <osEventFlagsGet>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	bf14      	ite	ne
 8002c0a:	2301      	movne	r3, #1
 8002c0c:	2300      	moveq	r3, #0
 8002c0e:	73fb      	strb	r3, [r7, #15]
	if(result && clear_flag) osEventFlagsClear(pushbutton_flags, BUTTON_RELEASED);
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d008      	beq.n	8002c28 <pushbutton_released+0x3c>
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <pushbutton_released+0x3c>
 8002c1c:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <pushbutton_released+0x48>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2101      	movs	r1, #1
 8002c22:	4618      	mov	r0, r3
 8002c24:	f007 ff02 	bl	800aa2c <osEventFlagsClear>
	return result;
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	2000913c 	.word	0x2000913c

08002c38 <pushbutton_bumped>:

bool pushbutton_bumped(bool clear_flag) {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	71fb      	strb	r3, [r7, #7]
	bool result = osEventFlagsGet(pushbutton_flags) & BUTTON_BUMPED;
 8002c42:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <pushbutton_bumped+0x48>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f007 ff34 	bl	800aab4 <osEventFlagsGet>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	bf14      	ite	ne
 8002c56:	2301      	movne	r3, #1
 8002c58:	2300      	moveq	r3, #0
 8002c5a:	73fb      	strb	r3, [r7, #15]
	if(result && clear_flag) osEventFlagsClear(pushbutton_flags, BUTTON_BUMPED);
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d008      	beq.n	8002c74 <pushbutton_bumped+0x3c>
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d005      	beq.n	8002c74 <pushbutton_bumped+0x3c>
 8002c68:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <pushbutton_bumped+0x48>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2102      	movs	r1, #2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f007 fedc 	bl	800aa2c <osEventFlagsClear>
	return result;
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	2000913c 	.word	0x2000913c

08002c84 <pushbutton_short_pressed>:

bool pushbutton_short_pressed(bool clear_flag) {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
	bool result = osEventFlagsGet(pushbutton_flags) & BUTTON_SHORT_PRESSED;
 8002c8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <pushbutton_short_pressed+0x48>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f007 ff0e 	bl	800aab4 <osEventFlagsGet>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	bf14      	ite	ne
 8002ca2:	2301      	movne	r3, #1
 8002ca4:	2300      	moveq	r3, #0
 8002ca6:	73fb      	strb	r3, [r7, #15]
	if(result && clear_flag) osEventFlagsClear(pushbutton_flags, BUTTON_SHORT_PRESSED);
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d008      	beq.n	8002cc0 <pushbutton_short_pressed+0x3c>
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <pushbutton_short_pressed+0x3c>
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <pushbutton_short_pressed+0x48>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2104      	movs	r1, #4
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f007 feb6 	bl	800aa2c <osEventFlagsClear>
	return result;
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	2000913c 	.word	0x2000913c

08002cd0 <pushbutton_long_pressed>:

bool pushbutton_long_pressed(bool clear_flag) {
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	71fb      	strb	r3, [r7, #7]
	bool result = osEventFlagsGet(pushbutton_flags) & BUTTON_LONG_PRESSED;
 8002cda:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <pushbutton_long_pressed+0x48>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f007 fee8 	bl	800aab4 <osEventFlagsGet>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bf14      	ite	ne
 8002cee:	2301      	movne	r3, #1
 8002cf0:	2300      	moveq	r3, #0
 8002cf2:	73fb      	strb	r3, [r7, #15]
	if(result && clear_flag) osEventFlagsClear(pushbutton_flags, BUTTON_LONG_PRESSED);
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <pushbutton_long_pressed+0x3c>
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <pushbutton_long_pressed+0x3c>
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <pushbutton_long_pressed+0x48>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2108      	movs	r1, #8
 8002d06:	4618      	mov	r0, r3
 8002d08:	f007 fe90 	bl	800aa2c <osEventFlagsClear>
	return result;
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	2000913c 	.word	0x2000913c

08002d1c <button_thread>:
uint32_t led_stack_space() {
	return osThreadGetStackSpace(led_thread_handle);
}

//====================== PRIVATE FUNCTION DEFINITIONS ======================
static void button_thread(void* argument) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
	bool short_press, long_press; //flags that tell us if we've set the appropriate event flags yet
	uint32_t push_time; //timestamp of when the button was pressed

	while(1) {
		//button pressed -> gpio state will be high
		GPIO_PinState current_button_state = HAL_GPIO_ReadPin(PB_IN_GPIO_Port, PB_IN_Pin);
 8002d24:	2108      	movs	r1, #8
 8002d26:	4834      	ldr	r0, [pc, #208]	; (8002df8 <button_thread+0xdc>)
 8002d28:	f001 feec 	bl	8004b04 <HAL_GPIO_ReadPin>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	73fb      	strb	r3, [r7, #15]

		//if the button has settled, record the state
		if(current_button_state == last_state) {
 8002d30:	7bfa      	ldrb	r2, [r7, #15]
 8002d32:	7dfb      	ldrb	r3, [r7, #23]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d158      	bne.n	8002dea <button_thread+0xce>

			if(current_button_state == GPIO_PIN_SET) { //button is pressed
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d138      	bne.n	8002db0 <button_thread+0x94>
				if(!last_button) push_time = HAL_GetTick(); //store the time if it was just pressed
 8002d3e:	7dbb      	ldrb	r3, [r7, #22]
 8002d40:	f083 0301 	eor.w	r3, r3, #1
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <button_thread+0x34>
 8002d4a:	f000 fc55 	bl	80035f8 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

				//check for short or long presses
				if(!short_press && ((HAL_GetTick() - push_time) > BUTTON_SHORT_PRESS_TIME)) {
 8002d50:	7d7b      	ldrb	r3, [r7, #21]
 8002d52:	f083 0301 	eor.w	r3, r3, #1
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00f      	beq.n	8002d7c <button_thread+0x60>
 8002d5c:	f000 fc4c 	bl	80035f8 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d6a:	d907      	bls.n	8002d7c <button_thread+0x60>
					osEventFlagsSet(pushbutton_flags, BUTTON_SHORT_PRESSED);
 8002d6c:	4b23      	ldr	r3, [pc, #140]	; (8002dfc <button_thread+0xe0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2104      	movs	r1, #4
 8002d72:	4618      	mov	r0, r3
 8002d74:	f007 fe02 	bl	800a97c <osEventFlagsSet>
					short_press = true;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	757b      	strb	r3, [r7, #21]
				}
				if(!long_press && ((HAL_GetTick() - push_time) > BUTTON_LONG_PRESS_TIME)) {
 8002d7c:	7d3b      	ldrb	r3, [r7, #20]
 8002d7e:	f083 0301 	eor.w	r3, r3, #1
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d010      	beq.n	8002daa <button_thread+0x8e>
 8002d88:	f000 fc36 	bl	80035f8 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d907      	bls.n	8002daa <button_thread+0x8e>
					osEventFlagsSet(pushbutton_flags, BUTTON_LONG_PRESSED);
 8002d9a:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <button_thread+0xe0>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2108      	movs	r1, #8
 8002da0:	4618      	mov	r0, r3
 8002da2:	f007 fdeb 	bl	800a97c <osEventFlagsSet>
					long_press = true;
 8002da6:	2301      	movs	r3, #1
 8002da8:	753b      	strb	r3, [r7, #20]
				}

				//remember the button state
				last_button = true;
 8002daa:	2301      	movs	r3, #1
 8002dac:	75bb      	strb	r3, [r7, #22]
 8002dae:	e01c      	b.n	8002dea <button_thread+0xce>
			}

			else { //button is released
				if(last_button) {//button was just released
 8002db0:	7dbb      	ldrb	r3, [r7, #22]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d017      	beq.n	8002de6 <button_thread+0xca>
					//if the button was pressed for less than the "short press time"
					if((HAL_GetTick() - push_time) < BUTTON_SHORT_PRESS_TIME)
 8002db6:	f000 fc1f 	bl	80035f8 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dc4:	d205      	bcs.n	8002dd2 <button_thread+0xb6>
						osEventFlagsSet(pushbutton_flags, BUTTON_BUMPED); //set the event flag for a "bump"
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <button_thread+0xe0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2102      	movs	r1, #2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f007 fdd5 	bl	800a97c <osEventFlagsSet>

					//also set the event flag for releasing the button
					osEventFlagsSet(pushbutton_flags, BUTTON_RELEASED);
 8002dd2:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <button_thread+0xe0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f007 fdcf 	bl	800a97c <osEventFlagsSet>

					//reset some of our local flags for short and long presses
					short_press = false;
 8002dde:	2300      	movs	r3, #0
 8002de0:	757b      	strb	r3, [r7, #21]
					long_press = false;
 8002de2:	2300      	movs	r3, #0
 8002de4:	753b      	strb	r3, [r7, #20]
				}
				last_button = false;
 8002de6:	2300      	movs	r3, #0
 8002de8:	75bb      	strb	r3, [r7, #22]
			}

		}

		last_state = current_button_state; //updating the debounce memory (pin state)
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	75fb      	strb	r3, [r7, #23]
		osDelay(BUTTON_BOUNCE_TIME);
 8002dee:	2019      	movs	r0, #25
 8002df0:	f007 fd44 	bl	800a87c <osDelay>
	while(1) {
 8002df4:	e796      	b.n	8002d24 <button_thread+0x8>
 8002df6:	bf00      	nop
 8002df8:	40020800 	.word	0x40020800
 8002dfc:	2000913c 	.word	0x2000913c

08002e00 <led_thread>:
	}
}

static void led_thread(void* argument) {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1); //start the PWM timer for the LED
 8002e08:	2100      	movs	r1, #0
 8002e0a:	482b      	ldr	r0, [pc, #172]	; (8002eb8 <led_thread+0xb8>)
 8002e0c:	f003 fde8 	bl	80069e0 <HAL_TIM_PWM_Start>

	while(1) {
		//suspend this thread until any flag is set (and don't clear the set flag)
		osEventFlagsWait(led_action_flags, BIT_LED_ALL, osFlagsNoClear, osWaitForever);
 8002e10:	4b2a      	ldr	r3, [pc, #168]	; (8002ebc <led_thread+0xbc>)
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	f04f 33ff 	mov.w	r3, #4294967295
 8002e18:	2202      	movs	r2, #2
 8002e1a:	210f      	movs	r1, #15
 8002e1c:	f007 fe7e 	bl	800ab1c <osEventFlagsWait>

		//if a flag bit is set, run the appropriate LED routine
		//order of the conditionals indicates the priority of the flash routines
		//each routine will return pretty much immediately though
		if(osEventFlagsGet(led_action_flags) & BIT_LED_FLASH) {
 8002e20:	4b26      	ldr	r3, [pc, #152]	; (8002ebc <led_thread+0xbc>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f007 fe45 	bl	800aab4 <osEventFlagsGet>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	f003 0308 	and.w	r3, r3, #8
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <led_thread+0x46>
			do_led_flash();
 8002e34:	f000 f89c 	bl	8002f70 <do_led_flash>
			osEventFlagsClear(led_action_flags, BIT_LED_FLASH); //clear the flag manually
 8002e38:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <led_thread+0xbc>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2108      	movs	r1, #8
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f007 fdf4 	bl	800aa2c <osEventFlagsClear>
 8002e44:	e7e4      	b.n	8002e10 <led_thread+0x10>
		}
		else if (osEventFlagsGet(led_action_flags) & BIT_LED_FADE) {
 8002e46:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <led_thread+0xbc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f007 fe32 	bl	800aab4 <osEventFlagsGet>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d008      	beq.n	8002e6c <led_thread+0x6c>
			osEventFlagsClear(led_action_flags, BIT_LED_FADE); //clearing this before so the break function works
 8002e5a:	4b18      	ldr	r3, [pc, #96]	; (8002ebc <led_thread+0xbc>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2104      	movs	r1, #4
 8002e60:	4618      	mov	r0, r3
 8002e62:	f007 fde3 	bl	800aa2c <osEventFlagsClear>
			do_led_fade();
 8002e66:	f000 f847 	bl	8002ef8 <do_led_fade>
 8002e6a:	e7d1      	b.n	8002e10 <led_thread+0x10>
		}
		else if (osEventFlagsGet(led_action_flags) & BIT_LED_ON) {
 8002e6c:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <led_thread+0xbc>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f007 fe1f 	bl	800aab4 <osEventFlagsGet>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <led_thread+0x92>
			do_led_on();
 8002e80:	f000 f81e 	bl	8002ec0 <do_led_on>
			osEventFlagsClear(led_action_flags, BIT_LED_ON);
 8002e84:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <led_thread+0xbc>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2101      	movs	r1, #1
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f007 fdce 	bl	800aa2c <osEventFlagsClear>
 8002e90:	e7be      	b.n	8002e10 <led_thread+0x10>
		}
		else if (osEventFlagsGet(led_action_flags) & BIT_LED_OFF) {
 8002e92:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <led_thread+0xbc>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f007 fe0c 	bl	800aab4 <osEventFlagsGet>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0b4      	beq.n	8002e10 <led_thread+0x10>
			do_led_off();
 8002ea6:	f000 f819 	bl	8002edc <do_led_off>
			osEventFlagsClear(led_action_flags, BIT_LED_OFF);
 8002eaa:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <led_thread+0xbc>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2102      	movs	r1, #2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f007 fdbb 	bl	800aa2c <osEventFlagsClear>
		osEventFlagsWait(led_action_flags, BIT_LED_ALL, osFlagsNoClear, osWaitForever);
 8002eb6:	e7ab      	b.n	8002e10 <led_thread+0x10>
 8002eb8:	20009140 	.word	0x20009140
 8002ebc:	200003a8 	.word	0x200003a8

08002ec0 <do_led_on>:
	//gracefully exiting if it somehow gets here
	osThreadExit();
}

//helper functions for the LED threads
static void do_led_on() {
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
	htim5.Instance->CCR1 = UINT32_MAX; //just max out counter register to force the channel on
 8002ec4:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <do_led_on+0x18>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ecc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002ece:	bf00      	nop
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	20009140 	.word	0x20009140

08002edc <do_led_off>:

static void do_led_off() {
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
	htim5.Instance->CCR1 = 0; //set counter register to zero to force the channel off
 8002ee0:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <do_led_off+0x18>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	20009140 	.word	0x20009140

08002ef8 <do_led_fade>:

static void do_led_fade() {
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
	//reset the LED PWM peripheral to normal PWM mode
	//necessary if called after configuring peripheral for flashing the LED
	htim5.Init.Period = PWM_PERIOD;
 8002efe:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <do_led_fade+0x70>)
 8002f00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f04:	60da      	str	r2, [r3, #12]
	htim5.Instance->CCR1 = 0;
 8002f06:	4b18      	ldr	r3, [pc, #96]	; (8002f68 <do_led_fade+0x70>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Init(&htim5);
 8002f0e:	4816      	ldr	r0, [pc, #88]	; (8002f68 <do_led_fade+0x70>)
 8002f10:	f003 fd3a 	bl	8006988 <HAL_TIM_PWM_Init>
	int count_amount;

	//run the fade forever until we want to swap to a different event
	while(1) {
		//set the direction that we're gonna be counting
		if(htim5.Instance->CCR1 > 1000) count_amount = -COUNT_STEP;
 8002f14:	4b14      	ldr	r3, [pc, #80]	; (8002f68 <do_led_fade+0x70>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f1e:	d903      	bls.n	8002f28 <do_led_fade+0x30>
 8002f20:	f06f 0318 	mvn.w	r3, #24
 8002f24:	607b      	str	r3, [r7, #4]
 8002f26:	e006      	b.n	8002f36 <do_led_fade+0x3e>
		else if (htim5.Instance->CCR1 < COUNT_STEP) count_amount = COUNT_STEP;
 8002f28:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <do_led_fade+0x70>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f2e:	2b18      	cmp	r3, #24
 8002f30:	d801      	bhi.n	8002f36 <do_led_fade+0x3e>
 8002f32:	2319      	movs	r3, #25
 8002f34:	607b      	str	r3, [r7, #4]

		htim5.Instance->CCR1 += count_amount; //increment compare value for the PWM module
 8002f36:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <do_led_fade+0x70>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	4b0a      	ldr	r3, [pc, #40]	; (8002f68 <do_led_fade+0x70>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	440a      	add	r2, r1
 8002f44:	635a      	str	r2, [r3, #52]	; 0x34
		osDelay(FADE_DELAY);
 8002f46:	200a      	movs	r0, #10
 8002f48:	f007 fc98 	bl	800a87c <osDelay>

		//exit the loop if there's any of event flag that's asserted
		if(osEventFlagsGet(led_action_flags)) break;
 8002f4c:	4b07      	ldr	r3, [pc, #28]	; (8002f6c <do_led_fade+0x74>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f007 fdaf 	bl	800aab4 <osEventFlagsGet>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d100      	bne.n	8002f5e <do_led_fade+0x66>
		if(htim5.Instance->CCR1 > 1000) count_amount = -COUNT_STEP;
 8002f5c:	e7da      	b.n	8002f14 <do_led_fade+0x1c>
		if(osEventFlagsGet(led_action_flags)) break;
 8002f5e:	bf00      	nop
	}
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20009140 	.word	0x20009140
 8002f6c:	200003a8 	.word	0x200003a8

08002f70 <do_led_flash>:

static void do_led_flash() {
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
	htim5.Init.Period = BLINK_PERIOD; //slow the PWM timer waaaaay down
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <do_led_flash+0x1c>)
 8002f76:	4a06      	ldr	r2, [pc, #24]	; (8002f90 <do_led_flash+0x20>)
 8002f78:	60da      	str	r2, [r3, #12]
	htim5.Instance->CCR1 = BLINK_PERIOD>>1; //set the duty cycle to 50%
 8002f7a:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <do_led_flash+0x1c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a05      	ldr	r2, [pc, #20]	; (8002f94 <do_led_flash+0x24>)
 8002f80:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Init(&htim5);
 8002f82:	4802      	ldr	r0, [pc, #8]	; (8002f8c <do_led_flash+0x1c>)
 8002f84:	f003 fd00 	bl	8006988 <HAL_TIM_PWM_Init>
}
 8002f88:	bf00      	nop
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	20009140 	.word	0x20009140
 8002f90:	00051615 	.word	0x00051615
 8002f94:	00028b0a 	.word	0x00028b0a

08002f98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	607b      	str	r3, [r7, #4]
 8002fa2:	4b12      	ldr	r3, [pc, #72]	; (8002fec <HAL_MspInit+0x54>)
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa6:	4a11      	ldr	r2, [pc, #68]	; (8002fec <HAL_MspInit+0x54>)
 8002fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fac:	6453      	str	r3, [r2, #68]	; 0x44
 8002fae:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <HAL_MspInit+0x54>)
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb6:	607b      	str	r3, [r7, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	603b      	str	r3, [r7, #0]
 8002fbe:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <HAL_MspInit+0x54>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <HAL_MspInit+0x54>)
 8002fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fca:	4b08      	ldr	r3, [pc, #32]	; (8002fec <HAL_MspInit+0x54>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	210f      	movs	r1, #15
 8002fda:	f06f 0001 	mvn.w	r0, #1
 8002fde:	f001 f807 	bl	8003ff0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40023800 	.word	0x40023800

08002ff0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08a      	sub	sp, #40	; 0x28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff8:	f107 0314 	add.w	r3, r7, #20
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	60da      	str	r2, [r3, #12]
 8003006:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a2f      	ldr	r2, [pc, #188]	; (80030cc <HAL_ADC_MspInit+0xdc>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d157      	bne.n	80030c2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	4b2e      	ldr	r3, [pc, #184]	; (80030d0 <HAL_ADC_MspInit+0xe0>)
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	4a2d      	ldr	r2, [pc, #180]	; (80030d0 <HAL_ADC_MspInit+0xe0>)
 800301c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003020:	6453      	str	r3, [r2, #68]	; 0x44
 8003022:	4b2b      	ldr	r3, [pc, #172]	; (80030d0 <HAL_ADC_MspInit+0xe0>)
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	4b27      	ldr	r3, [pc, #156]	; (80030d0 <HAL_ADC_MspInit+0xe0>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	4a26      	ldr	r2, [pc, #152]	; (80030d0 <HAL_ADC_MspInit+0xe0>)
 8003038:	f043 0304 	orr.w	r3, r3, #4
 800303c:	6313      	str	r3, [r2, #48]	; 0x30
 800303e:	4b24      	ldr	r3, [pc, #144]	; (80030d0 <HAL_ADC_MspInit+0xe0>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800304a:	2301      	movs	r3, #1
 800304c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800304e:	2303      	movs	r3, #3
 8003050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003052:	2300      	movs	r3, #0
 8003054:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003056:	f107 0314 	add.w	r3, r7, #20
 800305a:	4619      	mov	r1, r3
 800305c:	481d      	ldr	r0, [pc, #116]	; (80030d4 <HAL_ADC_MspInit+0xe4>)
 800305e:	f001 fbcf 	bl	8004800 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003062:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <HAL_ADC_MspInit+0xe8>)
 8003064:	4a1d      	ldr	r2, [pc, #116]	; (80030dc <HAL_ADC_MspInit+0xec>)
 8003066:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_ADC_MspInit+0xe8>)
 800306a:	2200      	movs	r2, #0
 800306c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800306e:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <HAL_ADC_MspInit+0xe8>)
 8003070:	2200      	movs	r2, #0
 8003072:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003074:	4b18      	ldr	r3, [pc, #96]	; (80030d8 <HAL_ADC_MspInit+0xe8>)
 8003076:	2200      	movs	r2, #0
 8003078:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800307a:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <HAL_ADC_MspInit+0xe8>)
 800307c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003080:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003082:	4b15      	ldr	r3, [pc, #84]	; (80030d8 <HAL_ADC_MspInit+0xe8>)
 8003084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003088:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800308a:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <HAL_ADC_MspInit+0xe8>)
 800308c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003090:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003092:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <HAL_ADC_MspInit+0xe8>)
 8003094:	2200      	movs	r2, #0
 8003096:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003098:	4b0f      	ldr	r3, [pc, #60]	; (80030d8 <HAL_ADC_MspInit+0xe8>)
 800309a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800309e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030a0:	4b0d      	ldr	r3, [pc, #52]	; (80030d8 <HAL_ADC_MspInit+0xe8>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80030a6:	480c      	ldr	r0, [pc, #48]	; (80030d8 <HAL_ADC_MspInit+0xe8>)
 80030a8:	f000 ffcc 	bl	8004044 <HAL_DMA_Init>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80030b2:	f7ff fd0f 	bl	8002ad4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a07      	ldr	r2, [pc, #28]	; (80030d8 <HAL_ADC_MspInit+0xe8>)
 80030ba:	639a      	str	r2, [r3, #56]	; 0x38
 80030bc:	4a06      	ldr	r2, [pc, #24]	; (80030d8 <HAL_ADC_MspInit+0xe8>)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030c2:	bf00      	nop
 80030c4:	3728      	adds	r7, #40	; 0x28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40012000 	.word	0x40012000
 80030d0:	40023800 	.word	0x40023800
 80030d4:	40020800 	.word	0x40020800
 80030d8:	20009228 	.word	0x20009228
 80030dc:	40026410 	.word	0x40026410

080030e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f0:	d10d      	bne.n	800310e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	4b09      	ldr	r3, [pc, #36]	; (800311c <HAL_TIM_Base_MspInit+0x3c>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	4a08      	ldr	r2, [pc, #32]	; (800311c <HAL_TIM_Base_MspInit+0x3c>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	6413      	str	r3, [r2, #64]	; 0x40
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_TIM_Base_MspInit+0x3c>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800310e:	bf00      	nop
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40023800 	.word	0x40023800

08003120 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <HAL_TIM_OC_MspInit+0x48>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d115      	bne.n	800315e <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	4b0d      	ldr	r3, [pc, #52]	; (800316c <HAL_TIM_OC_MspInit+0x4c>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	4a0c      	ldr	r2, [pc, #48]	; (800316c <HAL_TIM_OC_MspInit+0x4c>)
 800313c:	f043 0302 	orr.w	r3, r3, #2
 8003140:	6413      	str	r3, [r2, #64]	; 0x40
 8003142:	4b0a      	ldr	r3, [pc, #40]	; (800316c <HAL_TIM_OC_MspInit+0x4c>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 8, 0);
 800314e:	2200      	movs	r2, #0
 8003150:	2108      	movs	r1, #8
 8003152:	201d      	movs	r0, #29
 8003154:	f000 ff4c 	bl	8003ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003158:	201d      	movs	r0, #29
 800315a:	f000 ff65 	bl	8004028 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800315e:	bf00      	nop
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40000400 	.word	0x40000400
 800316c:	40023800 	.word	0x40023800

08003170 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a15      	ldr	r2, [pc, #84]	; (80031d4 <HAL_TIM_PWM_MspInit+0x64>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d10e      	bne.n	80031a0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <HAL_TIM_PWM_MspInit+0x68>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	4a13      	ldr	r2, [pc, #76]	; (80031d8 <HAL_TIM_PWM_MspInit+0x68>)
 800318c:	f043 0304 	orr.w	r3, r3, #4
 8003190:	6413      	str	r3, [r2, #64]	; 0x40
 8003192:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <HAL_TIM_PWM_MspInit+0x68>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800319e:	e012      	b.n	80031c6 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM5)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a0d      	ldr	r2, [pc, #52]	; (80031dc <HAL_TIM_PWM_MspInit+0x6c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d10d      	bne.n	80031c6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <HAL_TIM_PWM_MspInit+0x68>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	4a09      	ldr	r2, [pc, #36]	; (80031d8 <HAL_TIM_PWM_MspInit+0x68>)
 80031b4:	f043 0308 	orr.w	r3, r3, #8
 80031b8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ba:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <HAL_TIM_PWM_MspInit+0x68>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	60bb      	str	r3, [r7, #8]
 80031c4:	68bb      	ldr	r3, [r7, #8]
}
 80031c6:	bf00      	nop
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40000800 	.word	0x40000800
 80031d8:	40023800 	.word	0x40023800
 80031dc:	40000c00 	.word	0x40000c00

080031e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08a      	sub	sp, #40	; 0x28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e8:	f107 0314 	add.w	r3, r7, #20
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	605a      	str	r2, [r3, #4]
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003200:	d11f      	bne.n	8003242 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	4b35      	ldr	r3, [pc, #212]	; (80032dc <HAL_TIM_MspPostInit+0xfc>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	4a34      	ldr	r2, [pc, #208]	; (80032dc <HAL_TIM_MspPostInit+0xfc>)
 800320c:	f043 0302 	orr.w	r3, r3, #2
 8003210:	6313      	str	r3, [r2, #48]	; 0x30
 8003212:	4b32      	ldr	r3, [pc, #200]	; (80032dc <HAL_TIM_MspPostInit+0xfc>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800321e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003224:	2302      	movs	r3, #2
 8003226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003228:	2300      	movs	r3, #0
 800322a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322c:	2300      	movs	r3, #0
 800322e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003230:	2301      	movs	r3, #1
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8003234:	f107 0314 	add.w	r3, r7, #20
 8003238:	4619      	mov	r1, r3
 800323a:	4829      	ldr	r0, [pc, #164]	; (80032e0 <HAL_TIM_MspPostInit+0x100>)
 800323c:	f001 fae0 	bl	8004800 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003240:	e047      	b.n	80032d2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a27      	ldr	r2, [pc, #156]	; (80032e4 <HAL_TIM_MspPostInit+0x104>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d11f      	bne.n	800328c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	4b22      	ldr	r3, [pc, #136]	; (80032dc <HAL_TIM_MspPostInit+0xfc>)
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	4a21      	ldr	r2, [pc, #132]	; (80032dc <HAL_TIM_MspPostInit+0xfc>)
 8003256:	f043 0302 	orr.w	r3, r3, #2
 800325a:	6313      	str	r3, [r2, #48]	; 0x30
 800325c:	4b1f      	ldr	r3, [pc, #124]	; (80032dc <HAL_TIM_MspPostInit+0xfc>)
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CC_CHAN_2_Pin|CC_CHAN_1_Pin;
 8003268:	f44f 7340 	mov.w	r3, #768	; 0x300
 800326c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326e:	2302      	movs	r3, #2
 8003270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003276:	2300      	movs	r3, #0
 8003278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800327a:	2302      	movs	r3, #2
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800327e:	f107 0314 	add.w	r3, r7, #20
 8003282:	4619      	mov	r1, r3
 8003284:	4816      	ldr	r0, [pc, #88]	; (80032e0 <HAL_TIM_MspPostInit+0x100>)
 8003286:	f001 fabb 	bl	8004800 <HAL_GPIO_Init>
}
 800328a:	e022      	b.n	80032d2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM5)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a15      	ldr	r2, [pc, #84]	; (80032e8 <HAL_TIM_MspPostInit+0x108>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d11d      	bne.n	80032d2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	4b10      	ldr	r3, [pc, #64]	; (80032dc <HAL_TIM_MspPostInit+0xfc>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	4a0f      	ldr	r2, [pc, #60]	; (80032dc <HAL_TIM_MspPostInit+0xfc>)
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	6313      	str	r3, [r2, #48]	; 0x30
 80032a6:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <HAL_TIM_MspPostInit+0xfc>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PB_LED_Pin;
 80032b2:	2301      	movs	r3, #1
 80032b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b6:	2302      	movs	r3, #2
 80032b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032be:	2300      	movs	r3, #0
 80032c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80032c2:	2302      	movs	r3, #2
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PB_LED_GPIO_Port, &GPIO_InitStruct);
 80032c6:	f107 0314 	add.w	r3, r7, #20
 80032ca:	4619      	mov	r1, r3
 80032cc:	4807      	ldr	r0, [pc, #28]	; (80032ec <HAL_TIM_MspPostInit+0x10c>)
 80032ce:	f001 fa97 	bl	8004800 <HAL_GPIO_Init>
}
 80032d2:	bf00      	nop
 80032d4:	3728      	adds	r7, #40	; 0x28
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40023800 	.word	0x40023800
 80032e0:	40020400 	.word	0x40020400
 80032e4:	40000800 	.word	0x40000800
 80032e8:	40000c00 	.word	0x40000c00
 80032ec:	40020000 	.word	0x40020000

080032f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08c      	sub	sp, #48	; 0x30
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80032f8:	2300      	movs	r3, #0
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8003300:	2200      	movs	r2, #0
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	201a      	movs	r0, #26
 8003306:	f000 fe73 	bl	8003ff0 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800330a:	201a      	movs	r0, #26
 800330c:	f000 fe8c 	bl	8004028 <HAL_NVIC_EnableIRQ>
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	4b1f      	ldr	r3, [pc, #124]	; (8003394 <HAL_InitTick+0xa4>)
 8003316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003318:	4a1e      	ldr	r2, [pc, #120]	; (8003394 <HAL_InitTick+0xa4>)
 800331a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800331e:	6453      	str	r3, [r2, #68]	; 0x44
 8003320:	4b1c      	ldr	r3, [pc, #112]	; (8003394 <HAL_InitTick+0xa4>)
 8003322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003324:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800332c:	f107 0210 	add.w	r2, r7, #16
 8003330:	f107 0314 	add.w	r3, r7, #20
 8003334:	4611      	mov	r1, r2
 8003336:	4618      	mov	r0, r3
 8003338:	f003 fa00 	bl	800673c <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800333c:	f003 f9ea 	bl	8006714 <HAL_RCC_GetPCLK2Freq>
 8003340:	4603      	mov	r3, r0
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003348:	4a13      	ldr	r2, [pc, #76]	; (8003398 <HAL_InitTick+0xa8>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	0c9b      	lsrs	r3, r3, #18
 8003350:	3b01      	subs	r3, #1
 8003352:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8003354:	4b11      	ldr	r3, [pc, #68]	; (800339c <HAL_InitTick+0xac>)
 8003356:	4a12      	ldr	r2, [pc, #72]	; (80033a0 <HAL_InitTick+0xb0>)
 8003358:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000 / 1000) - 1;
 800335a:	4b10      	ldr	r3, [pc, #64]	; (800339c <HAL_InitTick+0xac>)
 800335c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003360:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8003362:	4a0e      	ldr	r2, [pc, #56]	; (800339c <HAL_InitTick+0xac>)
 8003364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003366:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8003368:	4b0c      	ldr	r3, [pc, #48]	; (800339c <HAL_InitTick+0xac>)
 800336a:	2200      	movs	r2, #0
 800336c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800336e:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_InitTick+0xac>)
 8003370:	2200      	movs	r2, #0
 8003372:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8003374:	4809      	ldr	r0, [pc, #36]	; (800339c <HAL_InitTick+0xac>)
 8003376:	f003 fa13 	bl	80067a0 <HAL_TIM_Base_Init>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d104      	bne.n	800338a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8003380:	4806      	ldr	r0, [pc, #24]	; (800339c <HAL_InitTick+0xac>)
 8003382:	f003 fa38 	bl	80067f6 <HAL_TIM_Base_Start_IT>
 8003386:	4603      	mov	r3, r0
 8003388:	e000      	b.n	800338c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
}
 800338c:	4618      	mov	r0, r3
 800338e:	3730      	adds	r7, #48	; 0x30
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40023800 	.word	0x40023800
 8003398:	431bde83 	.word	0x431bde83
 800339c:	200092cc 	.word	0x200092cc
 80033a0:	40014800 	.word	0x40014800

080033a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80033a8:	bf00      	nop
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033b2:	b480      	push	{r7}
 80033b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033b6:	e7fe      	b.n	80033b6 <HardFault_Handler+0x4>

080033b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033bc:	e7fe      	b.n	80033bc <MemManage_Handler+0x4>

080033be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033be:	b480      	push	{r7}
 80033c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033c2:	e7fe      	b.n	80033c2 <BusFault_Handler+0x4>

080033c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033c8:	e7fe      	b.n	80033c8 <UsageFault_Handler+0x4>

080033ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033ca:	b480      	push	{r7}
 80033cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033ce:	bf00      	nop
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80033dc:	2002      	movs	r0, #2
 80033de:	f001 fbc3 	bl	8004b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80033ec:	4802      	ldr	r0, [pc, #8]	; (80033f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80033ee:	f003 fb29 	bl	8006a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	200092cc 	.word	0x200092cc

080033fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003400:	4802      	ldr	r0, [pc, #8]	; (800340c <TIM3_IRQHandler+0x10>)
 8003402:	f003 fb1f 	bl	8006a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20009180 	.word	0x20009180

08003410 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003414:	4802      	ldr	r0, [pc, #8]	; (8003420 <DMA2_Stream0_IRQHandler+0x10>)
 8003416:	f000 ff8b 	bl	8004330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20009228 	.word	0x20009228

08003424 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003428:	4802      	ldr	r0, [pc, #8]	; (8003434 <OTG_FS_IRQHandler+0x10>)
 800342a:	f001 fd05 	bl	8004e38 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	2000a820 	.word	0x2000a820

08003438 <_sbrk>:
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	4a14      	ldr	r2, [pc, #80]	; (8003494 <_sbrk+0x5c>)
 8003442:	4b15      	ldr	r3, [pc, #84]	; (8003498 <_sbrk+0x60>)
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	4b13      	ldr	r3, [pc, #76]	; (800349c <_sbrk+0x64>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d102      	bne.n	800345a <_sbrk+0x22>
 8003454:	4b11      	ldr	r3, [pc, #68]	; (800349c <_sbrk+0x64>)
 8003456:	4a12      	ldr	r2, [pc, #72]	; (80034a0 <_sbrk+0x68>)
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	4b10      	ldr	r3, [pc, #64]	; (800349c <_sbrk+0x64>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4413      	add	r3, r2
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	429a      	cmp	r2, r3
 8003466:	d207      	bcs.n	8003478 <_sbrk+0x40>
 8003468:	f00b fca2 	bl	800edb0 <__errno>
 800346c:	4602      	mov	r2, r0
 800346e:	230c      	movs	r3, #12
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	f04f 33ff 	mov.w	r3, #4294967295
 8003476:	e009      	b.n	800348c <_sbrk+0x54>
 8003478:	4b08      	ldr	r3, [pc, #32]	; (800349c <_sbrk+0x64>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	4b07      	ldr	r3, [pc, #28]	; (800349c <_sbrk+0x64>)
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4413      	add	r3, r2
 8003486:	4a05      	ldr	r2, [pc, #20]	; (800349c <_sbrk+0x64>)
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	20018000 	.word	0x20018000
 8003498:	00000800 	.word	0x00000800
 800349c:	200003b4 	.word	0x200003b4
 80034a0:	2000ac30 	.word	0x2000ac30

080034a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034a8:	4b08      	ldr	r3, [pc, #32]	; (80034cc <SystemInit+0x28>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ae:	4a07      	ldr	r2, [pc, #28]	; (80034cc <SystemInit+0x28>)
 80034b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80034b8:	4b04      	ldr	r3, [pc, #16]	; (80034cc <SystemInit+0x28>)
 80034ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034be:	609a      	str	r2, [r3, #8]
#endif
}
 80034c0:	bf00      	nop
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	e000ed00 	.word	0xe000ed00

080034d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80034d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003508 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80034d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80034d6:	e003      	b.n	80034e0 <LoopCopyDataInit>

080034d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80034d8:	4b0c      	ldr	r3, [pc, #48]	; (800350c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80034da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80034dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80034de:	3104      	adds	r1, #4

080034e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80034e0:	480b      	ldr	r0, [pc, #44]	; (8003510 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80034e2:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80034e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80034e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80034e8:	d3f6      	bcc.n	80034d8 <CopyDataInit>
  ldr  r2, =_sbss
 80034ea:	4a0b      	ldr	r2, [pc, #44]	; (8003518 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80034ec:	e002      	b.n	80034f4 <LoopFillZerobss>

080034ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80034ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80034f0:	f842 3b04 	str.w	r3, [r2], #4

080034f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80034f4:	4b09      	ldr	r3, [pc, #36]	; (800351c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80034f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80034f8:	d3f9      	bcc.n	80034ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034fa:	f7ff ffd3 	bl	80034a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034fe:	f00b fc5d 	bl	800edbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003502:	f7fe ff89 	bl	8002418 <main>
  bx  lr    
 8003506:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003508:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800350c:	08010c60 	.word	0x08010c60
  ldr  r0, =_sdata
 8003510:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003514:	20000354 	.word	0x20000354
  ldr  r2, =_sbss
 8003518:	20000354 	.word	0x20000354
  ldr  r3, = _ebss
 800351c:	2000ac2c 	.word	0x2000ac2c

08003520 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003520:	e7fe      	b.n	8003520 <ADC_IRQHandler>
	...

08003524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003528:	4b0e      	ldr	r3, [pc, #56]	; (8003564 <HAL_Init+0x40>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a0d      	ldr	r2, [pc, #52]	; (8003564 <HAL_Init+0x40>)
 800352e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003532:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003534:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <HAL_Init+0x40>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a0a      	ldr	r2, [pc, #40]	; (8003564 <HAL_Init+0x40>)
 800353a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800353e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003540:	4b08      	ldr	r3, [pc, #32]	; (8003564 <HAL_Init+0x40>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a07      	ldr	r2, [pc, #28]	; (8003564 <HAL_Init+0x40>)
 8003546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800354c:	2003      	movs	r0, #3
 800354e:	f000 fd44 	bl	8003fda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003552:	2000      	movs	r0, #0
 8003554:	f7ff fecc 	bl	80032f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003558:	f7ff fd1e 	bl	8002f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40023c00 	.word	0x40023c00

08003568 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800356c:	4b13      	ldr	r3, [pc, #76]	; (80035bc <HAL_DeInit+0x54>)
 800356e:	f04f 32ff 	mov.w	r2, #4294967295
 8003572:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8003574:	4b11      	ldr	r3, [pc, #68]	; (80035bc <HAL_DeInit+0x54>)
 8003576:	2200      	movs	r2, #0
 8003578:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 800357a:	4b10      	ldr	r3, [pc, #64]	; (80035bc <HAL_DeInit+0x54>)
 800357c:	f04f 32ff 	mov.w	r2, #4294967295
 8003580:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8003582:	4b0e      	ldr	r3, [pc, #56]	; (80035bc <HAL_DeInit+0x54>)
 8003584:	2200      	movs	r2, #0
 8003586:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8003588:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <HAL_DeInit+0x54>)
 800358a:	f04f 32ff 	mov.w	r2, #4294967295
 800358e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8003590:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <HAL_DeInit+0x54>)
 8003592:	2200      	movs	r2, #0
 8003594:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8003596:	4b09      	ldr	r3, [pc, #36]	; (80035bc <HAL_DeInit+0x54>)
 8003598:	f04f 32ff 	mov.w	r2, #4294967295
 800359c:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800359e:	4b07      	ldr	r3, [pc, #28]	; (80035bc <HAL_DeInit+0x54>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <HAL_DeInit+0x54>)
 80035a6:	f04f 32ff 	mov.w	r2, #4294967295
 80035aa:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80035ac:	4b03      	ldr	r3, [pc, #12]	; (80035bc <HAL_DeInit+0x54>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80035b2:	f000 f805 	bl	80035c0 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40023800 	.word	0x40023800

080035c0 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80035c4:	bf00      	nop
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
	...

080035d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035d4:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_IncTick+0x20>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	461a      	mov	r2, r3
 80035da:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <HAL_IncTick+0x24>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4413      	add	r3, r2
 80035e0:	4a04      	ldr	r2, [pc, #16]	; (80035f4 <HAL_IncTick+0x24>)
 80035e2:	6013      	str	r3, [r2, #0]
}
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20000008 	.word	0x20000008
 80035f4:	2000930c 	.word	0x2000930c

080035f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return uwTick;
 80035fc:	4b03      	ldr	r3, [pc, #12]	; (800360c <HAL_GetTick+0x14>)
 80035fe:	681b      	ldr	r3, [r3, #0]
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	2000930c 	.word	0x2000930c

08003610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003618:	f7ff ffee 	bl	80035f8 <HAL_GetTick>
 800361c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003628:	d005      	beq.n	8003636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800362a:	4b09      	ldr	r3, [pc, #36]	; (8003650 <HAL_Delay+0x40>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4413      	add	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003636:	bf00      	nop
 8003638:	f7ff ffde 	bl	80035f8 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	429a      	cmp	r2, r3
 8003646:	d8f7      	bhi.n	8003638 <HAL_Delay+0x28>
  {
  }
}
 8003648:	bf00      	nop
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20000008 	.word	0x20000008

08003654 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e033      	b.n	80036d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff fcbc 	bl	8002ff0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	f003 0310 	and.w	r3, r3, #16
 800368e:	2b00      	cmp	r3, #0
 8003690:	d118      	bne.n	80036c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800369a:	f023 0302 	bic.w	r3, r3, #2
 800369e:	f043 0202 	orr.w	r2, r3, #2
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fa6c 	bl	8003b84 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f023 0303 	bic.w	r3, r3, #3
 80036ba:	f043 0201 	orr.w	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40
 80036c2:	e001      	b.n	80036c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_ADC_Start_DMA+0x1e>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e0b1      	b.n	800385e <HAL_ADC_Start_DMA+0x182>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b01      	cmp	r3, #1
 800370e:	d018      	beq.n	8003742 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003720:	4b51      	ldr	r3, [pc, #324]	; (8003868 <HAL_ADC_Start_DMA+0x18c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a51      	ldr	r2, [pc, #324]	; (800386c <HAL_ADC_Start_DMA+0x190>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	0c9a      	lsrs	r2, r3, #18
 800372c:	4613      	mov	r3, r2
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	4413      	add	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003734:	e002      	b.n	800373c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	3b01      	subs	r3, #1
 800373a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f9      	bne.n	8003736 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b01      	cmp	r3, #1
 800374e:	f040 8085 	bne.w	800385c <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800375a:	f023 0301 	bic.w	r3, r3, #1
 800375e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003770:	2b00      	cmp	r3, #0
 8003772:	d007      	beq.n	8003784 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800377c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800378c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003790:	d106      	bne.n	80037a0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	f023 0206 	bic.w	r2, r3, #6
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	645a      	str	r2, [r3, #68]	; 0x44
 800379e:	e002      	b.n	80037a6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037ae:	4b30      	ldr	r3, [pc, #192]	; (8003870 <HAL_ADC_Start_DMA+0x194>)
 80037b0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b6:	4a2f      	ldr	r2, [pc, #188]	; (8003874 <HAL_ADC_Start_DMA+0x198>)
 80037b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	4a2e      	ldr	r2, [pc, #184]	; (8003878 <HAL_ADC_Start_DMA+0x19c>)
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	4a2d      	ldr	r2, [pc, #180]	; (800387c <HAL_ADC_Start_DMA+0x1a0>)
 80037c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80037d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80037e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	334c      	adds	r3, #76	; 0x4c
 80037fe:	4619      	mov	r1, r3
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f000 fccc 	bl	80041a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10f      	bne.n	8003834 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d11c      	bne.n	800385c <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003830:	609a      	str	r2, [r3, #8]
 8003832:	e013      	b.n	800385c <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a11      	ldr	r2, [pc, #68]	; (8003880 <HAL_ADC_Start_DMA+0x1a4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d10e      	bne.n	800385c <HAL_ADC_Start_DMA+0x180>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d107      	bne.n	800385c <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800385a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20000000 	.word	0x20000000
 800386c:	431bde83 	.word	0x431bde83
 8003870:	40012300 	.word	0x40012300
 8003874:	08003d7d 	.word	0x08003d7d
 8003878:	08003e37 	.word	0x08003e37
 800387c:	08003e53 	.word	0x08003e53
 8003880:	40012000 	.word	0x40012000

08003884 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <HAL_ADC_Stop_DMA+0x1a>
 800389a:	2302      	movs	r3, #2
 800389c:	e038      	b.n	8003910 <HAL_ADC_Stop_DMA+0x8c>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0201 	bic.w	r2, r2, #1
 80038b4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d120      	bne.n	8003906 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038d2:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 fcb9 	bl	8004250 <HAL_DMA_Abort>
 80038de:	4603      	mov	r3, r0
 80038e0:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80038f0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80038fa:	f023 0301 	bic.w	r3, r3, #1
 80038fe:	f043 0201 	orr.w	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800390e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_ADC_ConfigChannel+0x1c>
 8003958:	2302      	movs	r3, #2
 800395a:	e105      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x228>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b09      	cmp	r3, #9
 800396a:	d925      	bls.n	80039b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68d9      	ldr	r1, [r3, #12]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	b29b      	uxth	r3, r3
 8003978:	461a      	mov	r2, r3
 800397a:	4613      	mov	r3, r2
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	4413      	add	r3, r2
 8003980:	3b1e      	subs	r3, #30
 8003982:	2207      	movs	r2, #7
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43da      	mvns	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	400a      	ands	r2, r1
 8003990:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68d9      	ldr	r1, [r3, #12]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	4618      	mov	r0, r3
 80039a4:	4603      	mov	r3, r0
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	4403      	add	r3, r0
 80039aa:	3b1e      	subs	r3, #30
 80039ac:	409a      	lsls	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	60da      	str	r2, [r3, #12]
 80039b6:	e022      	b.n	80039fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6919      	ldr	r1, [r3, #16]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	4613      	mov	r3, r2
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	4413      	add	r3, r2
 80039cc:	2207      	movs	r2, #7
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43da      	mvns	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	400a      	ands	r2, r1
 80039da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6919      	ldr	r1, [r3, #16]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	4618      	mov	r0, r3
 80039ee:	4603      	mov	r3, r0
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	4403      	add	r3, r0
 80039f4:	409a      	lsls	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b06      	cmp	r3, #6
 8003a04:	d824      	bhi.n	8003a50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	3b05      	subs	r3, #5
 8003a18:	221f      	movs	r2, #31
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	43da      	mvns	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	400a      	ands	r2, r1
 8003a26:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	4618      	mov	r0, r3
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	3b05      	subs	r3, #5
 8003a42:	fa00 f203 	lsl.w	r2, r0, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	635a      	str	r2, [r3, #52]	; 0x34
 8003a4e:	e04c      	b.n	8003aea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b0c      	cmp	r3, #12
 8003a56:	d824      	bhi.n	8003aa2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	3b23      	subs	r3, #35	; 0x23
 8003a6a:	221f      	movs	r2, #31
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	43da      	mvns	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	400a      	ands	r2, r1
 8003a78:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	4618      	mov	r0, r3
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	3b23      	subs	r3, #35	; 0x23
 8003a94:	fa00 f203 	lsl.w	r2, r0, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30
 8003aa0:	e023      	b.n	8003aea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	4613      	mov	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	3b41      	subs	r3, #65	; 0x41
 8003ab4:	221f      	movs	r2, #31
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43da      	mvns	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	400a      	ands	r2, r1
 8003ac2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	3b41      	subs	r3, #65	; 0x41
 8003ade:	fa00 f203 	lsl.w	r2, r0, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003aea:	4b22      	ldr	r3, [pc, #136]	; (8003b74 <HAL_ADC_ConfigChannel+0x234>)
 8003aec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <HAL_ADC_ConfigChannel+0x238>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d109      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x1cc>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b12      	cmp	r3, #18
 8003afe:	d105      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a19      	ldr	r2, [pc, #100]	; (8003b78 <HAL_ADC_ConfigChannel+0x238>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d123      	bne.n	8003b5e <HAL_ADC_ConfigChannel+0x21e>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b10      	cmp	r3, #16
 8003b1c:	d003      	beq.n	8003b26 <HAL_ADC_ConfigChannel+0x1e6>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b11      	cmp	r3, #17
 8003b24:	d11b      	bne.n	8003b5e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b10      	cmp	r3, #16
 8003b38:	d111      	bne.n	8003b5e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b3a:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <HAL_ADC_ConfigChannel+0x23c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a10      	ldr	r2, [pc, #64]	; (8003b80 <HAL_ADC_ConfigChannel+0x240>)
 8003b40:	fba2 2303 	umull	r2, r3, r2, r3
 8003b44:	0c9a      	lsrs	r2, r3, #18
 8003b46:	4613      	mov	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4413      	add	r3, r2
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b50:	e002      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f9      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	40012300 	.word	0x40012300
 8003b78:	40012000 	.word	0x40012000
 8003b7c:	20000000 	.word	0x20000000
 8003b80:	431bde83 	.word	0x431bde83

08003b84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b8c:	4b79      	ldr	r3, [pc, #484]	; (8003d74 <ADC_Init+0x1f0>)
 8003b8e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6859      	ldr	r1, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	021a      	lsls	r2, r3, #8
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003bdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6859      	ldr	r1, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6899      	ldr	r1, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c16:	4a58      	ldr	r2, [pc, #352]	; (8003d78 <ADC_Init+0x1f4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d022      	beq.n	8003c62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6899      	ldr	r1, [r3, #8]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6899      	ldr	r1, [r3, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	609a      	str	r2, [r3, #8]
 8003c60:	e00f      	b.n	8003c82 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c80:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0202 	bic.w	r2, r2, #2
 8003c90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6899      	ldr	r1, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	7e1b      	ldrb	r3, [r3, #24]
 8003c9c:	005a      	lsls	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d01b      	beq.n	8003ce8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cbe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003cce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6859      	ldr	r1, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	035a      	lsls	r2, r3, #13
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	e007      	b.n	8003cf8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cf6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	051a      	lsls	r2, r3, #20
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6899      	ldr	r1, [r3, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d3a:	025a      	lsls	r2, r3, #9
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6899      	ldr	r1, [r3, #8]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	029a      	lsls	r2, r3, #10
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	609a      	str	r2, [r3, #8]
}
 8003d68:	bf00      	nop
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	40012300 	.word	0x40012300
 8003d78:	0f000001 	.word	0x0f000001

08003d7c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d13c      	bne.n	8003e10 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d12b      	bne.n	8003e08 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d127      	bne.n	8003e08 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d006      	beq.n	8003dd4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d119      	bne.n	8003e08 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0220 	bic.w	r2, r2, #32
 8003de2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d105      	bne.n	8003e08 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	f043 0201 	orr.w	r2, r3, #1
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f7fd fd71 	bl	80018f0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003e0e:	e00e      	b.n	8003e2e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	f003 0310 	and.w	r3, r3, #16
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f7ff fd85 	bl	800392c <HAL_ADC_ErrorCallback>
}
 8003e22:	e004      	b.n	8003e2e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	4798      	blx	r3
}
 8003e2e:	bf00      	nop
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b084      	sub	sp, #16
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f7ff fd67 	bl	8003918 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e4a:	bf00      	nop
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2240      	movs	r2, #64	; 0x40
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6a:	f043 0204 	orr.w	r2, r3, #4
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f7ff fd5a 	bl	800392c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e78:	bf00      	nop
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e90:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eb2:	4a04      	ldr	r2, [pc, #16]	; (8003ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	60d3      	str	r3, [r2, #12]
}
 8003eb8:	bf00      	nop
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	e000ed00 	.word	0xe000ed00

08003ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ecc:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	0a1b      	lsrs	r3, r3, #8
 8003ed2:	f003 0307 	and.w	r3, r3, #7
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	e000ed00 	.word	0xe000ed00

08003ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	db0b      	blt.n	8003f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	f003 021f 	and.w	r2, r3, #31
 8003efc:	4907      	ldr	r1, [pc, #28]	; (8003f1c <__NVIC_EnableIRQ+0x38>)
 8003efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	2001      	movs	r0, #1
 8003f06:	fa00 f202 	lsl.w	r2, r0, r2
 8003f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	e000e100 	.word	0xe000e100

08003f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	6039      	str	r1, [r7, #0]
 8003f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	db0a      	blt.n	8003f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	490c      	ldr	r1, [pc, #48]	; (8003f6c <__NVIC_SetPriority+0x4c>)
 8003f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3e:	0112      	lsls	r2, r2, #4
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	440b      	add	r3, r1
 8003f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f48:	e00a      	b.n	8003f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	4908      	ldr	r1, [pc, #32]	; (8003f70 <__NVIC_SetPriority+0x50>)
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	3b04      	subs	r3, #4
 8003f58:	0112      	lsls	r2, r2, #4
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	761a      	strb	r2, [r3, #24]
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	e000e100 	.word	0xe000e100
 8003f70:	e000ed00 	.word	0xe000ed00

08003f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b089      	sub	sp, #36	; 0x24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f1c3 0307 	rsb	r3, r3, #7
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	bf28      	it	cs
 8003f92:	2304      	movcs	r3, #4
 8003f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	2b06      	cmp	r3, #6
 8003f9c:	d902      	bls.n	8003fa4 <NVIC_EncodePriority+0x30>
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3b03      	subs	r3, #3
 8003fa2:	e000      	b.n	8003fa6 <NVIC_EncodePriority+0x32>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	43da      	mvns	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc6:	43d9      	mvns	r1, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fcc:	4313      	orrs	r3, r2
         );
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3724      	adds	r7, #36	; 0x24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b082      	sub	sp, #8
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff ff4c 	bl	8003e80 <__NVIC_SetPriorityGrouping>
}
 8003fe8:	bf00      	nop
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004002:	f7ff ff61 	bl	8003ec8 <__NVIC_GetPriorityGrouping>
 8004006:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	6978      	ldr	r0, [r7, #20]
 800400e:	f7ff ffb1 	bl	8003f74 <NVIC_EncodePriority>
 8004012:	4602      	mov	r2, r0
 8004014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004018:	4611      	mov	r1, r2
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff ff80 	bl	8003f20 <__NVIC_SetPriority>
}
 8004020:	bf00      	nop
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff ff54 	bl	8003ee4 <__NVIC_EnableIRQ>
}
 800403c:	bf00      	nop
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004050:	f7ff fad2 	bl	80035f8 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e099      	b.n	8004194 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0201 	bic.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004080:	e00f      	b.n	80040a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004082:	f7ff fab9 	bl	80035f8 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b05      	cmp	r3, #5
 800408e:	d908      	bls.n	80040a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2203      	movs	r2, #3
 800409a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e078      	b.n	8004194 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1e8      	bne.n	8004082 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	4b38      	ldr	r3, [pc, #224]	; (800419c <HAL_DMA_Init+0x158>)
 80040bc:	4013      	ands	r3, r2
 80040be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d107      	bne.n	800410c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004104:	4313      	orrs	r3, r2
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f023 0307 	bic.w	r3, r3, #7
 8004122:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	2b04      	cmp	r3, #4
 8004134:	d117      	bne.n	8004166 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00e      	beq.n	8004166 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 fadf 	bl	800470c <DMA_CheckFifoParam>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2240      	movs	r2, #64	; 0x40
 8004158:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004162:	2301      	movs	r3, #1
 8004164:	e016      	b.n	8004194 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fa96 	bl	80046a0 <DMA_CalcBaseAndBitshift>
 8004174:	4603      	mov	r3, r0
 8004176:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417c:	223f      	movs	r2, #63	; 0x3f
 800417e:	409a      	lsls	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	f010803f 	.word	0xf010803f

080041a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d101      	bne.n	80041c6 <HAL_DMA_Start_IT+0x26>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e040      	b.n	8004248 <HAL_DMA_Start_IT+0xa8>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d12f      	bne.n	800423a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2202      	movs	r2, #2
 80041de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 fa28 	bl	8004644 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f8:	223f      	movs	r2, #63	; 0x3f
 80041fa:	409a      	lsls	r2, r3
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0216 	orr.w	r2, r2, #22
 800420e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004214:	2b00      	cmp	r3, #0
 8004216:	d007      	beq.n	8004228 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0208 	orr.w	r2, r2, #8
 8004226:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	e005      	b.n	8004246 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004242:	2302      	movs	r3, #2
 8004244:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004246:	7dfb      	ldrb	r3, [r7, #23]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800425e:	f7ff f9cb 	bl	80035f8 <HAL_GetTick>
 8004262:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d008      	beq.n	8004282 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2280      	movs	r2, #128	; 0x80
 8004274:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e052      	b.n	8004328 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0216 	bic.w	r2, r2, #22
 8004290:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	695a      	ldr	r2, [r3, #20]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d103      	bne.n	80042b2 <HAL_DMA_Abort+0x62>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d007      	beq.n	80042c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0208 	bic.w	r2, r2, #8
 80042c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0201 	bic.w	r2, r2, #1
 80042d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042d2:	e013      	b.n	80042fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042d4:	f7ff f990 	bl	80035f8 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b05      	cmp	r3, #5
 80042e0:	d90c      	bls.n	80042fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2220      	movs	r2, #32
 80042e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2203      	movs	r2, #3
 80042f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e015      	b.n	8004328 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e4      	bne.n	80042d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430e:	223f      	movs	r2, #63	; 0x3f
 8004310:	409a      	lsls	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800433c:	4b92      	ldr	r3, [pc, #584]	; (8004588 <HAL_DMA_IRQHandler+0x258>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a92      	ldr	r2, [pc, #584]	; (800458c <HAL_DMA_IRQHandler+0x25c>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	0a9b      	lsrs	r3, r3, #10
 8004348:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435a:	2208      	movs	r2, #8
 800435c:	409a      	lsls	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4013      	ands	r3, r2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d01a      	beq.n	800439c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d013      	beq.n	800439c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0204 	bic.w	r2, r2, #4
 8004382:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004388:	2208      	movs	r2, #8
 800438a:	409a      	lsls	r2, r3
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004394:	f043 0201 	orr.w	r2, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a0:	2201      	movs	r2, #1
 80043a2:	409a      	lsls	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4013      	ands	r3, r2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d012      	beq.n	80043d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00b      	beq.n	80043d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043be:	2201      	movs	r2, #1
 80043c0:	409a      	lsls	r2, r3
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ca:	f043 0202 	orr.w	r2, r3, #2
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d6:	2204      	movs	r2, #4
 80043d8:	409a      	lsls	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4013      	ands	r3, r2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d012      	beq.n	8004408 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00b      	beq.n	8004408 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f4:	2204      	movs	r2, #4
 80043f6:	409a      	lsls	r2, r3
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004400:	f043 0204 	orr.w	r2, r3, #4
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440c:	2210      	movs	r2, #16
 800440e:	409a      	lsls	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4013      	ands	r3, r2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d043      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b00      	cmp	r3, #0
 8004424:	d03c      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442a:	2210      	movs	r2, #16
 800442c:	409a      	lsls	r2, r3
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d018      	beq.n	8004472 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d108      	bne.n	8004460 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	2b00      	cmp	r3, #0
 8004454:	d024      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	4798      	blx	r3
 800445e:	e01f      	b.n	80044a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01b      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	4798      	blx	r3
 8004470:	e016      	b.n	80044a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447c:	2b00      	cmp	r3, #0
 800447e:	d107      	bne.n	8004490 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0208 	bic.w	r2, r2, #8
 800448e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a4:	2220      	movs	r2, #32
 80044a6:	409a      	lsls	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4013      	ands	r3, r2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 808e 	beq.w	80045ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0310 	and.w	r3, r3, #16
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 8086 	beq.w	80045ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c6:	2220      	movs	r2, #32
 80044c8:	409a      	lsls	r2, r3
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b05      	cmp	r3, #5
 80044d8:	d136      	bne.n	8004548 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0216 	bic.w	r2, r2, #22
 80044e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695a      	ldr	r2, [r3, #20]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d103      	bne.n	800450a <HAL_DMA_IRQHandler+0x1da>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004506:	2b00      	cmp	r3, #0
 8004508:	d007      	beq.n	800451a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0208 	bic.w	r2, r2, #8
 8004518:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451e:	223f      	movs	r2, #63	; 0x3f
 8004520:	409a      	lsls	r2, r3
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453a:	2b00      	cmp	r3, #0
 800453c:	d07d      	beq.n	800463a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	4798      	blx	r3
        }
        return;
 8004546:	e078      	b.n	800463a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d01c      	beq.n	8004590 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d108      	bne.n	8004576 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004568:	2b00      	cmp	r3, #0
 800456a:	d030      	beq.n	80045ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	4798      	blx	r3
 8004574:	e02b      	b.n	80045ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457a:	2b00      	cmp	r3, #0
 800457c:	d027      	beq.n	80045ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	4798      	blx	r3
 8004586:	e022      	b.n	80045ce <HAL_DMA_IRQHandler+0x29e>
 8004588:	20000000 	.word	0x20000000
 800458c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10f      	bne.n	80045be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0210 	bic.w	r2, r2, #16
 80045ac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d032      	beq.n	800463c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d022      	beq.n	8004628 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2205      	movs	r2, #5
 80045e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0201 	bic.w	r2, r2, #1
 80045f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	3301      	adds	r3, #1
 80045fe:	60bb      	str	r3, [r7, #8]
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	429a      	cmp	r2, r3
 8004604:	d307      	bcc.n	8004616 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f2      	bne.n	80045fa <HAL_DMA_IRQHandler+0x2ca>
 8004614:	e000      	b.n	8004618 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004616:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	4798      	blx	r3
 8004638:	e000      	b.n	800463c <HAL_DMA_IRQHandler+0x30c>
        return;
 800463a:	bf00      	nop
    }
  }
}
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop

08004644 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
 8004650:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004660:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	2b40      	cmp	r3, #64	; 0x40
 8004670:	d108      	bne.n	8004684 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004682:	e007      	b.n	8004694 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	60da      	str	r2, [r3, #12]
}
 8004694:	bf00      	nop
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	3b10      	subs	r3, #16
 80046b0:	4a14      	ldr	r2, [pc, #80]	; (8004704 <DMA_CalcBaseAndBitshift+0x64>)
 80046b2:	fba2 2303 	umull	r2, r3, r2, r3
 80046b6:	091b      	lsrs	r3, r3, #4
 80046b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046ba:	4a13      	ldr	r2, [pc, #76]	; (8004708 <DMA_CalcBaseAndBitshift+0x68>)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4413      	add	r3, r2
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	461a      	mov	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b03      	cmp	r3, #3
 80046cc:	d909      	bls.n	80046e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046d6:	f023 0303 	bic.w	r3, r3, #3
 80046da:	1d1a      	adds	r2, r3, #4
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	659a      	str	r2, [r3, #88]	; 0x58
 80046e0:	e007      	b.n	80046f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046ea:	f023 0303 	bic.w	r3, r3, #3
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	aaaaaaab 	.word	0xaaaaaaab
 8004708:	08010a20 	.word	0x08010a20

0800470c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d11f      	bne.n	8004766 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b03      	cmp	r3, #3
 800472a:	d855      	bhi.n	80047d8 <DMA_CheckFifoParam+0xcc>
 800472c:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <DMA_CheckFifoParam+0x28>)
 800472e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004732:	bf00      	nop
 8004734:	08004745 	.word	0x08004745
 8004738:	08004757 	.word	0x08004757
 800473c:	08004745 	.word	0x08004745
 8004740:	080047d9 	.word	0x080047d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d045      	beq.n	80047dc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004754:	e042      	b.n	80047dc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800475e:	d13f      	bne.n	80047e0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004764:	e03c      	b.n	80047e0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800476e:	d121      	bne.n	80047b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b03      	cmp	r3, #3
 8004774:	d836      	bhi.n	80047e4 <DMA_CheckFifoParam+0xd8>
 8004776:	a201      	add	r2, pc, #4	; (adr r2, 800477c <DMA_CheckFifoParam+0x70>)
 8004778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477c:	0800478d 	.word	0x0800478d
 8004780:	08004793 	.word	0x08004793
 8004784:	0800478d 	.word	0x0800478d
 8004788:	080047a5 	.word	0x080047a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	73fb      	strb	r3, [r7, #15]
      break;
 8004790:	e02f      	b.n	80047f2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d024      	beq.n	80047e8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047a2:	e021      	b.n	80047e8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047ac:	d11e      	bne.n	80047ec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047b2:	e01b      	b.n	80047ec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d902      	bls.n	80047c0 <DMA_CheckFifoParam+0xb4>
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	d003      	beq.n	80047c6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047be:	e018      	b.n	80047f2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	73fb      	strb	r3, [r7, #15]
      break;
 80047c4:	e015      	b.n	80047f2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00e      	beq.n	80047f0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	73fb      	strb	r3, [r7, #15]
      break;
 80047d6:	e00b      	b.n	80047f0 <DMA_CheckFifoParam+0xe4>
      break;
 80047d8:	bf00      	nop
 80047da:	e00a      	b.n	80047f2 <DMA_CheckFifoParam+0xe6>
      break;
 80047dc:	bf00      	nop
 80047de:	e008      	b.n	80047f2 <DMA_CheckFifoParam+0xe6>
      break;
 80047e0:	bf00      	nop
 80047e2:	e006      	b.n	80047f2 <DMA_CheckFifoParam+0xe6>
      break;
 80047e4:	bf00      	nop
 80047e6:	e004      	b.n	80047f2 <DMA_CheckFifoParam+0xe6>
      break;
 80047e8:	bf00      	nop
 80047ea:	e002      	b.n	80047f2 <DMA_CheckFifoParam+0xe6>
      break;   
 80047ec:	bf00      	nop
 80047ee:	e000      	b.n	80047f2 <DMA_CheckFifoParam+0xe6>
      break;
 80047f0:	bf00      	nop
    }
  } 
  
  return status; 
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004800:	b480      	push	{r7}
 8004802:	b089      	sub	sp, #36	; 0x24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800480e:	2300      	movs	r3, #0
 8004810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004812:	2300      	movs	r3, #0
 8004814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
 800481a:	e159      	b.n	8004ad0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800481c:	2201      	movs	r2, #1
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	4013      	ands	r3, r2
 800482e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	429a      	cmp	r2, r3
 8004836:	f040 8148 	bne.w	8004aca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d00b      	beq.n	800485a <HAL_GPIO_Init+0x5a>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2b02      	cmp	r3, #2
 8004848:	d007      	beq.n	800485a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800484e:	2b11      	cmp	r3, #17
 8004850:	d003      	beq.n	800485a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b12      	cmp	r3, #18
 8004858:	d130      	bne.n	80048bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	2203      	movs	r2, #3
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	43db      	mvns	r3, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4013      	ands	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4313      	orrs	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004890:	2201      	movs	r2, #1
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	43db      	mvns	r3, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4013      	ands	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	091b      	lsrs	r3, r3, #4
 80048a6:	f003 0201 	and.w	r2, r3, #1
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	2203      	movs	r2, #3
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	43db      	mvns	r3, r3
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4013      	ands	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d003      	beq.n	80048fc <HAL_GPIO_Init+0xfc>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	2b12      	cmp	r3, #18
 80048fa:	d123      	bne.n	8004944 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	08da      	lsrs	r2, r3, #3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	3208      	adds	r2, #8
 8004904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004908:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	220f      	movs	r2, #15
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	43db      	mvns	r3, r3
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	4013      	ands	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	4313      	orrs	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	08da      	lsrs	r2, r3, #3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3208      	adds	r2, #8
 800493e:	69b9      	ldr	r1, [r7, #24]
 8004940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	2203      	movs	r2, #3
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	43db      	mvns	r3, r3
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	4013      	ands	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f003 0203 	and.w	r2, r3, #3
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	fa02 f303 	lsl.w	r3, r2, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4313      	orrs	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 80a2 	beq.w	8004aca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	4b56      	ldr	r3, [pc, #344]	; (8004ae4 <HAL_GPIO_Init+0x2e4>)
 800498c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498e:	4a55      	ldr	r2, [pc, #340]	; (8004ae4 <HAL_GPIO_Init+0x2e4>)
 8004990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004994:	6453      	str	r3, [r2, #68]	; 0x44
 8004996:	4b53      	ldr	r3, [pc, #332]	; (8004ae4 <HAL_GPIO_Init+0x2e4>)
 8004998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049a2:	4a51      	ldr	r2, [pc, #324]	; (8004ae8 <HAL_GPIO_Init+0x2e8>)
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	089b      	lsrs	r3, r3, #2
 80049a8:	3302      	adds	r3, #2
 80049aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	220f      	movs	r2, #15
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	43db      	mvns	r3, r3
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	4013      	ands	r3, r2
 80049c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a48      	ldr	r2, [pc, #288]	; (8004aec <HAL_GPIO_Init+0x2ec>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d019      	beq.n	8004a02 <HAL_GPIO_Init+0x202>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a47      	ldr	r2, [pc, #284]	; (8004af0 <HAL_GPIO_Init+0x2f0>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d013      	beq.n	80049fe <HAL_GPIO_Init+0x1fe>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a46      	ldr	r2, [pc, #280]	; (8004af4 <HAL_GPIO_Init+0x2f4>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00d      	beq.n	80049fa <HAL_GPIO_Init+0x1fa>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a45      	ldr	r2, [pc, #276]	; (8004af8 <HAL_GPIO_Init+0x2f8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d007      	beq.n	80049f6 <HAL_GPIO_Init+0x1f6>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a44      	ldr	r2, [pc, #272]	; (8004afc <HAL_GPIO_Init+0x2fc>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d101      	bne.n	80049f2 <HAL_GPIO_Init+0x1f2>
 80049ee:	2304      	movs	r3, #4
 80049f0:	e008      	b.n	8004a04 <HAL_GPIO_Init+0x204>
 80049f2:	2307      	movs	r3, #7
 80049f4:	e006      	b.n	8004a04 <HAL_GPIO_Init+0x204>
 80049f6:	2303      	movs	r3, #3
 80049f8:	e004      	b.n	8004a04 <HAL_GPIO_Init+0x204>
 80049fa:	2302      	movs	r3, #2
 80049fc:	e002      	b.n	8004a04 <HAL_GPIO_Init+0x204>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <HAL_GPIO_Init+0x204>
 8004a02:	2300      	movs	r3, #0
 8004a04:	69fa      	ldr	r2, [r7, #28]
 8004a06:	f002 0203 	and.w	r2, r2, #3
 8004a0a:	0092      	lsls	r2, r2, #2
 8004a0c:	4093      	lsls	r3, r2
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a14:	4934      	ldr	r1, [pc, #208]	; (8004ae8 <HAL_GPIO_Init+0x2e8>)
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	089b      	lsrs	r3, r3, #2
 8004a1a:	3302      	adds	r3, #2
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a22:	4b37      	ldr	r3, [pc, #220]	; (8004b00 <HAL_GPIO_Init+0x300>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	43db      	mvns	r3, r3
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a46:	4a2e      	ldr	r2, [pc, #184]	; (8004b00 <HAL_GPIO_Init+0x300>)
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a4c:	4b2c      	ldr	r3, [pc, #176]	; (8004b00 <HAL_GPIO_Init+0x300>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	43db      	mvns	r3, r3
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a70:	4a23      	ldr	r2, [pc, #140]	; (8004b00 <HAL_GPIO_Init+0x300>)
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a76:	4b22      	ldr	r3, [pc, #136]	; (8004b00 <HAL_GPIO_Init+0x300>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	43db      	mvns	r3, r3
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	4013      	ands	r3, r2
 8004a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a9a:	4a19      	ldr	r2, [pc, #100]	; (8004b00 <HAL_GPIO_Init+0x300>)
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004aa0:	4b17      	ldr	r3, [pc, #92]	; (8004b00 <HAL_GPIO_Init+0x300>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	4013      	ands	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ac4:	4a0e      	ldr	r2, [pc, #56]	; (8004b00 <HAL_GPIO_Init+0x300>)
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	3301      	adds	r3, #1
 8004ace:	61fb      	str	r3, [r7, #28]
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	2b0f      	cmp	r3, #15
 8004ad4:	f67f aea2 	bls.w	800481c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ad8:	bf00      	nop
 8004ada:	3724      	adds	r7, #36	; 0x24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	40013800 	.word	0x40013800
 8004aec:	40020000 	.word	0x40020000
 8004af0:	40020400 	.word	0x40020400
 8004af4:	40020800 	.word	0x40020800
 8004af8:	40020c00 	.word	0x40020c00
 8004afc:	40021000 	.word	0x40021000
 8004b00:	40013c00 	.word	0x40013c00

08004b04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	887b      	ldrh	r3, [r7, #2]
 8004b16:	4013      	ands	r3, r2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	73fb      	strb	r3, [r7, #15]
 8004b20:	e001      	b.n	8004b26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b22:	2300      	movs	r3, #0
 8004b24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	807b      	strh	r3, [r7, #2]
 8004b40:	4613      	mov	r3, r2
 8004b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b44:	787b      	ldrb	r3, [r7, #1]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b4a:	887a      	ldrh	r2, [r7, #2]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b50:	e003      	b.n	8004b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b52:	887b      	ldrh	r3, [r7, #2]
 8004b54:	041a      	lsls	r2, r3, #16
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	619a      	str	r2, [r3, #24]
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
	...

08004b68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	4603      	mov	r3, r0
 8004b70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b72:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b74:	695a      	ldr	r2, [r3, #20]
 8004b76:	88fb      	ldrh	r3, [r7, #6]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d006      	beq.n	8004b8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b7e:	4a05      	ldr	r2, [pc, #20]	; (8004b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b80:	88fb      	ldrh	r3, [r7, #6]
 8004b82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b84:	88fb      	ldrh	r3, [r7, #6]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fd f954 	bl	8001e34 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b8c:	bf00      	nop
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40013c00 	.word	0x40013c00

08004b98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b9a:	b08f      	sub	sp, #60	; 0x3c
 8004b9c:	af0a      	add	r7, sp, #40	; 0x28
 8004b9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e10f      	b.n	8004dca <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d106      	bne.n	8004bca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f009 fdf7 	bl	800e7b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2203      	movs	r2, #3
 8004bce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d102      	bne.n	8004be4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f002 fe9c 	bl	8007926 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	687e      	ldr	r6, [r7, #4]
 8004bf6:	466d      	mov	r5, sp
 8004bf8:	f106 0410 	add.w	r4, r6, #16
 8004bfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c08:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c0c:	1d33      	adds	r3, r6, #4
 8004c0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c10:	6838      	ldr	r0, [r7, #0]
 8004c12:	f002 fd73 	bl	80076fc <USB_CoreInit>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e0d0      	b.n	8004dca <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f002 fe8a 	bl	8007948 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c34:	2300      	movs	r3, #0
 8004c36:	73fb      	strb	r3, [r7, #15]
 8004c38:	e04a      	b.n	8004cd0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c3a:	7bfa      	ldrb	r2, [r7, #15]
 8004c3c:	6879      	ldr	r1, [r7, #4]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	1a9b      	subs	r3, r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	440b      	add	r3, r1
 8004c48:	333d      	adds	r3, #61	; 0x3d
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c4e:	7bfa      	ldrb	r2, [r7, #15]
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	1a9b      	subs	r3, r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	333c      	adds	r3, #60	; 0x3c
 8004c5e:	7bfa      	ldrb	r2, [r7, #15]
 8004c60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c62:	7bfa      	ldrb	r2, [r7, #15]
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
 8004c66:	b298      	uxth	r0, r3
 8004c68:	6879      	ldr	r1, [r7, #4]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	1a9b      	subs	r3, r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	440b      	add	r3, r1
 8004c74:	3342      	adds	r3, #66	; 0x42
 8004c76:	4602      	mov	r2, r0
 8004c78:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c7a:	7bfa      	ldrb	r2, [r7, #15]
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	1a9b      	subs	r3, r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	333f      	adds	r3, #63	; 0x3f
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c8e:	7bfa      	ldrb	r2, [r7, #15]
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	4613      	mov	r3, r2
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	1a9b      	subs	r3, r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	440b      	add	r3, r1
 8004c9c:	3344      	adds	r3, #68	; 0x44
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ca2:	7bfa      	ldrb	r2, [r7, #15]
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	1a9b      	subs	r3, r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	440b      	add	r3, r1
 8004cb0:	3348      	adds	r3, #72	; 0x48
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004cb6:	7bfa      	ldrb	r2, [r7, #15]
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	1a9b      	subs	r3, r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	3350      	adds	r3, #80	; 0x50
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	73fb      	strb	r3, [r7, #15]
 8004cd0:	7bfa      	ldrb	r2, [r7, #15]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d3af      	bcc.n	8004c3a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cda:	2300      	movs	r3, #0
 8004cdc:	73fb      	strb	r3, [r7, #15]
 8004cde:	e044      	b.n	8004d6a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ce0:	7bfa      	ldrb	r2, [r7, #15]
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	1a9b      	subs	r3, r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004cf6:	7bfa      	ldrb	r2, [r7, #15]
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	1a9b      	subs	r3, r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004d08:	7bfa      	ldrb	r2, [r7, #15]
 8004d0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d0c:	7bfa      	ldrb	r2, [r7, #15]
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	4613      	mov	r3, r2
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	1a9b      	subs	r3, r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004d1e:	2200      	movs	r2, #0
 8004d20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d22:	7bfa      	ldrb	r2, [r7, #15]
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	4613      	mov	r3, r2
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	1a9b      	subs	r3, r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	440b      	add	r3, r1
 8004d30:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004d34:	2200      	movs	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d38:	7bfa      	ldrb	r2, [r7, #15]
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	1a9b      	subs	r3, r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d4e:	7bfa      	ldrb	r2, [r7, #15]
 8004d50:	6879      	ldr	r1, [r7, #4]
 8004d52:	4613      	mov	r3, r2
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	1a9b      	subs	r3, r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	440b      	add	r3, r1
 8004d5c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	3301      	adds	r3, #1
 8004d68:	73fb      	strb	r3, [r7, #15]
 8004d6a:	7bfa      	ldrb	r2, [r7, #15]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d3b5      	bcc.n	8004ce0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	603b      	str	r3, [r7, #0]
 8004d7a:	687e      	ldr	r6, [r7, #4]
 8004d7c:	466d      	mov	r5, sp
 8004d7e:	f106 0410 	add.w	r4, r6, #16
 8004d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d92:	1d33      	adds	r3, r6, #4
 8004d94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d96:	6838      	ldr	r0, [r7, #0]
 8004d98:	f002 fe00 	bl	800799c <USB_DevInit>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2202      	movs	r2, #2
 8004da6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e00d      	b.n	8004dca <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f003 fe48 	bl	8008a58 <USB_DevDisconnect>

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004dd2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_PCD_Start+0x1c>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e020      	b.n	8004e30 <HAL_PCD_Start+0x5e>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d109      	bne.n	8004e12 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d005      	beq.n	8004e12 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f002 fd74 	bl	8007904 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f003 fdf8 	bl	8008a16 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004e38:	b590      	push	{r4, r7, lr}
 8004e3a:	b08d      	sub	sp, #52	; 0x34
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f003 feb6 	bl	8008bc0 <USB_GetMode>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f040 839d 	bne.w	8005596 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f003 fe1a 	bl	8008a9a <USB_ReadInterrupts>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 8393 	beq.w	8005594 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f003 fe11 	bl	8008a9a <USB_ReadInterrupts>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d107      	bne.n	8004e92 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	695a      	ldr	r2, [r3, #20]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f002 0202 	and.w	r2, r2, #2
 8004e90:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f003 fdff 	bl	8008a9a <USB_ReadInterrupts>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	f003 0310 	and.w	r3, r3, #16
 8004ea2:	2b10      	cmp	r3, #16
 8004ea4:	d161      	bne.n	8004f6a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	699a      	ldr	r2, [r3, #24]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0210 	bic.w	r2, r2, #16
 8004eb4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	f003 020f 	and.w	r2, r3, #15
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	1a9b      	subs	r3, r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	0c5b      	lsrs	r3, r3, #17
 8004eda:	f003 030f 	and.w	r3, r3, #15
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d124      	bne.n	8004f2c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d035      	beq.n	8004f5a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	091b      	lsrs	r3, r3, #4
 8004ef6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004ef8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	461a      	mov	r2, r3
 8004f00:	6a38      	ldr	r0, [r7, #32]
 8004f02:	f003 fc65 	bl	80087d0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	091b      	lsrs	r3, r3, #4
 8004f0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f12:	441a      	add	r2, r3
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	699a      	ldr	r2, [r3, #24]
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	091b      	lsrs	r3, r3, #4
 8004f20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f24:	441a      	add	r2, r3
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	619a      	str	r2, [r3, #24]
 8004f2a:	e016      	b.n	8004f5a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	0c5b      	lsrs	r3, r3, #17
 8004f30:	f003 030f 	and.w	r3, r3, #15
 8004f34:	2b06      	cmp	r3, #6
 8004f36:	d110      	bne.n	8004f5a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004f3e:	2208      	movs	r2, #8
 8004f40:	4619      	mov	r1, r3
 8004f42:	6a38      	ldr	r0, [r7, #32]
 8004f44:	f003 fc44 	bl	80087d0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	699a      	ldr	r2, [r3, #24]
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	091b      	lsrs	r3, r3, #4
 8004f50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f54:	441a      	add	r2, r3
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699a      	ldr	r2, [r3, #24]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f042 0210 	orr.w	r2, r2, #16
 8004f68:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f003 fd93 	bl	8008a9a <USB_ReadInterrupts>
 8004f74:	4603      	mov	r3, r0
 8004f76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f7a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f7e:	d16e      	bne.n	800505e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f003 fd99 	bl	8008ac0 <USB_ReadDevAllOutEpInterrupt>
 8004f8e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004f90:	e062      	b.n	8005058 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d057      	beq.n	800504c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa2:	b2d2      	uxtb	r2, r2
 8004fa4:	4611      	mov	r1, r2
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f003 fdbe 	bl	8008b28 <USB_ReadDevOutEPInterrupt>
 8004fac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00c      	beq.n	8004fd2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004fca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 fdb1 	bl	8005b34 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f003 0308 	and.w	r3, r3, #8
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00c      	beq.n	8004ff6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe8:	461a      	mov	r2, r3
 8004fea:	2308      	movs	r3, #8
 8004fec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004fee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 feab 	bl	8005d4c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	f003 0310 	and.w	r3, r3, #16
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d008      	beq.n	8005012 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500c:	461a      	mov	r2, r3
 800500e:	2310      	movs	r3, #16
 8005010:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f003 0320 	and.w	r3, r3, #32
 8005018:	2b00      	cmp	r3, #0
 800501a:	d008      	beq.n	800502e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005028:	461a      	mov	r2, r3
 800502a:	2320      	movs	r3, #32
 800502c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d009      	beq.n	800504c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005044:	461a      	mov	r2, r3
 8005046:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800504a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	3301      	adds	r3, #1
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005054:	085b      	lsrs	r3, r3, #1
 8005056:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505a:	2b00      	cmp	r3, #0
 800505c:	d199      	bne.n	8004f92 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f003 fd19 	bl	8008a9a <USB_ReadInterrupts>
 8005068:	4603      	mov	r3, r0
 800506a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800506e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005072:	f040 80c0 	bne.w	80051f6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f003 fd3a 	bl	8008af4 <USB_ReadDevAllInEpInterrupt>
 8005080:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005082:	2300      	movs	r3, #0
 8005084:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005086:	e0b2      	b.n	80051ee <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 80a7 	beq.w	80051e2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	4611      	mov	r1, r2
 800509e:	4618      	mov	r0, r3
 80050a0:	f003 fd60 	bl	8008b64 <USB_ReadDevInEPInterrupt>
 80050a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d057      	beq.n	8005160 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	2201      	movs	r2, #1
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	43db      	mvns	r3, r3
 80050ca:	69f9      	ldr	r1, [r7, #28]
 80050cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050d0:	4013      	ands	r3, r2
 80050d2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e0:	461a      	mov	r2, r3
 80050e2:	2301      	movs	r3, #1
 80050e4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d132      	bne.n	8005154 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80050ee:	6879      	ldr	r1, [r7, #4]
 80050f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f2:	4613      	mov	r3, r2
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	1a9b      	subs	r3, r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	440b      	add	r3, r1
 80050fc:	3348      	adds	r3, #72	; 0x48
 80050fe:	6819      	ldr	r1, [r3, #0]
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005104:	4613      	mov	r3, r2
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	1a9b      	subs	r3, r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4403      	add	r3, r0
 800510e:	3344      	adds	r3, #68	; 0x44
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4419      	add	r1, r3
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005118:	4613      	mov	r3, r2
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	1a9b      	subs	r3, r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4403      	add	r3, r0
 8005122:	3348      	adds	r3, #72	; 0x48
 8005124:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	2b00      	cmp	r3, #0
 800512a:	d113      	bne.n	8005154 <HAL_PCD_IRQHandler+0x31c>
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005130:	4613      	mov	r3, r2
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	1a9b      	subs	r3, r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	440b      	add	r3, r1
 800513a:	3350      	adds	r3, #80	; 0x50
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d108      	bne.n	8005154 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6818      	ldr	r0, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800514c:	461a      	mov	r2, r3
 800514e:	2101      	movs	r1, #1
 8005150:	f003 fd68 	bl	8008c24 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	b2db      	uxtb	r3, r3
 8005158:	4619      	mov	r1, r3
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f009 fbad 	bl	800e8ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d008      	beq.n	800517c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005176:	461a      	mov	r2, r3
 8005178:	2308      	movs	r3, #8
 800517a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	f003 0310 	and.w	r3, r3, #16
 8005182:	2b00      	cmp	r3, #0
 8005184:	d008      	beq.n	8005198 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005192:	461a      	mov	r2, r3
 8005194:	2310      	movs	r3, #16
 8005196:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d008      	beq.n	80051b4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ae:	461a      	mov	r2, r3
 80051b0:	2340      	movs	r3, #64	; 0x40
 80051b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d008      	beq.n	80051d0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ca:	461a      	mov	r2, r3
 80051cc:	2302      	movs	r3, #2
 80051ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80051da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fc1b 	bl	8005a18 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	3301      	adds	r3, #1
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	085b      	lsrs	r3, r3, #1
 80051ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f47f af49 	bne.w	8005088 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f003 fc4d 	bl	8008a9a <USB_ReadInterrupts>
 8005200:	4603      	mov	r3, r0
 8005202:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800520a:	d122      	bne.n	8005252 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	69fa      	ldr	r2, [r7, #28]
 8005216:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800521a:	f023 0301 	bic.w	r3, r3, #1
 800521e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005226:	2b01      	cmp	r3, #1
 8005228:	d108      	bne.n	800523c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005232:	2100      	movs	r1, #0
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 fe27 	bl	8005e88 <HAL_PCDEx_LPM_Callback>
 800523a:	e002      	b.n	8005242 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f009 fbb3 	bl	800e9a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	695a      	ldr	r2, [r3, #20]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005250:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4618      	mov	r0, r3
 8005258:	f003 fc1f 	bl	8008a9a <USB_ReadInterrupts>
 800525c:	4603      	mov	r3, r0
 800525e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005266:	d112      	bne.n	800528e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b01      	cmp	r3, #1
 8005276:	d102      	bne.n	800527e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f009 fb6f 	bl	800e95c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695a      	ldr	r2, [r3, #20]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800528c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f003 fc01 	bl	8008a9a <USB_ReadInterrupts>
 8005298:	4603      	mov	r3, r0
 800529a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800529e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a2:	f040 80c7 	bne.w	8005434 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	69fa      	ldr	r2, [r7, #28]
 80052b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052b4:	f023 0301 	bic.w	r3, r3, #1
 80052b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2110      	movs	r1, #16
 80052c0:	4618      	mov	r0, r3
 80052c2:	f002 fccf 	bl	8007c64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052c6:	2300      	movs	r3, #0
 80052c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ca:	e056      	b.n	800537a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80052cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d8:	461a      	mov	r2, r3
 80052da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052f0:	0151      	lsls	r1, r2, #5
 80052f2:	69fa      	ldr	r2, [r7, #28]
 80052f4:	440a      	add	r2, r1
 80052f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052fe:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005310:	0151      	lsls	r1, r2, #5
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	440a      	add	r2, r1
 8005316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800531a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800531e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532c:	461a      	mov	r2, r3
 800532e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005332:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	4413      	add	r3, r2
 800533c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005344:	0151      	lsls	r1, r2, #5
 8005346:	69fa      	ldr	r2, [r7, #28]
 8005348:	440a      	add	r2, r1
 800534a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800534e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005352:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005364:	0151      	lsls	r1, r2, #5
 8005366:	69fa      	ldr	r2, [r7, #28]
 8005368:	440a      	add	r2, r1
 800536a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800536e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005372:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005376:	3301      	adds	r3, #1
 8005378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005380:	429a      	cmp	r2, r3
 8005382:	d3a3      	bcc.n	80052cc <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	69fa      	ldr	r2, [r7, #28]
 800538e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005392:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005396:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539c:	2b00      	cmp	r3, #0
 800539e:	d016      	beq.n	80053ce <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053aa:	69fa      	ldr	r2, [r7, #28]
 80053ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053b0:	f043 030b 	orr.w	r3, r3, #11
 80053b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c0:	69fa      	ldr	r2, [r7, #28]
 80053c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053c6:	f043 030b 	orr.w	r3, r3, #11
 80053ca:	6453      	str	r3, [r2, #68]	; 0x44
 80053cc:	e015      	b.n	80053fa <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	69fa      	ldr	r2, [r7, #28]
 80053d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80053e0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80053e4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	69fa      	ldr	r2, [r7, #28]
 80053f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053f4:	f043 030b 	orr.w	r3, r3, #11
 80053f8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69fa      	ldr	r2, [r7, #28]
 8005404:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005408:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800540c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800541e:	461a      	mov	r2, r3
 8005420:	f003 fc00 	bl	8008c24 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695a      	ldr	r2, [r3, #20]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005432:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4618      	mov	r0, r3
 800543a:	f003 fb2e 	bl	8008a9a <USB_ReadInterrupts>
 800543e:	4603      	mov	r3, r0
 8005440:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005448:	d124      	bne.n	8005494 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4618      	mov	r0, r3
 8005450:	f003 fbc4 	bl	8008bdc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4618      	mov	r0, r3
 800545a:	f002 fc64 	bl	8007d26 <USB_GetDevSpeed>
 800545e:	4603      	mov	r3, r0
 8005460:	461a      	mov	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681c      	ldr	r4, [r3, #0]
 800546a:	f001 f947 	bl	80066fc <HAL_RCC_GetHCLKFreq>
 800546e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005474:	b2db      	uxtb	r3, r3
 8005476:	461a      	mov	r2, r3
 8005478:	4620      	mov	r0, r4
 800547a:	f002 f9a1 	bl	80077c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f009 fa43 	bl	800e90a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	695a      	ldr	r2, [r3, #20]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005492:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4618      	mov	r0, r3
 800549a:	f003 fafe 	bl	8008a9a <USB_ReadInterrupts>
 800549e:	4603      	mov	r3, r0
 80054a0:	f003 0308 	and.w	r3, r3, #8
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d10a      	bne.n	80054be <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f009 fa20 	bl	800e8ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	695a      	ldr	r2, [r3, #20]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f002 0208 	and.w	r2, r2, #8
 80054bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f003 fae9 	bl	8008a9a <USB_ReadInterrupts>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054d2:	d10f      	bne.n	80054f4 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	4619      	mov	r1, r3
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f009 fa82 	bl	800e9e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695a      	ldr	r2, [r3, #20]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80054f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f003 face 	bl	8008a9a <USB_ReadInterrupts>
 80054fe:	4603      	mov	r3, r0
 8005500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005504:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005508:	d10f      	bne.n	800552a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	b2db      	uxtb	r3, r3
 8005512:	4619      	mov	r1, r3
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f009 fa55 	bl	800e9c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695a      	ldr	r2, [r3, #20]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005528:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f003 fab3 	bl	8008a9a <USB_ReadInterrupts>
 8005534:	4603      	mov	r3, r0
 8005536:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800553a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800553e:	d10a      	bne.n	8005556 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f009 fa63 	bl	800ea0c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	695a      	ldr	r2, [r3, #20]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005554:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	f003 fa9d 	bl	8008a9a <USB_ReadInterrupts>
 8005560:	4603      	mov	r3, r0
 8005562:	f003 0304 	and.w	r3, r3, #4
 8005566:	2b04      	cmp	r3, #4
 8005568:	d115      	bne.n	8005596 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f009 fa53 	bl	800ea28 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6859      	ldr	r1, [r3, #4]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	430a      	orrs	r2, r1
 8005590:	605a      	str	r2, [r3, #4]
 8005592:	e000      	b.n	8005596 <HAL_PCD_IRQHandler+0x75e>
      return;
 8005594:	bf00      	nop
    }
  }
}
 8005596:	3734      	adds	r7, #52	; 0x34
 8005598:	46bd      	mov	sp, r7
 800559a:	bd90      	pop	{r4, r7, pc}

0800559c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	460b      	mov	r3, r1
 80055a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_PCD_SetAddress+0x1a>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e013      	b.n	80055de <HAL_PCD_SetAddress+0x42>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	78fa      	ldrb	r2, [r7, #3]
 80055c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	78fa      	ldrb	r2, [r7, #3]
 80055cc:	4611      	mov	r1, r2
 80055ce:	4618      	mov	r0, r3
 80055d0:	f003 f9fb 	bl	80089ca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b084      	sub	sp, #16
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
 80055ee:	4608      	mov	r0, r1
 80055f0:	4611      	mov	r1, r2
 80055f2:	461a      	mov	r2, r3
 80055f4:	4603      	mov	r3, r0
 80055f6:	70fb      	strb	r3, [r7, #3]
 80055f8:	460b      	mov	r3, r1
 80055fa:	803b      	strh	r3, [r7, #0]
 80055fc:	4613      	mov	r3, r2
 80055fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005608:	2b00      	cmp	r3, #0
 800560a:	da0f      	bge.n	800562c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800560c:	78fb      	ldrb	r3, [r7, #3]
 800560e:	f003 020f 	and.w	r2, r3, #15
 8005612:	4613      	mov	r3, r2
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	1a9b      	subs	r3, r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	3338      	adds	r3, #56	; 0x38
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	4413      	add	r3, r2
 8005620:	3304      	adds	r3, #4
 8005622:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2201      	movs	r2, #1
 8005628:	705a      	strb	r2, [r3, #1]
 800562a:	e00f      	b.n	800564c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800562c:	78fb      	ldrb	r3, [r7, #3]
 800562e:	f003 020f 	and.w	r2, r3, #15
 8005632:	4613      	mov	r3, r2
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	1a9b      	subs	r3, r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	4413      	add	r3, r2
 8005642:	3304      	adds	r3, #4
 8005644:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800564c:	78fb      	ldrb	r3, [r7, #3]
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	b2da      	uxtb	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005658:	883a      	ldrh	r2, [r7, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	78ba      	ldrb	r2, [r7, #2]
 8005662:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	785b      	ldrb	r3, [r3, #1]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d004      	beq.n	8005676 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	b29a      	uxth	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005676:	78bb      	ldrb	r3, [r7, #2]
 8005678:	2b02      	cmp	r3, #2
 800567a:	d102      	bne.n	8005682 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005688:	2b01      	cmp	r3, #1
 800568a:	d101      	bne.n	8005690 <HAL_PCD_EP_Open+0xaa>
 800568c:	2302      	movs	r3, #2
 800568e:	e00e      	b.n	80056ae <HAL_PCD_EP_Open+0xc8>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68f9      	ldr	r1, [r7, #12]
 800569e:	4618      	mov	r0, r3
 80056a0:	f002 fb66 	bl	8007d70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80056ac:	7afb      	ldrb	r3, [r7, #11]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b084      	sub	sp, #16
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	460b      	mov	r3, r1
 80056c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	da0f      	bge.n	80056ea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056ca:	78fb      	ldrb	r3, [r7, #3]
 80056cc:	f003 020f 	and.w	r2, r3, #15
 80056d0:	4613      	mov	r3, r2
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	1a9b      	subs	r3, r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	3338      	adds	r3, #56	; 0x38
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	4413      	add	r3, r2
 80056de:	3304      	adds	r3, #4
 80056e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2201      	movs	r2, #1
 80056e6:	705a      	strb	r2, [r3, #1]
 80056e8:	e00f      	b.n	800570a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056ea:	78fb      	ldrb	r3, [r7, #3]
 80056ec:	f003 020f 	and.w	r2, r3, #15
 80056f0:	4613      	mov	r3, r2
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	1a9b      	subs	r3, r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	4413      	add	r3, r2
 8005700:	3304      	adds	r3, #4
 8005702:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800570a:	78fb      	ldrb	r3, [r7, #3]
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	b2da      	uxtb	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_PCD_EP_Close+0x6e>
 8005720:	2302      	movs	r3, #2
 8005722:	e00e      	b.n	8005742 <HAL_PCD_EP_Close+0x8c>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68f9      	ldr	r1, [r7, #12]
 8005732:	4618      	mov	r0, r3
 8005734:	f002 fba4 	bl	8007e80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b086      	sub	sp, #24
 800574e:	af00      	add	r7, sp, #0
 8005750:	60f8      	str	r0, [r7, #12]
 8005752:	607a      	str	r2, [r7, #4]
 8005754:	603b      	str	r3, [r7, #0]
 8005756:	460b      	mov	r3, r1
 8005758:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800575a:	7afb      	ldrb	r3, [r7, #11]
 800575c:	f003 020f 	and.w	r2, r3, #15
 8005760:	4613      	mov	r3, r2
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	1a9b      	subs	r3, r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4413      	add	r3, r2
 8005770:	3304      	adds	r3, #4
 8005772:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	2200      	movs	r2, #0
 8005784:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2200      	movs	r2, #0
 800578a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800578c:	7afb      	ldrb	r3, [r7, #11]
 800578e:	f003 030f 	and.w	r3, r3, #15
 8005792:	b2da      	uxtb	r2, r3
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d102      	bne.n	80057a6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80057a6:	7afb      	ldrb	r3, [r7, #11]
 80057a8:	f003 030f 	and.w	r3, r3, #15
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d109      	bne.n	80057c4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6818      	ldr	r0, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	461a      	mov	r2, r3
 80057bc:	6979      	ldr	r1, [r7, #20]
 80057be:	f002 fe7f 	bl	80084c0 <USB_EP0StartXfer>
 80057c2:	e008      	b.n	80057d6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6818      	ldr	r0, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	461a      	mov	r2, r3
 80057d0:	6979      	ldr	r1, [r7, #20]
 80057d2:	f002 fc31 	bl	8008038 <USB_EPStartXfer>
  }

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3718      	adds	r7, #24
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	460b      	mov	r3, r1
 80057ea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80057ec:	78fb      	ldrb	r3, [r7, #3]
 80057ee:	f003 020f 	and.w	r2, r3, #15
 80057f2:	6879      	ldr	r1, [r7, #4]
 80057f4:	4613      	mov	r3, r2
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	1a9b      	subs	r3, r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	440b      	add	r3, r1
 80057fe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005802:	681b      	ldr	r3, [r3, #0]
}
 8005804:	4618      	mov	r0, r3
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	607a      	str	r2, [r7, #4]
 800581a:	603b      	str	r3, [r7, #0]
 800581c:	460b      	mov	r3, r1
 800581e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005820:	7afb      	ldrb	r3, [r7, #11]
 8005822:	f003 020f 	and.w	r2, r3, #15
 8005826:	4613      	mov	r3, r2
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	1a9b      	subs	r3, r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	3338      	adds	r3, #56	; 0x38
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4413      	add	r3, r2
 8005834:	3304      	adds	r3, #4
 8005836:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	2200      	movs	r2, #0
 8005848:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2201      	movs	r2, #1
 800584e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005850:	7afb      	ldrb	r3, [r7, #11]
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	b2da      	uxtb	r2, r3
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d102      	bne.n	800586a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800586a:	7afb      	ldrb	r3, [r7, #11]
 800586c:	f003 030f 	and.w	r3, r3, #15
 8005870:	2b00      	cmp	r3, #0
 8005872:	d109      	bne.n	8005888 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6818      	ldr	r0, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	b2db      	uxtb	r3, r3
 800587e:	461a      	mov	r2, r3
 8005880:	6979      	ldr	r1, [r7, #20]
 8005882:	f002 fe1d 	bl	80084c0 <USB_EP0StartXfer>
 8005886:	e008      	b.n	800589a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6818      	ldr	r0, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	b2db      	uxtb	r3, r3
 8005892:	461a      	mov	r2, r3
 8005894:	6979      	ldr	r1, [r7, #20]
 8005896:	f002 fbcf 	bl	8008038 <USB_EPStartXfer>
  }

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	460b      	mov	r3, r1
 80058ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80058b0:	78fb      	ldrb	r3, [r7, #3]
 80058b2:	f003 020f 	and.w	r2, r3, #15
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d901      	bls.n	80058c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e050      	b.n	8005964 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	da0f      	bge.n	80058ea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058ca:	78fb      	ldrb	r3, [r7, #3]
 80058cc:	f003 020f 	and.w	r2, r3, #15
 80058d0:	4613      	mov	r3, r2
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	1a9b      	subs	r3, r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	3338      	adds	r3, #56	; 0x38
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	4413      	add	r3, r2
 80058de:	3304      	adds	r3, #4
 80058e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2201      	movs	r2, #1
 80058e6:	705a      	strb	r2, [r3, #1]
 80058e8:	e00d      	b.n	8005906 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80058ea:	78fa      	ldrb	r2, [r7, #3]
 80058ec:	4613      	mov	r3, r2
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	1a9b      	subs	r3, r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	4413      	add	r3, r2
 80058fc:	3304      	adds	r3, #4
 80058fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	f003 030f 	and.w	r3, r3, #15
 8005912:	b2da      	uxtb	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <HAL_PCD_EP_SetStall+0x82>
 8005922:	2302      	movs	r3, #2
 8005924:	e01e      	b.n	8005964 <HAL_PCD_EP_SetStall+0xc0>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68f9      	ldr	r1, [r7, #12]
 8005934:	4618      	mov	r0, r3
 8005936:	f002 ff74 	bl	8008822 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800593a:	78fb      	ldrb	r3, [r7, #3]
 800593c:	f003 030f 	and.w	r3, r3, #15
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10a      	bne.n	800595a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6818      	ldr	r0, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	b2d9      	uxtb	r1, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005954:	461a      	mov	r2, r3
 8005956:	f003 f965 	bl	8008c24 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	460b      	mov	r3, r1
 8005976:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	f003 020f 	and.w	r2, r3, #15
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	429a      	cmp	r2, r3
 8005984:	d901      	bls.n	800598a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e042      	b.n	8005a10 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800598a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800598e:	2b00      	cmp	r3, #0
 8005990:	da0f      	bge.n	80059b2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005992:	78fb      	ldrb	r3, [r7, #3]
 8005994:	f003 020f 	and.w	r2, r3, #15
 8005998:	4613      	mov	r3, r2
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	1a9b      	subs	r3, r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	3338      	adds	r3, #56	; 0x38
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	4413      	add	r3, r2
 80059a6:	3304      	adds	r3, #4
 80059a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	705a      	strb	r2, [r3, #1]
 80059b0:	e00f      	b.n	80059d2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059b2:	78fb      	ldrb	r3, [r7, #3]
 80059b4:	f003 020f 	and.w	r2, r3, #15
 80059b8:	4613      	mov	r3, r2
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	1a9b      	subs	r3, r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	4413      	add	r3, r2
 80059c8:	3304      	adds	r3, #4
 80059ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059d8:	78fb      	ldrb	r3, [r7, #3]
 80059da:	f003 030f 	and.w	r3, r3, #15
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d101      	bne.n	80059f2 <HAL_PCD_EP_ClrStall+0x86>
 80059ee:	2302      	movs	r3, #2
 80059f0:	e00e      	b.n	8005a10 <HAL_PCD_EP_ClrStall+0xa4>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68f9      	ldr	r1, [r7, #12]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f002 ff7c 	bl	80088fe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08a      	sub	sp, #40	; 0x28
 8005a1c:	af02      	add	r7, sp, #8
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	1a9b      	subs	r3, r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	3338      	adds	r3, #56	; 0x38
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	699a      	ldr	r2, [r3, #24]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d901      	bls.n	8005a50 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e06c      	b.n	8005b2a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	695a      	ldr	r2, [r3, #20]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	69fa      	ldr	r2, [r7, #28]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d902      	bls.n	8005a6c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	3303      	adds	r3, #3
 8005a70:	089b      	lsrs	r3, r3, #2
 8005a72:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a74:	e02b      	b.n	8005ace <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	695a      	ldr	r2, [r3, #20]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	69fa      	ldr	r2, [r7, #28]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d902      	bls.n	8005a92 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	3303      	adds	r3, #3
 8005a96:	089b      	lsrs	r3, r3, #2
 8005a98:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	68d9      	ldr	r1, [r3, #12]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	4603      	mov	r3, r0
 8005ab0:	6978      	ldr	r0, [r7, #20]
 8005ab2:	f002 fe58 	bl	8008766 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	441a      	add	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	699a      	ldr	r2, [r3, #24]
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	441a      	add	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d809      	bhi.n	8005af8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	699a      	ldr	r2, [r3, #24]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d203      	bcs.n	8005af8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1be      	bne.n	8005a76 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	695a      	ldr	r2, [r3, #20]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d811      	bhi.n	8005b28 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b10:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	43db      	mvns	r3, r3
 8005b1e:	6939      	ldr	r1, [r7, #16]
 8005b20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b24:	4013      	ands	r3, r2
 8005b26:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3720      	adds	r7, #32
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
	...

08005b34 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	333c      	adds	r3, #60	; 0x3c
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	f040 80a0 	bne.w	8005cac <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f003 0308 	and.w	r3, r3, #8
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d015      	beq.n	8005ba2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4a72      	ldr	r2, [pc, #456]	; (8005d44 <PCD_EP_OutXfrComplete_int+0x210>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	f240 80dd 	bls.w	8005d3a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 80d7 	beq.w	8005d3a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b98:	461a      	mov	r2, r3
 8005b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b9e:	6093      	str	r3, [r2, #8]
 8005ba0:	e0cb      	b.n	8005d3a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	f003 0320 	and.w	r3, r3, #32
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d009      	beq.n	8005bc0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb8:	461a      	mov	r2, r3
 8005bba:	2320      	movs	r3, #32
 8005bbc:	6093      	str	r3, [r2, #8]
 8005bbe:	e0bc      	b.n	8005d3a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f040 80b7 	bne.w	8005d3a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4a5d      	ldr	r2, [pc, #372]	; (8005d44 <PCD_EP_OutXfrComplete_int+0x210>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d90f      	bls.n	8005bf4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bea:	461a      	mov	r2, r3
 8005bec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bf0:	6093      	str	r3, [r2, #8]
 8005bf2:	e0a2      	b.n	8005d3a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005bf4:	6879      	ldr	r1, [r7, #4]
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	1a9b      	subs	r3, r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	440b      	add	r3, r1
 8005c02:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005c06:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	0159      	lsls	r1, r3, #5
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	440b      	add	r3, r1
 8005c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005c1a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	4613      	mov	r3, r2
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	1a9b      	subs	r3, r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4403      	add	r3, r0
 8005c2a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005c2e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005c30:	6879      	ldr	r1, [r7, #4]
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	4613      	mov	r3, r2
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	1a9b      	subs	r3, r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c42:	6819      	ldr	r1, [r3, #0]
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	1a9b      	subs	r3, r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4403      	add	r3, r0
 8005c52:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4419      	add	r1, r3
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	1a9b      	subs	r3, r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4403      	add	r3, r0
 8005c68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c6c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d114      	bne.n	8005c9e <PCD_EP_OutXfrComplete_int+0x16a>
 8005c74:	6879      	ldr	r1, [r7, #4]
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	1a9b      	subs	r3, r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	440b      	add	r3, r1
 8005c82:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d108      	bne.n	8005c9e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6818      	ldr	r0, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005c96:	461a      	mov	r2, r3
 8005c98:	2101      	movs	r1, #1
 8005c9a:	f002 ffc3 	bl	8008c24 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f008 fded 	bl	800e884 <HAL_PCD_DataOutStageCallback>
 8005caa:	e046      	b.n	8005d3a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4a26      	ldr	r2, [pc, #152]	; (8005d48 <PCD_EP_OutXfrComplete_int+0x214>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d124      	bne.n	8005cfe <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cca:	461a      	mov	r2, r3
 8005ccc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cd0:	6093      	str	r3, [r2, #8]
 8005cd2:	e032      	b.n	8005d3a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f003 0320 	and.w	r3, r3, #32
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d008      	beq.n	8005cf0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cea:	461a      	mov	r2, r3
 8005cec:	2320      	movs	r3, #32
 8005cee:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f008 fdc4 	bl	800e884 <HAL_PCD_DataOutStageCallback>
 8005cfc:	e01d      	b.n	8005d3a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d114      	bne.n	8005d2e <PCD_EP_OutXfrComplete_int+0x1fa>
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	1a9b      	subs	r3, r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	440b      	add	r3, r1
 8005d12:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d108      	bne.n	8005d2e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6818      	ldr	r0, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d26:	461a      	mov	r2, r3
 8005d28:	2100      	movs	r1, #0
 8005d2a:	f002 ff7b 	bl	8008c24 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	4619      	mov	r1, r3
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f008 fda5 	bl	800e884 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	4f54300a 	.word	0x4f54300a
 8005d48:	4f54310a 	.word	0x4f54310a

08005d4c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	333c      	adds	r3, #60	; 0x3c
 8005d64:	3304      	adds	r3, #4
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4a15      	ldr	r2, [pc, #84]	; (8005dd4 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d90e      	bls.n	8005da0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d009      	beq.n	8005da0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d98:	461a      	mov	r2, r3
 8005d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d9e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f008 fd5d 	bl	800e860 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	4a0a      	ldr	r2, [pc, #40]	; (8005dd4 <PCD_EP_OutSetupPacket_int+0x88>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d90c      	bls.n	8005dc8 <PCD_EP_OutSetupPacket_int+0x7c>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d108      	bne.n	8005dc8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6818      	ldr	r0, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	f002 ff2e 	bl	8008c24 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	4f54300a 	.word	0x4f54300a

08005dd8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	460b      	mov	r3, r1
 8005de2:	70fb      	strb	r3, [r7, #3]
 8005de4:	4613      	mov	r3, r2
 8005de6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005df0:	78fb      	ldrb	r3, [r7, #3]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d107      	bne.n	8005e06 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005df6:	883b      	ldrh	r3, [r7, #0]
 8005df8:	0419      	lsls	r1, r3, #16
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	629a      	str	r2, [r3, #40]	; 0x28
 8005e04:	e028      	b.n	8005e58 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0c:	0c1b      	lsrs	r3, r3, #16
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	4413      	add	r3, r2
 8005e12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e14:	2300      	movs	r3, #0
 8005e16:	73fb      	strb	r3, [r7, #15]
 8005e18:	e00d      	b.n	8005e36 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
 8005e20:	3340      	adds	r3, #64	; 0x40
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	0c1b      	lsrs	r3, r3, #16
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
 8005e32:	3301      	adds	r3, #1
 8005e34:	73fb      	strb	r3, [r7, #15]
 8005e36:	7bfa      	ldrb	r2, [r7, #15]
 8005e38:	78fb      	ldrb	r3, [r7, #3]
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d3ec      	bcc.n	8005e1a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005e40:	883b      	ldrh	r3, [r7, #0]
 8005e42:	0418      	lsls	r0, r3, #16
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6819      	ldr	r1, [r3, #0]
 8005e48:	78fb      	ldrb	r3, [r7, #3]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	4302      	orrs	r2, r0
 8005e50:	3340      	adds	r3, #64	; 0x40
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	440b      	add	r3, r1
 8005e56:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	460b      	mov	r3, r1
 8005e70:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	887a      	ldrh	r2, [r7, #2]
 8005e78:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	460b      	mov	r3, r1
 8005e92:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e25b      	b.n	800636a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d075      	beq.n	8005faa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ebe:	4ba3      	ldr	r3, [pc, #652]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 030c 	and.w	r3, r3, #12
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	d00c      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005eca:	4ba0      	ldr	r3, [pc, #640]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ed2:	2b08      	cmp	r3, #8
 8005ed4:	d112      	bne.n	8005efc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ed6:	4b9d      	ldr	r3, [pc, #628]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ee2:	d10b      	bne.n	8005efc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee4:	4b99      	ldr	r3, [pc, #612]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d05b      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x108>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d157      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e236      	b.n	800636a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f04:	d106      	bne.n	8005f14 <HAL_RCC_OscConfig+0x74>
 8005f06:	4b91      	ldr	r3, [pc, #580]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a90      	ldr	r2, [pc, #576]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8005f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f10:	6013      	str	r3, [r2, #0]
 8005f12:	e01d      	b.n	8005f50 <HAL_RCC_OscConfig+0xb0>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f1c:	d10c      	bne.n	8005f38 <HAL_RCC_OscConfig+0x98>
 8005f1e:	4b8b      	ldr	r3, [pc, #556]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a8a      	ldr	r2, [pc, #552]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8005f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f28:	6013      	str	r3, [r2, #0]
 8005f2a:	4b88      	ldr	r3, [pc, #544]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a87      	ldr	r2, [pc, #540]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8005f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	e00b      	b.n	8005f50 <HAL_RCC_OscConfig+0xb0>
 8005f38:	4b84      	ldr	r3, [pc, #528]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a83      	ldr	r2, [pc, #524]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8005f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	4b81      	ldr	r3, [pc, #516]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a80      	ldr	r2, [pc, #512]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8005f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d013      	beq.n	8005f80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f58:	f7fd fb4e 	bl	80035f8 <HAL_GetTick>
 8005f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f5e:	e008      	b.n	8005f72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f60:	f7fd fb4a 	bl	80035f8 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b64      	cmp	r3, #100	; 0x64
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e1fb      	b.n	800636a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f72:	4b76      	ldr	r3, [pc, #472]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0f0      	beq.n	8005f60 <HAL_RCC_OscConfig+0xc0>
 8005f7e:	e014      	b.n	8005faa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f80:	f7fd fb3a 	bl	80035f8 <HAL_GetTick>
 8005f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f86:	e008      	b.n	8005f9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f88:	f7fd fb36 	bl	80035f8 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	2b64      	cmp	r3, #100	; 0x64
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e1e7      	b.n	800636a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f9a:	4b6c      	ldr	r3, [pc, #432]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1f0      	bne.n	8005f88 <HAL_RCC_OscConfig+0xe8>
 8005fa6:	e000      	b.n	8005faa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d063      	beq.n	800607e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fb6:	4b65      	ldr	r3, [pc, #404]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f003 030c 	and.w	r3, r3, #12
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00b      	beq.n	8005fda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fc2:	4b62      	ldr	r3, [pc, #392]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fca:	2b08      	cmp	r3, #8
 8005fcc:	d11c      	bne.n	8006008 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fce:	4b5f      	ldr	r3, [pc, #380]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d116      	bne.n	8006008 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fda:	4b5c      	ldr	r3, [pc, #368]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d005      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x152>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d001      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e1bb      	b.n	800636a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ff2:	4b56      	ldr	r3, [pc, #344]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	4952      	ldr	r1, [pc, #328]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8006002:	4313      	orrs	r3, r2
 8006004:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006006:	e03a      	b.n	800607e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d020      	beq.n	8006052 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006010:	4b4f      	ldr	r3, [pc, #316]	; (8006150 <HAL_RCC_OscConfig+0x2b0>)
 8006012:	2201      	movs	r2, #1
 8006014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006016:	f7fd faef 	bl	80035f8 <HAL_GetTick>
 800601a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800601c:	e008      	b.n	8006030 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800601e:	f7fd faeb 	bl	80035f8 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	2b02      	cmp	r3, #2
 800602a:	d901      	bls.n	8006030 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e19c      	b.n	800636a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006030:	4b46      	ldr	r3, [pc, #280]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0302 	and.w	r3, r3, #2
 8006038:	2b00      	cmp	r3, #0
 800603a:	d0f0      	beq.n	800601e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800603c:	4b43      	ldr	r3, [pc, #268]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	4940      	ldr	r1, [pc, #256]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 800604c:	4313      	orrs	r3, r2
 800604e:	600b      	str	r3, [r1, #0]
 8006050:	e015      	b.n	800607e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006052:	4b3f      	ldr	r3, [pc, #252]	; (8006150 <HAL_RCC_OscConfig+0x2b0>)
 8006054:	2200      	movs	r2, #0
 8006056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006058:	f7fd face 	bl	80035f8 <HAL_GetTick>
 800605c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800605e:	e008      	b.n	8006072 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006060:	f7fd faca 	bl	80035f8 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b02      	cmp	r3, #2
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e17b      	b.n	800636a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006072:	4b36      	ldr	r3, [pc, #216]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1f0      	bne.n	8006060 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0308 	and.w	r3, r3, #8
 8006086:	2b00      	cmp	r3, #0
 8006088:	d030      	beq.n	80060ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d016      	beq.n	80060c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006092:	4b30      	ldr	r3, [pc, #192]	; (8006154 <HAL_RCC_OscConfig+0x2b4>)
 8006094:	2201      	movs	r2, #1
 8006096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006098:	f7fd faae 	bl	80035f8 <HAL_GetTick>
 800609c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800609e:	e008      	b.n	80060b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060a0:	f7fd faaa 	bl	80035f8 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e15b      	b.n	800636a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060b2:	4b26      	ldr	r3, [pc, #152]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 80060b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d0f0      	beq.n	80060a0 <HAL_RCC_OscConfig+0x200>
 80060be:	e015      	b.n	80060ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060c0:	4b24      	ldr	r3, [pc, #144]	; (8006154 <HAL_RCC_OscConfig+0x2b4>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060c6:	f7fd fa97 	bl	80035f8 <HAL_GetTick>
 80060ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060cc:	e008      	b.n	80060e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060ce:	f7fd fa93 	bl	80035f8 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d901      	bls.n	80060e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e144      	b.n	800636a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060e0:	4b1a      	ldr	r3, [pc, #104]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 80060e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1f0      	bne.n	80060ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0304 	and.w	r3, r3, #4
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 80a0 	beq.w	800623a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060fa:	2300      	movs	r3, #0
 80060fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060fe:	4b13      	ldr	r3, [pc, #76]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10f      	bne.n	800612a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800610a:	2300      	movs	r3, #0
 800610c:	60bb      	str	r3, [r7, #8]
 800610e:	4b0f      	ldr	r3, [pc, #60]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	4a0e      	ldr	r2, [pc, #56]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 8006114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006118:	6413      	str	r3, [r2, #64]	; 0x40
 800611a:	4b0c      	ldr	r3, [pc, #48]	; (800614c <HAL_RCC_OscConfig+0x2ac>)
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006122:	60bb      	str	r3, [r7, #8]
 8006124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006126:	2301      	movs	r3, #1
 8006128:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800612a:	4b0b      	ldr	r3, [pc, #44]	; (8006158 <HAL_RCC_OscConfig+0x2b8>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006132:	2b00      	cmp	r3, #0
 8006134:	d121      	bne.n	800617a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006136:	4b08      	ldr	r3, [pc, #32]	; (8006158 <HAL_RCC_OscConfig+0x2b8>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a07      	ldr	r2, [pc, #28]	; (8006158 <HAL_RCC_OscConfig+0x2b8>)
 800613c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006142:	f7fd fa59 	bl	80035f8 <HAL_GetTick>
 8006146:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006148:	e011      	b.n	800616e <HAL_RCC_OscConfig+0x2ce>
 800614a:	bf00      	nop
 800614c:	40023800 	.word	0x40023800
 8006150:	42470000 	.word	0x42470000
 8006154:	42470e80 	.word	0x42470e80
 8006158:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800615c:	f7fd fa4c 	bl	80035f8 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b02      	cmp	r3, #2
 8006168:	d901      	bls.n	800616e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e0fd      	b.n	800636a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800616e:	4b81      	ldr	r3, [pc, #516]	; (8006374 <HAL_RCC_OscConfig+0x4d4>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006176:	2b00      	cmp	r3, #0
 8006178:	d0f0      	beq.n	800615c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d106      	bne.n	8006190 <HAL_RCC_OscConfig+0x2f0>
 8006182:	4b7d      	ldr	r3, [pc, #500]	; (8006378 <HAL_RCC_OscConfig+0x4d8>)
 8006184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006186:	4a7c      	ldr	r2, [pc, #496]	; (8006378 <HAL_RCC_OscConfig+0x4d8>)
 8006188:	f043 0301 	orr.w	r3, r3, #1
 800618c:	6713      	str	r3, [r2, #112]	; 0x70
 800618e:	e01c      	b.n	80061ca <HAL_RCC_OscConfig+0x32a>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	2b05      	cmp	r3, #5
 8006196:	d10c      	bne.n	80061b2 <HAL_RCC_OscConfig+0x312>
 8006198:	4b77      	ldr	r3, [pc, #476]	; (8006378 <HAL_RCC_OscConfig+0x4d8>)
 800619a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800619c:	4a76      	ldr	r2, [pc, #472]	; (8006378 <HAL_RCC_OscConfig+0x4d8>)
 800619e:	f043 0304 	orr.w	r3, r3, #4
 80061a2:	6713      	str	r3, [r2, #112]	; 0x70
 80061a4:	4b74      	ldr	r3, [pc, #464]	; (8006378 <HAL_RCC_OscConfig+0x4d8>)
 80061a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a8:	4a73      	ldr	r2, [pc, #460]	; (8006378 <HAL_RCC_OscConfig+0x4d8>)
 80061aa:	f043 0301 	orr.w	r3, r3, #1
 80061ae:	6713      	str	r3, [r2, #112]	; 0x70
 80061b0:	e00b      	b.n	80061ca <HAL_RCC_OscConfig+0x32a>
 80061b2:	4b71      	ldr	r3, [pc, #452]	; (8006378 <HAL_RCC_OscConfig+0x4d8>)
 80061b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b6:	4a70      	ldr	r2, [pc, #448]	; (8006378 <HAL_RCC_OscConfig+0x4d8>)
 80061b8:	f023 0301 	bic.w	r3, r3, #1
 80061bc:	6713      	str	r3, [r2, #112]	; 0x70
 80061be:	4b6e      	ldr	r3, [pc, #440]	; (8006378 <HAL_RCC_OscConfig+0x4d8>)
 80061c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c2:	4a6d      	ldr	r2, [pc, #436]	; (8006378 <HAL_RCC_OscConfig+0x4d8>)
 80061c4:	f023 0304 	bic.w	r3, r3, #4
 80061c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d015      	beq.n	80061fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061d2:	f7fd fa11 	bl	80035f8 <HAL_GetTick>
 80061d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061d8:	e00a      	b.n	80061f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061da:	f7fd fa0d 	bl	80035f8 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d901      	bls.n	80061f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e0bc      	b.n	800636a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061f0:	4b61      	ldr	r3, [pc, #388]	; (8006378 <HAL_RCC_OscConfig+0x4d8>)
 80061f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d0ee      	beq.n	80061da <HAL_RCC_OscConfig+0x33a>
 80061fc:	e014      	b.n	8006228 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061fe:	f7fd f9fb 	bl	80035f8 <HAL_GetTick>
 8006202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006204:	e00a      	b.n	800621c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006206:	f7fd f9f7 	bl	80035f8 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	f241 3288 	movw	r2, #5000	; 0x1388
 8006214:	4293      	cmp	r3, r2
 8006216:	d901      	bls.n	800621c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e0a6      	b.n	800636a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800621c:	4b56      	ldr	r3, [pc, #344]	; (8006378 <HAL_RCC_OscConfig+0x4d8>)
 800621e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1ee      	bne.n	8006206 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006228:	7dfb      	ldrb	r3, [r7, #23]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d105      	bne.n	800623a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800622e:	4b52      	ldr	r3, [pc, #328]	; (8006378 <HAL_RCC_OscConfig+0x4d8>)
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	4a51      	ldr	r2, [pc, #324]	; (8006378 <HAL_RCC_OscConfig+0x4d8>)
 8006234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006238:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 8092 	beq.w	8006368 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006244:	4b4c      	ldr	r3, [pc, #304]	; (8006378 <HAL_RCC_OscConfig+0x4d8>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f003 030c 	and.w	r3, r3, #12
 800624c:	2b08      	cmp	r3, #8
 800624e:	d05c      	beq.n	800630a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	2b02      	cmp	r3, #2
 8006256:	d141      	bne.n	80062dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006258:	4b48      	ldr	r3, [pc, #288]	; (800637c <HAL_RCC_OscConfig+0x4dc>)
 800625a:	2200      	movs	r2, #0
 800625c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800625e:	f7fd f9cb 	bl	80035f8 <HAL_GetTick>
 8006262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006264:	e008      	b.n	8006278 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006266:	f7fd f9c7 	bl	80035f8 <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	2b02      	cmp	r3, #2
 8006272:	d901      	bls.n	8006278 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e078      	b.n	800636a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006278:	4b3f      	ldr	r3, [pc, #252]	; (8006378 <HAL_RCC_OscConfig+0x4d8>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1f0      	bne.n	8006266 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	69da      	ldr	r2, [r3, #28]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	431a      	orrs	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006292:	019b      	lsls	r3, r3, #6
 8006294:	431a      	orrs	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629a:	085b      	lsrs	r3, r3, #1
 800629c:	3b01      	subs	r3, #1
 800629e:	041b      	lsls	r3, r3, #16
 80062a0:	431a      	orrs	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a6:	061b      	lsls	r3, r3, #24
 80062a8:	4933      	ldr	r1, [pc, #204]	; (8006378 <HAL_RCC_OscConfig+0x4d8>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062ae:	4b33      	ldr	r3, [pc, #204]	; (800637c <HAL_RCC_OscConfig+0x4dc>)
 80062b0:	2201      	movs	r2, #1
 80062b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b4:	f7fd f9a0 	bl	80035f8 <HAL_GetTick>
 80062b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062ba:	e008      	b.n	80062ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062bc:	f7fd f99c 	bl	80035f8 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d901      	bls.n	80062ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e04d      	b.n	800636a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062ce:	4b2a      	ldr	r3, [pc, #168]	; (8006378 <HAL_RCC_OscConfig+0x4d8>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0f0      	beq.n	80062bc <HAL_RCC_OscConfig+0x41c>
 80062da:	e045      	b.n	8006368 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062dc:	4b27      	ldr	r3, [pc, #156]	; (800637c <HAL_RCC_OscConfig+0x4dc>)
 80062de:	2200      	movs	r2, #0
 80062e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e2:	f7fd f989 	bl	80035f8 <HAL_GetTick>
 80062e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062e8:	e008      	b.n	80062fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062ea:	f7fd f985 	bl	80035f8 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d901      	bls.n	80062fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e036      	b.n	800636a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062fc:	4b1e      	ldr	r3, [pc, #120]	; (8006378 <HAL_RCC_OscConfig+0x4d8>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1f0      	bne.n	80062ea <HAL_RCC_OscConfig+0x44a>
 8006308:	e02e      	b.n	8006368 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d101      	bne.n	8006316 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e029      	b.n	800636a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006316:	4b18      	ldr	r3, [pc, #96]	; (8006378 <HAL_RCC_OscConfig+0x4d8>)
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	429a      	cmp	r2, r3
 8006328:	d11c      	bne.n	8006364 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006334:	429a      	cmp	r2, r3
 8006336:	d115      	bne.n	8006364 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800633e:	4013      	ands	r3, r2
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006344:	4293      	cmp	r3, r2
 8006346:	d10d      	bne.n	8006364 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006352:	429a      	cmp	r2, r3
 8006354:	d106      	bne.n	8006364 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006360:	429a      	cmp	r2, r3
 8006362:	d001      	beq.n	8006368 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e000      	b.n	800636a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3718      	adds	r7, #24
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	40007000 	.word	0x40007000
 8006378:	40023800 	.word	0x40023800
 800637c:	42470060 	.word	0x42470060

08006380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e0cc      	b.n	800652e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006394:	4b68      	ldr	r3, [pc, #416]	; (8006538 <HAL_RCC_ClockConfig+0x1b8>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 030f 	and.w	r3, r3, #15
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d90c      	bls.n	80063bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063a2:	4b65      	ldr	r3, [pc, #404]	; (8006538 <HAL_RCC_ClockConfig+0x1b8>)
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	b2d2      	uxtb	r2, r2
 80063a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063aa:	4b63      	ldr	r3, [pc, #396]	; (8006538 <HAL_RCC_ClockConfig+0x1b8>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 030f 	and.w	r3, r3, #15
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d001      	beq.n	80063bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e0b8      	b.n	800652e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d020      	beq.n	800640a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d005      	beq.n	80063e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063d4:	4b59      	ldr	r3, [pc, #356]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	4a58      	ldr	r2, [pc, #352]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 80063da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80063de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0308 	and.w	r3, r3, #8
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d005      	beq.n	80063f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063ec:	4b53      	ldr	r3, [pc, #332]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	4a52      	ldr	r2, [pc, #328]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 80063f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80063f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063f8:	4b50      	ldr	r3, [pc, #320]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	494d      	ldr	r1, [pc, #308]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 8006406:	4313      	orrs	r3, r2
 8006408:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	d044      	beq.n	80064a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d107      	bne.n	800642e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800641e:	4b47      	ldr	r3, [pc, #284]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d119      	bne.n	800645e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e07f      	b.n	800652e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	2b02      	cmp	r3, #2
 8006434:	d003      	beq.n	800643e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800643a:	2b03      	cmp	r3, #3
 800643c:	d107      	bne.n	800644e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800643e:	4b3f      	ldr	r3, [pc, #252]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d109      	bne.n	800645e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e06f      	b.n	800652e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800644e:	4b3b      	ldr	r3, [pc, #236]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e067      	b.n	800652e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800645e:	4b37      	ldr	r3, [pc, #220]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f023 0203 	bic.w	r2, r3, #3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	4934      	ldr	r1, [pc, #208]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 800646c:	4313      	orrs	r3, r2
 800646e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006470:	f7fd f8c2 	bl	80035f8 <HAL_GetTick>
 8006474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006476:	e00a      	b.n	800648e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006478:	f7fd f8be 	bl	80035f8 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	f241 3288 	movw	r2, #5000	; 0x1388
 8006486:	4293      	cmp	r3, r2
 8006488:	d901      	bls.n	800648e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e04f      	b.n	800652e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800648e:	4b2b      	ldr	r3, [pc, #172]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f003 020c 	and.w	r2, r3, #12
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	429a      	cmp	r2, r3
 800649e:	d1eb      	bne.n	8006478 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064a0:	4b25      	ldr	r3, [pc, #148]	; (8006538 <HAL_RCC_ClockConfig+0x1b8>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 030f 	and.w	r3, r3, #15
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d20c      	bcs.n	80064c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ae:	4b22      	ldr	r3, [pc, #136]	; (8006538 <HAL_RCC_ClockConfig+0x1b8>)
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	b2d2      	uxtb	r2, r2
 80064b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064b6:	4b20      	ldr	r3, [pc, #128]	; (8006538 <HAL_RCC_ClockConfig+0x1b8>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 030f 	and.w	r3, r3, #15
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d001      	beq.n	80064c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e032      	b.n	800652e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0304 	and.w	r3, r3, #4
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d008      	beq.n	80064e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064d4:	4b19      	ldr	r3, [pc, #100]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	4916      	ldr	r1, [pc, #88]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0308 	and.w	r3, r3, #8
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d009      	beq.n	8006506 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064f2:	4b12      	ldr	r3, [pc, #72]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	490e      	ldr	r1, [pc, #56]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 8006502:	4313      	orrs	r3, r2
 8006504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006506:	f000 f821 	bl	800654c <HAL_RCC_GetSysClockFreq>
 800650a:	4601      	mov	r1, r0
 800650c:	4b0b      	ldr	r3, [pc, #44]	; (800653c <HAL_RCC_ClockConfig+0x1bc>)
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	091b      	lsrs	r3, r3, #4
 8006512:	f003 030f 	and.w	r3, r3, #15
 8006516:	4a0a      	ldr	r2, [pc, #40]	; (8006540 <HAL_RCC_ClockConfig+0x1c0>)
 8006518:	5cd3      	ldrb	r3, [r2, r3]
 800651a:	fa21 f303 	lsr.w	r3, r1, r3
 800651e:	4a09      	ldr	r2, [pc, #36]	; (8006544 <HAL_RCC_ClockConfig+0x1c4>)
 8006520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006522:	4b09      	ldr	r3, [pc, #36]	; (8006548 <HAL_RCC_ClockConfig+0x1c8>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4618      	mov	r0, r3
 8006528:	f7fc fee2 	bl	80032f0 <HAL_InitTick>

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	40023c00 	.word	0x40023c00
 800653c:	40023800 	.word	0x40023800
 8006540:	08010a08 	.word	0x08010a08
 8006544:	20000000 	.word	0x20000000
 8006548:	20000004 	.word	0x20000004

0800654c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800654c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006552:	2300      	movs	r3, #0
 8006554:	607b      	str	r3, [r7, #4]
 8006556:	2300      	movs	r3, #0
 8006558:	60fb      	str	r3, [r7, #12]
 800655a:	2300      	movs	r3, #0
 800655c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800655e:	2300      	movs	r3, #0
 8006560:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006562:	4b63      	ldr	r3, [pc, #396]	; (80066f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f003 030c 	and.w	r3, r3, #12
 800656a:	2b04      	cmp	r3, #4
 800656c:	d007      	beq.n	800657e <HAL_RCC_GetSysClockFreq+0x32>
 800656e:	2b08      	cmp	r3, #8
 8006570:	d008      	beq.n	8006584 <HAL_RCC_GetSysClockFreq+0x38>
 8006572:	2b00      	cmp	r3, #0
 8006574:	f040 80b4 	bne.w	80066e0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006578:	4b5e      	ldr	r3, [pc, #376]	; (80066f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800657a:	60bb      	str	r3, [r7, #8]
       break;
 800657c:	e0b3      	b.n	80066e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800657e:	4b5e      	ldr	r3, [pc, #376]	; (80066f8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006580:	60bb      	str	r3, [r7, #8]
      break;
 8006582:	e0b0      	b.n	80066e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006584:	4b5a      	ldr	r3, [pc, #360]	; (80066f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800658c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800658e:	4b58      	ldr	r3, [pc, #352]	; (80066f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d04a      	beq.n	8006630 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800659a:	4b55      	ldr	r3, [pc, #340]	; (80066f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	099b      	lsrs	r3, r3, #6
 80065a0:	f04f 0400 	mov.w	r4, #0
 80065a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80065a8:	f04f 0200 	mov.w	r2, #0
 80065ac:	ea03 0501 	and.w	r5, r3, r1
 80065b0:	ea04 0602 	and.w	r6, r4, r2
 80065b4:	4629      	mov	r1, r5
 80065b6:	4632      	mov	r2, r6
 80065b8:	f04f 0300 	mov.w	r3, #0
 80065bc:	f04f 0400 	mov.w	r4, #0
 80065c0:	0154      	lsls	r4, r2, #5
 80065c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80065c6:	014b      	lsls	r3, r1, #5
 80065c8:	4619      	mov	r1, r3
 80065ca:	4622      	mov	r2, r4
 80065cc:	1b49      	subs	r1, r1, r5
 80065ce:	eb62 0206 	sbc.w	r2, r2, r6
 80065d2:	f04f 0300 	mov.w	r3, #0
 80065d6:	f04f 0400 	mov.w	r4, #0
 80065da:	0194      	lsls	r4, r2, #6
 80065dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80065e0:	018b      	lsls	r3, r1, #6
 80065e2:	1a5b      	subs	r3, r3, r1
 80065e4:	eb64 0402 	sbc.w	r4, r4, r2
 80065e8:	f04f 0100 	mov.w	r1, #0
 80065ec:	f04f 0200 	mov.w	r2, #0
 80065f0:	00e2      	lsls	r2, r4, #3
 80065f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80065f6:	00d9      	lsls	r1, r3, #3
 80065f8:	460b      	mov	r3, r1
 80065fa:	4614      	mov	r4, r2
 80065fc:	195b      	adds	r3, r3, r5
 80065fe:	eb44 0406 	adc.w	r4, r4, r6
 8006602:	f04f 0100 	mov.w	r1, #0
 8006606:	f04f 0200 	mov.w	r2, #0
 800660a:	0262      	lsls	r2, r4, #9
 800660c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006610:	0259      	lsls	r1, r3, #9
 8006612:	460b      	mov	r3, r1
 8006614:	4614      	mov	r4, r2
 8006616:	4618      	mov	r0, r3
 8006618:	4621      	mov	r1, r4
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f04f 0400 	mov.w	r4, #0
 8006620:	461a      	mov	r2, r3
 8006622:	4623      	mov	r3, r4
 8006624:	f7fa fac8 	bl	8000bb8 <__aeabi_uldivmod>
 8006628:	4603      	mov	r3, r0
 800662a:	460c      	mov	r4, r1
 800662c:	60fb      	str	r3, [r7, #12]
 800662e:	e049      	b.n	80066c4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006630:	4b2f      	ldr	r3, [pc, #188]	; (80066f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	099b      	lsrs	r3, r3, #6
 8006636:	f04f 0400 	mov.w	r4, #0
 800663a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800663e:	f04f 0200 	mov.w	r2, #0
 8006642:	ea03 0501 	and.w	r5, r3, r1
 8006646:	ea04 0602 	and.w	r6, r4, r2
 800664a:	4629      	mov	r1, r5
 800664c:	4632      	mov	r2, r6
 800664e:	f04f 0300 	mov.w	r3, #0
 8006652:	f04f 0400 	mov.w	r4, #0
 8006656:	0154      	lsls	r4, r2, #5
 8006658:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800665c:	014b      	lsls	r3, r1, #5
 800665e:	4619      	mov	r1, r3
 8006660:	4622      	mov	r2, r4
 8006662:	1b49      	subs	r1, r1, r5
 8006664:	eb62 0206 	sbc.w	r2, r2, r6
 8006668:	f04f 0300 	mov.w	r3, #0
 800666c:	f04f 0400 	mov.w	r4, #0
 8006670:	0194      	lsls	r4, r2, #6
 8006672:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006676:	018b      	lsls	r3, r1, #6
 8006678:	1a5b      	subs	r3, r3, r1
 800667a:	eb64 0402 	sbc.w	r4, r4, r2
 800667e:	f04f 0100 	mov.w	r1, #0
 8006682:	f04f 0200 	mov.w	r2, #0
 8006686:	00e2      	lsls	r2, r4, #3
 8006688:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800668c:	00d9      	lsls	r1, r3, #3
 800668e:	460b      	mov	r3, r1
 8006690:	4614      	mov	r4, r2
 8006692:	195b      	adds	r3, r3, r5
 8006694:	eb44 0406 	adc.w	r4, r4, r6
 8006698:	f04f 0100 	mov.w	r1, #0
 800669c:	f04f 0200 	mov.w	r2, #0
 80066a0:	02a2      	lsls	r2, r4, #10
 80066a2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80066a6:	0299      	lsls	r1, r3, #10
 80066a8:	460b      	mov	r3, r1
 80066aa:	4614      	mov	r4, r2
 80066ac:	4618      	mov	r0, r3
 80066ae:	4621      	mov	r1, r4
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f04f 0400 	mov.w	r4, #0
 80066b6:	461a      	mov	r2, r3
 80066b8:	4623      	mov	r3, r4
 80066ba:	f7fa fa7d 	bl	8000bb8 <__aeabi_uldivmod>
 80066be:	4603      	mov	r3, r0
 80066c0:	460c      	mov	r4, r1
 80066c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80066c4:	4b0a      	ldr	r3, [pc, #40]	; (80066f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	0c1b      	lsrs	r3, r3, #16
 80066ca:	f003 0303 	and.w	r3, r3, #3
 80066ce:	3301      	adds	r3, #1
 80066d0:	005b      	lsls	r3, r3, #1
 80066d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066dc:	60bb      	str	r3, [r7, #8]
      break;
 80066de:	e002      	b.n	80066e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066e0:	4b04      	ldr	r3, [pc, #16]	; (80066f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80066e2:	60bb      	str	r3, [r7, #8]
      break;
 80066e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066e6:	68bb      	ldr	r3, [r7, #8]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066f0:	40023800 	.word	0x40023800
 80066f4:	00f42400 	.word	0x00f42400
 80066f8:	007a1200 	.word	0x007a1200

080066fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066fc:	b480      	push	{r7}
 80066fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006700:	4b03      	ldr	r3, [pc, #12]	; (8006710 <HAL_RCC_GetHCLKFreq+0x14>)
 8006702:	681b      	ldr	r3, [r3, #0]
}
 8006704:	4618      	mov	r0, r3
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	20000000 	.word	0x20000000

08006714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006718:	f7ff fff0 	bl	80066fc <HAL_RCC_GetHCLKFreq>
 800671c:	4601      	mov	r1, r0
 800671e:	4b05      	ldr	r3, [pc, #20]	; (8006734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	0b5b      	lsrs	r3, r3, #13
 8006724:	f003 0307 	and.w	r3, r3, #7
 8006728:	4a03      	ldr	r2, [pc, #12]	; (8006738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800672a:	5cd3      	ldrb	r3, [r2, r3]
 800672c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006730:	4618      	mov	r0, r3
 8006732:	bd80      	pop	{r7, pc}
 8006734:	40023800 	.word	0x40023800
 8006738:	08010a18 	.word	0x08010a18

0800673c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	220f      	movs	r2, #15
 800674a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800674c:	4b12      	ldr	r3, [pc, #72]	; (8006798 <HAL_RCC_GetClockConfig+0x5c>)
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f003 0203 	and.w	r2, r3, #3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006758:	4b0f      	ldr	r3, [pc, #60]	; (8006798 <HAL_RCC_GetClockConfig+0x5c>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006764:	4b0c      	ldr	r3, [pc, #48]	; (8006798 <HAL_RCC_GetClockConfig+0x5c>)
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006770:	4b09      	ldr	r3, [pc, #36]	; (8006798 <HAL_RCC_GetClockConfig+0x5c>)
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	08db      	lsrs	r3, r3, #3
 8006776:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800677e:	4b07      	ldr	r3, [pc, #28]	; (800679c <HAL_RCC_GetClockConfig+0x60>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 020f 	and.w	r2, r3, #15
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	601a      	str	r2, [r3, #0]
}
 800678a:	bf00      	nop
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	40023800 	.word	0x40023800
 800679c:	40023c00 	.word	0x40023c00

080067a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e01d      	b.n	80067ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d106      	bne.n	80067cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7fc fc8a 	bl	80030e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2202      	movs	r2, #2
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3304      	adds	r3, #4
 80067dc:	4619      	mov	r1, r3
 80067de:	4610      	mov	r0, r2
 80067e0:	f000 fc3e 	bl	8007060 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b085      	sub	sp, #20
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68da      	ldr	r2, [r3, #12]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f042 0201 	orr.w	r2, r2, #1
 800680c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f003 0307 	and.w	r3, r3, #7
 8006818:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2b06      	cmp	r3, #6
 800681e:	d007      	beq.n	8006830 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f042 0201 	orr.w	r2, r2, #1
 800682e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b082      	sub	sp, #8
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e01d      	b.n	800688c <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	d106      	bne.n	800686a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7fc fc5b 	bl	8003120 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2202      	movs	r2, #2
 800686e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	3304      	adds	r3, #4
 800687a:	4619      	mov	r1, r3
 800687c:	4610      	mov	r0, r2
 800687e:	f000 fbef 	bl	8007060 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2201      	movs	r2, #1
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 fe80 	bl	80075ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a10      	ldr	r2, [pc, #64]	; (80068f4 <HAL_TIM_OC_Start+0x60>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d107      	bne.n	80068c6 <HAL_TIM_OC_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f003 0307 	and.w	r3, r3, #7
 80068d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2b06      	cmp	r3, #6
 80068d6:	d007      	beq.n	80068e8 <HAL_TIM_OC_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f042 0201 	orr.w	r2, r2, #1
 80068e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	40010000 	.word	0x40010000

080068f8 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2200      	movs	r2, #0
 8006908:	6839      	ldr	r1, [r7, #0]
 800690a:	4618      	mov	r0, r3
 800690c:	f000 fe4e 	bl	80075ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a1b      	ldr	r2, [pc, #108]	; (8006984 <HAL_TIM_OC_Stop+0x8c>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d117      	bne.n	800694a <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6a1a      	ldr	r2, [r3, #32]
 8006920:	f241 1311 	movw	r3, #4369	; 0x1111
 8006924:	4013      	ands	r3, r2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10f      	bne.n	800694a <HAL_TIM_OC_Stop+0x52>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6a1a      	ldr	r2, [r3, #32]
 8006930:	f240 4344 	movw	r3, #1092	; 0x444
 8006934:	4013      	ands	r3, r2
 8006936:	2b00      	cmp	r3, #0
 8006938:	d107      	bne.n	800694a <HAL_TIM_OC_Stop+0x52>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006948:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6a1a      	ldr	r2, [r3, #32]
 8006950:	f241 1311 	movw	r3, #4369	; 0x1111
 8006954:	4013      	ands	r3, r2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10f      	bne.n	800697a <HAL_TIM_OC_Stop+0x82>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	6a1a      	ldr	r2, [r3, #32]
 8006960:	f240 4344 	movw	r3, #1092	; 0x444
 8006964:	4013      	ands	r3, r2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d107      	bne.n	800697a <HAL_TIM_OC_Stop+0x82>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0201 	bic.w	r2, r2, #1
 8006978:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	40010000 	.word	0x40010000

08006988 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e01d      	b.n	80069d6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d106      	bne.n	80069b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fc fbde 	bl	8003170 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	3304      	adds	r3, #4
 80069c4:	4619      	mov	r1, r3
 80069c6:	4610      	mov	r0, r2
 80069c8:	f000 fb4a 	bl	8007060 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
	...

080069e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2201      	movs	r2, #1
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 fdda 	bl	80075ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a10      	ldr	r2, [pc, #64]	; (8006a40 <HAL_TIM_PWM_Start+0x60>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d107      	bne.n	8006a12 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f003 0307 	and.w	r3, r3, #7
 8006a1c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b06      	cmp	r3, #6
 8006a22:	d007      	beq.n	8006a34 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f042 0201 	orr.w	r2, r2, #1
 8006a32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	40010000 	.word	0x40010000

08006a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	f003 0302 	and.w	r3, r3, #2
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d122      	bne.n	8006aa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d11b      	bne.n	8006aa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f06f 0202 	mvn.w	r2, #2
 8006a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 facb 	bl	8007022 <HAL_TIM_IC_CaptureCallback>
 8006a8c:	e005      	b.n	8006a9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fabd 	bl	800700e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 face 	bl	8007036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	f003 0304 	and.w	r3, r3, #4
 8006aaa:	2b04      	cmp	r3, #4
 8006aac:	d122      	bne.n	8006af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	f003 0304 	and.w	r3, r3, #4
 8006ab8:	2b04      	cmp	r3, #4
 8006aba:	d11b      	bne.n	8006af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f06f 0204 	mvn.w	r2, #4
 8006ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2202      	movs	r2, #2
 8006aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 faa1 	bl	8007022 <HAL_TIM_IC_CaptureCallback>
 8006ae0:	e005      	b.n	8006aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fa93 	bl	800700e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 faa4 	bl	8007036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	f003 0308 	and.w	r3, r3, #8
 8006afe:	2b08      	cmp	r3, #8
 8006b00:	d122      	bne.n	8006b48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f003 0308 	and.w	r3, r3, #8
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d11b      	bne.n	8006b48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f06f 0208 	mvn.w	r2, #8
 8006b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2204      	movs	r2, #4
 8006b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	f003 0303 	and.w	r3, r3, #3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d003      	beq.n	8006b36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fa77 	bl	8007022 <HAL_TIM_IC_CaptureCallback>
 8006b34:	e005      	b.n	8006b42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fa69 	bl	800700e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fa7a 	bl	8007036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	f003 0310 	and.w	r3, r3, #16
 8006b52:	2b10      	cmp	r3, #16
 8006b54:	d122      	bne.n	8006b9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	f003 0310 	and.w	r3, r3, #16
 8006b60:	2b10      	cmp	r3, #16
 8006b62:	d11b      	bne.n	8006b9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f06f 0210 	mvn.w	r2, #16
 8006b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2208      	movs	r2, #8
 8006b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fa4d 	bl	8007022 <HAL_TIM_IC_CaptureCallback>
 8006b88:	e005      	b.n	8006b96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fa3f 	bl	800700e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fa50 	bl	8007036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d10e      	bne.n	8006bc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d107      	bne.n	8006bc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f06f 0201 	mvn.w	r2, #1
 8006bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7fb ff6c 	bl	8002aa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bd2:	2b80      	cmp	r3, #128	; 0x80
 8006bd4:	d10e      	bne.n	8006bf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006be0:	2b80      	cmp	r3, #128	; 0x80
 8006be2:	d107      	bne.n	8006bf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fd7a 	bl	80076e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfe:	2b40      	cmp	r3, #64	; 0x40
 8006c00:	d10e      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0c:	2b40      	cmp	r3, #64	; 0x40
 8006c0e:	d107      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 fa15 	bl	800704a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	f003 0320 	and.w	r3, r3, #32
 8006c2a:	2b20      	cmp	r3, #32
 8006c2c:	d10e      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	f003 0320 	and.w	r3, r3, #32
 8006c38:	2b20      	cmp	r3, #32
 8006c3a:	d107      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f06f 0220 	mvn.w	r2, #32
 8006c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fd44 	bl	80076d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c4c:	bf00      	nop
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d101      	bne.n	8006c6e <HAL_TIM_OC_ConfigChannel+0x1a>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	e04e      	b.n	8006d0c <HAL_TIM_OC_ConfigChannel+0xb8>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2202      	movs	r2, #2
 8006c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2b0c      	cmp	r3, #12
 8006c82:	d839      	bhi.n	8006cf8 <HAL_TIM_OC_ConfigChannel+0xa4>
 8006c84:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <HAL_TIM_OC_ConfigChannel+0x38>)
 8006c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8a:	bf00      	nop
 8006c8c:	08006cc1 	.word	0x08006cc1
 8006c90:	08006cf9 	.word	0x08006cf9
 8006c94:	08006cf9 	.word	0x08006cf9
 8006c98:	08006cf9 	.word	0x08006cf9
 8006c9c:	08006ccf 	.word	0x08006ccf
 8006ca0:	08006cf9 	.word	0x08006cf9
 8006ca4:	08006cf9 	.word	0x08006cf9
 8006ca8:	08006cf9 	.word	0x08006cf9
 8006cac:	08006cdd 	.word	0x08006cdd
 8006cb0:	08006cf9 	.word	0x08006cf9
 8006cb4:	08006cf9 	.word	0x08006cf9
 8006cb8:	08006cf9 	.word	0x08006cf9
 8006cbc:	08006ceb 	.word	0x08006ceb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68b9      	ldr	r1, [r7, #8]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 fa4a 	bl	8007160 <TIM_OC1_SetConfig>
      break;
 8006ccc:	e015      	b.n	8006cfa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68b9      	ldr	r1, [r7, #8]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 faa9 	bl	800722c <TIM_OC2_SetConfig>
      break;
 8006cda:	e00e      	b.n	8006cfa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68b9      	ldr	r1, [r7, #8]
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f000 fb0e 	bl	8007304 <TIM_OC3_SetConfig>
      break;
 8006ce8:	e007      	b.n	8006cfa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68b9      	ldr	r1, [r7, #8]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 fb71 	bl	80073d8 <TIM_OC4_SetConfig>
      break;
 8006cf6:	e000      	b.n	8006cfa <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8006cf8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d101      	bne.n	8006d2e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	e0b4      	b.n	8006e98 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2202      	movs	r2, #2
 8006d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b0c      	cmp	r3, #12
 8006d42:	f200 809f 	bhi.w	8006e84 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006d46:	a201      	add	r2, pc, #4	; (adr r2, 8006d4c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4c:	08006d81 	.word	0x08006d81
 8006d50:	08006e85 	.word	0x08006e85
 8006d54:	08006e85 	.word	0x08006e85
 8006d58:	08006e85 	.word	0x08006e85
 8006d5c:	08006dc1 	.word	0x08006dc1
 8006d60:	08006e85 	.word	0x08006e85
 8006d64:	08006e85 	.word	0x08006e85
 8006d68:	08006e85 	.word	0x08006e85
 8006d6c:	08006e03 	.word	0x08006e03
 8006d70:	08006e85 	.word	0x08006e85
 8006d74:	08006e85 	.word	0x08006e85
 8006d78:	08006e85 	.word	0x08006e85
 8006d7c:	08006e43 	.word	0x08006e43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68b9      	ldr	r1, [r7, #8]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 f9ea 	bl	8007160 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	699a      	ldr	r2, [r3, #24]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0208 	orr.w	r2, r2, #8
 8006d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699a      	ldr	r2, [r3, #24]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 0204 	bic.w	r2, r2, #4
 8006daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6999      	ldr	r1, [r3, #24]
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	691a      	ldr	r2, [r3, #16]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	619a      	str	r2, [r3, #24]
      break;
 8006dbe:	e062      	b.n	8006e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68b9      	ldr	r1, [r7, #8]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 fa30 	bl	800722c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	699a      	ldr	r2, [r3, #24]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	699a      	ldr	r2, [r3, #24]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6999      	ldr	r1, [r3, #24]
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	021a      	lsls	r2, r3, #8
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	619a      	str	r2, [r3, #24]
      break;
 8006e00:	e041      	b.n	8006e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68b9      	ldr	r1, [r7, #8]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 fa7b 	bl	8007304 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	69da      	ldr	r2, [r3, #28]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f042 0208 	orr.w	r2, r2, #8
 8006e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69da      	ldr	r2, [r3, #28]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 0204 	bic.w	r2, r2, #4
 8006e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	69d9      	ldr	r1, [r3, #28]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	691a      	ldr	r2, [r3, #16]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	61da      	str	r2, [r3, #28]
      break;
 8006e40:	e021      	b.n	8006e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68b9      	ldr	r1, [r7, #8]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f000 fac5 	bl	80073d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	69da      	ldr	r2, [r3, #28]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	69da      	ldr	r2, [r3, #28]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	69d9      	ldr	r1, [r3, #28]
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	021a      	lsls	r2, r3, #8
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	61da      	str	r2, [r3, #28]
      break;
 8006e82:	e000      	b.n	8006e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006e84:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d101      	bne.n	8006eb8 <HAL_TIM_ConfigClockSource+0x18>
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	e0a6      	b.n	8007006 <HAL_TIM_ConfigClockSource+0x166>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ed6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ede:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b40      	cmp	r3, #64	; 0x40
 8006eee:	d067      	beq.n	8006fc0 <HAL_TIM_ConfigClockSource+0x120>
 8006ef0:	2b40      	cmp	r3, #64	; 0x40
 8006ef2:	d80b      	bhi.n	8006f0c <HAL_TIM_ConfigClockSource+0x6c>
 8006ef4:	2b10      	cmp	r3, #16
 8006ef6:	d073      	beq.n	8006fe0 <HAL_TIM_ConfigClockSource+0x140>
 8006ef8:	2b10      	cmp	r3, #16
 8006efa:	d802      	bhi.n	8006f02 <HAL_TIM_ConfigClockSource+0x62>
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d06f      	beq.n	8006fe0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006f00:	e078      	b.n	8006ff4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006f02:	2b20      	cmp	r3, #32
 8006f04:	d06c      	beq.n	8006fe0 <HAL_TIM_ConfigClockSource+0x140>
 8006f06:	2b30      	cmp	r3, #48	; 0x30
 8006f08:	d06a      	beq.n	8006fe0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006f0a:	e073      	b.n	8006ff4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006f0c:	2b70      	cmp	r3, #112	; 0x70
 8006f0e:	d00d      	beq.n	8006f2c <HAL_TIM_ConfigClockSource+0x8c>
 8006f10:	2b70      	cmp	r3, #112	; 0x70
 8006f12:	d804      	bhi.n	8006f1e <HAL_TIM_ConfigClockSource+0x7e>
 8006f14:	2b50      	cmp	r3, #80	; 0x50
 8006f16:	d033      	beq.n	8006f80 <HAL_TIM_ConfigClockSource+0xe0>
 8006f18:	2b60      	cmp	r3, #96	; 0x60
 8006f1a:	d041      	beq.n	8006fa0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006f1c:	e06a      	b.n	8006ff4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f22:	d066      	beq.n	8006ff2 <HAL_TIM_ConfigClockSource+0x152>
 8006f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f28:	d017      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006f2a:	e063      	b.n	8006ff4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6818      	ldr	r0, [r3, #0]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	6899      	ldr	r1, [r3, #8]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	f000 fb16 	bl	800756c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f4e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	609a      	str	r2, [r3, #8]
      break;
 8006f58:	e04c      	b.n	8006ff4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6818      	ldr	r0, [r3, #0]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	6899      	ldr	r1, [r3, #8]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	f000 faff 	bl	800756c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689a      	ldr	r2, [r3, #8]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f7c:	609a      	str	r2, [r3, #8]
      break;
 8006f7e:	e039      	b.n	8006ff4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6818      	ldr	r0, [r3, #0]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	6859      	ldr	r1, [r3, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	f000 fa73 	bl	8007478 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2150      	movs	r1, #80	; 0x50
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 facc 	bl	8007536 <TIM_ITRx_SetConfig>
      break;
 8006f9e:	e029      	b.n	8006ff4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6818      	ldr	r0, [r3, #0]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	6859      	ldr	r1, [r3, #4]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	461a      	mov	r2, r3
 8006fae:	f000 fa92 	bl	80074d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2160      	movs	r1, #96	; 0x60
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f000 fabc 	bl	8007536 <TIM_ITRx_SetConfig>
      break;
 8006fbe:	e019      	b.n	8006ff4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6818      	ldr	r0, [r3, #0]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	6859      	ldr	r1, [r3, #4]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	f000 fa53 	bl	8007478 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2140      	movs	r1, #64	; 0x40
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f000 faac 	bl	8007536 <TIM_ITRx_SetConfig>
      break;
 8006fde:	e009      	b.n	8006ff4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4619      	mov	r1, r3
 8006fea:	4610      	mov	r0, r2
 8006fec:	f000 faa3 	bl	8007536 <TIM_ITRx_SetConfig>
      break;
 8006ff0:	e000      	b.n	8006ff4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006ff2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800700e:	b480      	push	{r7}
 8007010:	b083      	sub	sp, #12
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007016:	bf00      	nop
 8007018:	370c      	adds	r7, #12
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007022:	b480      	push	{r7}
 8007024:	b083      	sub	sp, #12
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800702a:	bf00      	nop
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007036:	b480      	push	{r7}
 8007038:	b083      	sub	sp, #12
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800703e:	bf00      	nop
 8007040:	370c      	adds	r7, #12
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800704a:	b480      	push	{r7}
 800704c:	b083      	sub	sp, #12
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007052:	bf00      	nop
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
	...

08007060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a34      	ldr	r2, [pc, #208]	; (8007144 <TIM_Base_SetConfig+0xe4>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d00f      	beq.n	8007098 <TIM_Base_SetConfig+0x38>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800707e:	d00b      	beq.n	8007098 <TIM_Base_SetConfig+0x38>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a31      	ldr	r2, [pc, #196]	; (8007148 <TIM_Base_SetConfig+0xe8>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d007      	beq.n	8007098 <TIM_Base_SetConfig+0x38>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a30      	ldr	r2, [pc, #192]	; (800714c <TIM_Base_SetConfig+0xec>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d003      	beq.n	8007098 <TIM_Base_SetConfig+0x38>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a2f      	ldr	r2, [pc, #188]	; (8007150 <TIM_Base_SetConfig+0xf0>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d108      	bne.n	80070aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800709e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a25      	ldr	r2, [pc, #148]	; (8007144 <TIM_Base_SetConfig+0xe4>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d01b      	beq.n	80070ea <TIM_Base_SetConfig+0x8a>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b8:	d017      	beq.n	80070ea <TIM_Base_SetConfig+0x8a>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a22      	ldr	r2, [pc, #136]	; (8007148 <TIM_Base_SetConfig+0xe8>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d013      	beq.n	80070ea <TIM_Base_SetConfig+0x8a>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a21      	ldr	r2, [pc, #132]	; (800714c <TIM_Base_SetConfig+0xec>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d00f      	beq.n	80070ea <TIM_Base_SetConfig+0x8a>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a20      	ldr	r2, [pc, #128]	; (8007150 <TIM_Base_SetConfig+0xf0>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d00b      	beq.n	80070ea <TIM_Base_SetConfig+0x8a>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a1f      	ldr	r2, [pc, #124]	; (8007154 <TIM_Base_SetConfig+0xf4>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d007      	beq.n	80070ea <TIM_Base_SetConfig+0x8a>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a1e      	ldr	r2, [pc, #120]	; (8007158 <TIM_Base_SetConfig+0xf8>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d003      	beq.n	80070ea <TIM_Base_SetConfig+0x8a>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a1d      	ldr	r2, [pc, #116]	; (800715c <TIM_Base_SetConfig+0xfc>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d108      	bne.n	80070fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	4313      	orrs	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	689a      	ldr	r2, [r3, #8]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a08      	ldr	r2, [pc, #32]	; (8007144 <TIM_Base_SetConfig+0xe4>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d103      	bne.n	8007130 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	691a      	ldr	r2, [r3, #16]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	615a      	str	r2, [r3, #20]
}
 8007136:	bf00      	nop
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	40010000 	.word	0x40010000
 8007148:	40000400 	.word	0x40000400
 800714c:	40000800 	.word	0x40000800
 8007150:	40000c00 	.word	0x40000c00
 8007154:	40014000 	.word	0x40014000
 8007158:	40014400 	.word	0x40014400
 800715c:	40014800 	.word	0x40014800

08007160 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	f023 0201 	bic.w	r2, r3, #1
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800718e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f023 0303 	bic.w	r3, r3, #3
 8007196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	4313      	orrs	r3, r2
 80071a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f023 0302 	bic.w	r3, r3, #2
 80071a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a1c      	ldr	r2, [pc, #112]	; (8007228 <TIM_OC1_SetConfig+0xc8>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d10c      	bne.n	80071d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	f023 0308 	bic.w	r3, r3, #8
 80071c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f023 0304 	bic.w	r3, r3, #4
 80071d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a13      	ldr	r2, [pc, #76]	; (8007228 <TIM_OC1_SetConfig+0xc8>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d111      	bne.n	8007202 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	4313      	orrs	r3, r2
 8007200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	621a      	str	r2, [r3, #32]
}
 800721c:	bf00      	nop
 800721e:	371c      	adds	r7, #28
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	40010000 	.word	0x40010000

0800722c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800722c:	b480      	push	{r7}
 800722e:	b087      	sub	sp, #28
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	f023 0210 	bic.w	r2, r3, #16
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800725a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	021b      	lsls	r3, r3, #8
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	4313      	orrs	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f023 0320 	bic.w	r3, r3, #32
 8007276:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	011b      	lsls	r3, r3, #4
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	4313      	orrs	r3, r2
 8007282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a1e      	ldr	r2, [pc, #120]	; (8007300 <TIM_OC2_SetConfig+0xd4>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d10d      	bne.n	80072a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	011b      	lsls	r3, r3, #4
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	4313      	orrs	r3, r2
 800729e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a15      	ldr	r2, [pc, #84]	; (8007300 <TIM_OC2_SetConfig+0xd4>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d113      	bne.n	80072d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	693a      	ldr	r2, [r7, #16]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	621a      	str	r2, [r3, #32]
}
 80072f2:	bf00      	nop
 80072f4:	371c      	adds	r7, #28
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	40010000 	.word	0x40010000

08007304 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007304:	b480      	push	{r7}
 8007306:	b087      	sub	sp, #28
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f023 0303 	bic.w	r3, r3, #3
 800733a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	4313      	orrs	r3, r2
 8007344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800734c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	021b      	lsls	r3, r3, #8
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	4313      	orrs	r3, r2
 8007358:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a1d      	ldr	r2, [pc, #116]	; (80073d4 <TIM_OC3_SetConfig+0xd0>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d10d      	bne.n	800737e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007368:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	021b      	lsls	r3, r3, #8
 8007370:	697a      	ldr	r2, [r7, #20]
 8007372:	4313      	orrs	r3, r2
 8007374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800737c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a14      	ldr	r2, [pc, #80]	; (80073d4 <TIM_OC3_SetConfig+0xd0>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d113      	bne.n	80073ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800738c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	011b      	lsls	r3, r3, #4
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	4313      	orrs	r3, r2
 80073a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	011b      	lsls	r3, r3, #4
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	621a      	str	r2, [r3, #32]
}
 80073c8:	bf00      	nop
 80073ca:	371c      	adds	r7, #28
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	40010000 	.word	0x40010000

080073d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073d8:	b480      	push	{r7}
 80073da:	b087      	sub	sp, #28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800740e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	021b      	lsls	r3, r3, #8
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	4313      	orrs	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007422:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	031b      	lsls	r3, r3, #12
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	4313      	orrs	r3, r2
 800742e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a10      	ldr	r2, [pc, #64]	; (8007474 <TIM_OC4_SetConfig+0x9c>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d109      	bne.n	800744c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800743e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	019b      	lsls	r3, r3, #6
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	4313      	orrs	r3, r2
 800744a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	621a      	str	r2, [r3, #32]
}
 8007466:	bf00      	nop
 8007468:	371c      	adds	r7, #28
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	40010000 	.word	0x40010000

08007478 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6a1b      	ldr	r3, [r3, #32]
 8007488:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	f023 0201 	bic.w	r2, r3, #1
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	011b      	lsls	r3, r3, #4
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f023 030a 	bic.w	r3, r3, #10
 80074b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	621a      	str	r2, [r3, #32]
}
 80074ca:	bf00      	nop
 80074cc:	371c      	adds	r7, #28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b087      	sub	sp, #28
 80074da:	af00      	add	r7, sp, #0
 80074dc:	60f8      	str	r0, [r7, #12]
 80074de:	60b9      	str	r1, [r7, #8]
 80074e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	f023 0210 	bic.w	r2, r3, #16
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007500:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	031b      	lsls	r3, r3, #12
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	4313      	orrs	r3, r2
 800750a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007512:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	011b      	lsls	r3, r3, #4
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	4313      	orrs	r3, r2
 800751c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	621a      	str	r2, [r3, #32]
}
 800752a:	bf00      	nop
 800752c:	371c      	adds	r7, #28
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007536:	b480      	push	{r7}
 8007538:	b085      	sub	sp, #20
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	4313      	orrs	r3, r2
 8007554:	f043 0307 	orr.w	r3, r3, #7
 8007558:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	609a      	str	r2, [r3, #8]
}
 8007560:	bf00      	nop
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800756c:	b480      	push	{r7}
 800756e:	b087      	sub	sp, #28
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
 8007578:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007586:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	021a      	lsls	r2, r3, #8
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	431a      	orrs	r2, r3
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	4313      	orrs	r3, r2
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	4313      	orrs	r3, r2
 8007598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	609a      	str	r2, [r3, #8]
}
 80075a0:	bf00      	nop
 80075a2:	371c      	adds	r7, #28
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b087      	sub	sp, #28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f003 031f 	and.w	r3, r3, #31
 80075be:	2201      	movs	r2, #1
 80075c0:	fa02 f303 	lsl.w	r3, r2, r3
 80075c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6a1a      	ldr	r2, [r3, #32]
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	43db      	mvns	r3, r3
 80075ce:	401a      	ands	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6a1a      	ldr	r2, [r3, #32]
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f003 031f 	and.w	r3, r3, #31
 80075de:	6879      	ldr	r1, [r7, #4]
 80075e0:	fa01 f303 	lsl.w	r3, r1, r3
 80075e4:	431a      	orrs	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	621a      	str	r2, [r3, #32]
}
 80075ea:	bf00      	nop
 80075ec:	371c      	adds	r7, #28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
	...

080075f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007608:	2b01      	cmp	r3, #1
 800760a:	d101      	bne.n	8007610 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800760c:	2302      	movs	r3, #2
 800760e:	e050      	b.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2202      	movs	r2, #2
 800761c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007636:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a1c      	ldr	r2, [pc, #112]	; (80076c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d018      	beq.n	8007686 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800765c:	d013      	beq.n	8007686 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a18      	ldr	r2, [pc, #96]	; (80076c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d00e      	beq.n	8007686 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a16      	ldr	r2, [pc, #88]	; (80076c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d009      	beq.n	8007686 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a15      	ldr	r2, [pc, #84]	; (80076cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d004      	beq.n	8007686 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a13      	ldr	r2, [pc, #76]	; (80076d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d10c      	bne.n	80076a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800768c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	4313      	orrs	r3, r2
 8007696:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	40010000 	.word	0x40010000
 80076c4:	40000400 	.word	0x40000400
 80076c8:	40000800 	.word	0x40000800
 80076cc:	40000c00 	.word	0x40000c00
 80076d0:	40014000 	.word	0x40014000

080076d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076fc:	b084      	sub	sp, #16
 80076fe:	b580      	push	{r7, lr}
 8007700:	b084      	sub	sp, #16
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	f107 001c 	add.w	r0, r7, #28
 800770a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	2b01      	cmp	r3, #1
 8007712:	d122      	bne.n	800775a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007718:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800773c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800773e:	2b01      	cmp	r3, #1
 8007740:	d105      	bne.n	800774e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f001 fac6 	bl	8008ce0 <USB_CoreReset>
 8007754:	4603      	mov	r3, r0
 8007756:	73fb      	strb	r3, [r7, #15]
 8007758:	e01a      	b.n	8007790 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f001 faba 	bl	8008ce0 <USB_CoreReset>
 800776c:	4603      	mov	r3, r0
 800776e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007772:	2b00      	cmp	r3, #0
 8007774:	d106      	bne.n	8007784 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	639a      	str	r2, [r3, #56]	; 0x38
 8007782:	e005      	b.n	8007790 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007788:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007792:	2b01      	cmp	r3, #1
 8007794:	d10b      	bne.n	80077ae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f043 0206 	orr.w	r2, r3, #6
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f043 0220 	orr.w	r2, r3, #32
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80077ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077ba:	b004      	add	sp, #16
 80077bc:	4770      	bx	lr
	...

080077c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	4613      	mov	r3, r2
 80077cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80077ce:	79fb      	ldrb	r3, [r7, #7]
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d165      	bne.n	80078a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	4a41      	ldr	r2, [pc, #260]	; (80078dc <USB_SetTurnaroundTime+0x11c>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d906      	bls.n	80077ea <USB_SetTurnaroundTime+0x2a>
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	4a40      	ldr	r2, [pc, #256]	; (80078e0 <USB_SetTurnaroundTime+0x120>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d802      	bhi.n	80077ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80077e4:	230f      	movs	r3, #15
 80077e6:	617b      	str	r3, [r7, #20]
 80077e8:	e062      	b.n	80078b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	4a3c      	ldr	r2, [pc, #240]	; (80078e0 <USB_SetTurnaroundTime+0x120>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d906      	bls.n	8007800 <USB_SetTurnaroundTime+0x40>
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	4a3b      	ldr	r2, [pc, #236]	; (80078e4 <USB_SetTurnaroundTime+0x124>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d802      	bhi.n	8007800 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80077fa:	230e      	movs	r3, #14
 80077fc:	617b      	str	r3, [r7, #20]
 80077fe:	e057      	b.n	80078b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	4a38      	ldr	r2, [pc, #224]	; (80078e4 <USB_SetTurnaroundTime+0x124>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d906      	bls.n	8007816 <USB_SetTurnaroundTime+0x56>
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	4a37      	ldr	r2, [pc, #220]	; (80078e8 <USB_SetTurnaroundTime+0x128>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d802      	bhi.n	8007816 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007810:	230d      	movs	r3, #13
 8007812:	617b      	str	r3, [r7, #20]
 8007814:	e04c      	b.n	80078b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	4a33      	ldr	r2, [pc, #204]	; (80078e8 <USB_SetTurnaroundTime+0x128>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d906      	bls.n	800782c <USB_SetTurnaroundTime+0x6c>
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	4a32      	ldr	r2, [pc, #200]	; (80078ec <USB_SetTurnaroundTime+0x12c>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d802      	bhi.n	800782c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007826:	230c      	movs	r3, #12
 8007828:	617b      	str	r3, [r7, #20]
 800782a:	e041      	b.n	80078b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	4a2f      	ldr	r2, [pc, #188]	; (80078ec <USB_SetTurnaroundTime+0x12c>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d906      	bls.n	8007842 <USB_SetTurnaroundTime+0x82>
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	4a2e      	ldr	r2, [pc, #184]	; (80078f0 <USB_SetTurnaroundTime+0x130>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d802      	bhi.n	8007842 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800783c:	230b      	movs	r3, #11
 800783e:	617b      	str	r3, [r7, #20]
 8007840:	e036      	b.n	80078b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	4a2a      	ldr	r2, [pc, #168]	; (80078f0 <USB_SetTurnaroundTime+0x130>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d906      	bls.n	8007858 <USB_SetTurnaroundTime+0x98>
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	4a29      	ldr	r2, [pc, #164]	; (80078f4 <USB_SetTurnaroundTime+0x134>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d802      	bhi.n	8007858 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007852:	230a      	movs	r3, #10
 8007854:	617b      	str	r3, [r7, #20]
 8007856:	e02b      	b.n	80078b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	4a26      	ldr	r2, [pc, #152]	; (80078f4 <USB_SetTurnaroundTime+0x134>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d906      	bls.n	800786e <USB_SetTurnaroundTime+0xae>
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	4a25      	ldr	r2, [pc, #148]	; (80078f8 <USB_SetTurnaroundTime+0x138>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d802      	bhi.n	800786e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007868:	2309      	movs	r3, #9
 800786a:	617b      	str	r3, [r7, #20]
 800786c:	e020      	b.n	80078b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	4a21      	ldr	r2, [pc, #132]	; (80078f8 <USB_SetTurnaroundTime+0x138>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d906      	bls.n	8007884 <USB_SetTurnaroundTime+0xc4>
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	4a20      	ldr	r2, [pc, #128]	; (80078fc <USB_SetTurnaroundTime+0x13c>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d802      	bhi.n	8007884 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800787e:	2308      	movs	r3, #8
 8007880:	617b      	str	r3, [r7, #20]
 8007882:	e015      	b.n	80078b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	4a1d      	ldr	r2, [pc, #116]	; (80078fc <USB_SetTurnaroundTime+0x13c>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d906      	bls.n	800789a <USB_SetTurnaroundTime+0xda>
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	4a1c      	ldr	r2, [pc, #112]	; (8007900 <USB_SetTurnaroundTime+0x140>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d802      	bhi.n	800789a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007894:	2307      	movs	r3, #7
 8007896:	617b      	str	r3, [r7, #20]
 8007898:	e00a      	b.n	80078b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800789a:	2306      	movs	r3, #6
 800789c:	617b      	str	r3, [r7, #20]
 800789e:	e007      	b.n	80078b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80078a0:	79fb      	ldrb	r3, [r7, #7]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d102      	bne.n	80078ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80078a6:	2309      	movs	r3, #9
 80078a8:	617b      	str	r3, [r7, #20]
 80078aa:	e001      	b.n	80078b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80078ac:	2309      	movs	r3, #9
 80078ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	68da      	ldr	r2, [r3, #12]
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	029b      	lsls	r3, r3, #10
 80078c4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80078c8:	431a      	orrs	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	371c      	adds	r7, #28
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	00d8acbf 	.word	0x00d8acbf
 80078e0:	00e4e1bf 	.word	0x00e4e1bf
 80078e4:	00f423ff 	.word	0x00f423ff
 80078e8:	0106737f 	.word	0x0106737f
 80078ec:	011a499f 	.word	0x011a499f
 80078f0:	01312cff 	.word	0x01312cff
 80078f4:	014ca43f 	.word	0x014ca43f
 80078f8:	016e35ff 	.word	0x016e35ff
 80078fc:	01a6ab1f 	.word	0x01a6ab1f
 8007900:	01e847ff 	.word	0x01e847ff

08007904 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f043 0201 	orr.w	r2, r3, #1
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007926:	b480      	push	{r7}
 8007928:	b083      	sub	sp, #12
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f023 0201 	bic.w	r2, r3, #1
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	460b      	mov	r3, r1
 8007952:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007960:	78fb      	ldrb	r3, [r7, #3]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d106      	bne.n	8007974 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	60da      	str	r2, [r3, #12]
 8007972:	e00b      	b.n	800798c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007974:	78fb      	ldrb	r3, [r7, #3]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d106      	bne.n	8007988 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	60da      	str	r2, [r3, #12]
 8007986:	e001      	b.n	800798c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e003      	b.n	8007994 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800798c:	2032      	movs	r0, #50	; 0x32
 800798e:	f7fb fe3f 	bl	8003610 <HAL_Delay>

  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800799c:	b084      	sub	sp, #16
 800799e:	b580      	push	{r7, lr}
 80079a0:	b086      	sub	sp, #24
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80079aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80079b6:	2300      	movs	r3, #0
 80079b8:	613b      	str	r3, [r7, #16]
 80079ba:	e009      	b.n	80079d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	3340      	adds	r3, #64	; 0x40
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4413      	add	r3, r2
 80079c6:	2200      	movs	r2, #0
 80079c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	3301      	adds	r3, #1
 80079ce:	613b      	str	r3, [r7, #16]
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	2b0e      	cmp	r3, #14
 80079d4:	d9f2      	bls.n	80079bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80079d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d11c      	bne.n	8007a16 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079ea:	f043 0302 	orr.w	r3, r3, #2
 80079ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a00:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	639a      	str	r2, [r3, #56]	; 0x38
 8007a14:	e00b      	b.n	8007a2e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a26:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a34:	461a      	mov	r2, r3
 8007a36:	2300      	movs	r3, #0
 8007a38:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a40:	4619      	mov	r1, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a48:	461a      	mov	r2, r3
 8007a4a:	680b      	ldr	r3, [r1, #0]
 8007a4c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d10c      	bne.n	8007a6e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d104      	bne.n	8007a64 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 f949 	bl	8007cf4 <USB_SetDevSpeed>
 8007a62:	e008      	b.n	8007a76 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007a64:	2101      	movs	r1, #1
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f944 	bl	8007cf4 <USB_SetDevSpeed>
 8007a6c:	e003      	b.n	8007a76 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007a6e:	2103      	movs	r1, #3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f93f 	bl	8007cf4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a76:	2110      	movs	r1, #16
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f8f3 	bl	8007c64 <USB_FlushTxFifo>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d001      	beq.n	8007a88 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 f911 	bl	8007cb0 <USB_FlushRxFifo>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d001      	beq.n	8007a98 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aaa:	461a      	mov	r2, r3
 8007aac:	2300      	movs	r3, #0
 8007aae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	2300      	movs	r3, #0
 8007aba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007abc:	2300      	movs	r3, #0
 8007abe:	613b      	str	r3, [r7, #16]
 8007ac0:	e043      	b.n	8007b4a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	015a      	lsls	r2, r3, #5
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ad4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ad8:	d118      	bne.n	8007b0c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10a      	bne.n	8007af6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	015a      	lsls	r2, r3, #5
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aec:	461a      	mov	r2, r3
 8007aee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007af2:	6013      	str	r3, [r2, #0]
 8007af4:	e013      	b.n	8007b1e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	015a      	lsls	r2, r3, #5
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	4413      	add	r3, r2
 8007afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b02:	461a      	mov	r2, r3
 8007b04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b08:	6013      	str	r3, [r2, #0]
 8007b0a:	e008      	b.n	8007b1e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	015a      	lsls	r2, r3, #5
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4413      	add	r3, r2
 8007b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b18:	461a      	mov	r2, r3
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	015a      	lsls	r2, r3, #5
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	4413      	add	r3, r2
 8007b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	015a      	lsls	r2, r3, #5
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	3301      	adds	r3, #1
 8007b48:	613b      	str	r3, [r7, #16]
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d3b7      	bcc.n	8007ac2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b52:	2300      	movs	r3, #0
 8007b54:	613b      	str	r3, [r7, #16]
 8007b56:	e043      	b.n	8007be0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	015a      	lsls	r2, r3, #5
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	4413      	add	r3, r2
 8007b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b6e:	d118      	bne.n	8007ba2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10a      	bne.n	8007b8c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	015a      	lsls	r2, r3, #5
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b82:	461a      	mov	r2, r3
 8007b84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b88:	6013      	str	r3, [r2, #0]
 8007b8a:	e013      	b.n	8007bb4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	015a      	lsls	r2, r3, #5
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	4413      	add	r3, r2
 8007b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b98:	461a      	mov	r2, r3
 8007b9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b9e:	6013      	str	r3, [r2, #0]
 8007ba0:	e008      	b.n	8007bb4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bae:	461a      	mov	r2, r3
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	015a      	lsls	r2, r3, #5
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	4413      	add	r3, r2
 8007bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	015a      	lsls	r2, r3, #5
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	4413      	add	r3, r2
 8007bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007bd8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	613b      	str	r3, [r7, #16]
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d3b7      	bcc.n	8007b58 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bfa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007c08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d105      	bne.n	8007c1c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	f043 0210 	orr.w	r2, r3, #16
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	699a      	ldr	r2, [r3, #24]
 8007c20:	4b0f      	ldr	r3, [pc, #60]	; (8007c60 <USB_DevInit+0x2c4>)
 8007c22:	4313      	orrs	r3, r2
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d005      	beq.n	8007c3a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	f043 0208 	orr.w	r2, r3, #8
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d107      	bne.n	8007c50 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c48:	f043 0304 	orr.w	r3, r3, #4
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3718      	adds	r7, #24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c5c:	b004      	add	sp, #16
 8007c5e:	4770      	bx	lr
 8007c60:	803c3800 	.word	0x803c3800

08007c64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	019b      	lsls	r3, r3, #6
 8007c76:	f043 0220 	orr.w	r2, r3, #32
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	3301      	adds	r3, #1
 8007c82:	60fb      	str	r3, [r7, #12]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	4a09      	ldr	r2, [pc, #36]	; (8007cac <USB_FlushTxFifo+0x48>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d901      	bls.n	8007c90 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e006      	b.n	8007c9e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	f003 0320 	and.w	r3, r3, #32
 8007c98:	2b20      	cmp	r3, #32
 8007c9a:	d0f0      	beq.n	8007c7e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	00030d40 	.word	0x00030d40

08007cb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2210      	movs	r2, #16
 8007cc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	4a09      	ldr	r2, [pc, #36]	; (8007cf0 <USB_FlushRxFifo+0x40>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d901      	bls.n	8007cd4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e006      	b.n	8007ce2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	f003 0310 	and.w	r3, r3, #16
 8007cdc:	2b10      	cmp	r3, #16
 8007cde:	d0f0      	beq.n	8007cc2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3714      	adds	r7, #20
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	00030d40 	.word	0x00030d40

08007cf4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	78fb      	ldrb	r3, [r7, #3]
 8007d0e:	68f9      	ldr	r1, [r7, #12]
 8007d10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d14:	4313      	orrs	r3, r2
 8007d16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b087      	sub	sp, #28
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	f003 0306 	and.w	r3, r3, #6
 8007d3e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d102      	bne.n	8007d4c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007d46:	2300      	movs	r3, #0
 8007d48:	75fb      	strb	r3, [r7, #23]
 8007d4a:	e00a      	b.n	8007d62 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d002      	beq.n	8007d58 <USB_GetDevSpeed+0x32>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2b06      	cmp	r3, #6
 8007d56:	d102      	bne.n	8007d5e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007d58:	2302      	movs	r3, #2
 8007d5a:	75fb      	strb	r3, [r7, #23]
 8007d5c:	e001      	b.n	8007d62 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007d5e:	230f      	movs	r3, #15
 8007d60:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	371c      	adds	r7, #28
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	785b      	ldrb	r3, [r3, #1]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d13a      	bne.n	8007e02 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d92:	69da      	ldr	r2, [r3, #28]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	f003 030f 	and.w	r3, r3, #15
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	68f9      	ldr	r1, [r7, #12]
 8007da6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007daa:	4313      	orrs	r3, r2
 8007dac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	015a      	lsls	r2, r3, #5
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d155      	bne.n	8007e70 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	78db      	ldrb	r3, [r3, #3]
 8007dde:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007de0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	059b      	lsls	r3, r3, #22
 8007de6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007de8:	4313      	orrs	r3, r2
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	0151      	lsls	r1, r2, #5
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	440a      	add	r2, r1
 8007df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dfe:	6013      	str	r3, [r2, #0]
 8007e00:	e036      	b.n	8007e70 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e08:	69da      	ldr	r2, [r3, #28]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	f003 030f 	and.w	r3, r3, #15
 8007e12:	2101      	movs	r1, #1
 8007e14:	fa01 f303 	lsl.w	r3, r1, r3
 8007e18:	041b      	lsls	r3, r3, #16
 8007e1a:	68f9      	ldr	r1, [r7, #12]
 8007e1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e20:	4313      	orrs	r3, r2
 8007e22:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	015a      	lsls	r2, r3, #5
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d11a      	bne.n	8007e70 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	015a      	lsls	r2, r3, #5
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	4413      	add	r3, r2
 8007e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	78db      	ldrb	r3, [r3, #3]
 8007e54:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e56:	430b      	orrs	r3, r1
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	68ba      	ldr	r2, [r7, #8]
 8007e5c:	0151      	lsls	r1, r2, #5
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	440a      	add	r2, r1
 8007e62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e6e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
	...

08007e80 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	785b      	ldrb	r3, [r3, #1]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d161      	bne.n	8007f60 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007eae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007eb2:	d11f      	bne.n	8007ef4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	015a      	lsls	r2, r3, #5
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	4413      	add	r3, r2
 8007ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	0151      	lsls	r1, r2, #5
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	440a      	add	r2, r1
 8007eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ece:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ed2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	015a      	lsls	r2, r3, #5
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	4413      	add	r3, r2
 8007edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68ba      	ldr	r2, [r7, #8]
 8007ee4:	0151      	lsls	r1, r2, #5
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	440a      	add	r2, r1
 8007eea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ef2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007efa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	f003 030f 	and.w	r3, r3, #15
 8007f04:	2101      	movs	r1, #1
 8007f06:	fa01 f303 	lsl.w	r3, r1, r3
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	43db      	mvns	r3, r3
 8007f0e:	68f9      	ldr	r1, [r7, #12]
 8007f10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f14:	4013      	ands	r3, r2
 8007f16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f1e:	69da      	ldr	r2, [r3, #28]
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	f003 030f 	and.w	r3, r3, #15
 8007f28:	2101      	movs	r1, #1
 8007f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	43db      	mvns	r3, r3
 8007f32:	68f9      	ldr	r1, [r7, #12]
 8007f34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f38:	4013      	ands	r3, r2
 8007f3a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	015a      	lsls	r2, r3, #5
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	4413      	add	r3, r2
 8007f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	0159      	lsls	r1, r3, #5
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	440b      	add	r3, r1
 8007f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f56:	4619      	mov	r1, r3
 8007f58:	4b35      	ldr	r3, [pc, #212]	; (8008030 <USB_DeactivateEndpoint+0x1b0>)
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	600b      	str	r3, [r1, #0]
 8007f5e:	e060      	b.n	8008022 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f76:	d11f      	bne.n	8007fb8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	015a      	lsls	r2, r3, #5
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	4413      	add	r3, r2
 8007f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	0151      	lsls	r1, r2, #5
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	440a      	add	r2, r1
 8007f8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f96:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	015a      	lsls	r2, r3, #5
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	0151      	lsls	r1, r2, #5
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	440a      	add	r2, r1
 8007fae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	f003 030f 	and.w	r3, r3, #15
 8007fc8:	2101      	movs	r1, #1
 8007fca:	fa01 f303 	lsl.w	r3, r1, r3
 8007fce:	041b      	lsls	r3, r3, #16
 8007fd0:	43db      	mvns	r3, r3
 8007fd2:	68f9      	ldr	r1, [r7, #12]
 8007fd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fd8:	4013      	ands	r3, r2
 8007fda:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fe2:	69da      	ldr	r2, [r3, #28]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	f003 030f 	and.w	r3, r3, #15
 8007fec:	2101      	movs	r1, #1
 8007fee:	fa01 f303 	lsl.w	r3, r1, r3
 8007ff2:	041b      	lsls	r3, r3, #16
 8007ff4:	43db      	mvns	r3, r3
 8007ff6:	68f9      	ldr	r1, [r7, #12]
 8007ff8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	015a      	lsls	r2, r3, #5
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	4413      	add	r3, r2
 8008008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	0159      	lsls	r1, r3, #5
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	440b      	add	r3, r1
 8008016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801a:	4619      	mov	r1, r3
 800801c:	4b05      	ldr	r3, [pc, #20]	; (8008034 <USB_DeactivateEndpoint+0x1b4>)
 800801e:	4013      	ands	r3, r2
 8008020:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3714      	adds	r7, #20
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr
 8008030:	ec337800 	.word	0xec337800
 8008034:	eff37800 	.word	0xeff37800

08008038 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b08a      	sub	sp, #40	; 0x28
 800803c:	af02      	add	r7, sp, #8
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	4613      	mov	r3, r2
 8008044:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	785b      	ldrb	r3, [r3, #1]
 8008054:	2b01      	cmp	r3, #1
 8008056:	f040 815c 	bne.w	8008312 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d132      	bne.n	80080c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	015a      	lsls	r2, r3, #5
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	4413      	add	r3, r2
 800806a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	69ba      	ldr	r2, [r7, #24]
 8008072:	0151      	lsls	r1, r2, #5
 8008074:	69fa      	ldr	r2, [r7, #28]
 8008076:	440a      	add	r2, r1
 8008078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800807c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008080:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008084:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	015a      	lsls	r2, r3, #5
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	4413      	add	r3, r2
 800808e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	69ba      	ldr	r2, [r7, #24]
 8008096:	0151      	lsls	r1, r2, #5
 8008098:	69fa      	ldr	r2, [r7, #28]
 800809a:	440a      	add	r2, r1
 800809c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	015a      	lsls	r2, r3, #5
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	69ba      	ldr	r2, [r7, #24]
 80080b6:	0151      	lsls	r1, r2, #5
 80080b8:	69fa      	ldr	r2, [r7, #28]
 80080ba:	440a      	add	r2, r1
 80080bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080c0:	0cdb      	lsrs	r3, r3, #19
 80080c2:	04db      	lsls	r3, r3, #19
 80080c4:	6113      	str	r3, [r2, #16]
 80080c6:	e074      	b.n	80081b2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	015a      	lsls	r2, r3, #5
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	4413      	add	r3, r2
 80080d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	69ba      	ldr	r2, [r7, #24]
 80080d8:	0151      	lsls	r1, r2, #5
 80080da:	69fa      	ldr	r2, [r7, #28]
 80080dc:	440a      	add	r2, r1
 80080de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080e2:	0cdb      	lsrs	r3, r3, #19
 80080e4:	04db      	lsls	r3, r3, #19
 80080e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	015a      	lsls	r2, r3, #5
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	4413      	add	r3, r2
 80080f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	69ba      	ldr	r2, [r7, #24]
 80080f8:	0151      	lsls	r1, r2, #5
 80080fa:	69fa      	ldr	r2, [r7, #28]
 80080fc:	440a      	add	r2, r1
 80080fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008102:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008106:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800810a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	015a      	lsls	r2, r3, #5
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	4413      	add	r3, r2
 8008114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008118:	691a      	ldr	r2, [r3, #16]
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	6959      	ldr	r1, [r3, #20]
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	440b      	add	r3, r1
 8008124:	1e59      	subs	r1, r3, #1
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	fbb1 f3f3 	udiv	r3, r1, r3
 800812e:	04d9      	lsls	r1, r3, #19
 8008130:	4b9d      	ldr	r3, [pc, #628]	; (80083a8 <USB_EPStartXfer+0x370>)
 8008132:	400b      	ands	r3, r1
 8008134:	69b9      	ldr	r1, [r7, #24]
 8008136:	0148      	lsls	r0, r1, #5
 8008138:	69f9      	ldr	r1, [r7, #28]
 800813a:	4401      	add	r1, r0
 800813c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008140:	4313      	orrs	r3, r2
 8008142:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	015a      	lsls	r2, r3, #5
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	4413      	add	r3, r2
 800814c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008150:	691a      	ldr	r2, [r3, #16]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800815a:	69b9      	ldr	r1, [r7, #24]
 800815c:	0148      	lsls	r0, r1, #5
 800815e:	69f9      	ldr	r1, [r7, #28]
 8008160:	4401      	add	r1, r0
 8008162:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008166:	4313      	orrs	r3, r2
 8008168:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	78db      	ldrb	r3, [r3, #3]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d11f      	bne.n	80081b2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	015a      	lsls	r2, r3, #5
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	4413      	add	r3, r2
 800817a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	69ba      	ldr	r2, [r7, #24]
 8008182:	0151      	lsls	r1, r2, #5
 8008184:	69fa      	ldr	r2, [r7, #28]
 8008186:	440a      	add	r2, r1
 8008188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800818c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008190:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	015a      	lsls	r2, r3, #5
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	4413      	add	r3, r2
 800819a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	69ba      	ldr	r2, [r7, #24]
 80081a2:	0151      	lsls	r1, r2, #5
 80081a4:	69fa      	ldr	r2, [r7, #28]
 80081a6:	440a      	add	r2, r1
 80081a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80081b0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80081b2:	79fb      	ldrb	r3, [r7, #7]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d14b      	bne.n	8008250 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d009      	beq.n	80081d4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	015a      	lsls	r2, r3, #5
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	4413      	add	r3, r2
 80081c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081cc:	461a      	mov	r2, r3
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	78db      	ldrb	r3, [r3, #3]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d128      	bne.n	800822e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d110      	bne.n	800820e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	015a      	lsls	r2, r3, #5
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	4413      	add	r3, r2
 80081f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	69ba      	ldr	r2, [r7, #24]
 80081fc:	0151      	lsls	r1, r2, #5
 80081fe:	69fa      	ldr	r2, [r7, #28]
 8008200:	440a      	add	r2, r1
 8008202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008206:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800820a:	6013      	str	r3, [r2, #0]
 800820c:	e00f      	b.n	800822e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	015a      	lsls	r2, r3, #5
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	4413      	add	r3, r2
 8008216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	0151      	lsls	r1, r2, #5
 8008220:	69fa      	ldr	r2, [r7, #28]
 8008222:	440a      	add	r2, r1
 8008224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800822c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	015a      	lsls	r2, r3, #5
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	4413      	add	r3, r2
 8008236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	69ba      	ldr	r2, [r7, #24]
 800823e:	0151      	lsls	r1, r2, #5
 8008240:	69fa      	ldr	r2, [r7, #28]
 8008242:	440a      	add	r2, r1
 8008244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008248:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800824c:	6013      	str	r3, [r2, #0]
 800824e:	e12f      	b.n	80084b0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	4413      	add	r3, r2
 8008258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	69ba      	ldr	r2, [r7, #24]
 8008260:	0151      	lsls	r1, r2, #5
 8008262:	69fa      	ldr	r2, [r7, #28]
 8008264:	440a      	add	r2, r1
 8008266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800826a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800826e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	78db      	ldrb	r3, [r3, #3]
 8008274:	2b01      	cmp	r3, #1
 8008276:	d015      	beq.n	80082a4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	695b      	ldr	r3, [r3, #20]
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 8117 	beq.w	80084b0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	f003 030f 	and.w	r3, r3, #15
 8008292:	2101      	movs	r1, #1
 8008294:	fa01 f303 	lsl.w	r3, r1, r3
 8008298:	69f9      	ldr	r1, [r7, #28]
 800829a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800829e:	4313      	orrs	r3, r2
 80082a0:	634b      	str	r3, [r1, #52]	; 0x34
 80082a2:	e105      	b.n	80084b0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d110      	bne.n	80082d6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	015a      	lsls	r2, r3, #5
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	4413      	add	r3, r2
 80082bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	69ba      	ldr	r2, [r7, #24]
 80082c4:	0151      	lsls	r1, r2, #5
 80082c6:	69fa      	ldr	r2, [r7, #28]
 80082c8:	440a      	add	r2, r1
 80082ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082d2:	6013      	str	r3, [r2, #0]
 80082d4:	e00f      	b.n	80082f6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	015a      	lsls	r2, r3, #5
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	4413      	add	r3, r2
 80082de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	69ba      	ldr	r2, [r7, #24]
 80082e6:	0151      	lsls	r1, r2, #5
 80082e8:	69fa      	ldr	r2, [r7, #28]
 80082ea:	440a      	add	r2, r1
 80082ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082f4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	68d9      	ldr	r1, [r3, #12]
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	781a      	ldrb	r2, [r3, #0]
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	695b      	ldr	r3, [r3, #20]
 8008302:	b298      	uxth	r0, r3
 8008304:	79fb      	ldrb	r3, [r7, #7]
 8008306:	9300      	str	r3, [sp, #0]
 8008308:	4603      	mov	r3, r0
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f000 fa2b 	bl	8008766 <USB_WritePacket>
 8008310:	e0ce      	b.n	80084b0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	015a      	lsls	r2, r3, #5
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	4413      	add	r3, r2
 800831a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	69ba      	ldr	r2, [r7, #24]
 8008322:	0151      	lsls	r1, r2, #5
 8008324:	69fa      	ldr	r2, [r7, #28]
 8008326:	440a      	add	r2, r1
 8008328:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800832c:	0cdb      	lsrs	r3, r3, #19
 800832e:	04db      	lsls	r3, r3, #19
 8008330:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	015a      	lsls	r2, r3, #5
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	4413      	add	r3, r2
 800833a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	69ba      	ldr	r2, [r7, #24]
 8008342:	0151      	lsls	r1, r2, #5
 8008344:	69fa      	ldr	r2, [r7, #28]
 8008346:	440a      	add	r2, r1
 8008348:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800834c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008350:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008354:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	695b      	ldr	r3, [r3, #20]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d126      	bne.n	80083ac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	015a      	lsls	r2, r3, #5
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	4413      	add	r3, r2
 8008366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800836a:	691a      	ldr	r2, [r3, #16]
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008374:	69b9      	ldr	r1, [r7, #24]
 8008376:	0148      	lsls	r0, r1, #5
 8008378:	69f9      	ldr	r1, [r7, #28]
 800837a:	4401      	add	r1, r0
 800837c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008380:	4313      	orrs	r3, r2
 8008382:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	015a      	lsls	r2, r3, #5
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	4413      	add	r3, r2
 800838c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	69ba      	ldr	r2, [r7, #24]
 8008394:	0151      	lsls	r1, r2, #5
 8008396:	69fa      	ldr	r2, [r7, #28]
 8008398:	440a      	add	r2, r1
 800839a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800839e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083a2:	6113      	str	r3, [r2, #16]
 80083a4:	e036      	b.n	8008414 <USB_EPStartXfer+0x3dc>
 80083a6:	bf00      	nop
 80083a8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	695a      	ldr	r2, [r3, #20]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	4413      	add	r3, r2
 80083b6:	1e5a      	subs	r2, r3, #1
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80083c0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	015a      	lsls	r2, r3, #5
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	4413      	add	r3, r2
 80083ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ce:	691a      	ldr	r2, [r3, #16]
 80083d0:	8afb      	ldrh	r3, [r7, #22]
 80083d2:	04d9      	lsls	r1, r3, #19
 80083d4:	4b39      	ldr	r3, [pc, #228]	; (80084bc <USB_EPStartXfer+0x484>)
 80083d6:	400b      	ands	r3, r1
 80083d8:	69b9      	ldr	r1, [r7, #24]
 80083da:	0148      	lsls	r0, r1, #5
 80083dc:	69f9      	ldr	r1, [r7, #28]
 80083de:	4401      	add	r1, r0
 80083e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80083e4:	4313      	orrs	r3, r2
 80083e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	015a      	lsls	r2, r3, #5
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	4413      	add	r3, r2
 80083f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f4:	691a      	ldr	r2, [r3, #16]
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	8af9      	ldrh	r1, [r7, #22]
 80083fc:	fb01 f303 	mul.w	r3, r1, r3
 8008400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008404:	69b9      	ldr	r1, [r7, #24]
 8008406:	0148      	lsls	r0, r1, #5
 8008408:	69f9      	ldr	r1, [r7, #28]
 800840a:	4401      	add	r1, r0
 800840c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008410:	4313      	orrs	r3, r2
 8008412:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008414:	79fb      	ldrb	r3, [r7, #7]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d10d      	bne.n	8008436 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d009      	beq.n	8008436 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	68d9      	ldr	r1, [r3, #12]
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	015a      	lsls	r2, r3, #5
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	4413      	add	r3, r2
 800842e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008432:	460a      	mov	r2, r1
 8008434:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	78db      	ldrb	r3, [r3, #3]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d128      	bne.n	8008490 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800844a:	2b00      	cmp	r3, #0
 800844c:	d110      	bne.n	8008470 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	015a      	lsls	r2, r3, #5
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	4413      	add	r3, r2
 8008456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	69ba      	ldr	r2, [r7, #24]
 800845e:	0151      	lsls	r1, r2, #5
 8008460:	69fa      	ldr	r2, [r7, #28]
 8008462:	440a      	add	r2, r1
 8008464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008468:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800846c:	6013      	str	r3, [r2, #0]
 800846e:	e00f      	b.n	8008490 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	4413      	add	r3, r2
 8008478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	69ba      	ldr	r2, [r7, #24]
 8008480:	0151      	lsls	r1, r2, #5
 8008482:	69fa      	ldr	r2, [r7, #28]
 8008484:	440a      	add	r2, r1
 8008486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800848a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800848e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	015a      	lsls	r2, r3, #5
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	4413      	add	r3, r2
 8008498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	69ba      	ldr	r2, [r7, #24]
 80084a0:	0151      	lsls	r1, r2, #5
 80084a2:	69fa      	ldr	r2, [r7, #28]
 80084a4:	440a      	add	r2, r1
 80084a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80084ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3720      	adds	r7, #32
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	1ff80000 	.word	0x1ff80000

080084c0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b087      	sub	sp, #28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	4613      	mov	r3, r2
 80084cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	785b      	ldrb	r3, [r3, #1]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	f040 80cd 	bne.w	800867c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d132      	bne.n	8008550 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	015a      	lsls	r2, r3, #5
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	0151      	lsls	r1, r2, #5
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	440a      	add	r2, r1
 8008500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008504:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008508:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800850c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	015a      	lsls	r2, r3, #5
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	4413      	add	r3, r2
 8008516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	0151      	lsls	r1, r2, #5
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	440a      	add	r2, r1
 8008524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008528:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800852c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	015a      	lsls	r2, r3, #5
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	4413      	add	r3, r2
 8008536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	693a      	ldr	r2, [r7, #16]
 800853e:	0151      	lsls	r1, r2, #5
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	440a      	add	r2, r1
 8008544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008548:	0cdb      	lsrs	r3, r3, #19
 800854a:	04db      	lsls	r3, r3, #19
 800854c:	6113      	str	r3, [r2, #16]
 800854e:	e04e      	b.n	80085ee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	4413      	add	r3, r2
 8008558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	0151      	lsls	r1, r2, #5
 8008562:	697a      	ldr	r2, [r7, #20]
 8008564:	440a      	add	r2, r1
 8008566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800856a:	0cdb      	lsrs	r3, r3, #19
 800856c:	04db      	lsls	r3, r3, #19
 800856e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	015a      	lsls	r2, r3, #5
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	4413      	add	r3, r2
 8008578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	693a      	ldr	r2, [r7, #16]
 8008580:	0151      	lsls	r1, r2, #5
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	440a      	add	r2, r1
 8008586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800858a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800858e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008592:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	695a      	ldr	r2, [r3, #20]
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	429a      	cmp	r2, r3
 800859e:	d903      	bls.n	80085a8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	689a      	ldr	r2, [r3, #8]
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	015a      	lsls	r2, r3, #5
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	4413      	add	r3, r2
 80085b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	0151      	lsls	r1, r2, #5
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	440a      	add	r2, r1
 80085be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	015a      	lsls	r2, r3, #5
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	4413      	add	r3, r2
 80085d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d4:	691a      	ldr	r2, [r3, #16]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085de:	6939      	ldr	r1, [r7, #16]
 80085e0:	0148      	lsls	r0, r1, #5
 80085e2:	6979      	ldr	r1, [r7, #20]
 80085e4:	4401      	add	r1, r0
 80085e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085ea:	4313      	orrs	r3, r2
 80085ec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80085ee:	79fb      	ldrb	r3, [r7, #7]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d11e      	bne.n	8008632 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d009      	beq.n	8008610 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	015a      	lsls	r2, r3, #5
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	4413      	add	r3, r2
 8008604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008608:	461a      	mov	r2, r3
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	015a      	lsls	r2, r3, #5
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	4413      	add	r3, r2
 8008618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	0151      	lsls	r1, r2, #5
 8008622:	697a      	ldr	r2, [r7, #20]
 8008624:	440a      	add	r2, r1
 8008626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800862a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800862e:	6013      	str	r3, [r2, #0]
 8008630:	e092      	b.n	8008758 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	015a      	lsls	r2, r3, #5
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	4413      	add	r3, r2
 800863a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	693a      	ldr	r2, [r7, #16]
 8008642:	0151      	lsls	r1, r2, #5
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	440a      	add	r2, r1
 8008648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800864c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008650:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d07e      	beq.n	8008758 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	f003 030f 	and.w	r3, r3, #15
 800866a:	2101      	movs	r1, #1
 800866c:	fa01 f303 	lsl.w	r3, r1, r3
 8008670:	6979      	ldr	r1, [r7, #20]
 8008672:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008676:	4313      	orrs	r3, r2
 8008678:	634b      	str	r3, [r1, #52]	; 0x34
 800867a:	e06d      	b.n	8008758 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	015a      	lsls	r2, r3, #5
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	4413      	add	r3, r2
 8008684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	0151      	lsls	r1, r2, #5
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	440a      	add	r2, r1
 8008692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008696:	0cdb      	lsrs	r3, r3, #19
 8008698:	04db      	lsls	r3, r3, #19
 800869a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	015a      	lsls	r2, r3, #5
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	4413      	add	r3, r2
 80086a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	693a      	ldr	r2, [r7, #16]
 80086ac:	0151      	lsls	r1, r2, #5
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	440a      	add	r2, r1
 80086b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086be:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	695b      	ldr	r3, [r3, #20]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d003      	beq.n	80086d0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	689a      	ldr	r2, [r3, #8]
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	015a      	lsls	r2, r3, #5
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	4413      	add	r3, r2
 80086d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	693a      	ldr	r2, [r7, #16]
 80086e0:	0151      	lsls	r1, r2, #5
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	440a      	add	r2, r1
 80086e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	015a      	lsls	r2, r3, #5
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	4413      	add	r3, r2
 80086f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086fc:	691a      	ldr	r2, [r3, #16]
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008706:	6939      	ldr	r1, [r7, #16]
 8008708:	0148      	lsls	r0, r1, #5
 800870a:	6979      	ldr	r1, [r7, #20]
 800870c:	4401      	add	r1, r0
 800870e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008712:	4313      	orrs	r3, r2
 8008714:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008716:	79fb      	ldrb	r3, [r7, #7]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d10d      	bne.n	8008738 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d009      	beq.n	8008738 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	68d9      	ldr	r1, [r3, #12]
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	015a      	lsls	r2, r3, #5
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	4413      	add	r3, r2
 8008730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008734:	460a      	mov	r2, r1
 8008736:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	015a      	lsls	r2, r3, #5
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	4413      	add	r3, r2
 8008740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	0151      	lsls	r1, r2, #5
 800874a:	697a      	ldr	r2, [r7, #20]
 800874c:	440a      	add	r2, r1
 800874e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008752:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008756:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	371c      	adds	r7, #28
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008766:	b480      	push	{r7}
 8008768:	b089      	sub	sp, #36	; 0x24
 800876a:	af00      	add	r7, sp, #0
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	60b9      	str	r1, [r7, #8]
 8008770:	4611      	mov	r1, r2
 8008772:	461a      	mov	r2, r3
 8008774:	460b      	mov	r3, r1
 8008776:	71fb      	strb	r3, [r7, #7]
 8008778:	4613      	mov	r3, r2
 800877a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008784:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008788:	2b00      	cmp	r3, #0
 800878a:	d11a      	bne.n	80087c2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800878c:	88bb      	ldrh	r3, [r7, #4]
 800878e:	3303      	adds	r3, #3
 8008790:	089b      	lsrs	r3, r3, #2
 8008792:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008794:	2300      	movs	r3, #0
 8008796:	61bb      	str	r3, [r7, #24]
 8008798:	e00f      	b.n	80087ba <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800879a:	79fb      	ldrb	r3, [r7, #7]
 800879c:	031a      	lsls	r2, r3, #12
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	4413      	add	r3, r2
 80087a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087a6:	461a      	mov	r2, r3
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	6013      	str	r3, [r2, #0]
      pSrc++;
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	3304      	adds	r3, #4
 80087b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	3301      	adds	r3, #1
 80087b8:	61bb      	str	r3, [r7, #24]
 80087ba:	69ba      	ldr	r2, [r7, #24]
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d3eb      	bcc.n	800879a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3724      	adds	r7, #36	; 0x24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b089      	sub	sp, #36	; 0x24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	4613      	mov	r3, r2
 80087dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80087e6:	88fb      	ldrh	r3, [r7, #6]
 80087e8:	3303      	adds	r3, #3
 80087ea:	089b      	lsrs	r3, r3, #2
 80087ec:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80087ee:	2300      	movs	r3, #0
 80087f0:	61bb      	str	r3, [r7, #24]
 80087f2:	e00b      	b.n	800880c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	3304      	adds	r3, #4
 8008804:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	3301      	adds	r3, #1
 800880a:	61bb      	str	r3, [r7, #24]
 800880c:	69ba      	ldr	r2, [r7, #24]
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	429a      	cmp	r2, r3
 8008812:	d3ef      	bcc.n	80087f4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008814:	69fb      	ldr	r3, [r7, #28]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3724      	adds	r7, #36	; 0x24
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008822:	b480      	push	{r7}
 8008824:	b085      	sub	sp, #20
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	785b      	ldrb	r3, [r3, #1]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d12c      	bne.n	8008898 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	015a      	lsls	r2, r3, #5
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	4413      	add	r3, r2
 8008846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	db12      	blt.n	8008876 <USB_EPSetStall+0x54>
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00f      	beq.n	8008876 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	015a      	lsls	r2, r3, #5
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	4413      	add	r3, r2
 800885e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	0151      	lsls	r1, r2, #5
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	440a      	add	r2, r1
 800886c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008870:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008874:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	015a      	lsls	r2, r3, #5
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	4413      	add	r3, r2
 800887e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	0151      	lsls	r1, r2, #5
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	440a      	add	r2, r1
 800888c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008890:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008894:	6013      	str	r3, [r2, #0]
 8008896:	e02b      	b.n	80088f0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	015a      	lsls	r2, r3, #5
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	4413      	add	r3, r2
 80088a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	db12      	blt.n	80088d0 <USB_EPSetStall+0xae>
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00f      	beq.n	80088d0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	015a      	lsls	r2, r3, #5
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	4413      	add	r3, r2
 80088b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	0151      	lsls	r1, r2, #5
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	440a      	add	r2, r1
 80088c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80088ce:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	015a      	lsls	r2, r3, #5
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	0151      	lsls	r1, r2, #5
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	440a      	add	r2, r1
 80088e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3714      	adds	r7, #20
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80088fe:	b480      	push	{r7}
 8008900:	b085      	sub	sp, #20
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	785b      	ldrb	r3, [r3, #1]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d128      	bne.n	800896c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	015a      	lsls	r2, r3, #5
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	4413      	add	r3, r2
 8008922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	0151      	lsls	r1, r2, #5
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	440a      	add	r2, r1
 8008930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008934:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008938:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	78db      	ldrb	r3, [r3, #3]
 800893e:	2b03      	cmp	r3, #3
 8008940:	d003      	beq.n	800894a <USB_EPClearStall+0x4c>
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	78db      	ldrb	r3, [r3, #3]
 8008946:	2b02      	cmp	r3, #2
 8008948:	d138      	bne.n	80089bc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	4413      	add	r3, r2
 8008952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	0151      	lsls	r1, r2, #5
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	440a      	add	r2, r1
 8008960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008968:	6013      	str	r3, [r2, #0]
 800896a:	e027      	b.n	80089bc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	015a      	lsls	r2, r3, #5
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	4413      	add	r3, r2
 8008974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	0151      	lsls	r1, r2, #5
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	440a      	add	r2, r1
 8008982:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008986:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800898a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	78db      	ldrb	r3, [r3, #3]
 8008990:	2b03      	cmp	r3, #3
 8008992:	d003      	beq.n	800899c <USB_EPClearStall+0x9e>
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	78db      	ldrb	r3, [r3, #3]
 8008998:	2b02      	cmp	r3, #2
 800899a:	d10f      	bne.n	80089bc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	015a      	lsls	r2, r3, #5
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	4413      	add	r3, r2
 80089a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	0151      	lsls	r1, r2, #5
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	440a      	add	r2, r1
 80089b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089ba:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b085      	sub	sp, #20
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	460b      	mov	r3, r1
 80089d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80089ec:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	78fb      	ldrb	r3, [r7, #3]
 80089f8:	011b      	lsls	r3, r3, #4
 80089fa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80089fe:	68f9      	ldr	r1, [r7, #12]
 8008a00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a04:	4313      	orrs	r3, r2
 8008a06:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3714      	adds	r7, #20
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr

08008a16 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b085      	sub	sp, #20
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a30:	f023 0303 	bic.w	r3, r3, #3
 8008a34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a44:	f023 0302 	bic.w	r3, r3, #2
 8008a48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3714      	adds	r7, #20
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a72:	f023 0303 	bic.w	r3, r3, #3
 8008a76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a86:	f043 0302 	orr.w	r3, r3, #2
 8008a8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3714      	adds	r7, #20
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr

08008a9a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b085      	sub	sp, #20
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	699b      	ldr	r3, [r3, #24]
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	4013      	ands	r3, r2
 8008ab0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3714      	adds	r7, #20
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008adc:	69db      	ldr	r3, [r3, #28]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	0c1b      	lsrs	r3, r3, #16
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3714      	adds	r7, #20
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b10:	69db      	ldr	r3, [r3, #28]
 8008b12:	68ba      	ldr	r2, [r7, #8]
 8008b14:	4013      	ands	r3, r2
 8008b16:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	b29b      	uxth	r3, r3
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3714      	adds	r7, #20
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	460b      	mov	r3, r1
 8008b32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008b38:	78fb      	ldrb	r3, [r7, #3]
 8008b3a:	015a      	lsls	r2, r3, #5
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	4413      	add	r3, r2
 8008b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	4013      	ands	r3, r2
 8008b54:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b56:	68bb      	ldr	r3, [r7, #8]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3714      	adds	r7, #20
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b087      	sub	sp, #28
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b86:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008b88:	78fb      	ldrb	r3, [r7, #3]
 8008b8a:	f003 030f 	and.w	r3, r3, #15
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	fa22 f303 	lsr.w	r3, r2, r3
 8008b94:	01db      	lsls	r3, r3, #7
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	693a      	ldr	r2, [r7, #16]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008b9e:	78fb      	ldrb	r3, [r7, #3]
 8008ba0:	015a      	lsls	r2, r3, #5
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	4013      	ands	r3, r2
 8008bb0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008bb2:	68bb      	ldr	r3, [r7, #8]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	371c      	adds	r7, #28
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	695b      	ldr	r3, [r3, #20]
 8008bcc:	f003 0301 	and.w	r3, r3, #1
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bf6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008bfa:	f023 0307 	bic.w	r3, r3, #7
 8008bfe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3714      	adds	r7, #20
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
	...

08008c24 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b087      	sub	sp, #28
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	607a      	str	r2, [r7, #4]
 8008c30:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	333c      	adds	r3, #60	; 0x3c
 8008c3a:	3304      	adds	r3, #4
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	4a26      	ldr	r2, [pc, #152]	; (8008cdc <USB_EP0_OutStart+0xb8>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d90a      	bls.n	8008c5e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c58:	d101      	bne.n	8008c5e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	e037      	b.n	8008cce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c64:	461a      	mov	r2, r3
 8008c66:	2300      	movs	r3, #0
 8008c68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	697a      	ldr	r2, [r7, #20]
 8008c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c8c:	f043 0318 	orr.w	r3, r3, #24
 8008c90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ca0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008ca4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008ca6:	7afb      	ldrb	r3, [r7, #11]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d10f      	bne.n	8008ccc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cc6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008cca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	371c      	adds	r7, #28
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	4f54300a 	.word	0x4f54300a

08008ce0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	60fb      	str	r3, [r7, #12]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	4a13      	ldr	r2, [pc, #76]	; (8008d44 <USB_CoreReset+0x64>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d901      	bls.n	8008cfe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	e01b      	b.n	8008d36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	daf2      	bge.n	8008cec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008d06:	2300      	movs	r3, #0
 8008d08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	f043 0201 	orr.w	r2, r3, #1
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	60fb      	str	r3, [r7, #12]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	4a09      	ldr	r2, [pc, #36]	; (8008d44 <USB_CoreReset+0x64>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d901      	bls.n	8008d28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e006      	b.n	8008d36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	f003 0301 	and.w	r3, r3, #1
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d0f0      	beq.n	8008d16 <USB_CoreReset+0x36>

  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3714      	adds	r7, #20
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	00030d40 	.word	0x00030d40

08008d48 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008d54:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008d58:	f006 f854 	bl	800ee04 <malloc>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d105      	bne.n	8008d72 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008d6e:	2302      	movs	r3, #2
 8008d70:	e066      	b.n	8008e40 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	7c1b      	ldrb	r3, [r3, #16]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d119      	bne.n	8008db6 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008d82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d86:	2202      	movs	r2, #2
 8008d88:	2181      	movs	r1, #129	; 0x81
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f005 fec1 	bl	800eb12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008d96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	2101      	movs	r1, #1
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f005 feb7 	bl	800eb12 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2210      	movs	r2, #16
 8008db0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008db4:	e016      	b.n	8008de4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008db6:	2340      	movs	r3, #64	; 0x40
 8008db8:	2202      	movs	r2, #2
 8008dba:	2181      	movs	r1, #129	; 0x81
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f005 fea8 	bl	800eb12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008dc8:	2340      	movs	r3, #64	; 0x40
 8008dca:	2202      	movs	r2, #2
 8008dcc:	2101      	movs	r1, #1
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f005 fe9f 	bl	800eb12 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2210      	movs	r2, #16
 8008de0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008de4:	2308      	movs	r3, #8
 8008de6:	2203      	movs	r2, #3
 8008de8:	2182      	movs	r1, #130	; 0x82
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f005 fe91 	bl	800eb12 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	7c1b      	ldrb	r3, [r3, #16]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d109      	bne.n	8008e2e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e24:	2101      	movs	r1, #1
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f005 ff62 	bl	800ecf0 <USBD_LL_PrepareReceive>
 8008e2c:	e007      	b.n	8008e3e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e34:	2340      	movs	r3, #64	; 0x40
 8008e36:	2101      	movs	r1, #1
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f005 ff59 	bl	800ecf0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	460b      	mov	r3, r1
 8008e52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8008e54:	2300      	movs	r3, #0
 8008e56:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008e58:	2181      	movs	r1, #129	; 0x81
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f005 fe7f 	bl	800eb5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008e66:	2101      	movs	r1, #1
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f005 fe78 	bl	800eb5e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008e76:	2182      	movs	r1, #130	; 0x82
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f005 fe70 	bl	800eb5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00e      	beq.n	8008eb6 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f005 ffb3 	bl	800ee14 <free>
    pdev->pClassData = NULL;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8008eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b086      	sub	sp, #24
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ed0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eda:	2300      	movs	r3, #0
 8008edc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d03a      	beq.n	8008f60 <USBD_CDC_Setup+0xa0>
 8008eea:	2b20      	cmp	r3, #32
 8008eec:	f040 8097 	bne.w	800901e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	88db      	ldrh	r3, [r3, #6]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d029      	beq.n	8008f4c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	b25b      	sxtb	r3, r3
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	da11      	bge.n	8008f26 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	683a      	ldr	r2, [r7, #0]
 8008f0c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8008f0e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008f10:	683a      	ldr	r2, [r7, #0]
 8008f12:	88d2      	ldrh	r2, [r2, #6]
 8008f14:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008f16:	6939      	ldr	r1, [r7, #16]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	88db      	ldrh	r3, [r3, #6]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f001 fa6d 	bl	800a3fe <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8008f24:	e082      	b.n	800902c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	785a      	ldrb	r2, [r3, #1]
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	88db      	ldrh	r3, [r3, #6]
 8008f34:	b2da      	uxtb	r2, r3
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008f3c:	6939      	ldr	r1, [r7, #16]
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	88db      	ldrh	r3, [r3, #6]
 8008f42:	461a      	mov	r2, r3
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f001 fa86 	bl	800a456 <USBD_CtlPrepareRx>
    break;
 8008f4a:	e06f      	b.n	800902c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	683a      	ldr	r2, [r7, #0]
 8008f56:	7850      	ldrb	r0, [r2, #1]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	6839      	ldr	r1, [r7, #0]
 8008f5c:	4798      	blx	r3
    break;
 8008f5e:	e065      	b.n	800902c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	785b      	ldrb	r3, [r3, #1]
 8008f64:	2b0b      	cmp	r3, #11
 8008f66:	d84f      	bhi.n	8009008 <USBD_CDC_Setup+0x148>
 8008f68:	a201      	add	r2, pc, #4	; (adr r2, 8008f70 <USBD_CDC_Setup+0xb0>)
 8008f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6e:	bf00      	nop
 8008f70:	08008fa1 	.word	0x08008fa1
 8008f74:	08009017 	.word	0x08009017
 8008f78:	08009009 	.word	0x08009009
 8008f7c:	08009009 	.word	0x08009009
 8008f80:	08009009 	.word	0x08009009
 8008f84:	08009009 	.word	0x08009009
 8008f88:	08009009 	.word	0x08009009
 8008f8c:	08009009 	.word	0x08009009
 8008f90:	08009009 	.word	0x08009009
 8008f94:	08009009 	.word	0x08009009
 8008f98:	08008fc9 	.word	0x08008fc9
 8008f9c:	08008ff1 	.word	0x08008ff1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fa6:	2b03      	cmp	r3, #3
 8008fa8:	d107      	bne.n	8008fba <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008faa:	f107 030c 	add.w	r3, r7, #12
 8008fae:	2202      	movs	r2, #2
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f001 fa23 	bl	800a3fe <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008fb8:	e030      	b.n	800901c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008fba:	6839      	ldr	r1, [r7, #0]
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f001 f9ad 	bl	800a31c <USBD_CtlError>
        ret = USBD_FAIL;
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	75fb      	strb	r3, [r7, #23]
      break;
 8008fc6:	e029      	b.n	800901c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	d107      	bne.n	8008fe2 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008fd2:	f107 030f 	add.w	r3, r7, #15
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	4619      	mov	r1, r3
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f001 fa0f 	bl	800a3fe <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008fe0:	e01c      	b.n	800901c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008fe2:	6839      	ldr	r1, [r7, #0]
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f001 f999 	bl	800a31c <USBD_CtlError>
        ret = USBD_FAIL;
 8008fea:	2303      	movs	r3, #3
 8008fec:	75fb      	strb	r3, [r7, #23]
      break;
 8008fee:	e015      	b.n	800901c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ff6:	2b03      	cmp	r3, #3
 8008ff8:	d00f      	beq.n	800901a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f001 f98d 	bl	800a31c <USBD_CtlError>
        ret = USBD_FAIL;
 8009002:	2303      	movs	r3, #3
 8009004:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009006:	e008      	b.n	800901a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8009008:	6839      	ldr	r1, [r7, #0]
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f001 f986 	bl	800a31c <USBD_CtlError>
      ret = USBD_FAIL;
 8009010:	2303      	movs	r3, #3
 8009012:	75fb      	strb	r3, [r7, #23]
      break;
 8009014:	e002      	b.n	800901c <USBD_CDC_Setup+0x15c>
      break;
 8009016:	bf00      	nop
 8009018:	e008      	b.n	800902c <USBD_CDC_Setup+0x16c>
      break;
 800901a:	bf00      	nop
    }
    break;
 800901c:	e006      	b.n	800902c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800901e:	6839      	ldr	r1, [r7, #0]
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f001 f97b 	bl	800a31c <USBD_CtlError>
    ret = USBD_FAIL;
 8009026:	2303      	movs	r3, #3
 8009028:	75fb      	strb	r3, [r7, #23]
    break;
 800902a:	bf00      	nop
  }

  return (uint8_t)ret;
 800902c:	7dfb      	ldrb	r3, [r7, #23]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3718      	adds	r7, #24
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop

08009038 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	460b      	mov	r3, r1
 8009042:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800904a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009056:	2303      	movs	r3, #3
 8009058:	e049      	b.n	80090ee <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009060:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009062:	78fa      	ldrb	r2, [r7, #3]
 8009064:	6879      	ldr	r1, [r7, #4]
 8009066:	4613      	mov	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	440b      	add	r3, r1
 8009070:	3318      	adds	r3, #24
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d029      	beq.n	80090cc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009078:	78fa      	ldrb	r2, [r7, #3]
 800907a:	6879      	ldr	r1, [r7, #4]
 800907c:	4613      	mov	r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4413      	add	r3, r2
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	440b      	add	r3, r1
 8009086:	3318      	adds	r3, #24
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	78f9      	ldrb	r1, [r7, #3]
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	460b      	mov	r3, r1
 8009090:	00db      	lsls	r3, r3, #3
 8009092:	1a5b      	subs	r3, r3, r1
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4403      	add	r3, r0
 8009098:	3344      	adds	r3, #68	; 0x44
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	fbb2 f1f3 	udiv	r1, r2, r3
 80090a0:	fb03 f301 	mul.w	r3, r3, r1
 80090a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d110      	bne.n	80090cc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80090aa:	78fa      	ldrb	r2, [r7, #3]
 80090ac:	6879      	ldr	r1, [r7, #4]
 80090ae:	4613      	mov	r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	4413      	add	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	440b      	add	r3, r1
 80090b8:	3318      	adds	r3, #24
 80090ba:	2200      	movs	r2, #0
 80090bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80090be:	78f9      	ldrb	r1, [r7, #3]
 80090c0:	2300      	movs	r3, #0
 80090c2:	2200      	movs	r2, #0
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f005 fdf2 	bl	800ecae <USBD_LL_Transmit>
 80090ca:	e00f      	b.n	80090ec <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	68ba      	ldr	r2, [r7, #8]
 80090de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80090e8:	78fa      	ldrb	r2, [r7, #3]
 80090ea:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b084      	sub	sp, #16
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	460b      	mov	r3, r1
 8009100:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009108:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009110:	2b00      	cmp	r3, #0
 8009112:	d101      	bne.n	8009118 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009114:	2303      	movs	r3, #3
 8009116:	e015      	b.n	8009144 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009118:	78fb      	ldrb	r3, [r7, #3]
 800911a:	4619      	mov	r1, r3
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f005 fe08 	bl	800ed32 <USBD_LL_GetRxDataSize>
 8009122:	4602      	mov	r2, r0
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800913e:	4611      	mov	r1, r2
 8009140:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800915a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d015      	beq.n	8009192 <USBD_CDC_EP0_RxReady+0x46>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800916c:	2bff      	cmp	r3, #255	; 0xff
 800916e:	d010      	beq.n	8009192 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	68fa      	ldr	r2, [r7, #12]
 800917a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800917e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009186:	b292      	uxth	r2, r2
 8009188:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	22ff      	movs	r2, #255	; 0xff
 800918e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8009192:	2300      	movs	r3, #0
}
 8009194:	4618      	mov	r0, r3
 8009196:	3710      	adds	r7, #16
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2243      	movs	r2, #67	; 0x43
 80091a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80091aa:	4b03      	ldr	r3, [pc, #12]	; (80091b8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr
 80091b8:	20000094 	.word	0x20000094

080091bc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2243      	movs	r2, #67	; 0x43
 80091c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80091ca:	4b03      	ldr	r3, [pc, #12]	; (80091d8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr
 80091d8:	20000050 	.word	0x20000050

080091dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2243      	movs	r2, #67	; 0x43
 80091e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80091ea:	4b03      	ldr	r3, [pc, #12]	; (80091f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr
 80091f8:	200000d8 	.word	0x200000d8

080091fc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	220a      	movs	r2, #10
 8009208:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800920a:	4b03      	ldr	r3, [pc, #12]	; (8009218 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800920c:	4618      	mov	r0, r3
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr
 8009218:	2000000c 	.word	0x2000000c

0800921c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d101      	bne.n	8009230 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800922c:	2303      	movs	r3, #3
 800922e:	e004      	b.n	800923a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	370c      	adds	r7, #12
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr

08009246 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009246:	b480      	push	{r7}
 8009248:	b087      	sub	sp, #28
 800924a:	af00      	add	r7, sp, #0
 800924c:	60f8      	str	r0, [r7, #12]
 800924e:	60b9      	str	r1, [r7, #8]
 8009250:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009258:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	371c      	adds	r7, #28
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009288:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	683a      	ldr	r2, [r7, #0]
 800928e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d101      	bne.n	80092be <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80092ba:	2303      	movs	r3, #3
 80092bc:	e016      	b.n	80092ec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	7c1b      	ldrb	r3, [r3, #16]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d109      	bne.n	80092da <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80092cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092d0:	2101      	movs	r1, #1
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f005 fd0c 	bl	800ecf0 <USBD_LL_PrepareReceive>
 80092d8:	e007      	b.n	80092ea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80092e0:	2340      	movs	r3, #64	; 0x40
 80092e2:	2101      	movs	r1, #1
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f005 fd03 	bl	800ecf0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3710      	adds	r7, #16
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b086      	sub	sp, #24
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	4613      	mov	r3, r2
 8009300:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d101      	bne.n	800930c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009308:	2303      	movs	r3, #3
 800930a:	e025      	b.n	8009358 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009312:	2b00      	cmp	r3, #0
 8009314:	d003      	beq.n	800931e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8009324:	2b00      	cmp	r3, #0
 8009326:	d003      	beq.n	8009330 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d003      	beq.n	800933e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2201      	movs	r2, #1
 8009342:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	79fa      	ldrb	r2, [r7, #7]
 800934a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f005 fb79 	bl	800ea44 <USBD_LL_Init>
 8009352:	4603      	mov	r3, r0
 8009354:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009356:	7dfb      	ldrb	r3, [r7, #23]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3718      	adds	r7, #24
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800936a:	2300      	movs	r3, #0
 800936c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d101      	bne.n	8009378 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009374:	2303      	movs	r3, #3
 8009376:	e010      	b.n	800939a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	683a      	ldr	r2, [r7, #0]
 800937c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009388:	f107 020e 	add.w	r2, r7, #14
 800938c:	4610      	mov	r0, r2
 800938e:	4798      	blx	r3
 8009390:	4602      	mov	r2, r0
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b082      	sub	sp, #8
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f005 fb96 	bl	800eadc <USBD_LL_Start>
 80093b0:	4603      	mov	r3, r0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80093ba:	b480      	push	{r7}
 80093bc:	b083      	sub	sp, #12
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	460b      	mov	r3, r1
 80093da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80093dc:	2303      	movs	r3, #3
 80093de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d009      	beq.n	80093fe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	78fa      	ldrb	r2, [r7, #3]
 80093f4:	4611      	mov	r1, r2
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	4798      	blx	r3
 80093fa:	4603      	mov	r3, r0
 80093fc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009400:	4618      	mov	r0, r3
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	460b      	mov	r3, r1
 8009412:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800941a:	2b00      	cmp	r3, #0
 800941c:	d007      	beq.n	800942e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	78fa      	ldrb	r2, [r7, #3]
 8009428:	4611      	mov	r1, r2
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	4798      	blx	r3
  }

  return USBD_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3708      	adds	r7, #8
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	4618      	mov	r0, r3
 800944c:	f000 ff2c 	bl	800a2a8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800945e:	461a      	mov	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800946c:	f003 031f 	and.w	r3, r3, #31
 8009470:	2b01      	cmp	r3, #1
 8009472:	d00e      	beq.n	8009492 <USBD_LL_SetupStage+0x5a>
 8009474:	2b01      	cmp	r3, #1
 8009476:	d302      	bcc.n	800947e <USBD_LL_SetupStage+0x46>
 8009478:	2b02      	cmp	r3, #2
 800947a:	d014      	beq.n	80094a6 <USBD_LL_SetupStage+0x6e>
 800947c:	e01d      	b.n	80094ba <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009484:	4619      	mov	r1, r3
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 fa18 	bl	80098bc <USBD_StdDevReq>
 800948c:	4603      	mov	r3, r0
 800948e:	73fb      	strb	r3, [r7, #15]
      break;
 8009490:	e020      	b.n	80094d4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009498:	4619      	mov	r1, r3
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fa7c 	bl	8009998 <USBD_StdItfReq>
 80094a0:	4603      	mov	r3, r0
 80094a2:	73fb      	strb	r3, [r7, #15]
      break;
 80094a4:	e016      	b.n	80094d4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80094ac:	4619      	mov	r1, r3
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 fab8 	bl	8009a24 <USBD_StdEPReq>
 80094b4:	4603      	mov	r3, r0
 80094b6:	73fb      	strb	r3, [r7, #15]
      break;
 80094b8:	e00c      	b.n	80094d4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80094c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	4619      	mov	r1, r3
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f005 fb67 	bl	800eb9c <USBD_LL_StallEP>
 80094ce:	4603      	mov	r3, r0
 80094d0:	73fb      	strb	r3, [r7, #15]
      break;
 80094d2:	bf00      	nop
  }

  return ret;
 80094d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b086      	sub	sp, #24
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	60f8      	str	r0, [r7, #12]
 80094e6:	460b      	mov	r3, r1
 80094e8:	607a      	str	r2, [r7, #4]
 80094ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80094ec:	7afb      	ldrb	r3, [r7, #11]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d137      	bne.n	8009562 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80094f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009500:	2b03      	cmp	r3, #3
 8009502:	d14a      	bne.n	800959a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	689a      	ldr	r2, [r3, #8]
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	429a      	cmp	r2, r3
 800950e:	d913      	bls.n	8009538 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	689a      	ldr	r2, [r3, #8]
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	1ad2      	subs	r2, r2, r3
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	68da      	ldr	r2, [r3, #12]
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	4293      	cmp	r3, r2
 8009528:	bf28      	it	cs
 800952a:	4613      	movcs	r3, r2
 800952c:	461a      	mov	r2, r3
 800952e:	6879      	ldr	r1, [r7, #4]
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f000 ffad 	bl	800a490 <USBD_CtlContinueRx>
 8009536:	e030      	b.n	800959a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00a      	beq.n	800955a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800954a:	2b03      	cmp	r3, #3
 800954c:	d105      	bne.n	800955a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f000 ffa9 	bl	800a4b2 <USBD_CtlSendStatus>
 8009560:	e01b      	b.n	800959a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d013      	beq.n	8009596 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009574:	2b03      	cmp	r3, #3
 8009576:	d10e      	bne.n	8009596 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800957e:	699b      	ldr	r3, [r3, #24]
 8009580:	7afa      	ldrb	r2, [r7, #11]
 8009582:	4611      	mov	r1, r2
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	4798      	blx	r3
 8009588:	4603      	mov	r3, r0
 800958a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800958c:	7dfb      	ldrb	r3, [r7, #23]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d003      	beq.n	800959a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8009592:	7dfb      	ldrb	r3, [r7, #23]
 8009594:	e002      	b.n	800959c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009596:	2303      	movs	r3, #3
 8009598:	e000      	b.n	800959c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3718      	adds	r7, #24
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b086      	sub	sp, #24
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	460b      	mov	r3, r1
 80095ae:	607a      	str	r2, [r7, #4]
 80095b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80095b2:	7afb      	ldrb	r3, [r7, #11]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d16a      	bne.n	800968e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	3314      	adds	r3, #20
 80095bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d155      	bne.n	8009674 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	689a      	ldr	r2, [r3, #8]
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d914      	bls.n	80095fe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	689a      	ldr	r2, [r3, #8]
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	1ad2      	subs	r2, r2, r3
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	461a      	mov	r2, r3
 80095e8:	6879      	ldr	r1, [r7, #4]
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f000 ff22 	bl	800a434 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095f0:	2300      	movs	r3, #0
 80095f2:	2200      	movs	r2, #0
 80095f4:	2100      	movs	r1, #0
 80095f6:	68f8      	ldr	r0, [r7, #12]
 80095f8:	f005 fb7a 	bl	800ecf0 <USBD_LL_PrepareReceive>
 80095fc:	e03a      	b.n	8009674 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	68da      	ldr	r2, [r3, #12]
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	429a      	cmp	r2, r3
 8009608:	d11c      	bne.n	8009644 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	685a      	ldr	r2, [r3, #4]
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009612:	429a      	cmp	r2, r3
 8009614:	d316      	bcc.n	8009644 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	685a      	ldr	r2, [r3, #4]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009620:	429a      	cmp	r2, r3
 8009622:	d20f      	bcs.n	8009644 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009624:	2200      	movs	r2, #0
 8009626:	2100      	movs	r1, #0
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f000 ff03 	bl	800a434 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009636:	2300      	movs	r3, #0
 8009638:	2200      	movs	r2, #0
 800963a:	2100      	movs	r1, #0
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f005 fb57 	bl	800ecf0 <USBD_LL_PrepareReceive>
 8009642:	e017      	b.n	8009674 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00a      	beq.n	8009666 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009656:	2b03      	cmp	r3, #3
 8009658:	d105      	bne.n	8009666 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009660:	68db      	ldr	r3, [r3, #12]
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009666:	2180      	movs	r1, #128	; 0x80
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f005 fa97 	bl	800eb9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f000 ff32 	bl	800a4d8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800967a:	2b01      	cmp	r3, #1
 800967c:	d123      	bne.n	80096c6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800967e:	68f8      	ldr	r0, [r7, #12]
 8009680:	f7ff fe9b 	bl	80093ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800968c:	e01b      	b.n	80096c6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009694:	695b      	ldr	r3, [r3, #20]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d013      	beq.n	80096c2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80096a0:	2b03      	cmp	r3, #3
 80096a2:	d10e      	bne.n	80096c2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096aa:	695b      	ldr	r3, [r3, #20]
 80096ac:	7afa      	ldrb	r2, [r7, #11]
 80096ae:	4611      	mov	r1, r2
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	4798      	blx	r3
 80096b4:	4603      	mov	r3, r0
 80096b6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80096b8:	7dfb      	ldrb	r3, [r7, #23]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d003      	beq.n	80096c6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80096be:	7dfb      	ldrb	r3, [r7, #23]
 80096c0:	e002      	b.n	80096c8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80096c2:	2303      	movs	r3, #3
 80096c4:	e000      	b.n	80096c8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3718      	adds	r7, #24
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d009      	beq.n	8009714 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	6852      	ldr	r2, [r2, #4]
 800970c:	b2d2      	uxtb	r2, r2
 800970e:	4611      	mov	r1, r2
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009714:	2340      	movs	r3, #64	; 0x40
 8009716:	2200      	movs	r2, #0
 8009718:	2100      	movs	r1, #0
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f005 f9f9 	bl	800eb12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2240      	movs	r2, #64	; 0x40
 800972c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009730:	2340      	movs	r3, #64	; 0x40
 8009732:	2200      	movs	r2, #0
 8009734:	2180      	movs	r1, #128	; 0x80
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f005 f9eb 	bl	800eb12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2240      	movs	r2, #64	; 0x40
 8009746:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	3708      	adds	r7, #8
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009752:	b480      	push	{r7}
 8009754:	b083      	sub	sp, #12
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
 800975a:	460b      	mov	r3, r1
 800975c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	78fa      	ldrb	r2, [r7, #3]
 8009762:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	370c      	adds	r7, #12
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr

08009772 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009772:	b480      	push	{r7}
 8009774:	b083      	sub	sp, #12
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2204      	movs	r2, #4
 800978a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097aa:	2b04      	cmp	r3, #4
 80097ac:	d105      	bne.n	80097ba <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097d6:	2b03      	cmp	r3, #3
 80097d8:	d10b      	bne.n	80097f2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097e0:	69db      	ldr	r3, [r3, #28]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d005      	beq.n	80097f2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097ec:	69db      	ldr	r3, [r3, #28]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	460b      	mov	r3, r1
 8009806:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	370c      	adds	r7, #12
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr

08009816 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009816:	b480      	push	{r7}
 8009818:	b083      	sub	sp, #12
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
 800981e:	460b      	mov	r3, r1
 8009820:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	370c      	adds	r7, #12
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b082      	sub	sp, #8
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2201      	movs	r2, #1
 8009852:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800985c:	2b00      	cmp	r3, #0
 800985e:	d009      	beq.n	8009874 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	6852      	ldr	r2, [r2, #4]
 800986c:	b2d2      	uxtb	r2, r2
 800986e:	4611      	mov	r1, r2
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	4798      	blx	r3
  }

  return USBD_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800987e:	b480      	push	{r7}
 8009880:	b087      	sub	sp, #28
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	3301      	adds	r3, #1
 8009894:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800989c:	8a3b      	ldrh	r3, [r7, #16]
 800989e:	021b      	lsls	r3, r3, #8
 80098a0:	b21a      	sxth	r2, r3
 80098a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	b21b      	sxth	r3, r3
 80098aa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80098ac:	89fb      	ldrh	r3, [r7, #14]
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	371c      	adds	r7, #28
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
	...

080098bc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098c6:	2300      	movs	r3, #0
 80098c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098d2:	2b20      	cmp	r3, #32
 80098d4:	d004      	beq.n	80098e0 <USBD_StdDevReq+0x24>
 80098d6:	2b40      	cmp	r3, #64	; 0x40
 80098d8:	d002      	beq.n	80098e0 <USBD_StdDevReq+0x24>
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00a      	beq.n	80098f4 <USBD_StdDevReq+0x38>
 80098de:	e050      	b.n	8009982 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	6839      	ldr	r1, [r7, #0]
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	4798      	blx	r3
 80098ee:	4603      	mov	r3, r0
 80098f0:	73fb      	strb	r3, [r7, #15]
    break;
 80098f2:	e04b      	b.n	800998c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	785b      	ldrb	r3, [r3, #1]
 80098f8:	2b09      	cmp	r3, #9
 80098fa:	d83c      	bhi.n	8009976 <USBD_StdDevReq+0xba>
 80098fc:	a201      	add	r2, pc, #4	; (adr r2, 8009904 <USBD_StdDevReq+0x48>)
 80098fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009902:	bf00      	nop
 8009904:	08009959 	.word	0x08009959
 8009908:	0800996d 	.word	0x0800996d
 800990c:	08009977 	.word	0x08009977
 8009910:	08009963 	.word	0x08009963
 8009914:	08009977 	.word	0x08009977
 8009918:	08009937 	.word	0x08009937
 800991c:	0800992d 	.word	0x0800992d
 8009920:	08009977 	.word	0x08009977
 8009924:	0800994f 	.word	0x0800994f
 8009928:	08009941 	.word	0x08009941
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800992c:	6839      	ldr	r1, [r7, #0]
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 f9ce 	bl	8009cd0 <USBD_GetDescriptor>
      break;
 8009934:	e024      	b.n	8009980 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8009936:	6839      	ldr	r1, [r7, #0]
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fb33 	bl	8009fa4 <USBD_SetAddress>
      break;
 800993e:	e01f      	b.n	8009980 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8009940:	6839      	ldr	r1, [r7, #0]
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fb70 	bl	800a028 <USBD_SetConfig>
 8009948:	4603      	mov	r3, r0
 800994a:	73fb      	strb	r3, [r7, #15]
      break;
 800994c:	e018      	b.n	8009980 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800994e:	6839      	ldr	r1, [r7, #0]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 fc0d 	bl	800a170 <USBD_GetConfig>
      break;
 8009956:	e013      	b.n	8009980 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8009958:	6839      	ldr	r1, [r7, #0]
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fc3c 	bl	800a1d8 <USBD_GetStatus>
      break;
 8009960:	e00e      	b.n	8009980 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8009962:	6839      	ldr	r1, [r7, #0]
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fc6a 	bl	800a23e <USBD_SetFeature>
      break;
 800996a:	e009      	b.n	8009980 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800996c:	6839      	ldr	r1, [r7, #0]
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 fc79 	bl	800a266 <USBD_ClrFeature>
      break;
 8009974:	e004      	b.n	8009980 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fccf 	bl	800a31c <USBD_CtlError>
      break;
 800997e:	bf00      	nop
    }
    break;
 8009980:	e004      	b.n	800998c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8009982:	6839      	ldr	r1, [r7, #0]
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 fcc9 	bl	800a31c <USBD_CtlError>
    break;
 800998a:	bf00      	nop
  }

  return ret;
 800998c:	7bfb      	ldrb	r3, [r7, #15]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop

08009998 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099a2:	2300      	movs	r3, #0
 80099a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099ae:	2b20      	cmp	r3, #32
 80099b0:	d003      	beq.n	80099ba <USBD_StdItfReq+0x22>
 80099b2:	2b40      	cmp	r3, #64	; 0x40
 80099b4:	d001      	beq.n	80099ba <USBD_StdItfReq+0x22>
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d12a      	bne.n	8009a10 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099c0:	3b01      	subs	r3, #1
 80099c2:	2b02      	cmp	r3, #2
 80099c4:	d81d      	bhi.n	8009a02 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	889b      	ldrh	r3, [r3, #4]
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d813      	bhi.n	80099f8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	6839      	ldr	r1, [r7, #0]
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	4798      	blx	r3
 80099de:	4603      	mov	r3, r0
 80099e0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	88db      	ldrh	r3, [r3, #6]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d110      	bne.n	8009a0c <USBD_StdItfReq+0x74>
 80099ea:	7bfb      	ldrb	r3, [r7, #15]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d10d      	bne.n	8009a0c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fd5e 	bl	800a4b2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80099f6:	e009      	b.n	8009a0c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80099f8:	6839      	ldr	r1, [r7, #0]
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fc8e 	bl	800a31c <USBD_CtlError>
      break;
 8009a00:	e004      	b.n	8009a0c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8009a02:	6839      	ldr	r1, [r7, #0]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fc89 	bl	800a31c <USBD_CtlError>
      break;
 8009a0a:	e000      	b.n	8009a0e <USBD_StdItfReq+0x76>
      break;
 8009a0c:	bf00      	nop
    }
    break;
 8009a0e:	e004      	b.n	8009a1a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8009a10:	6839      	ldr	r1, [r7, #0]
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 fc82 	bl	800a31c <USBD_CtlError>
    break;
 8009a18:	bf00      	nop
  }

  return ret;
 8009a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	889b      	ldrh	r3, [r3, #4]
 8009a36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a40:	2b20      	cmp	r3, #32
 8009a42:	d004      	beq.n	8009a4e <USBD_StdEPReq+0x2a>
 8009a44:	2b40      	cmp	r3, #64	; 0x40
 8009a46:	d002      	beq.n	8009a4e <USBD_StdEPReq+0x2a>
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00a      	beq.n	8009a62 <USBD_StdEPReq+0x3e>
 8009a4c:	e135      	b.n	8009cba <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	6839      	ldr	r1, [r7, #0]
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	4798      	blx	r3
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a60:	e130      	b.n	8009cc4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	785b      	ldrb	r3, [r3, #1]
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d03e      	beq.n	8009ae8 <USBD_StdEPReq+0xc4>
 8009a6a:	2b03      	cmp	r3, #3
 8009a6c:	d002      	beq.n	8009a74 <USBD_StdEPReq+0x50>
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d077      	beq.n	8009b62 <USBD_StdEPReq+0x13e>
 8009a72:	e11c      	b.n	8009cae <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a7a:	2b02      	cmp	r3, #2
 8009a7c:	d002      	beq.n	8009a84 <USBD_StdEPReq+0x60>
 8009a7e:	2b03      	cmp	r3, #3
 8009a80:	d015      	beq.n	8009aae <USBD_StdEPReq+0x8a>
 8009a82:	e02b      	b.n	8009adc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a84:	7bbb      	ldrb	r3, [r7, #14]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00c      	beq.n	8009aa4 <USBD_StdEPReq+0x80>
 8009a8a:	7bbb      	ldrb	r3, [r7, #14]
 8009a8c:	2b80      	cmp	r3, #128	; 0x80
 8009a8e:	d009      	beq.n	8009aa4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a90:	7bbb      	ldrb	r3, [r7, #14]
 8009a92:	4619      	mov	r1, r3
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f005 f881 	bl	800eb9c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a9a:	2180      	movs	r1, #128	; 0x80
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f005 f87d 	bl	800eb9c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009aa2:	e020      	b.n	8009ae6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8009aa4:	6839      	ldr	r1, [r7, #0]
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 fc38 	bl	800a31c <USBD_CtlError>
        break;
 8009aac:	e01b      	b.n	8009ae6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	885b      	ldrh	r3, [r3, #2]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d10e      	bne.n	8009ad4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ab6:	7bbb      	ldrb	r3, [r7, #14]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00b      	beq.n	8009ad4 <USBD_StdEPReq+0xb0>
 8009abc:	7bbb      	ldrb	r3, [r7, #14]
 8009abe:	2b80      	cmp	r3, #128	; 0x80
 8009ac0:	d008      	beq.n	8009ad4 <USBD_StdEPReq+0xb0>
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	88db      	ldrh	r3, [r3, #6]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d104      	bne.n	8009ad4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8009aca:	7bbb      	ldrb	r3, [r7, #14]
 8009acc:	4619      	mov	r1, r3
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f005 f864 	bl	800eb9c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 fcec 	bl	800a4b2 <USBD_CtlSendStatus>

        break;
 8009ada:	e004      	b.n	8009ae6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8009adc:	6839      	ldr	r1, [r7, #0]
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fc1c 	bl	800a31c <USBD_CtlError>
        break;
 8009ae4:	bf00      	nop
      }
      break;
 8009ae6:	e0e7      	b.n	8009cb8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aee:	2b02      	cmp	r3, #2
 8009af0:	d002      	beq.n	8009af8 <USBD_StdEPReq+0xd4>
 8009af2:	2b03      	cmp	r3, #3
 8009af4:	d015      	beq.n	8009b22 <USBD_StdEPReq+0xfe>
 8009af6:	e02d      	b.n	8009b54 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009af8:	7bbb      	ldrb	r3, [r7, #14]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00c      	beq.n	8009b18 <USBD_StdEPReq+0xf4>
 8009afe:	7bbb      	ldrb	r3, [r7, #14]
 8009b00:	2b80      	cmp	r3, #128	; 0x80
 8009b02:	d009      	beq.n	8009b18 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b04:	7bbb      	ldrb	r3, [r7, #14]
 8009b06:	4619      	mov	r1, r3
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f005 f847 	bl	800eb9c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b0e:	2180      	movs	r1, #128	; 0x80
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f005 f843 	bl	800eb9c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009b16:	e023      	b.n	8009b60 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8009b18:	6839      	ldr	r1, [r7, #0]
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 fbfe 	bl	800a31c <USBD_CtlError>
        break;
 8009b20:	e01e      	b.n	8009b60 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	885b      	ldrh	r3, [r3, #2]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d119      	bne.n	8009b5e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009b2a:	7bbb      	ldrb	r3, [r7, #14]
 8009b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d004      	beq.n	8009b3e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009b34:	7bbb      	ldrb	r3, [r7, #14]
 8009b36:	4619      	mov	r1, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f005 f84e 	bl	800ebda <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fcb7 	bl	800a4b2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	6839      	ldr	r1, [r7, #0]
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	4798      	blx	r3
        }
        break;
 8009b52:	e004      	b.n	8009b5e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fbe0 	bl	800a31c <USBD_CtlError>
        break;
 8009b5c:	e000      	b.n	8009b60 <USBD_StdEPReq+0x13c>
        break;
 8009b5e:	bf00      	nop
      }
      break;
 8009b60:	e0aa      	b.n	8009cb8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	d002      	beq.n	8009b72 <USBD_StdEPReq+0x14e>
 8009b6c:	2b03      	cmp	r3, #3
 8009b6e:	d032      	beq.n	8009bd6 <USBD_StdEPReq+0x1b2>
 8009b70:	e097      	b.n	8009ca2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b72:	7bbb      	ldrb	r3, [r7, #14]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d007      	beq.n	8009b88 <USBD_StdEPReq+0x164>
 8009b78:	7bbb      	ldrb	r3, [r7, #14]
 8009b7a:	2b80      	cmp	r3, #128	; 0x80
 8009b7c:	d004      	beq.n	8009b88 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fbcb 	bl	800a31c <USBD_CtlError>
          break;
 8009b86:	e091      	b.n	8009cac <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	da0b      	bge.n	8009ba8 <USBD_StdEPReq+0x184>
 8009b90:	7bbb      	ldrb	r3, [r7, #14]
 8009b92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b96:	4613      	mov	r3, r2
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	4413      	add	r3, r2
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	3310      	adds	r3, #16
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	3304      	adds	r3, #4
 8009ba6:	e00b      	b.n	8009bc0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009ba8:	7bbb      	ldrb	r3, [r7, #14]
 8009baa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bae:	4613      	mov	r3, r2
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	4413      	add	r3, r2
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	3304      	adds	r3, #4
 8009bc0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	2202      	movs	r2, #2
 8009bcc:	4619      	mov	r1, r3
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 fc15 	bl	800a3fe <USBD_CtlSendData>
        break;
 8009bd4:	e06a      	b.n	8009cac <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8009bd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	da11      	bge.n	8009c02 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009bde:	7bbb      	ldrb	r3, [r7, #14]
 8009be0:	f003 020f 	and.w	r2, r3, #15
 8009be4:	6879      	ldr	r1, [r7, #4]
 8009be6:	4613      	mov	r3, r2
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	4413      	add	r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	440b      	add	r3, r1
 8009bf0:	3324      	adds	r3, #36	; 0x24
 8009bf2:	881b      	ldrh	r3, [r3, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d117      	bne.n	8009c28 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8009bf8:	6839      	ldr	r1, [r7, #0]
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fb8e 	bl	800a31c <USBD_CtlError>
            break;
 8009c00:	e054      	b.n	8009cac <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c02:	7bbb      	ldrb	r3, [r7, #14]
 8009c04:	f003 020f 	and.w	r2, r3, #15
 8009c08:	6879      	ldr	r1, [r7, #4]
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4413      	add	r3, r2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	440b      	add	r3, r1
 8009c14:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c18:	881b      	ldrh	r3, [r3, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d104      	bne.n	8009c28 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8009c1e:	6839      	ldr	r1, [r7, #0]
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 fb7b 	bl	800a31c <USBD_CtlError>
            break;
 8009c26:	e041      	b.n	8009cac <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	da0b      	bge.n	8009c48 <USBD_StdEPReq+0x224>
 8009c30:	7bbb      	ldrb	r3, [r7, #14]
 8009c32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c36:	4613      	mov	r3, r2
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	4413      	add	r3, r2
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	3310      	adds	r3, #16
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	4413      	add	r3, r2
 8009c44:	3304      	adds	r3, #4
 8009c46:	e00b      	b.n	8009c60 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009c48:	7bbb      	ldrb	r3, [r7, #14]
 8009c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c4e:	4613      	mov	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4413      	add	r3, r2
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	3304      	adds	r3, #4
 8009c60:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c62:	7bbb      	ldrb	r3, [r7, #14]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d002      	beq.n	8009c6e <USBD_StdEPReq+0x24a>
 8009c68:	7bbb      	ldrb	r3, [r7, #14]
 8009c6a:	2b80      	cmp	r3, #128	; 0x80
 8009c6c:	d103      	bne.n	8009c76 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	2200      	movs	r2, #0
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	e00e      	b.n	8009c94 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009c76:	7bbb      	ldrb	r3, [r7, #14]
 8009c78:	4619      	mov	r1, r3
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f004 ffcc 	bl	800ec18 <USBD_LL_IsStallEP>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d003      	beq.n	8009c8e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	2201      	movs	r2, #1
 8009c8a:	601a      	str	r2, [r3, #0]
 8009c8c:	e002      	b.n	8009c94 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	2200      	movs	r2, #0
 8009c92:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	2202      	movs	r2, #2
 8009c98:	4619      	mov	r1, r3
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 fbaf 	bl	800a3fe <USBD_CtlSendData>
          break;
 8009ca0:	e004      	b.n	8009cac <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8009ca2:	6839      	ldr	r1, [r7, #0]
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 fb39 	bl	800a31c <USBD_CtlError>
        break;
 8009caa:	bf00      	nop
      }
      break;
 8009cac:	e004      	b.n	8009cb8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8009cae:	6839      	ldr	r1, [r7, #0]
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 fb33 	bl	800a31c <USBD_CtlError>
      break;
 8009cb6:	bf00      	nop
    }
    break;
 8009cb8:	e004      	b.n	8009cc4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fb2d 	bl	800a31c <USBD_CtlError>
    break;
 8009cc2:	bf00      	nop
  }

  return ret;
 8009cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
	...

08009cd0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	885b      	ldrh	r3, [r3, #2]
 8009cea:	0a1b      	lsrs	r3, r3, #8
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	2b06      	cmp	r3, #6
 8009cf2:	f200 8128 	bhi.w	8009f46 <USBD_GetDescriptor+0x276>
 8009cf6:	a201      	add	r2, pc, #4	; (adr r2, 8009cfc <USBD_GetDescriptor+0x2c>)
 8009cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cfc:	08009d19 	.word	0x08009d19
 8009d00:	08009d31 	.word	0x08009d31
 8009d04:	08009d71 	.word	0x08009d71
 8009d08:	08009f47 	.word	0x08009f47
 8009d0c:	08009f47 	.word	0x08009f47
 8009d10:	08009ee7 	.word	0x08009ee7
 8009d14:	08009f13 	.word	0x08009f13
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	7c12      	ldrb	r2, [r2, #16]
 8009d24:	f107 0108 	add.w	r1, r7, #8
 8009d28:	4610      	mov	r0, r2
 8009d2a:	4798      	blx	r3
 8009d2c:	60f8      	str	r0, [r7, #12]
    break;
 8009d2e:	e112      	b.n	8009f56 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	7c1b      	ldrb	r3, [r3, #16]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d10d      	bne.n	8009d54 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d40:	f107 0208 	add.w	r2, r7, #8
 8009d44:	4610      	mov	r0, r2
 8009d46:	4798      	blx	r3
 8009d48:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	2202      	movs	r2, #2
 8009d50:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009d52:	e100      	b.n	8009f56 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d5c:	f107 0208 	add.w	r2, r7, #8
 8009d60:	4610      	mov	r0, r2
 8009d62:	4798      	blx	r3
 8009d64:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	2202      	movs	r2, #2
 8009d6c:	701a      	strb	r2, [r3, #0]
    break;
 8009d6e:	e0f2      	b.n	8009f56 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	885b      	ldrh	r3, [r3, #2]
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	2b05      	cmp	r3, #5
 8009d78:	f200 80ac 	bhi.w	8009ed4 <USBD_GetDescriptor+0x204>
 8009d7c:	a201      	add	r2, pc, #4	; (adr r2, 8009d84 <USBD_GetDescriptor+0xb4>)
 8009d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d82:	bf00      	nop
 8009d84:	08009d9d 	.word	0x08009d9d
 8009d88:	08009dd1 	.word	0x08009dd1
 8009d8c:	08009e05 	.word	0x08009e05
 8009d90:	08009e39 	.word	0x08009e39
 8009d94:	08009e6d 	.word	0x08009e6d
 8009d98:	08009ea1 	.word	0x08009ea1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00b      	beq.n	8009dc0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	7c12      	ldrb	r2, [r2, #16]
 8009db4:	f107 0108 	add.w	r1, r7, #8
 8009db8:	4610      	mov	r0, r2
 8009dba:	4798      	blx	r3
 8009dbc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dbe:	e091      	b.n	8009ee4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009dc0:	6839      	ldr	r1, [r7, #0]
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 faaa 	bl	800a31c <USBD_CtlError>
        err++;
 8009dc8:	7afb      	ldrb	r3, [r7, #11]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	72fb      	strb	r3, [r7, #11]
      break;
 8009dce:	e089      	b.n	8009ee4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d00b      	beq.n	8009df4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	7c12      	ldrb	r2, [r2, #16]
 8009de8:	f107 0108 	add.w	r1, r7, #8
 8009dec:	4610      	mov	r0, r2
 8009dee:	4798      	blx	r3
 8009df0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009df2:	e077      	b.n	8009ee4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009df4:	6839      	ldr	r1, [r7, #0]
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 fa90 	bl	800a31c <USBD_CtlError>
        err++;
 8009dfc:	7afb      	ldrb	r3, [r7, #11]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	72fb      	strb	r3, [r7, #11]
      break;
 8009e02:	e06f      	b.n	8009ee4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00b      	beq.n	8009e28 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	7c12      	ldrb	r2, [r2, #16]
 8009e1c:	f107 0108 	add.w	r1, r7, #8
 8009e20:	4610      	mov	r0, r2
 8009e22:	4798      	blx	r3
 8009e24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e26:	e05d      	b.n	8009ee4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009e28:	6839      	ldr	r1, [r7, #0]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fa76 	bl	800a31c <USBD_CtlError>
        err++;
 8009e30:	7afb      	ldrb	r3, [r7, #11]
 8009e32:	3301      	adds	r3, #1
 8009e34:	72fb      	strb	r3, [r7, #11]
      break;
 8009e36:	e055      	b.n	8009ee4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e3e:	691b      	ldr	r3, [r3, #16]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00b      	beq.n	8009e5c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	7c12      	ldrb	r2, [r2, #16]
 8009e50:	f107 0108 	add.w	r1, r7, #8
 8009e54:	4610      	mov	r0, r2
 8009e56:	4798      	blx	r3
 8009e58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e5a:	e043      	b.n	8009ee4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009e5c:	6839      	ldr	r1, [r7, #0]
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fa5c 	bl	800a31c <USBD_CtlError>
        err++;
 8009e64:	7afb      	ldrb	r3, [r7, #11]
 8009e66:	3301      	adds	r3, #1
 8009e68:	72fb      	strb	r3, [r7, #11]
      break;
 8009e6a:	e03b      	b.n	8009ee4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e72:	695b      	ldr	r3, [r3, #20]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00b      	beq.n	8009e90 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e7e:	695b      	ldr	r3, [r3, #20]
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	7c12      	ldrb	r2, [r2, #16]
 8009e84:	f107 0108 	add.w	r1, r7, #8
 8009e88:	4610      	mov	r0, r2
 8009e8a:	4798      	blx	r3
 8009e8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e8e:	e029      	b.n	8009ee4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009e90:	6839      	ldr	r1, [r7, #0]
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 fa42 	bl	800a31c <USBD_CtlError>
        err++;
 8009e98:	7afb      	ldrb	r3, [r7, #11]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	72fb      	strb	r3, [r7, #11]
      break;
 8009e9e:	e021      	b.n	8009ee4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ea6:	699b      	ldr	r3, [r3, #24]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00b      	beq.n	8009ec4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eb2:	699b      	ldr	r3, [r3, #24]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	7c12      	ldrb	r2, [r2, #16]
 8009eb8:	f107 0108 	add.w	r1, r7, #8
 8009ebc:	4610      	mov	r0, r2
 8009ebe:	4798      	blx	r3
 8009ec0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ec2:	e00f      	b.n	8009ee4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009ec4:	6839      	ldr	r1, [r7, #0]
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fa28 	bl	800a31c <USBD_CtlError>
        err++;
 8009ecc:	7afb      	ldrb	r3, [r7, #11]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	72fb      	strb	r3, [r7, #11]
      break;
 8009ed2:	e007      	b.n	8009ee4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8009ed4:	6839      	ldr	r1, [r7, #0]
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 fa20 	bl	800a31c <USBD_CtlError>
      err++;
 8009edc:	7afb      	ldrb	r3, [r7, #11]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8009ee2:	bf00      	nop
    }
    break;
 8009ee4:	e037      	b.n	8009f56 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	7c1b      	ldrb	r3, [r3, #16]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d109      	bne.n	8009f02 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef6:	f107 0208 	add.w	r2, r7, #8
 8009efa:	4610      	mov	r0, r2
 8009efc:	4798      	blx	r3
 8009efe:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009f00:	e029      	b.n	8009f56 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009f02:	6839      	ldr	r1, [r7, #0]
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 fa09 	bl	800a31c <USBD_CtlError>
      err++;
 8009f0a:	7afb      	ldrb	r3, [r7, #11]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	72fb      	strb	r3, [r7, #11]
    break;
 8009f10:	e021      	b.n	8009f56 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	7c1b      	ldrb	r3, [r3, #16]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d10d      	bne.n	8009f36 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f22:	f107 0208 	add.w	r2, r7, #8
 8009f26:	4610      	mov	r0, r2
 8009f28:	4798      	blx	r3
 8009f2a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	2207      	movs	r2, #7
 8009f32:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009f34:	e00f      	b.n	8009f56 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009f36:	6839      	ldr	r1, [r7, #0]
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 f9ef 	bl	800a31c <USBD_CtlError>
      err++;
 8009f3e:	7afb      	ldrb	r3, [r7, #11]
 8009f40:	3301      	adds	r3, #1
 8009f42:	72fb      	strb	r3, [r7, #11]
    break;
 8009f44:	e007      	b.n	8009f56 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8009f46:	6839      	ldr	r1, [r7, #0]
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 f9e7 	bl	800a31c <USBD_CtlError>
    err++;
 8009f4e:	7afb      	ldrb	r3, [r7, #11]
 8009f50:	3301      	adds	r3, #1
 8009f52:	72fb      	strb	r3, [r7, #11]
    break;
 8009f54:	bf00      	nop
  }

  if (err != 0U)
 8009f56:	7afb      	ldrb	r3, [r7, #11]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d11e      	bne.n	8009f9a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	88db      	ldrh	r3, [r3, #6]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d016      	beq.n	8009f92 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8009f64:	893b      	ldrh	r3, [r7, #8]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00e      	beq.n	8009f88 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	88da      	ldrh	r2, [r3, #6]
 8009f6e:	893b      	ldrh	r3, [r7, #8]
 8009f70:	4293      	cmp	r3, r2
 8009f72:	bf28      	it	cs
 8009f74:	4613      	movcs	r3, r2
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8009f7a:	893b      	ldrh	r3, [r7, #8]
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	68f9      	ldr	r1, [r7, #12]
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 fa3c 	bl	800a3fe <USBD_CtlSendData>
 8009f86:	e009      	b.n	8009f9c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8009f88:	6839      	ldr	r1, [r7, #0]
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f9c6 	bl	800a31c <USBD_CtlError>
 8009f90:	e004      	b.n	8009f9c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fa8d 	bl	800a4b2 <USBD_CtlSendStatus>
 8009f98:	e000      	b.n	8009f9c <USBD_GetDescriptor+0x2cc>
    return;
 8009f9a:	bf00      	nop
    }
  }
}
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop

08009fa4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	889b      	ldrh	r3, [r3, #4]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d130      	bne.n	800a018 <USBD_SetAddress+0x74>
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	88db      	ldrh	r3, [r3, #6]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d12c      	bne.n	800a018 <USBD_SetAddress+0x74>
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	885b      	ldrh	r3, [r3, #2]
 8009fc2:	2b7f      	cmp	r3, #127	; 0x7f
 8009fc4:	d828      	bhi.n	800a018 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	885b      	ldrh	r3, [r3, #2]
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fd8:	2b03      	cmp	r3, #3
 8009fda:	d104      	bne.n	8009fe6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009fdc:	6839      	ldr	r1, [r7, #0]
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 f99c 	bl	800a31c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fe4:	e01c      	b.n	800a020 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	7bfa      	ldrb	r2, [r7, #15]
 8009fea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009fee:	7bfb      	ldrb	r3, [r7, #15]
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f004 fe3c 	bl	800ec70 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 fa5a 	bl	800a4b2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ffe:	7bfb      	ldrb	r3, [r7, #15]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d004      	beq.n	800a00e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2202      	movs	r2, #2
 800a008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a00c:	e008      	b.n	800a020 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2201      	movs	r2, #1
 800a012:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a016:	e003      	b.n	800a020 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a018:	6839      	ldr	r1, [r7, #0]
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f97e 	bl	800a31c <USBD_CtlError>
  }
}
 800a020:	bf00      	nop
 800a022:	3710      	adds	r7, #16
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a032:	2300      	movs	r3, #0
 800a034:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	885b      	ldrh	r3, [r3, #2]
 800a03a:	b2da      	uxtb	r2, r3
 800a03c:	4b4b      	ldr	r3, [pc, #300]	; (800a16c <USBD_SetConfig+0x144>)
 800a03e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a040:	4b4a      	ldr	r3, [pc, #296]	; (800a16c <USBD_SetConfig+0x144>)
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	2b01      	cmp	r3, #1
 800a046:	d905      	bls.n	800a054 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a048:	6839      	ldr	r1, [r7, #0]
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 f966 	bl	800a31c <USBD_CtlError>
    return USBD_FAIL;
 800a050:	2303      	movs	r3, #3
 800a052:	e087      	b.n	800a164 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	d002      	beq.n	800a064 <USBD_SetConfig+0x3c>
 800a05e:	2b03      	cmp	r3, #3
 800a060:	d025      	beq.n	800a0ae <USBD_SetConfig+0x86>
 800a062:	e071      	b.n	800a148 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800a064:	4b41      	ldr	r3, [pc, #260]	; (800a16c <USBD_SetConfig+0x144>)
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d01c      	beq.n	800a0a6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800a06c:	4b3f      	ldr	r3, [pc, #252]	; (800a16c <USBD_SetConfig+0x144>)
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	461a      	mov	r2, r3
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800a076:	4b3d      	ldr	r3, [pc, #244]	; (800a16c <USBD_SetConfig+0x144>)
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	4619      	mov	r1, r3
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f7ff f9a7 	bl	80093d0 <USBD_SetClassConfig>
 800a082:	4603      	mov	r3, r0
 800a084:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800a086:	7bfb      	ldrb	r3, [r7, #15]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d004      	beq.n	800a096 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800a08c:	6839      	ldr	r1, [r7, #0]
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 f944 	bl	800a31c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800a094:	e065      	b.n	800a162 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 fa0b 	bl	800a4b2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2203      	movs	r2, #3
 800a0a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800a0a4:	e05d      	b.n	800a162 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fa03 	bl	800a4b2 <USBD_CtlSendStatus>
    break;
 800a0ac:	e059      	b.n	800a162 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800a0ae:	4b2f      	ldr	r3, [pc, #188]	; (800a16c <USBD_SetConfig+0x144>)
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d112      	bne.n	800a0dc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2202      	movs	r2, #2
 800a0ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800a0be:	4b2b      	ldr	r3, [pc, #172]	; (800a16c <USBD_SetConfig+0x144>)
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a0c8:	4b28      	ldr	r3, [pc, #160]	; (800a16c <USBD_SetConfig+0x144>)
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f7ff f99a 	bl	8009408 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 f9ec 	bl	800a4b2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800a0da:	e042      	b.n	800a162 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800a0dc:	4b23      	ldr	r3, [pc, #140]	; (800a16c <USBD_SetConfig+0x144>)
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d02a      	beq.n	800a140 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f7ff f988 	bl	8009408 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800a0f8:	4b1c      	ldr	r3, [pc, #112]	; (800a16c <USBD_SetConfig+0x144>)
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800a102:	4b1a      	ldr	r3, [pc, #104]	; (800a16c <USBD_SetConfig+0x144>)
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	4619      	mov	r1, r3
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f7ff f961 	bl	80093d0 <USBD_SetClassConfig>
 800a10e:	4603      	mov	r3, r0
 800a110:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800a112:	7bfb      	ldrb	r3, [r7, #15]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d00f      	beq.n	800a138 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800a118:	6839      	ldr	r1, [r7, #0]
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 f8fe 	bl	800a31c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	b2db      	uxtb	r3, r3
 800a126:	4619      	mov	r1, r3
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f7ff f96d 	bl	8009408 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2202      	movs	r2, #2
 800a132:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800a136:	e014      	b.n	800a162 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 f9ba 	bl	800a4b2 <USBD_CtlSendStatus>
    break;
 800a13e:	e010      	b.n	800a162 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 f9b6 	bl	800a4b2 <USBD_CtlSendStatus>
    break;
 800a146:	e00c      	b.n	800a162 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800a148:	6839      	ldr	r1, [r7, #0]
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 f8e6 	bl	800a31c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a150:	4b06      	ldr	r3, [pc, #24]	; (800a16c <USBD_SetConfig+0x144>)
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	4619      	mov	r1, r3
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f7ff f956 	bl	8009408 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800a15c:	2303      	movs	r3, #3
 800a15e:	73fb      	strb	r3, [r7, #15]
    break;
 800a160:	bf00      	nop
  }

  return ret;
 800a162:	7bfb      	ldrb	r3, [r7, #15]
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	200003b8 	.word	0x200003b8

0800a170 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	88db      	ldrh	r3, [r3, #6]
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d004      	beq.n	800a18c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a182:	6839      	ldr	r1, [r7, #0]
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f8c9 	bl	800a31c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800a18a:	e021      	b.n	800a1d0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a192:	2b01      	cmp	r3, #1
 800a194:	db17      	blt.n	800a1c6 <USBD_GetConfig+0x56>
 800a196:	2b02      	cmp	r3, #2
 800a198:	dd02      	ble.n	800a1a0 <USBD_GetConfig+0x30>
 800a19a:	2b03      	cmp	r3, #3
 800a19c:	d00b      	beq.n	800a1b6 <USBD_GetConfig+0x46>
 800a19e:	e012      	b.n	800a1c6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	3308      	adds	r3, #8
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 f925 	bl	800a3fe <USBD_CtlSendData>
      break;
 800a1b4:	e00c      	b.n	800a1d0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	3304      	adds	r3, #4
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	4619      	mov	r1, r3
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 f91d 	bl	800a3fe <USBD_CtlSendData>
      break;
 800a1c4:	e004      	b.n	800a1d0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800a1c6:	6839      	ldr	r1, [r7, #0]
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 f8a7 	bl	800a31c <USBD_CtlError>
      break;
 800a1ce:	bf00      	nop
}
 800a1d0:	bf00      	nop
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1e8:	3b01      	subs	r3, #1
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	d81e      	bhi.n	800a22c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	88db      	ldrh	r3, [r3, #6]
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	d004      	beq.n	800a200 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800a1f6:	6839      	ldr	r1, [r7, #0]
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 f88f 	bl	800a31c <USBD_CtlError>
      break;
 800a1fe:	e01a      	b.n	800a236 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d005      	beq.n	800a21c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	f043 0202 	orr.w	r2, r3, #2
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	330c      	adds	r3, #12
 800a220:	2202      	movs	r2, #2
 800a222:	4619      	mov	r1, r3
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 f8ea 	bl	800a3fe <USBD_CtlSendData>
    break;
 800a22a:	e004      	b.n	800a236 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800a22c:	6839      	ldr	r1, [r7, #0]
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 f874 	bl	800a31c <USBD_CtlError>
    break;
 800a234:	bf00      	nop
  }
}
 800a236:	bf00      	nop
 800a238:	3708      	adds	r7, #8
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b082      	sub	sp, #8
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
 800a246:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	885b      	ldrh	r3, [r3, #2]
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d106      	bne.n	800a25e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2201      	movs	r2, #1
 800a254:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 f92a 	bl	800a4b2 <USBD_CtlSendStatus>
  }
}
 800a25e:	bf00      	nop
 800a260:	3708      	adds	r7, #8
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b082      	sub	sp, #8
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
 800a26e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a276:	3b01      	subs	r3, #1
 800a278:	2b02      	cmp	r3, #2
 800a27a:	d80b      	bhi.n	800a294 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	885b      	ldrh	r3, [r3, #2]
 800a280:	2b01      	cmp	r3, #1
 800a282:	d10c      	bne.n	800a29e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f910 	bl	800a4b2 <USBD_CtlSendStatus>
      }
      break;
 800a292:	e004      	b.n	800a29e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a294:	6839      	ldr	r1, [r7, #0]
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 f840 	bl	800a31c <USBD_CtlError>
      break;
 800a29c:	e000      	b.n	800a2a0 <USBD_ClrFeature+0x3a>
      break;
 800a29e:	bf00      	nop
  }
}
 800a2a0:	bf00      	nop
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	781a      	ldrb	r2, [r3, #0]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	781a      	ldrb	r2, [r3, #0]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f7ff fad3 	bl	800987e <SWAPBYTE>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	461a      	mov	r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f7ff fac6 	bl	800987e <SWAPBYTE>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	3301      	adds	r3, #1
 800a304:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f7ff fab9 	bl	800987e <SWAPBYTE>
 800a30c:	4603      	mov	r3, r0
 800a30e:	461a      	mov	r2, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	80da      	strh	r2, [r3, #6]
}
 800a314:	bf00      	nop
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a326:	2180      	movs	r1, #128	; 0x80
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f004 fc37 	bl	800eb9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a32e:	2100      	movs	r1, #0
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f004 fc33 	bl	800eb9c <USBD_LL_StallEP>
}
 800a336:	bf00      	nop
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b086      	sub	sp, #24
 800a342:	af00      	add	r7, sp, #0
 800a344:	60f8      	str	r0, [r7, #12]
 800a346:	60b9      	str	r1, [r7, #8]
 800a348:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a34a:	2300      	movs	r3, #0
 800a34c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d036      	beq.n	800a3c2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a358:	6938      	ldr	r0, [r7, #16]
 800a35a:	f000 f836 	bl	800a3ca <USBD_GetLen>
 800a35e:	4603      	mov	r3, r0
 800a360:	3301      	adds	r3, #1
 800a362:	b29b      	uxth	r3, r3
 800a364:	005b      	lsls	r3, r3, #1
 800a366:	b29a      	uxth	r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a36c:	7dfb      	ldrb	r3, [r7, #23]
 800a36e:	68ba      	ldr	r2, [r7, #8]
 800a370:	4413      	add	r3, r2
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	7812      	ldrb	r2, [r2, #0]
 800a376:	701a      	strb	r2, [r3, #0]
  idx++;
 800a378:	7dfb      	ldrb	r3, [r7, #23]
 800a37a:	3301      	adds	r3, #1
 800a37c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a37e:	7dfb      	ldrb	r3, [r7, #23]
 800a380:	68ba      	ldr	r2, [r7, #8]
 800a382:	4413      	add	r3, r2
 800a384:	2203      	movs	r2, #3
 800a386:	701a      	strb	r2, [r3, #0]
  idx++;
 800a388:	7dfb      	ldrb	r3, [r7, #23]
 800a38a:	3301      	adds	r3, #1
 800a38c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a38e:	e013      	b.n	800a3b8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a390:	7dfb      	ldrb	r3, [r7, #23]
 800a392:	68ba      	ldr	r2, [r7, #8]
 800a394:	4413      	add	r3, r2
 800a396:	693a      	ldr	r2, [r7, #16]
 800a398:	7812      	ldrb	r2, [r2, #0]
 800a39a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	613b      	str	r3, [r7, #16]
    idx++;
 800a3a2:	7dfb      	ldrb	r3, [r7, #23]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a3a8:	7dfb      	ldrb	r3, [r7, #23]
 800a3aa:	68ba      	ldr	r2, [r7, #8]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	701a      	strb	r2, [r3, #0]
    idx++;
 800a3b2:	7dfb      	ldrb	r3, [r7, #23]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1e7      	bne.n	800a390 <USBD_GetString+0x52>
 800a3c0:	e000      	b.n	800a3c4 <USBD_GetString+0x86>
    return;
 800a3c2:	bf00      	nop
  }
}
 800a3c4:	3718      	adds	r7, #24
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a3ca:	b480      	push	{r7}
 800a3cc:	b085      	sub	sp, #20
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a3da:	e005      	b.n	800a3e8 <USBD_GetLen+0x1e>
  {
    len++;
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d1f5      	bne.n	800a3dc <USBD_GetLen+0x12>
  }

  return len;
 800a3f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3714      	adds	r7, #20
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr

0800a3fe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b084      	sub	sp, #16
 800a402:	af00      	add	r7, sp, #0
 800a404:	60f8      	str	r0, [r7, #12]
 800a406:	60b9      	str	r1, [r7, #8]
 800a408:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2202      	movs	r2, #2
 800a40e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	68ba      	ldr	r2, [r7, #8]
 800a422:	2100      	movs	r1, #0
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f004 fc42 	bl	800ecae <USBD_LL_Transmit>

  return USBD_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	68ba      	ldr	r2, [r7, #8]
 800a444:	2100      	movs	r1, #0
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f004 fc31 	bl	800ecae <USBD_LL_Transmit>

  return USBD_OK;
 800a44c:	2300      	movs	r3, #0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a456:	b580      	push	{r7, lr}
 800a458:	b084      	sub	sp, #16
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	60f8      	str	r0, [r7, #12]
 800a45e:	60b9      	str	r1, [r7, #8]
 800a460:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2203      	movs	r2, #3
 800a466:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	2100      	movs	r1, #0
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f004 fc35 	bl	800ecf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	68ba      	ldr	r2, [r7, #8]
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f004 fc24 	bl	800ecf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4a8:	2300      	movs	r3, #0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3710      	adds	r7, #16
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b082      	sub	sp, #8
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2204      	movs	r2, #4
 800a4be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f004 fbf0 	bl	800ecae <USBD_LL_Transmit>

  return USBD_OK;
 800a4ce:	2300      	movs	r3, #0
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2205      	movs	r2, #5
 800a4e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f004 fbfe 	bl	800ecf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a4fe:	b480      	push	{r7}
 800a500:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a502:	bf00      	nop
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a50c:	b480      	push	{r7}
 800a50e:	b085      	sub	sp, #20
 800a510:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a512:	f3ef 8305 	mrs	r3, IPSR
 800a516:	60bb      	str	r3, [r7, #8]
  return(result);
 800a518:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d10f      	bne.n	800a53e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a51e:	f3ef 8310 	mrs	r3, PRIMASK
 800a522:	607b      	str	r3, [r7, #4]
  return(result);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d105      	bne.n	800a536 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a52a:	f3ef 8311 	mrs	r3, BASEPRI
 800a52e:	603b      	str	r3, [r7, #0]
  return(result);
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d007      	beq.n	800a546 <osKernelInitialize+0x3a>
 800a536:	4b0e      	ldr	r3, [pc, #56]	; (800a570 <osKernelInitialize+0x64>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2b02      	cmp	r3, #2
 800a53c:	d103      	bne.n	800a546 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a53e:	f06f 0305 	mvn.w	r3, #5
 800a542:	60fb      	str	r3, [r7, #12]
 800a544:	e00c      	b.n	800a560 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a546:	4b0a      	ldr	r3, [pc, #40]	; (800a570 <osKernelInitialize+0x64>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d105      	bne.n	800a55a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a54e:	4b08      	ldr	r3, [pc, #32]	; (800a570 <osKernelInitialize+0x64>)
 800a550:	2201      	movs	r2, #1
 800a552:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a554:	2300      	movs	r3, #0
 800a556:	60fb      	str	r3, [r7, #12]
 800a558:	e002      	b.n	800a560 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a55a:	f04f 33ff 	mov.w	r3, #4294967295
 800a55e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a560:	68fb      	ldr	r3, [r7, #12]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3714      	adds	r7, #20
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	200003bc 	.word	0x200003bc

0800a574 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a57a:	f3ef 8305 	mrs	r3, IPSR
 800a57e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a580:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a582:	2b00      	cmp	r3, #0
 800a584:	d10f      	bne.n	800a5a6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a586:	f3ef 8310 	mrs	r3, PRIMASK
 800a58a:	607b      	str	r3, [r7, #4]
  return(result);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d105      	bne.n	800a59e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a592:	f3ef 8311 	mrs	r3, BASEPRI
 800a596:	603b      	str	r3, [r7, #0]
  return(result);
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d007      	beq.n	800a5ae <osKernelStart+0x3a>
 800a59e:	4b0f      	ldr	r3, [pc, #60]	; (800a5dc <osKernelStart+0x68>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d103      	bne.n	800a5ae <osKernelStart+0x3a>
    stat = osErrorISR;
 800a5a6:	f06f 0305 	mvn.w	r3, #5
 800a5aa:	60fb      	str	r3, [r7, #12]
 800a5ac:	e010      	b.n	800a5d0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a5ae:	4b0b      	ldr	r3, [pc, #44]	; (800a5dc <osKernelStart+0x68>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d109      	bne.n	800a5ca <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a5b6:	f7ff ffa2 	bl	800a4fe <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a5ba:	4b08      	ldr	r3, [pc, #32]	; (800a5dc <osKernelStart+0x68>)
 800a5bc:	2202      	movs	r2, #2
 800a5be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a5c0:	f002 f9b6 	bl	800c930 <vTaskStartScheduler>
      stat = osOK;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	60fb      	str	r3, [r7, #12]
 800a5c8:	e002      	b.n	800a5d0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a5ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	200003bc 	.word	0x200003bc

0800a5e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b090      	sub	sp, #64	; 0x40
 800a5e4:	af04      	add	r7, sp, #16
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5f0:	f3ef 8305 	mrs	r3, IPSR
 800a5f4:	61fb      	str	r3, [r7, #28]
  return(result);
 800a5f6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	f040 808f 	bne.w	800a71c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5fe:	f3ef 8310 	mrs	r3, PRIMASK
 800a602:	61bb      	str	r3, [r7, #24]
  return(result);
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d105      	bne.n	800a616 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a60a:	f3ef 8311 	mrs	r3, BASEPRI
 800a60e:	617b      	str	r3, [r7, #20]
  return(result);
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d003      	beq.n	800a61e <osThreadNew+0x3e>
 800a616:	4b44      	ldr	r3, [pc, #272]	; (800a728 <osThreadNew+0x148>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2b02      	cmp	r3, #2
 800a61c:	d07e      	beq.n	800a71c <osThreadNew+0x13c>
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d07b      	beq.n	800a71c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800a624:	2380      	movs	r3, #128	; 0x80
 800a626:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a628:	2318      	movs	r3, #24
 800a62a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a62c:	2300      	movs	r3, #0
 800a62e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a630:	f04f 33ff 	mov.w	r3, #4294967295
 800a634:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d045      	beq.n	800a6c8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d002      	beq.n	800a64a <osThreadNew+0x6a>
        name = attr->name;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	699b      	ldr	r3, [r3, #24]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d002      	beq.n	800a658 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	699b      	ldr	r3, [r3, #24]
 800a656:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d008      	beq.n	800a670 <osThreadNew+0x90>
 800a65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a660:	2b38      	cmp	r3, #56	; 0x38
 800a662:	d805      	bhi.n	800a670 <osThreadNew+0x90>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	f003 0301 	and.w	r3, r3, #1
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d001      	beq.n	800a674 <osThreadNew+0x94>
        return (NULL);
 800a670:	2300      	movs	r3, #0
 800a672:	e054      	b.n	800a71e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	695b      	ldr	r3, [r3, #20]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d003      	beq.n	800a684 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	695b      	ldr	r3, [r3, #20]
 800a680:	089b      	lsrs	r3, r3, #2
 800a682:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00e      	beq.n	800a6aa <osThreadNew+0xca>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	2b6f      	cmp	r3, #111	; 0x6f
 800a692:	d90a      	bls.n	800a6aa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d006      	beq.n	800a6aa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	695b      	ldr	r3, [r3, #20]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d002      	beq.n	800a6aa <osThreadNew+0xca>
        mem = 1;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	623b      	str	r3, [r7, #32]
 800a6a8:	e010      	b.n	800a6cc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10c      	bne.n	800a6cc <osThreadNew+0xec>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d108      	bne.n	800a6cc <osThreadNew+0xec>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d104      	bne.n	800a6cc <osThreadNew+0xec>
          mem = 0;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	623b      	str	r3, [r7, #32]
 800a6c6:	e001      	b.n	800a6cc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a6cc:	6a3b      	ldr	r3, [r7, #32]
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d110      	bne.n	800a6f4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a6da:	9202      	str	r2, [sp, #8]
 800a6dc:	9301      	str	r3, [sp, #4]
 800a6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e0:	9300      	str	r3, [sp, #0]
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	f001 fd73 	bl	800c1d4 <xTaskCreateStatic>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	613b      	str	r3, [r7, #16]
 800a6f2:	e013      	b.n	800a71c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800a6f4:	6a3b      	ldr	r3, [r7, #32]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d110      	bne.n	800a71c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	f107 0310 	add.w	r3, r7, #16
 800a702:	9301      	str	r3, [sp, #4]
 800a704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a706:	9300      	str	r3, [sp, #0]
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f001 fdbb 	bl	800c288 <xTaskCreate>
 800a712:	4603      	mov	r3, r0
 800a714:	2b01      	cmp	r3, #1
 800a716:	d001      	beq.n	800a71c <osThreadNew+0x13c>
          hTask = NULL;
 800a718:	2300      	movs	r3, #0
 800a71a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a71c:	693b      	ldr	r3, [r7, #16]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3730      	adds	r7, #48	; 0x30
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	200003bc 	.word	0x200003bc

0800a72c <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b088      	sub	sp, #32
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a738:	f3ef 8305 	mrs	r3, IPSR
 800a73c:	617b      	str	r3, [r7, #20]
  return(result);
 800a73e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a740:	2b00      	cmp	r3, #0
 800a742:	d10f      	bne.n	800a764 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a744:	f3ef 8310 	mrs	r3, PRIMASK
 800a748:	613b      	str	r3, [r7, #16]
  return(result);
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d105      	bne.n	800a75c <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a750:	f3ef 8311 	mrs	r3, BASEPRI
 800a754:	60fb      	str	r3, [r7, #12]
  return(result);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d007      	beq.n	800a76c <osThreadSuspend+0x40>
 800a75c:	4b0c      	ldr	r3, [pc, #48]	; (800a790 <osThreadSuspend+0x64>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2b02      	cmp	r3, #2
 800a762:	d103      	bne.n	800a76c <osThreadSuspend+0x40>
    stat = osErrorISR;
 800a764:	f06f 0305 	mvn.w	r3, #5
 800a768:	61fb      	str	r3, [r7, #28]
 800a76a:	e00b      	b.n	800a784 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 800a76c:	69bb      	ldr	r3, [r7, #24]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d103      	bne.n	800a77a <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 800a772:	f06f 0303 	mvn.w	r3, #3
 800a776:	61fb      	str	r3, [r7, #28]
 800a778:	e004      	b.n	800a784 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 800a77e:	69b8      	ldr	r0, [r7, #24]
 800a780:	f001 ffd4 	bl	800c72c <vTaskSuspend>
  }

  return (stat);
 800a784:	69fb      	ldr	r3, [r7, #28]
}
 800a786:	4618      	mov	r0, r3
 800a788:	3720      	adds	r7, #32
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
 800a78e:	bf00      	nop
 800a790:	200003bc 	.word	0x200003bc

0800a794 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800a794:	b580      	push	{r7, lr}
 800a796:	b088      	sub	sp, #32
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7a0:	f3ef 8305 	mrs	r3, IPSR
 800a7a4:	617b      	str	r3, [r7, #20]
  return(result);
 800a7a6:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10f      	bne.n	800a7cc <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7ac:	f3ef 8310 	mrs	r3, PRIMASK
 800a7b0:	613b      	str	r3, [r7, #16]
  return(result);
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d105      	bne.n	800a7c4 <osThreadResume+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a7b8:	f3ef 8311 	mrs	r3, BASEPRI
 800a7bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d007      	beq.n	800a7d4 <osThreadResume+0x40>
 800a7c4:	4b0c      	ldr	r3, [pc, #48]	; (800a7f8 <osThreadResume+0x64>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2b02      	cmp	r3, #2
 800a7ca:	d103      	bne.n	800a7d4 <osThreadResume+0x40>
    stat = osErrorISR;
 800a7cc:	f06f 0305 	mvn.w	r3, #5
 800a7d0:	61fb      	str	r3, [r7, #28]
 800a7d2:	e00b      	b.n	800a7ec <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d103      	bne.n	800a7e2 <osThreadResume+0x4e>
    stat = osErrorParameter;
 800a7da:	f06f 0303 	mvn.w	r3, #3
 800a7de:	61fb      	str	r3, [r7, #28]
 800a7e0:	e004      	b.n	800a7ec <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 800a7e6:	69b8      	ldr	r0, [r7, #24]
 800a7e8:	f002 f844 	bl	800c874 <vTaskResume>
  }

  return (stat);
 800a7ec:	69fb      	ldr	r3, [r7, #28]
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3720      	adds	r7, #32
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	200003bc 	.word	0x200003bc

0800a7fc <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b088      	sub	sp, #32
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a808:	f3ef 8305 	mrs	r3, IPSR
 800a80c:	613b      	str	r3, [r7, #16]
  return(result);
 800a80e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 800a810:	2b00      	cmp	r3, #0
 800a812:	d10f      	bne.n	800a834 <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a814:	f3ef 8310 	mrs	r3, PRIMASK
 800a818:	60fb      	str	r3, [r7, #12]
  return(result);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d105      	bne.n	800a82c <osThreadTerminate+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a820:	f3ef 8311 	mrs	r3, BASEPRI
 800a824:	60bb      	str	r3, [r7, #8]
  return(result);
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d007      	beq.n	800a83c <osThreadTerminate+0x40>
 800a82c:	4b12      	ldr	r3, [pc, #72]	; (800a878 <osThreadTerminate+0x7c>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2b02      	cmp	r3, #2
 800a832:	d103      	bne.n	800a83c <osThreadTerminate+0x40>
    stat = osErrorISR;
 800a834:	f06f 0305 	mvn.w	r3, #5
 800a838:	61fb      	str	r3, [r7, #28]
 800a83a:	e017      	b.n	800a86c <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 800a83c:	69bb      	ldr	r3, [r7, #24]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d103      	bne.n	800a84a <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 800a842:	f06f 0303 	mvn.w	r3, #3
 800a846:	61fb      	str	r3, [r7, #28]
 800a848:	e010      	b.n	800a86c <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 800a84a:	69b8      	ldr	r0, [r7, #24]
 800a84c:	f001 ff08 	bl	800c660 <eTaskGetState>
 800a850:	4603      	mov	r3, r0
 800a852:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 800a854:	7dfb      	ldrb	r3, [r7, #23]
 800a856:	2b04      	cmp	r3, #4
 800a858:	d005      	beq.n	800a866 <osThreadTerminate+0x6a>
      stat = osOK;
 800a85a:	2300      	movs	r3, #0
 800a85c:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 800a85e:	69b8      	ldr	r0, [r7, #24]
 800a860:	f001 fe58 	bl	800c514 <vTaskDelete>
 800a864:	e002      	b.n	800a86c <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 800a866:	f06f 0302 	mvn.w	r3, #2
 800a86a:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 800a86c:	69fb      	ldr	r3, [r7, #28]
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3720      	adds	r7, #32
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	200003bc 	.word	0x200003bc

0800a87c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b086      	sub	sp, #24
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a884:	f3ef 8305 	mrs	r3, IPSR
 800a888:	613b      	str	r3, [r7, #16]
  return(result);
 800a88a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d10f      	bne.n	800a8b0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a890:	f3ef 8310 	mrs	r3, PRIMASK
 800a894:	60fb      	str	r3, [r7, #12]
  return(result);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d105      	bne.n	800a8a8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a89c:	f3ef 8311 	mrs	r3, BASEPRI
 800a8a0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d007      	beq.n	800a8b8 <osDelay+0x3c>
 800a8a8:	4b0a      	ldr	r3, [pc, #40]	; (800a8d4 <osDelay+0x58>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	d103      	bne.n	800a8b8 <osDelay+0x3c>
    stat = osErrorISR;
 800a8b0:	f06f 0305 	mvn.w	r3, #5
 800a8b4:	617b      	str	r3, [r7, #20]
 800a8b6:	e007      	b.n	800a8c8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d002      	beq.n	800a8c8 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f001 fe98 	bl	800c5f8 <vTaskDelay>
    }
  }

  return (stat);
 800a8c8:	697b      	ldr	r3, [r7, #20]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3718      	adds	r7, #24
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	200003bc 	.word	0x200003bc

0800a8d8 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b088      	sub	sp, #32
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8e4:	f3ef 8305 	mrs	r3, IPSR
 800a8e8:	617b      	str	r3, [r7, #20]
  return(result);
 800a8ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d13d      	bne.n	800a96c <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8f0:	f3ef 8310 	mrs	r3, PRIMASK
 800a8f4:	613b      	str	r3, [r7, #16]
  return(result);
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d105      	bne.n	800a908 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a8fc:	f3ef 8311 	mrs	r3, BASEPRI
 800a900:	60fb      	str	r3, [r7, #12]
  return(result);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d003      	beq.n	800a910 <osEventFlagsNew+0x38>
 800a908:	4b1b      	ldr	r3, [pc, #108]	; (800a978 <osEventFlagsNew+0xa0>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2b02      	cmp	r3, #2
 800a90e:	d02d      	beq.n	800a96c <osEventFlagsNew+0x94>
    mem = -1;
 800a910:	f04f 33ff 	mov.w	r3, #4294967295
 800a914:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d015      	beq.n	800a948 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d006      	beq.n	800a932 <osEventFlagsNew+0x5a>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	2b1f      	cmp	r3, #31
 800a92a:	d902      	bls.n	800a932 <osEventFlagsNew+0x5a>
        mem = 1;
 800a92c:	2301      	movs	r3, #1
 800a92e:	61bb      	str	r3, [r7, #24]
 800a930:	e00c      	b.n	800a94c <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d108      	bne.n	800a94c <osEventFlagsNew+0x74>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d104      	bne.n	800a94c <osEventFlagsNew+0x74>
          mem = 0;
 800a942:	2300      	movs	r3, #0
 800a944:	61bb      	str	r3, [r7, #24]
 800a946:	e001      	b.n	800a94c <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 800a948:	2300      	movs	r3, #0
 800a94a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d106      	bne.n	800a960 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	4618      	mov	r0, r3
 800a958:	f000 fb5c 	bl	800b014 <xEventGroupCreateStatic>
 800a95c:	61f8      	str	r0, [r7, #28]
 800a95e:	e005      	b.n	800a96c <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d102      	bne.n	800a96c <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 800a966:	f000 fb8a 	bl	800b07e <xEventGroupCreate>
 800a96a:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800a96c:	69fb      	ldr	r3, [r7, #28]
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3720      	adds	r7, #32
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	200003bc 	.word	0x200003bc

0800a97c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b088      	sub	sp, #32
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d004      	beq.n	800a99a <osEventFlagsSet+0x1e>
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a996:	2b00      	cmp	r3, #0
 800a998:	d003      	beq.n	800a9a2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800a99a:	f06f 0303 	mvn.w	r3, #3
 800a99e:	61fb      	str	r3, [r7, #28]
 800a9a0:	e03a      	b.n	800aa18 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9a2:	f3ef 8305 	mrs	r3, IPSR
 800a9a6:	617b      	str	r3, [r7, #20]
  return(result);
 800a9a8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d10f      	bne.n	800a9ce <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9ae:	f3ef 8310 	mrs	r3, PRIMASK
 800a9b2:	613b      	str	r3, [r7, #16]
  return(result);
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d105      	bne.n	800a9c6 <osEventFlagsSet+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a9ba:	f3ef 8311 	mrs	r3, BASEPRI
 800a9be:	60fb      	str	r3, [r7, #12]
  return(result);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d021      	beq.n	800aa0a <osEventFlagsSet+0x8e>
 800a9c6:	4b17      	ldr	r3, [pc, #92]	; (800aa24 <osEventFlagsSet+0xa8>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	d11d      	bne.n	800aa0a <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800a9d2:	f107 0308 	add.w	r3, r7, #8
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	6839      	ldr	r1, [r7, #0]
 800a9da:	69b8      	ldr	r0, [r7, #24]
 800a9dc:	f000 fd66 	bl	800b4ac <xEventGroupSetBitsFromISR>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d103      	bne.n	800a9ee <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 800a9e6:	f06f 0302 	mvn.w	r3, #2
 800a9ea:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800a9ec:	e013      	b.n	800aa16 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00e      	beq.n	800aa16 <osEventFlagsSet+0x9a>
 800a9f8:	4b0b      	ldr	r3, [pc, #44]	; (800aa28 <osEventFlagsSet+0xac>)
 800a9fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9fe:	601a      	str	r2, [r3, #0]
 800aa00:	f3bf 8f4f 	dsb	sy
 800aa04:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800aa08:	e005      	b.n	800aa16 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800aa0a:	6839      	ldr	r1, [r7, #0]
 800aa0c:	69b8      	ldr	r0, [r7, #24]
 800aa0e:	f000 fc88 	bl	800b322 <xEventGroupSetBits>
 800aa12:	61f8      	str	r0, [r7, #28]
 800aa14:	e000      	b.n	800aa18 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800aa16:	bf00      	nop
  }

  return (rflags);
 800aa18:	69fb      	ldr	r3, [r7, #28]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3720      	adds	r7, #32
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	200003bc 	.word	0x200003bc
 800aa28:	e000ed04 	.word	0xe000ed04

0800aa2c <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b088      	sub	sp, #32
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d004      	beq.n	800aa4a <osEventFlagsClear+0x1e>
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d003      	beq.n	800aa52 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 800aa4a:	f06f 0303 	mvn.w	r3, #3
 800aa4e:	61fb      	str	r3, [r7, #28]
 800aa50:	e029      	b.n	800aaa6 <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa52:	f3ef 8305 	mrs	r3, IPSR
 800aa56:	617b      	str	r3, [r7, #20]
  return(result);
 800aa58:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d10f      	bne.n	800aa7e <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa5e:	f3ef 8310 	mrs	r3, PRIMASK
 800aa62:	613b      	str	r3, [r7, #16]
  return(result);
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d105      	bne.n	800aa76 <osEventFlagsClear+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aa6a:	f3ef 8311 	mrs	r3, BASEPRI
 800aa6e:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d012      	beq.n	800aa9c <osEventFlagsClear+0x70>
 800aa76:	4b0e      	ldr	r3, [pc, #56]	; (800aab0 <osEventFlagsClear+0x84>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	d10e      	bne.n	800aa9c <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800aa7e:	69b8      	ldr	r0, [r7, #24]
 800aa80:	f000 fc2c 	bl	800b2dc <xEventGroupGetBitsFromISR>
 800aa84:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800aa86:	6839      	ldr	r1, [r7, #0]
 800aa88:	69b8      	ldr	r0, [r7, #24]
 800aa8a:	f000 fc13 	bl	800b2b4 <xEventGroupClearBitsFromISR>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d108      	bne.n	800aaa6 <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 800aa94:	f06f 0302 	mvn.w	r3, #2
 800aa98:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800aa9a:	e004      	b.n	800aaa6 <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 800aa9c:	6839      	ldr	r1, [r7, #0]
 800aa9e:	69b8      	ldr	r0, [r7, #24]
 800aaa0:	f000 fbd2 	bl	800b248 <xEventGroupClearBits>
 800aaa4:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 800aaa6:	69fb      	ldr	r3, [r7, #28]
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3720      	adds	r7, #32
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	200003bc 	.word	0x200003bc

0800aab4 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b088      	sub	sp, #32
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if (ef_id == NULL) {
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d102      	bne.n	800aacc <osEventFlagsGet+0x18>
    rflags = 0U;
 800aac6:	2300      	movs	r3, #0
 800aac8:	61fb      	str	r3, [r7, #28]
 800aaca:	e01f      	b.n	800ab0c <osEventFlagsGet+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aacc:	f3ef 8305 	mrs	r3, IPSR
 800aad0:	617b      	str	r3, [r7, #20]
  return(result);
 800aad2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d10f      	bne.n	800aaf8 <osEventFlagsGet+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aad8:	f3ef 8310 	mrs	r3, PRIMASK
 800aadc:	613b      	str	r3, [r7, #16]
  return(result);
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d105      	bne.n	800aaf0 <osEventFlagsGet+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aae4:	f3ef 8311 	mrs	r3, BASEPRI
 800aae8:	60fb      	str	r3, [r7, #12]
  return(result);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d008      	beq.n	800ab02 <osEventFlagsGet+0x4e>
 800aaf0:	4b09      	ldr	r3, [pc, #36]	; (800ab18 <osEventFlagsGet+0x64>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2b02      	cmp	r3, #2
 800aaf6:	d104      	bne.n	800ab02 <osEventFlagsGet+0x4e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800aaf8:	69b8      	ldr	r0, [r7, #24]
 800aafa:	f000 fbef 	bl	800b2dc <xEventGroupGetBitsFromISR>
 800aafe:	61f8      	str	r0, [r7, #28]
 800ab00:	e004      	b.n	800ab0c <osEventFlagsGet+0x58>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 800ab02:	2100      	movs	r1, #0
 800ab04:	69b8      	ldr	r0, [r7, #24]
 800ab06:	f000 fb9f 	bl	800b248 <xEventGroupClearBits>
 800ab0a:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 800ab0c:	69fb      	ldr	r3, [r7, #28]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3720      	adds	r7, #32
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	200003bc 	.word	0x200003bc

0800ab1c <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b08e      	sub	sp, #56	; 0x38
 800ab20:	af02      	add	r7, sp, #8
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	607a      	str	r2, [r7, #4]
 800ab28:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800ab2e:	6a3b      	ldr	r3, [r7, #32]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d004      	beq.n	800ab3e <osEventFlagsWait+0x22>
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d003      	beq.n	800ab46 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800ab3e:	f06f 0303 	mvn.w	r3, #3
 800ab42:	627b      	str	r3, [r7, #36]	; 0x24
 800ab44:	e059      	b.n	800abfa <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab46:	f3ef 8305 	mrs	r3, IPSR
 800ab4a:	61fb      	str	r3, [r7, #28]
  return(result);
 800ab4c:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d10f      	bne.n	800ab72 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab52:	f3ef 8310 	mrs	r3, PRIMASK
 800ab56:	61bb      	str	r3, [r7, #24]
  return(result);
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d105      	bne.n	800ab6a <osEventFlagsWait+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ab5e:	f3ef 8311 	mrs	r3, BASEPRI
 800ab62:	617b      	str	r3, [r7, #20]
  return(result);
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d007      	beq.n	800ab7a <osEventFlagsWait+0x5e>
 800ab6a:	4b26      	ldr	r3, [pc, #152]	; (800ac04 <osEventFlagsWait+0xe8>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	d103      	bne.n	800ab7a <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 800ab72:	f06f 0305 	mvn.w	r3, #5
 800ab76:	627b      	str	r3, [r7, #36]	; 0x24
 800ab78:	e03f      	b.n	800abfa <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f003 0301 	and.w	r3, r3, #1
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d002      	beq.n	800ab8a <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 800ab84:	2301      	movs	r3, #1
 800ab86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab88:	e001      	b.n	800ab8e <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f003 0302 	and.w	r3, r3, #2
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d002      	beq.n	800ab9e <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab9c:	e001      	b.n	800aba2 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	9300      	str	r3, [sp, #0]
 800aba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abaa:	68b9      	ldr	r1, [r7, #8]
 800abac:	6a38      	ldr	r0, [r7, #32]
 800abae:	f000 fa81 	bl	800b0b4 <xEventGroupWaitBits>
 800abb2:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f003 0301 	and.w	r3, r3, #1
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d00e      	beq.n	800abdc <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 800abbe:	68ba      	ldr	r2, [r7, #8]
 800abc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d019      	beq.n	800abfa <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d003      	beq.n	800abd4 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 800abcc:	f06f 0301 	mvn.w	r3, #1
 800abd0:	627b      	str	r3, [r7, #36]	; 0x24
 800abd2:	e012      	b.n	800abfa <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 800abd4:	f06f 0302 	mvn.w	r3, #2
 800abd8:	627b      	str	r3, [r7, #36]	; 0x24
 800abda:	e00e      	b.n	800abfa <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800abdc:	68ba      	ldr	r2, [r7, #8]
 800abde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe0:	4013      	ands	r3, r2
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d109      	bne.n	800abfa <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d003      	beq.n	800abf4 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 800abec:	f06f 0301 	mvn.w	r3, #1
 800abf0:	627b      	str	r3, [r7, #36]	; 0x24
 800abf2:	e002      	b.n	800abfa <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 800abf4:	f06f 0302 	mvn.w	r3, #2
 800abf8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 800abfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3730      	adds	r7, #48	; 0x30
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}
 800ac04:	200003bc 	.word	0x200003bc

0800ac08 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b08c      	sub	sp, #48	; 0x30
 800ac0c:	af02      	add	r7, sp, #8
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ac14:	2300      	movs	r3, #0
 800ac16:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac18:	f3ef 8305 	mrs	r3, IPSR
 800ac1c:	61bb      	str	r3, [r7, #24]
  return(result);
 800ac1e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d170      	bne.n	800ad06 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac24:	f3ef 8310 	mrs	r3, PRIMASK
 800ac28:	617b      	str	r3, [r7, #20]
  return(result);
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d105      	bne.n	800ac3c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ac30:	f3ef 8311 	mrs	r3, BASEPRI
 800ac34:	613b      	str	r3, [r7, #16]
  return(result);
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d003      	beq.n	800ac44 <osMessageQueueNew+0x3c>
 800ac3c:	4b34      	ldr	r3, [pc, #208]	; (800ad10 <osMessageQueueNew+0x108>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2b02      	cmp	r3, #2
 800ac42:	d060      	beq.n	800ad06 <osMessageQueueNew+0xfe>
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d05d      	beq.n	800ad06 <osMessageQueueNew+0xfe>
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d05a      	beq.n	800ad06 <osMessageQueueNew+0xfe>
    mem = -1;
 800ac50:	f04f 33ff 	mov.w	r3, #4294967295
 800ac54:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d029      	beq.n	800acb0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d012      	beq.n	800ac8a <osMessageQueueNew+0x82>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	2b4f      	cmp	r3, #79	; 0x4f
 800ac6a:	d90e      	bls.n	800ac8a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00a      	beq.n	800ac8a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	695a      	ldr	r2, [r3, #20]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	68b9      	ldr	r1, [r7, #8]
 800ac7c:	fb01 f303 	mul.w	r3, r1, r3
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d302      	bcc.n	800ac8a <osMessageQueueNew+0x82>
        mem = 1;
 800ac84:	2301      	movs	r3, #1
 800ac86:	623b      	str	r3, [r7, #32]
 800ac88:	e014      	b.n	800acb4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	689b      	ldr	r3, [r3, #8]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d110      	bne.n	800acb4 <osMessageQueueNew+0xac>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d10c      	bne.n	800acb4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d108      	bne.n	800acb4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	695b      	ldr	r3, [r3, #20]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d104      	bne.n	800acb4 <osMessageQueueNew+0xac>
          mem = 0;
 800acaa:	2300      	movs	r3, #0
 800acac:	623b      	str	r3, [r7, #32]
 800acae:	e001      	b.n	800acb4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800acb4:	6a3b      	ldr	r3, [r7, #32]
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d10c      	bne.n	800acd4 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	691a      	ldr	r2, [r3, #16]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6899      	ldr	r1, [r3, #8]
 800acc2:	2300      	movs	r3, #0
 800acc4:	9300      	str	r3, [sp, #0]
 800acc6:	460b      	mov	r3, r1
 800acc8:	68b9      	ldr	r1, [r7, #8]
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f000 fd1e 	bl	800b70c <xQueueGenericCreateStatic>
 800acd0:	6278      	str	r0, [r7, #36]	; 0x24
 800acd2:	e008      	b.n	800ace6 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800acd4:	6a3b      	ldr	r3, [r7, #32]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d105      	bne.n	800ace6 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800acda:	2200      	movs	r2, #0
 800acdc:	68b9      	ldr	r1, [r7, #8]
 800acde:	68f8      	ldr	r0, [r7, #12]
 800ace0:	f000 fd87 	bl	800b7f2 <xQueueGenericCreate>
 800ace4:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ace6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d00c      	beq.n	800ad06 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d003      	beq.n	800acfa <osMessageQueueNew+0xf2>
        name = attr->name;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	61fb      	str	r3, [r7, #28]
 800acf8:	e001      	b.n	800acfe <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800acfa:	2300      	movs	r3, #0
 800acfc:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800acfe:	69f9      	ldr	r1, [r7, #28]
 800ad00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad02:	f001 fa0b 	bl	800c11c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3728      	adds	r7, #40	; 0x28
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	200003bc 	.word	0x200003bc

0800ad14 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b08a      	sub	sp, #40	; 0x28
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	603b      	str	r3, [r7, #0]
 800ad20:	4613      	mov	r3, r2
 800ad22:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad2c:	f3ef 8305 	mrs	r3, IPSR
 800ad30:	61fb      	str	r3, [r7, #28]
  return(result);
 800ad32:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d10f      	bne.n	800ad58 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad38:	f3ef 8310 	mrs	r3, PRIMASK
 800ad3c:	61bb      	str	r3, [r7, #24]
  return(result);
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d105      	bne.n	800ad50 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ad44:	f3ef 8311 	mrs	r3, BASEPRI
 800ad48:	617b      	str	r3, [r7, #20]
  return(result);
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d02c      	beq.n	800adaa <osMessageQueuePut+0x96>
 800ad50:	4b28      	ldr	r3, [pc, #160]	; (800adf4 <osMessageQueuePut+0xe0>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	2b02      	cmp	r3, #2
 800ad56:	d128      	bne.n	800adaa <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ad58:	6a3b      	ldr	r3, [r7, #32]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d005      	beq.n	800ad6a <osMessageQueuePut+0x56>
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d002      	beq.n	800ad6a <osMessageQueuePut+0x56>
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d003      	beq.n	800ad72 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800ad6a:	f06f 0303 	mvn.w	r3, #3
 800ad6e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ad70:	e039      	b.n	800ade6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800ad72:	2300      	movs	r3, #0
 800ad74:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ad76:	f107 0210 	add.w	r2, r7, #16
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	68b9      	ldr	r1, [r7, #8]
 800ad7e:	6a38      	ldr	r0, [r7, #32]
 800ad80:	f000 fe94 	bl	800baac <xQueueGenericSendFromISR>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d003      	beq.n	800ad92 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800ad8a:	f06f 0302 	mvn.w	r3, #2
 800ad8e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ad90:	e029      	b.n	800ade6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d026      	beq.n	800ade6 <osMessageQueuePut+0xd2>
 800ad98:	4b17      	ldr	r3, [pc, #92]	; (800adf8 <osMessageQueuePut+0xe4>)
 800ad9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad9e:	601a      	str	r2, [r3, #0]
 800ada0:	f3bf 8f4f 	dsb	sy
 800ada4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ada8:	e01d      	b.n	800ade6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800adaa:	6a3b      	ldr	r3, [r7, #32]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d002      	beq.n	800adb6 <osMessageQueuePut+0xa2>
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d103      	bne.n	800adbe <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800adb6:	f06f 0303 	mvn.w	r3, #3
 800adba:	627b      	str	r3, [r7, #36]	; 0x24
 800adbc:	e014      	b.n	800ade8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800adbe:	2300      	movs	r3, #0
 800adc0:	683a      	ldr	r2, [r7, #0]
 800adc2:	68b9      	ldr	r1, [r7, #8]
 800adc4:	6a38      	ldr	r0, [r7, #32]
 800adc6:	f000 fd77 	bl	800b8b8 <xQueueGenericSend>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d00b      	beq.n	800ade8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d003      	beq.n	800adde <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800add6:	f06f 0301 	mvn.w	r3, #1
 800adda:	627b      	str	r3, [r7, #36]	; 0x24
 800addc:	e004      	b.n	800ade8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800adde:	f06f 0302 	mvn.w	r3, #2
 800ade2:	627b      	str	r3, [r7, #36]	; 0x24
 800ade4:	e000      	b.n	800ade8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ade6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800ade8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800adea:	4618      	mov	r0, r3
 800adec:	3728      	adds	r7, #40	; 0x28
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	200003bc 	.word	0x200003bc
 800adf8:	e000ed04 	.word	0xe000ed04

0800adfc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b08a      	sub	sp, #40	; 0x28
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	607a      	str	r2, [r7, #4]
 800ae08:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae12:	f3ef 8305 	mrs	r3, IPSR
 800ae16:	61fb      	str	r3, [r7, #28]
  return(result);
 800ae18:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d10f      	bne.n	800ae3e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae1e:	f3ef 8310 	mrs	r3, PRIMASK
 800ae22:	61bb      	str	r3, [r7, #24]
  return(result);
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d105      	bne.n	800ae36 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ae2a:	f3ef 8311 	mrs	r3, BASEPRI
 800ae2e:	617b      	str	r3, [r7, #20]
  return(result);
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d02c      	beq.n	800ae90 <osMessageQueueGet+0x94>
 800ae36:	4b28      	ldr	r3, [pc, #160]	; (800aed8 <osMessageQueueGet+0xdc>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	d128      	bne.n	800ae90 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ae3e:	6a3b      	ldr	r3, [r7, #32]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d005      	beq.n	800ae50 <osMessageQueueGet+0x54>
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d002      	beq.n	800ae50 <osMessageQueueGet+0x54>
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d003      	beq.n	800ae58 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800ae50:	f06f 0303 	mvn.w	r3, #3
 800ae54:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ae56:	e038      	b.n	800aeca <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ae5c:	f107 0310 	add.w	r3, r7, #16
 800ae60:	461a      	mov	r2, r3
 800ae62:	68b9      	ldr	r1, [r7, #8]
 800ae64:	6a38      	ldr	r0, [r7, #32]
 800ae66:	f000 ff91 	bl	800bd8c <xQueueReceiveFromISR>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d003      	beq.n	800ae78 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800ae70:	f06f 0302 	mvn.w	r3, #2
 800ae74:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ae76:	e028      	b.n	800aeca <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d025      	beq.n	800aeca <osMessageQueueGet+0xce>
 800ae7e:	4b17      	ldr	r3, [pc, #92]	; (800aedc <osMessageQueueGet+0xe0>)
 800ae80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae84:	601a      	str	r2, [r3, #0]
 800ae86:	f3bf 8f4f 	dsb	sy
 800ae8a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ae8e:	e01c      	b.n	800aeca <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ae90:	6a3b      	ldr	r3, [r7, #32]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d002      	beq.n	800ae9c <osMessageQueueGet+0xa0>
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d103      	bne.n	800aea4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800ae9c:	f06f 0303 	mvn.w	r3, #3
 800aea0:	627b      	str	r3, [r7, #36]	; 0x24
 800aea2:	e013      	b.n	800aecc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800aea4:	683a      	ldr	r2, [r7, #0]
 800aea6:	68b9      	ldr	r1, [r7, #8]
 800aea8:	6a38      	ldr	r0, [r7, #32]
 800aeaa:	f000 fe93 	bl	800bbd4 <xQueueReceive>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d00b      	beq.n	800aecc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d003      	beq.n	800aec2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800aeba:	f06f 0301 	mvn.w	r3, #1
 800aebe:	627b      	str	r3, [r7, #36]	; 0x24
 800aec0:	e004      	b.n	800aecc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800aec2:	f06f 0302 	mvn.w	r3, #2
 800aec6:	627b      	str	r3, [r7, #36]	; 0x24
 800aec8:	e000      	b.n	800aecc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aeca:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800aecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3728      	adds	r7, #40	; 0x28
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	200003bc 	.word	0x200003bc
 800aedc:	e000ed04 	.word	0xe000ed04

0800aee0 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b088      	sub	sp, #32
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d102      	bne.n	800aef8 <osMessageQueueGetCount+0x18>
    count = 0U;
 800aef2:	2300      	movs	r3, #0
 800aef4:	61fb      	str	r3, [r7, #28]
 800aef6:	e01e      	b.n	800af36 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aef8:	f3ef 8305 	mrs	r3, IPSR
 800aefc:	617b      	str	r3, [r7, #20]
  return(result);
 800aefe:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800af00:	2b00      	cmp	r3, #0
 800af02:	d10f      	bne.n	800af24 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af04:	f3ef 8310 	mrs	r3, PRIMASK
 800af08:	613b      	str	r3, [r7, #16]
  return(result);
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d105      	bne.n	800af1c <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800af10:	f3ef 8311 	mrs	r3, BASEPRI
 800af14:	60fb      	str	r3, [r7, #12]
  return(result);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d008      	beq.n	800af2e <osMessageQueueGetCount+0x4e>
 800af1c:	4b08      	ldr	r3, [pc, #32]	; (800af40 <osMessageQueueGetCount+0x60>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2b02      	cmp	r3, #2
 800af22:	d104      	bne.n	800af2e <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800af24:	69b8      	ldr	r0, [r7, #24]
 800af26:	f000 ffcb 	bl	800bec0 <uxQueueMessagesWaitingFromISR>
 800af2a:	61f8      	str	r0, [r7, #28]
 800af2c:	e003      	b.n	800af36 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800af2e:	69b8      	ldr	r0, [r7, #24]
 800af30:	f000 ffa9 	bl	800be86 <uxQueueMessagesWaiting>
 800af34:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800af36:	69fb      	ldr	r3, [r7, #28]
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3720      	adds	r7, #32
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	200003bc 	.word	0x200003bc

0800af44 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800af44:	b580      	push	{r7, lr}
 800af46:	b088      	sub	sp, #32
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af50:	f3ef 8305 	mrs	r3, IPSR
 800af54:	617b      	str	r3, [r7, #20]
  return(result);
 800af56:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d10f      	bne.n	800af7c <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af5c:	f3ef 8310 	mrs	r3, PRIMASK
 800af60:	613b      	str	r3, [r7, #16]
  return(result);
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d105      	bne.n	800af74 <osMessageQueueReset+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800af68:	f3ef 8311 	mrs	r3, BASEPRI
 800af6c:	60fb      	str	r3, [r7, #12]
  return(result);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d007      	beq.n	800af84 <osMessageQueueReset+0x40>
 800af74:	4b0c      	ldr	r3, [pc, #48]	; (800afa8 <osMessageQueueReset+0x64>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2b02      	cmp	r3, #2
 800af7a:	d103      	bne.n	800af84 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 800af7c:	f06f 0305 	mvn.w	r3, #5
 800af80:	61fb      	str	r3, [r7, #28]
 800af82:	e00c      	b.n	800af9e <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d103      	bne.n	800af92 <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 800af8a:	f06f 0303 	mvn.w	r3, #3
 800af8e:	61fb      	str	r3, [r7, #28]
 800af90:	e005      	b.n	800af9e <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 800af92:	2300      	movs	r3, #0
 800af94:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 800af96:	2100      	movs	r1, #0
 800af98:	69b8      	ldr	r0, [r7, #24]
 800af9a:	f000 fb4f 	bl	800b63c <xQueueGenericReset>
  }

  return (stat);
 800af9e:	69fb      	ldr	r3, [r7, #28]
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3720      	adds	r7, #32
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}
 800afa8:	200003bc 	.word	0x200003bc

0800afac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800afac:	b480      	push	{r7}
 800afae:	b085      	sub	sp, #20
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	4a07      	ldr	r2, [pc, #28]	; (800afd8 <vApplicationGetIdleTaskMemory+0x2c>)
 800afbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	4a06      	ldr	r2, [pc, #24]	; (800afdc <vApplicationGetIdleTaskMemory+0x30>)
 800afc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2280      	movs	r2, #128	; 0x80
 800afc8:	601a      	str	r2, [r3, #0]
}
 800afca:	bf00      	nop
 800afcc:	3714      	adds	r7, #20
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	200003c0 	.word	0x200003c0
 800afdc:	20000430 	.word	0x20000430

0800afe0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800afe0:	b480      	push	{r7}
 800afe2:	b085      	sub	sp, #20
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	4a07      	ldr	r2, [pc, #28]	; (800b00c <vApplicationGetTimerTaskMemory+0x2c>)
 800aff0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	4a06      	ldr	r2, [pc, #24]	; (800b010 <vApplicationGetTimerTaskMemory+0x30>)
 800aff6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800affe:	601a      	str	r2, [r3, #0]
}
 800b000:	bf00      	nop
 800b002:	3714      	adds	r7, #20
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr
 800b00c:	20000630 	.word	0x20000630
 800b010:	200006a0 	.word	0x200006a0

0800b014 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800b014:	b580      	push	{r7, lr}
 800b016:	b086      	sub	sp, #24
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d109      	bne.n	800b036 <xEventGroupCreateStatic+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b026:	f383 8811 	msr	BASEPRI, r3
 800b02a:	f3bf 8f6f 	isb	sy
 800b02e:	f3bf 8f4f 	dsb	sy
 800b032:	613b      	str	r3, [r7, #16]
 800b034:	e7fe      	b.n	800b034 <xEventGroupCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800b036:	2320      	movs	r3, #32
 800b038:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	2b20      	cmp	r3, #32
 800b03e:	d009      	beq.n	800b054 <xEventGroupCreateStatic+0x40>
 800b040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b044:	f383 8811 	msr	BASEPRI, r3
 800b048:	f3bf 8f6f 	isb	sy
 800b04c:	f3bf 8f4f 	dsb	sy
 800b050:	60fb      	str	r3, [r7, #12]
 800b052:	e7fe      	b.n	800b052 <xEventGroupCreateStatic+0x3e>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00a      	beq.n	800b074 <xEventGroupCreateStatic+0x60>
		{
			pxEventBits->uxEventBits = 0;
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	2200      	movs	r2, #0
 800b062:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	3304      	adds	r3, #4
 800b068:	4618      	mov	r0, r3
 800b06a:	f000 fa33 	bl	800b4d4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	2201      	movs	r2, #1
 800b072:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800b074:	697b      	ldr	r3, [r7, #20]
	}
 800b076:	4618      	mov	r0, r3
 800b078:	3718      	adds	r7, #24
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}

0800b07e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800b07e:	b580      	push	{r7, lr}
 800b080:	b082      	sub	sp, #8
 800b082:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800b084:	2020      	movs	r0, #32
 800b086:	f002 ffe3 	bl	800e050 <pvPortMalloc>
 800b08a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d00a      	beq.n	800b0a8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	3304      	adds	r3, #4
 800b09c:	4618      	mov	r0, r3
 800b09e:	f000 fa19 	bl	800b4d4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800b0a8:	687b      	ldr	r3, [r7, #4]
	}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3708      	adds	r7, #8
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
	...

0800b0b4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b090      	sub	sp, #64	; 0x40
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
 800b0c0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d109      	bne.n	800b0e8 <xEventGroupWaitBits+0x34>
 800b0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d8:	f383 8811 	msr	BASEPRI, r3
 800b0dc:	f3bf 8f6f 	isb	sy
 800b0e0:	f3bf 8f4f 	dsb	sy
 800b0e4:	623b      	str	r3, [r7, #32]
 800b0e6:	e7fe      	b.n	800b0e6 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d009      	beq.n	800b106 <xEventGroupWaitBits+0x52>
 800b0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f6:	f383 8811 	msr	BASEPRI, r3
 800b0fa:	f3bf 8f6f 	isb	sy
 800b0fe:	f3bf 8f4f 	dsb	sy
 800b102:	61fb      	str	r3, [r7, #28]
 800b104:	e7fe      	b.n	800b104 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d109      	bne.n	800b120 <xEventGroupWaitBits+0x6c>
 800b10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b110:	f383 8811 	msr	BASEPRI, r3
 800b114:	f3bf 8f6f 	isb	sy
 800b118:	f3bf 8f4f 	dsb	sy
 800b11c:	61bb      	str	r3, [r7, #24]
 800b11e:	e7fe      	b.n	800b11e <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b120:	f002 f8fc 	bl	800d31c <xTaskGetSchedulerState>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	d102      	bne.n	800b130 <xEventGroupWaitBits+0x7c>
 800b12a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d101      	bne.n	800b134 <xEventGroupWaitBits+0x80>
 800b130:	2301      	movs	r3, #1
 800b132:	e000      	b.n	800b136 <xEventGroupWaitBits+0x82>
 800b134:	2300      	movs	r3, #0
 800b136:	2b00      	cmp	r3, #0
 800b138:	d109      	bne.n	800b14e <xEventGroupWaitBits+0x9a>
 800b13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13e:	f383 8811 	msr	BASEPRI, r3
 800b142:	f3bf 8f6f 	isb	sy
 800b146:	f3bf 8f4f 	dsb	sy
 800b14a:	617b      	str	r3, [r7, #20]
 800b14c:	e7fe      	b.n	800b14c <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 800b14e:	f001 fc53 	bl	800c9f8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800b152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800b158:	683a      	ldr	r2, [r7, #0]
 800b15a:	68b9      	ldr	r1, [r7, #8]
 800b15c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b15e:	f000 f983 	bl	800b468 <prvTestWaitCondition>
 800b162:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800b164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b166:	2b00      	cmp	r3, #0
 800b168:	d00e      	beq.n	800b188 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800b16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b16c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800b16e:	2300      	movs	r3, #0
 800b170:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d028      	beq.n	800b1ca <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800b178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	43db      	mvns	r3, r3
 800b180:	401a      	ands	r2, r3
 800b182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b184:	601a      	str	r2, [r3, #0]
 800b186:	e020      	b.n	800b1ca <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800b188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d104      	bne.n	800b198 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800b18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b190:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800b192:	2301      	movs	r3, #1
 800b194:	633b      	str	r3, [r7, #48]	; 0x30
 800b196:	e018      	b.n	800b1ca <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d003      	beq.n	800b1a6 <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800b19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b1a4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d003      	beq.n	800b1b4 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800b1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b1b2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800b1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1b6:	1d18      	adds	r0, r3, #4
 800b1b8:	68ba      	ldr	r2, [r7, #8]
 800b1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	f001 fe31 	bl	800ce28 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800b1ca:	f001 fc23 	bl	800ca14 <xTaskResumeAll>
 800b1ce:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800b1d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d031      	beq.n	800b23a <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 800b1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d107      	bne.n	800b1ec <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 800b1dc:	4b19      	ldr	r3, [pc, #100]	; (800b244 <xEventGroupWaitBits+0x190>)
 800b1de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1e2:	601a      	str	r2, [r3, #0]
 800b1e4:	f3bf 8f4f 	dsb	sy
 800b1e8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800b1ec:	f002 f920 	bl	800d430 <uxTaskResetEventItemValue>
 800b1f0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800b1f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d11a      	bne.n	800b232 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 800b1fc:	f002 fe0e 	bl	800de1c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800b200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800b206:	683a      	ldr	r2, [r7, #0]
 800b208:	68b9      	ldr	r1, [r7, #8]
 800b20a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b20c:	f000 f92c 	bl	800b468 <prvTestWaitCondition>
 800b210:	4603      	mov	r3, r0
 800b212:	2b00      	cmp	r3, #0
 800b214:	d009      	beq.n	800b22a <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d006      	beq.n	800b22a <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800b21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	43db      	mvns	r3, r3
 800b224:	401a      	ands	r2, r3
 800b226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b228:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800b22a:	2301      	movs	r3, #1
 800b22c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800b22e:	f002 fe23 	bl	800de78 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800b232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b234:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b238:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800b23a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3740      	adds	r7, #64	; 0x40
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	e000ed04 	.word	0xe000ed04

0800b248 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b086      	sub	sp, #24
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d109      	bne.n	800b270 <xEventGroupClearBits+0x28>
 800b25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b260:	f383 8811 	msr	BASEPRI, r3
 800b264:	f3bf 8f6f 	isb	sy
 800b268:	f3bf 8f4f 	dsb	sy
 800b26c:	60fb      	str	r3, [r7, #12]
 800b26e:	e7fe      	b.n	800b26e <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b276:	2b00      	cmp	r3, #0
 800b278:	d009      	beq.n	800b28e <xEventGroupClearBits+0x46>
 800b27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27e:	f383 8811 	msr	BASEPRI, r3
 800b282:	f3bf 8f6f 	isb	sy
 800b286:	f3bf 8f4f 	dsb	sy
 800b28a:	60bb      	str	r3, [r7, #8]
 800b28c:	e7fe      	b.n	800b28c <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 800b28e:	f002 fdc5 	bl	800de1c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	681a      	ldr	r2, [r3, #0]
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	43db      	mvns	r3, r3
 800b2a0:	401a      	ands	r2, r3
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800b2a6:	f002 fde7 	bl	800de78 <vPortExitCritical>

	return uxReturn;
 800b2aa:	693b      	ldr	r3, [r7, #16]
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3718      	adds	r7, #24
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800b2be:	2300      	movs	r3, #0
 800b2c0:	683a      	ldr	r2, [r7, #0]
 800b2c2:	6879      	ldr	r1, [r7, #4]
 800b2c4:	4804      	ldr	r0, [pc, #16]	; (800b2d8 <xEventGroupClearBitsFromISR+0x24>)
 800b2c6:	f002 fc65 	bl	800db94 <xTimerPendFunctionCallFromISR>
 800b2ca:	60f8      	str	r0, [r7, #12]

		return xReturn;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
	}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	0800b44f 	.word	0x0800b44f

0800b2dc <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b089      	sub	sp, #36	; 0x24
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b2e8:	f3ef 8211 	mrs	r2, BASEPRI
 800b2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f0:	f383 8811 	msr	BASEPRI, r3
 800b2f4:	f3bf 8f6f 	isb	sy
 800b2f8:	f3bf 8f4f 	dsb	sy
 800b2fc:	60fa      	str	r2, [r7, #12]
 800b2fe:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b300:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b302:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	617b      	str	r3, [r7, #20]
 800b30a:	69bb      	ldr	r3, [r7, #24]
 800b30c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	f383 8811 	msr	BASEPRI, r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800b314:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 800b316:	4618      	mov	r0, r3
 800b318:	3724      	adds	r7, #36	; 0x24
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr

0800b322 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800b322:	b580      	push	{r7, lr}
 800b324:	b08e      	sub	sp, #56	; 0x38
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
 800b32a:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800b32c:	2300      	movs	r3, #0
 800b32e:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800b334:	2300      	movs	r3, #0
 800b336:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d109      	bne.n	800b352 <xEventGroupSetBits+0x30>
	__asm volatile
 800b33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b342:	f383 8811 	msr	BASEPRI, r3
 800b346:	f3bf 8f6f 	isb	sy
 800b34a:	f3bf 8f4f 	dsb	sy
 800b34e:	613b      	str	r3, [r7, #16]
 800b350:	e7fe      	b.n	800b350 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d009      	beq.n	800b370 <xEventGroupSetBits+0x4e>
 800b35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b360:	f383 8811 	msr	BASEPRI, r3
 800b364:	f3bf 8f6f 	isb	sy
 800b368:	f3bf 8f4f 	dsb	sy
 800b36c:	60fb      	str	r3, [r7, #12]
 800b36e:	e7fe      	b.n	800b36e <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800b370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b372:	3304      	adds	r3, #4
 800b374:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b378:	3308      	adds	r3, #8
 800b37a:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800b37c:	f001 fb3c 	bl	800c9f8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800b380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800b386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b388:	681a      	ldr	r2, [r3, #0]
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	431a      	orrs	r2, r3
 800b38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b390:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800b392:	e03c      	b.n	800b40e <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 800b394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800b39a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800b3a4:	69bb      	ldr	r3, [r7, #24]
 800b3a6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b3aa:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b3b2:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d108      	bne.n	800b3d0 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800b3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	69bb      	ldr	r3, [r7, #24]
 800b3c4:	4013      	ands	r3, r2
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d00b      	beq.n	800b3e2 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3ce:	e008      	b.n	800b3e2 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800b3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	4013      	ands	r3, r2
 800b3d8:	69ba      	ldr	r2, [r7, #24]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d101      	bne.n	800b3e2 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800b3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d010      	beq.n	800b40a <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d003      	beq.n	800b3fa <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800b3f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3f4:	69bb      	ldr	r3, [r7, #24]
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800b3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b402:	4619      	mov	r1, r3
 800b404:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b406:	f001 fdd5 	bl	800cfb4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800b40a:	69fb      	ldr	r3, [r7, #28]
 800b40c:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800b40e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b410:	6a3b      	ldr	r3, [r7, #32]
 800b412:	429a      	cmp	r2, r3
 800b414:	d1be      	bne.n	800b394 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800b416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41c:	43db      	mvns	r3, r3
 800b41e:	401a      	ands	r2, r3
 800b420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b422:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800b424:	f001 faf6 	bl	800ca14 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800b428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b42a:	681b      	ldr	r3, [r3, #0]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3738      	adds	r7, #56	; 0x38
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800b43e:	6839      	ldr	r1, [r7, #0]
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f7ff ff6e 	bl	800b322 <xEventGroupSetBits>
}
 800b446:	bf00      	nop
 800b448:	3708      	adds	r7, #8
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b082      	sub	sp, #8
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
 800b456:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800b458:	6839      	ldr	r1, [r7, #0]
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f7ff fef4 	bl	800b248 <xEventGroupClearBits>
}
 800b460:	bf00      	nop
 800b462:	3708      	adds	r7, #8
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800b468:	b480      	push	{r7}
 800b46a:	b087      	sub	sp, #28
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800b474:	2300      	movs	r3, #0
 800b476:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d107      	bne.n	800b48e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800b47e:	68fa      	ldr	r2, [r7, #12]
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	4013      	ands	r3, r2
 800b484:	2b00      	cmp	r3, #0
 800b486:	d00a      	beq.n	800b49e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800b488:	2301      	movs	r3, #1
 800b48a:	617b      	str	r3, [r7, #20]
 800b48c:	e007      	b.n	800b49e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800b48e:	68fa      	ldr	r2, [r7, #12]
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	4013      	ands	r3, r2
 800b494:	68ba      	ldr	r2, [r7, #8]
 800b496:	429a      	cmp	r2, r3
 800b498:	d101      	bne.n	800b49e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800b49a:	2301      	movs	r3, #1
 800b49c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800b49e:	697b      	ldr	r3, [r7, #20]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	371c      	adds	r7, #28
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr

0800b4ac <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	68ba      	ldr	r2, [r7, #8]
 800b4bc:	68f9      	ldr	r1, [r7, #12]
 800b4be:	4804      	ldr	r0, [pc, #16]	; (800b4d0 <xEventGroupSetBitsFromISR+0x24>)
 800b4c0:	f002 fb68 	bl	800db94 <xTimerPendFunctionCallFromISR>
 800b4c4:	6178      	str	r0, [r7, #20]

		return xReturn;
 800b4c6:	697b      	ldr	r3, [r7, #20]
	}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3718      	adds	r7, #24
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	0800b435 	.word	0x0800b435

0800b4d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b083      	sub	sp, #12
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f103 0208 	add.w	r2, r3, #8
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f103 0208 	add.w	r2, r3, #8
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f103 0208 	add.w	r2, r3, #8
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2200      	movs	r2, #0
 800b506:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b508:	bf00      	nop
 800b50a:	370c      	adds	r7, #12
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2200      	movs	r2, #0
 800b520:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b522:	bf00      	nop
 800b524:	370c      	adds	r7, #12
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr

0800b52e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b52e:	b480      	push	{r7}
 800b530:	b085      	sub	sp, #20
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
 800b536:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	68fa      	ldr	r2, [r7, #12]
 800b542:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	689a      	ldr	r2, [r3, #8]
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	683a      	ldr	r2, [r7, #0]
 800b552:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	683a      	ldr	r2, [r7, #0]
 800b558:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	1c5a      	adds	r2, r3, #1
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	601a      	str	r2, [r3, #0]
}
 800b56a:	bf00      	nop
 800b56c:	3714      	adds	r7, #20
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr

0800b576 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b576:	b480      	push	{r7}
 800b578:	b085      	sub	sp, #20
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
 800b57e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b58c:	d103      	bne.n	800b596 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	691b      	ldr	r3, [r3, #16]
 800b592:	60fb      	str	r3, [r7, #12]
 800b594:	e00c      	b.n	800b5b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	3308      	adds	r3, #8
 800b59a:	60fb      	str	r3, [r7, #12]
 800b59c:	e002      	b.n	800b5a4 <vListInsert+0x2e>
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	60fb      	str	r3, [r7, #12]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	68ba      	ldr	r2, [r7, #8]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d2f6      	bcs.n	800b59e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	685a      	ldr	r2, [r3, #4]
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	683a      	ldr	r2, [r7, #0]
 800b5be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	68fa      	ldr	r2, [r7, #12]
 800b5c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	683a      	ldr	r2, [r7, #0]
 800b5ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	1c5a      	adds	r2, r3, #1
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	601a      	str	r2, [r3, #0]
}
 800b5dc:	bf00      	nop
 800b5de:	3714      	adds	r7, #20
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b085      	sub	sp, #20
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	691b      	ldr	r3, [r3, #16]
 800b5f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	6892      	ldr	r2, [r2, #8]
 800b5fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	6852      	ldr	r2, [r2, #4]
 800b608:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	429a      	cmp	r2, r3
 800b612:	d103      	bne.n	800b61c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	689a      	ldr	r2, [r3, #8]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	1e5a      	subs	r2, r3, #1
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
}
 800b630:	4618      	mov	r0, r3
 800b632:	3714      	adds	r7, #20
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d109      	bne.n	800b664 <xQueueGenericReset+0x28>
 800b650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b654:	f383 8811 	msr	BASEPRI, r3
 800b658:	f3bf 8f6f 	isb	sy
 800b65c:	f3bf 8f4f 	dsb	sy
 800b660:	60bb      	str	r3, [r7, #8]
 800b662:	e7fe      	b.n	800b662 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800b664:	f002 fbda 	bl	800de1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681a      	ldr	r2, [r3, #0]
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b670:	68f9      	ldr	r1, [r7, #12]
 800b672:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b674:	fb01 f303 	mul.w	r3, r1, r3
 800b678:	441a      	add	r2, r3
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2200      	movs	r2, #0
 800b682:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681a      	ldr	r2, [r3, #0]
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b694:	3b01      	subs	r3, #1
 800b696:	68f9      	ldr	r1, [r7, #12]
 800b698:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b69a:	fb01 f303 	mul.w	r3, r1, r3
 800b69e:	441a      	add	r2, r3
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	22ff      	movs	r2, #255	; 0xff
 800b6a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	22ff      	movs	r2, #255	; 0xff
 800b6b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d114      	bne.n	800b6e4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	691b      	ldr	r3, [r3, #16]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d01a      	beq.n	800b6f8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	3310      	adds	r3, #16
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f001 fc12 	bl	800cef0 <xTaskRemoveFromEventList>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d012      	beq.n	800b6f8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b6d2:	4b0d      	ldr	r3, [pc, #52]	; (800b708 <xQueueGenericReset+0xcc>)
 800b6d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6d8:	601a      	str	r2, [r3, #0]
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	f3bf 8f6f 	isb	sy
 800b6e2:	e009      	b.n	800b6f8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	3310      	adds	r3, #16
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f7ff fef3 	bl	800b4d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	3324      	adds	r3, #36	; 0x24
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f7ff feee 	bl	800b4d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b6f8:	f002 fbbe 	bl	800de78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b6fc:	2301      	movs	r3, #1
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3710      	adds	r7, #16
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	e000ed04 	.word	0xe000ed04

0800b70c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b08e      	sub	sp, #56	; 0x38
 800b710:	af02      	add	r7, sp, #8
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	607a      	str	r2, [r7, #4]
 800b718:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d109      	bne.n	800b734 <xQueueGenericCreateStatic+0x28>
 800b720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b724:	f383 8811 	msr	BASEPRI, r3
 800b728:	f3bf 8f6f 	isb	sy
 800b72c:	f3bf 8f4f 	dsb	sy
 800b730:	62bb      	str	r3, [r7, #40]	; 0x28
 800b732:	e7fe      	b.n	800b732 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d109      	bne.n	800b74e <xQueueGenericCreateStatic+0x42>
 800b73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73e:	f383 8811 	msr	BASEPRI, r3
 800b742:	f3bf 8f6f 	isb	sy
 800b746:	f3bf 8f4f 	dsb	sy
 800b74a:	627b      	str	r3, [r7, #36]	; 0x24
 800b74c:	e7fe      	b.n	800b74c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d002      	beq.n	800b75a <xQueueGenericCreateStatic+0x4e>
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d001      	beq.n	800b75e <xQueueGenericCreateStatic+0x52>
 800b75a:	2301      	movs	r3, #1
 800b75c:	e000      	b.n	800b760 <xQueueGenericCreateStatic+0x54>
 800b75e:	2300      	movs	r3, #0
 800b760:	2b00      	cmp	r3, #0
 800b762:	d109      	bne.n	800b778 <xQueueGenericCreateStatic+0x6c>
 800b764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b768:	f383 8811 	msr	BASEPRI, r3
 800b76c:	f3bf 8f6f 	isb	sy
 800b770:	f3bf 8f4f 	dsb	sy
 800b774:	623b      	str	r3, [r7, #32]
 800b776:	e7fe      	b.n	800b776 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d102      	bne.n	800b784 <xQueueGenericCreateStatic+0x78>
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d101      	bne.n	800b788 <xQueueGenericCreateStatic+0x7c>
 800b784:	2301      	movs	r3, #1
 800b786:	e000      	b.n	800b78a <xQueueGenericCreateStatic+0x7e>
 800b788:	2300      	movs	r3, #0
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d109      	bne.n	800b7a2 <xQueueGenericCreateStatic+0x96>
 800b78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b792:	f383 8811 	msr	BASEPRI, r3
 800b796:	f3bf 8f6f 	isb	sy
 800b79a:	f3bf 8f4f 	dsb	sy
 800b79e:	61fb      	str	r3, [r7, #28]
 800b7a0:	e7fe      	b.n	800b7a0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b7a2:	2350      	movs	r3, #80	; 0x50
 800b7a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	2b50      	cmp	r3, #80	; 0x50
 800b7aa:	d009      	beq.n	800b7c0 <xQueueGenericCreateStatic+0xb4>
 800b7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b0:	f383 8811 	msr	BASEPRI, r3
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	f3bf 8f4f 	dsb	sy
 800b7bc:	61bb      	str	r3, [r7, #24]
 800b7be:	e7fe      	b.n	800b7be <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b7c0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d00d      	beq.n	800b7e8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b7d4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7da:	9300      	str	r3, [sp, #0]
 800b7dc:	4613      	mov	r3, r2
 800b7de:	687a      	ldr	r2, [r7, #4]
 800b7e0:	68b9      	ldr	r1, [r7, #8]
 800b7e2:	68f8      	ldr	r0, [r7, #12]
 800b7e4:	f000 f844 	bl	800b870 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3730      	adds	r7, #48	; 0x30
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b08a      	sub	sp, #40	; 0x28
 800b7f6:	af02      	add	r7, sp, #8
 800b7f8:	60f8      	str	r0, [r7, #12]
 800b7fa:	60b9      	str	r1, [r7, #8]
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d109      	bne.n	800b81a <xQueueGenericCreate+0x28>
 800b806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80a:	f383 8811 	msr	BASEPRI, r3
 800b80e:	f3bf 8f6f 	isb	sy
 800b812:	f3bf 8f4f 	dsb	sy
 800b816:	613b      	str	r3, [r7, #16]
 800b818:	e7fe      	b.n	800b818 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d102      	bne.n	800b826 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b820:	2300      	movs	r3, #0
 800b822:	61fb      	str	r3, [r7, #28]
 800b824:	e004      	b.n	800b830 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	68ba      	ldr	r2, [r7, #8]
 800b82a:	fb02 f303 	mul.w	r3, r2, r3
 800b82e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b830:	69fb      	ldr	r3, [r7, #28]
 800b832:	3350      	adds	r3, #80	; 0x50
 800b834:	4618      	mov	r0, r3
 800b836:	f002 fc0b 	bl	800e050 <pvPortMalloc>
 800b83a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d011      	beq.n	800b866 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b842:	69bb      	ldr	r3, [r7, #24]
 800b844:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	3350      	adds	r3, #80	; 0x50
 800b84a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	2200      	movs	r2, #0
 800b850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b854:	79fa      	ldrb	r2, [r7, #7]
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	9300      	str	r3, [sp, #0]
 800b85a:	4613      	mov	r3, r2
 800b85c:	697a      	ldr	r2, [r7, #20]
 800b85e:	68b9      	ldr	r1, [r7, #8]
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f000 f805 	bl	800b870 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b866:	69bb      	ldr	r3, [r7, #24]
	}
 800b868:	4618      	mov	r0, r3
 800b86a:	3720      	adds	r7, #32
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b084      	sub	sp, #16
 800b874:	af00      	add	r7, sp, #0
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	607a      	str	r2, [r7, #4]
 800b87c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d103      	bne.n	800b88c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b884:	69bb      	ldr	r3, [r7, #24]
 800b886:	69ba      	ldr	r2, [r7, #24]
 800b888:	601a      	str	r2, [r3, #0]
 800b88a:	e002      	b.n	800b892 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b892:	69bb      	ldr	r3, [r7, #24]
 800b894:	68fa      	ldr	r2, [r7, #12]
 800b896:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b898:	69bb      	ldr	r3, [r7, #24]
 800b89a:	68ba      	ldr	r2, [r7, #8]
 800b89c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b89e:	2101      	movs	r1, #1
 800b8a0:	69b8      	ldr	r0, [r7, #24]
 800b8a2:	f7ff fecb 	bl	800b63c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b8a6:	69bb      	ldr	r3, [r7, #24]
 800b8a8:	78fa      	ldrb	r2, [r7, #3]
 800b8aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b8ae:	bf00      	nop
 800b8b0:	3710      	adds	r7, #16
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
	...

0800b8b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b08e      	sub	sp, #56	; 0x38
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	607a      	str	r2, [r7, #4]
 800b8c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d109      	bne.n	800b8e8 <xQueueGenericSend+0x30>
 800b8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d8:	f383 8811 	msr	BASEPRI, r3
 800b8dc:	f3bf 8f6f 	isb	sy
 800b8e0:	f3bf 8f4f 	dsb	sy
 800b8e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8e6:	e7fe      	b.n	800b8e6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d103      	bne.n	800b8f6 <xQueueGenericSend+0x3e>
 800b8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d101      	bne.n	800b8fa <xQueueGenericSend+0x42>
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e000      	b.n	800b8fc <xQueueGenericSend+0x44>
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d109      	bne.n	800b914 <xQueueGenericSend+0x5c>
 800b900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b904:	f383 8811 	msr	BASEPRI, r3
 800b908:	f3bf 8f6f 	isb	sy
 800b90c:	f3bf 8f4f 	dsb	sy
 800b910:	627b      	str	r3, [r7, #36]	; 0x24
 800b912:	e7fe      	b.n	800b912 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	2b02      	cmp	r3, #2
 800b918:	d103      	bne.n	800b922 <xQueueGenericSend+0x6a>
 800b91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d101      	bne.n	800b926 <xQueueGenericSend+0x6e>
 800b922:	2301      	movs	r3, #1
 800b924:	e000      	b.n	800b928 <xQueueGenericSend+0x70>
 800b926:	2300      	movs	r3, #0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d109      	bne.n	800b940 <xQueueGenericSend+0x88>
 800b92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b930:	f383 8811 	msr	BASEPRI, r3
 800b934:	f3bf 8f6f 	isb	sy
 800b938:	f3bf 8f4f 	dsb	sy
 800b93c:	623b      	str	r3, [r7, #32]
 800b93e:	e7fe      	b.n	800b93e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b940:	f001 fcec 	bl	800d31c <xTaskGetSchedulerState>
 800b944:	4603      	mov	r3, r0
 800b946:	2b00      	cmp	r3, #0
 800b948:	d102      	bne.n	800b950 <xQueueGenericSend+0x98>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d101      	bne.n	800b954 <xQueueGenericSend+0x9c>
 800b950:	2301      	movs	r3, #1
 800b952:	e000      	b.n	800b956 <xQueueGenericSend+0x9e>
 800b954:	2300      	movs	r3, #0
 800b956:	2b00      	cmp	r3, #0
 800b958:	d109      	bne.n	800b96e <xQueueGenericSend+0xb6>
 800b95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95e:	f383 8811 	msr	BASEPRI, r3
 800b962:	f3bf 8f6f 	isb	sy
 800b966:	f3bf 8f4f 	dsb	sy
 800b96a:	61fb      	str	r3, [r7, #28]
 800b96c:	e7fe      	b.n	800b96c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b96e:	f002 fa55 	bl	800de1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d302      	bcc.n	800b984 <xQueueGenericSend+0xcc>
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	2b02      	cmp	r3, #2
 800b982:	d129      	bne.n	800b9d8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b984:	683a      	ldr	r2, [r7, #0]
 800b986:	68b9      	ldr	r1, [r7, #8]
 800b988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b98a:	f000 fab6 	bl	800befa <prvCopyDataToQueue>
 800b98e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b994:	2b00      	cmp	r3, #0
 800b996:	d010      	beq.n	800b9ba <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99a:	3324      	adds	r3, #36	; 0x24
 800b99c:	4618      	mov	r0, r3
 800b99e:	f001 faa7 	bl	800cef0 <xTaskRemoveFromEventList>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d013      	beq.n	800b9d0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b9a8:	4b3f      	ldr	r3, [pc, #252]	; (800baa8 <xQueueGenericSend+0x1f0>)
 800b9aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9ae:	601a      	str	r2, [r3, #0]
 800b9b0:	f3bf 8f4f 	dsb	sy
 800b9b4:	f3bf 8f6f 	isb	sy
 800b9b8:	e00a      	b.n	800b9d0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d007      	beq.n	800b9d0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b9c0:	4b39      	ldr	r3, [pc, #228]	; (800baa8 <xQueueGenericSend+0x1f0>)
 800b9c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9c6:	601a      	str	r2, [r3, #0]
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b9d0:	f002 fa52 	bl	800de78 <vPortExitCritical>
				return pdPASS;
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	e063      	b.n	800baa0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d103      	bne.n	800b9e6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b9de:	f002 fa4b 	bl	800de78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	e05c      	b.n	800baa0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b9e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d106      	bne.n	800b9fa <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b9ec:	f107 0314 	add.w	r3, r7, #20
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f001 fb3f 	bl	800d074 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b9fa:	f002 fa3d 	bl	800de78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b9fe:	f000 fffb 	bl	800c9f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba02:	f002 fa0b 	bl	800de1c <vPortEnterCritical>
 800ba06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba0c:	b25b      	sxtb	r3, r3
 800ba0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba12:	d103      	bne.n	800ba1c <xQueueGenericSend+0x164>
 800ba14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba16:	2200      	movs	r2, #0
 800ba18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba22:	b25b      	sxtb	r3, r3
 800ba24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba28:	d103      	bne.n	800ba32 <xQueueGenericSend+0x17a>
 800ba2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba32:	f002 fa21 	bl	800de78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba36:	1d3a      	adds	r2, r7, #4
 800ba38:	f107 0314 	add.w	r3, r7, #20
 800ba3c:	4611      	mov	r1, r2
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f001 fb2e 	bl	800d0a0 <xTaskCheckForTimeOut>
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d124      	bne.n	800ba94 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ba4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba4c:	f000 fb4d 	bl	800c0ea <prvIsQueueFull>
 800ba50:	4603      	mov	r3, r0
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d018      	beq.n	800ba88 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ba56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba58:	3310      	adds	r3, #16
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	4611      	mov	r1, r2
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f001 f9be 	bl	800cde0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ba64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba66:	f000 fad8 	bl	800c01a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ba6a:	f000 ffd3 	bl	800ca14 <xTaskResumeAll>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f47f af7c 	bne.w	800b96e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800ba76:	4b0c      	ldr	r3, [pc, #48]	; (800baa8 <xQueueGenericSend+0x1f0>)
 800ba78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba7c:	601a      	str	r2, [r3, #0]
 800ba7e:	f3bf 8f4f 	dsb	sy
 800ba82:	f3bf 8f6f 	isb	sy
 800ba86:	e772      	b.n	800b96e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ba88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba8a:	f000 fac6 	bl	800c01a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba8e:	f000 ffc1 	bl	800ca14 <xTaskResumeAll>
 800ba92:	e76c      	b.n	800b96e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ba94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba96:	f000 fac0 	bl	800c01a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba9a:	f000 ffbb 	bl	800ca14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ba9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3738      	adds	r7, #56	; 0x38
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	e000ed04 	.word	0xe000ed04

0800baac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b08e      	sub	sp, #56	; 0x38
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	607a      	str	r2, [r7, #4]
 800bab8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800babe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d109      	bne.n	800bad8 <xQueueGenericSendFromISR+0x2c>
 800bac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac8:	f383 8811 	msr	BASEPRI, r3
 800bacc:	f3bf 8f6f 	isb	sy
 800bad0:	f3bf 8f4f 	dsb	sy
 800bad4:	627b      	str	r3, [r7, #36]	; 0x24
 800bad6:	e7fe      	b.n	800bad6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d103      	bne.n	800bae6 <xQueueGenericSendFromISR+0x3a>
 800bade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d101      	bne.n	800baea <xQueueGenericSendFromISR+0x3e>
 800bae6:	2301      	movs	r3, #1
 800bae8:	e000      	b.n	800baec <xQueueGenericSendFromISR+0x40>
 800baea:	2300      	movs	r3, #0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d109      	bne.n	800bb04 <xQueueGenericSendFromISR+0x58>
 800baf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf4:	f383 8811 	msr	BASEPRI, r3
 800baf8:	f3bf 8f6f 	isb	sy
 800bafc:	f3bf 8f4f 	dsb	sy
 800bb00:	623b      	str	r3, [r7, #32]
 800bb02:	e7fe      	b.n	800bb02 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	2b02      	cmp	r3, #2
 800bb08:	d103      	bne.n	800bb12 <xQueueGenericSendFromISR+0x66>
 800bb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	d101      	bne.n	800bb16 <xQueueGenericSendFromISR+0x6a>
 800bb12:	2301      	movs	r3, #1
 800bb14:	e000      	b.n	800bb18 <xQueueGenericSendFromISR+0x6c>
 800bb16:	2300      	movs	r3, #0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d109      	bne.n	800bb30 <xQueueGenericSendFromISR+0x84>
 800bb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb20:	f383 8811 	msr	BASEPRI, r3
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	f3bf 8f4f 	dsb	sy
 800bb2c:	61fb      	str	r3, [r7, #28]
 800bb2e:	e7fe      	b.n	800bb2e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb30:	f002 fa50 	bl	800dfd4 <vPortValidateInterruptPriority>
	__asm volatile
 800bb34:	f3ef 8211 	mrs	r2, BASEPRI
 800bb38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3c:	f383 8811 	msr	BASEPRI, r3
 800bb40:	f3bf 8f6f 	isb	sy
 800bb44:	f3bf 8f4f 	dsb	sy
 800bb48:	61ba      	str	r2, [r7, #24]
 800bb4a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bb4c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d302      	bcc.n	800bb62 <xQueueGenericSendFromISR+0xb6>
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	2b02      	cmp	r3, #2
 800bb60:	d12c      	bne.n	800bbbc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb6c:	683a      	ldr	r2, [r7, #0]
 800bb6e:	68b9      	ldr	r1, [r7, #8]
 800bb70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb72:	f000 f9c2 	bl	800befa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bb76:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bb7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb7e:	d112      	bne.n	800bba6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d016      	beq.n	800bbb6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8a:	3324      	adds	r3, #36	; 0x24
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f001 f9af 	bl	800cef0 <xTaskRemoveFromEventList>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d00e      	beq.n	800bbb6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d00b      	beq.n	800bbb6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2201      	movs	r2, #1
 800bba2:	601a      	str	r2, [r3, #0]
 800bba4:	e007      	b.n	800bbb6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bba6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bbaa:	3301      	adds	r3, #1
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	b25a      	sxtb	r2, r3
 800bbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bbba:	e001      	b.n	800bbc0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	637b      	str	r3, [r7, #52]	; 0x34
 800bbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc2:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bbca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3738      	adds	r7, #56	; 0x38
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b08c      	sub	sp, #48	; 0x30
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d109      	bne.n	800bc02 <xQueueReceive+0x2e>
	__asm volatile
 800bbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf2:	f383 8811 	msr	BASEPRI, r3
 800bbf6:	f3bf 8f6f 	isb	sy
 800bbfa:	f3bf 8f4f 	dsb	sy
 800bbfe:	623b      	str	r3, [r7, #32]
 800bc00:	e7fe      	b.n	800bc00 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d103      	bne.n	800bc10 <xQueueReceive+0x3c>
 800bc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d101      	bne.n	800bc14 <xQueueReceive+0x40>
 800bc10:	2301      	movs	r3, #1
 800bc12:	e000      	b.n	800bc16 <xQueueReceive+0x42>
 800bc14:	2300      	movs	r3, #0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d109      	bne.n	800bc2e <xQueueReceive+0x5a>
 800bc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc1e:	f383 8811 	msr	BASEPRI, r3
 800bc22:	f3bf 8f6f 	isb	sy
 800bc26:	f3bf 8f4f 	dsb	sy
 800bc2a:	61fb      	str	r3, [r7, #28]
 800bc2c:	e7fe      	b.n	800bc2c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc2e:	f001 fb75 	bl	800d31c <xTaskGetSchedulerState>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d102      	bne.n	800bc3e <xQueueReceive+0x6a>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d101      	bne.n	800bc42 <xQueueReceive+0x6e>
 800bc3e:	2301      	movs	r3, #1
 800bc40:	e000      	b.n	800bc44 <xQueueReceive+0x70>
 800bc42:	2300      	movs	r3, #0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d109      	bne.n	800bc5c <xQueueReceive+0x88>
 800bc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4c:	f383 8811 	msr	BASEPRI, r3
 800bc50:	f3bf 8f6f 	isb	sy
 800bc54:	f3bf 8f4f 	dsb	sy
 800bc58:	61bb      	str	r3, [r7, #24]
 800bc5a:	e7fe      	b.n	800bc5a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc5c:	f002 f8de 	bl	800de1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc64:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d01f      	beq.n	800bcac <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bc6c:	68b9      	ldr	r1, [r7, #8]
 800bc6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc70:	f000 f9ad 	bl	800bfce <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc76:	1e5a      	subs	r2, r3, #1
 800bc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7e:	691b      	ldr	r3, [r3, #16]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d00f      	beq.n	800bca4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc86:	3310      	adds	r3, #16
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f001 f931 	bl	800cef0 <xTaskRemoveFromEventList>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d007      	beq.n	800bca4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bc94:	4b3c      	ldr	r3, [pc, #240]	; (800bd88 <xQueueReceive+0x1b4>)
 800bc96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc9a:	601a      	str	r2, [r3, #0]
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bca4:	f002 f8e8 	bl	800de78 <vPortExitCritical>
				return pdPASS;
 800bca8:	2301      	movs	r3, #1
 800bcaa:	e069      	b.n	800bd80 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d103      	bne.n	800bcba <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bcb2:	f002 f8e1 	bl	800de78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	e062      	b.n	800bd80 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d106      	bne.n	800bcce <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bcc0:	f107 0310 	add.w	r3, r7, #16
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f001 f9d5 	bl	800d074 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bcca:	2301      	movs	r3, #1
 800bccc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bcce:	f002 f8d3 	bl	800de78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bcd2:	f000 fe91 	bl	800c9f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bcd6:	f002 f8a1 	bl	800de1c <vPortEnterCritical>
 800bcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bce0:	b25b      	sxtb	r3, r3
 800bce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bce6:	d103      	bne.n	800bcf0 <xQueueReceive+0x11c>
 800bce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcea:	2200      	movs	r2, #0
 800bcec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcf6:	b25b      	sxtb	r3, r3
 800bcf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcfc:	d103      	bne.n	800bd06 <xQueueReceive+0x132>
 800bcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd00:	2200      	movs	r2, #0
 800bd02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd06:	f002 f8b7 	bl	800de78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd0a:	1d3a      	adds	r2, r7, #4
 800bd0c:	f107 0310 	add.w	r3, r7, #16
 800bd10:	4611      	mov	r1, r2
 800bd12:	4618      	mov	r0, r3
 800bd14:	f001 f9c4 	bl	800d0a0 <xTaskCheckForTimeOut>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d123      	bne.n	800bd66 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd20:	f000 f9cd 	bl	800c0be <prvIsQueueEmpty>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d017      	beq.n	800bd5a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2c:	3324      	adds	r3, #36	; 0x24
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	4611      	mov	r1, r2
 800bd32:	4618      	mov	r0, r3
 800bd34:	f001 f854 	bl	800cde0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bd38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd3a:	f000 f96e 	bl	800c01a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bd3e:	f000 fe69 	bl	800ca14 <xTaskResumeAll>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d189      	bne.n	800bc5c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800bd48:	4b0f      	ldr	r3, [pc, #60]	; (800bd88 <xQueueReceive+0x1b4>)
 800bd4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd4e:	601a      	str	r2, [r3, #0]
 800bd50:	f3bf 8f4f 	dsb	sy
 800bd54:	f3bf 8f6f 	isb	sy
 800bd58:	e780      	b.n	800bc5c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bd5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd5c:	f000 f95d 	bl	800c01a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd60:	f000 fe58 	bl	800ca14 <xTaskResumeAll>
 800bd64:	e77a      	b.n	800bc5c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bd66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd68:	f000 f957 	bl	800c01a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd6c:	f000 fe52 	bl	800ca14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd72:	f000 f9a4 	bl	800c0be <prvIsQueueEmpty>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	f43f af6f 	beq.w	800bc5c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bd7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3730      	adds	r7, #48	; 0x30
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	e000ed04 	.word	0xe000ed04

0800bd8c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b08e      	sub	sp, #56	; 0x38
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	60f8      	str	r0, [r7, #12]
 800bd94:	60b9      	str	r1, [r7, #8]
 800bd96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d109      	bne.n	800bdb6 <xQueueReceiveFromISR+0x2a>
 800bda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda6:	f383 8811 	msr	BASEPRI, r3
 800bdaa:	f3bf 8f6f 	isb	sy
 800bdae:	f3bf 8f4f 	dsb	sy
 800bdb2:	623b      	str	r3, [r7, #32]
 800bdb4:	e7fe      	b.n	800bdb4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d103      	bne.n	800bdc4 <xQueueReceiveFromISR+0x38>
 800bdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d101      	bne.n	800bdc8 <xQueueReceiveFromISR+0x3c>
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	e000      	b.n	800bdca <xQueueReceiveFromISR+0x3e>
 800bdc8:	2300      	movs	r3, #0
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d109      	bne.n	800bde2 <xQueueReceiveFromISR+0x56>
 800bdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd2:	f383 8811 	msr	BASEPRI, r3
 800bdd6:	f3bf 8f6f 	isb	sy
 800bdda:	f3bf 8f4f 	dsb	sy
 800bdde:	61fb      	str	r3, [r7, #28]
 800bde0:	e7fe      	b.n	800bde0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bde2:	f002 f8f7 	bl	800dfd4 <vPortValidateInterruptPriority>
	__asm volatile
 800bde6:	f3ef 8211 	mrs	r2, BASEPRI
 800bdea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdee:	f383 8811 	msr	BASEPRI, r3
 800bdf2:	f3bf 8f6f 	isb	sy
 800bdf6:	f3bf 8f4f 	dsb	sy
 800bdfa:	61ba      	str	r2, [r7, #24]
 800bdfc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bdfe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800be00:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be06:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d02f      	beq.n	800be6e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800be0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800be18:	68b9      	ldr	r1, [r7, #8]
 800be1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be1c:	f000 f8d7 	bl	800bfce <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800be20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be22:	1e5a      	subs	r2, r3, #1
 800be24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be26:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800be28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800be2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be30:	d112      	bne.n	800be58 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d016      	beq.n	800be68 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3c:	3310      	adds	r3, #16
 800be3e:	4618      	mov	r0, r3
 800be40:	f001 f856 	bl	800cef0 <xTaskRemoveFromEventList>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00e      	beq.n	800be68 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d00b      	beq.n	800be68 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2201      	movs	r2, #1
 800be54:	601a      	str	r2, [r3, #0]
 800be56:	e007      	b.n	800be68 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800be58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be5c:	3301      	adds	r3, #1
 800be5e:	b2db      	uxtb	r3, r3
 800be60:	b25a      	sxtb	r2, r3
 800be62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800be68:	2301      	movs	r3, #1
 800be6a:	637b      	str	r3, [r7, #52]	; 0x34
 800be6c:	e001      	b.n	800be72 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800be6e:	2300      	movs	r3, #0
 800be70:	637b      	str	r3, [r7, #52]	; 0x34
 800be72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be74:	613b      	str	r3, [r7, #16]
	__asm volatile
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3738      	adds	r7, #56	; 0x38
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}

0800be86 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800be86:	b580      	push	{r7, lr}
 800be88:	b084      	sub	sp, #16
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d109      	bne.n	800bea8 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 800be94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be98:	f383 8811 	msr	BASEPRI, r3
 800be9c:	f3bf 8f6f 	isb	sy
 800bea0:	f3bf 8f4f 	dsb	sy
 800bea4:	60bb      	str	r3, [r7, #8]
 800bea6:	e7fe      	b.n	800bea6 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 800bea8:	f001 ffb8 	bl	800de1c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beb0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800beb2:	f001 ffe1 	bl	800de78 <vPortExitCritical>

	return uxReturn;
 800beb6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800beb8:	4618      	mov	r0, r3
 800beba:	3710      	adds	r7, #16
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800bec0:	b480      	push	{r7}
 800bec2:	b087      	sub	sp, #28
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d109      	bne.n	800bee6 <uxQueueMessagesWaitingFromISR+0x26>
 800bed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed6:	f383 8811 	msr	BASEPRI, r3
 800beda:	f3bf 8f6f 	isb	sy
 800bede:	f3bf 8f4f 	dsb	sy
 800bee2:	60fb      	str	r3, [r7, #12]
 800bee4:	e7fe      	b.n	800bee4 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beea:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800beec:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800beee:	4618      	mov	r0, r3
 800bef0:	371c      	adds	r7, #28
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr

0800befa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800befa:	b580      	push	{r7, lr}
 800befc:	b086      	sub	sp, #24
 800befe:	af00      	add	r7, sp, #0
 800bf00:	60f8      	str	r0, [r7, #12]
 800bf02:	60b9      	str	r1, [r7, #8]
 800bf04:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bf06:	2300      	movs	r3, #0
 800bf08:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf0e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d10d      	bne.n	800bf34 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d14d      	bne.n	800bfbc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	689b      	ldr	r3, [r3, #8]
 800bf24:	4618      	mov	r0, r3
 800bf26:	f001 fa17 	bl	800d358 <xTaskPriorityDisinherit>
 800bf2a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	609a      	str	r2, [r3, #8]
 800bf32:	e043      	b.n	800bfbc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d119      	bne.n	800bf6e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6858      	ldr	r0, [r3, #4]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf42:	461a      	mov	r2, r3
 800bf44:	68b9      	ldr	r1, [r7, #8]
 800bf46:	f002 ff6d 	bl	800ee24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	685a      	ldr	r2, [r3, #4]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf52:	441a      	add	r2, r3
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	685a      	ldr	r2, [r3, #4]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	689b      	ldr	r3, [r3, #8]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d32b      	bcc.n	800bfbc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	605a      	str	r2, [r3, #4]
 800bf6c:	e026      	b.n	800bfbc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	68d8      	ldr	r0, [r3, #12]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf76:	461a      	mov	r2, r3
 800bf78:	68b9      	ldr	r1, [r7, #8]
 800bf7a:	f002 ff53 	bl	800ee24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	68da      	ldr	r2, [r3, #12]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf86:	425b      	negs	r3, r3
 800bf88:	441a      	add	r2, r3
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	68da      	ldr	r2, [r3, #12]
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d207      	bcs.n	800bfaa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	689a      	ldr	r2, [r3, #8]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfa2:	425b      	negs	r3, r3
 800bfa4:	441a      	add	r2, r3
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	d105      	bne.n	800bfbc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d002      	beq.n	800bfbc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	1c5a      	adds	r2, r3, #1
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bfc4:	697b      	ldr	r3, [r7, #20]
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3718      	adds	r7, #24
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}

0800bfce <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bfce:	b580      	push	{r7, lr}
 800bfd0:	b082      	sub	sp, #8
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
 800bfd6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d018      	beq.n	800c012 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	68da      	ldr	r2, [r3, #12]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe8:	441a      	add	r2, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	68da      	ldr	r2, [r3, #12]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	689b      	ldr	r3, [r3, #8]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d303      	bcc.n	800c002 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681a      	ldr	r2, [r3, #0]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	68d9      	ldr	r1, [r3, #12]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c00a:	461a      	mov	r2, r3
 800c00c:	6838      	ldr	r0, [r7, #0]
 800c00e:	f002 ff09 	bl	800ee24 <memcpy>
	}
}
 800c012:	bf00      	nop
 800c014:	3708      	adds	r7, #8
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}

0800c01a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c01a:	b580      	push	{r7, lr}
 800c01c:	b084      	sub	sp, #16
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c022:	f001 fefb 	bl	800de1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c02c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c02e:	e011      	b.n	800c054 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c034:	2b00      	cmp	r3, #0
 800c036:	d012      	beq.n	800c05e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	3324      	adds	r3, #36	; 0x24
 800c03c:	4618      	mov	r0, r3
 800c03e:	f000 ff57 	bl	800cef0 <xTaskRemoveFromEventList>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d001      	beq.n	800c04c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c048:	f001 f88a 	bl	800d160 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c04c:	7bfb      	ldrb	r3, [r7, #15]
 800c04e:	3b01      	subs	r3, #1
 800c050:	b2db      	uxtb	r3, r3
 800c052:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	dce9      	bgt.n	800c030 <prvUnlockQueue+0x16>
 800c05c:	e000      	b.n	800c060 <prvUnlockQueue+0x46>
					break;
 800c05e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	22ff      	movs	r2, #255	; 0xff
 800c064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c068:	f001 ff06 	bl	800de78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c06c:	f001 fed6 	bl	800de1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c076:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c078:	e011      	b.n	800c09e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	691b      	ldr	r3, [r3, #16]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d012      	beq.n	800c0a8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	3310      	adds	r3, #16
 800c086:	4618      	mov	r0, r3
 800c088:	f000 ff32 	bl	800cef0 <xTaskRemoveFromEventList>
 800c08c:	4603      	mov	r3, r0
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d001      	beq.n	800c096 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c092:	f001 f865 	bl	800d160 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c096:	7bbb      	ldrb	r3, [r7, #14]
 800c098:	3b01      	subs	r3, #1
 800c09a:	b2db      	uxtb	r3, r3
 800c09c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c09e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	dce9      	bgt.n	800c07a <prvUnlockQueue+0x60>
 800c0a6:	e000      	b.n	800c0aa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c0a8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	22ff      	movs	r2, #255	; 0xff
 800c0ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c0b2:	f001 fee1 	bl	800de78 <vPortExitCritical>
}
 800c0b6:	bf00      	nop
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}

0800c0be <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b084      	sub	sp, #16
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0c6:	f001 fea9 	bl	800de1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d102      	bne.n	800c0d8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	60fb      	str	r3, [r7, #12]
 800c0d6:	e001      	b.n	800c0dc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c0dc:	f001 fecc 	bl	800de78 <vPortExitCritical>

	return xReturn;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3710      	adds	r7, #16
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}

0800c0ea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b084      	sub	sp, #16
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0f2:	f001 fe93 	bl	800de1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d102      	bne.n	800c108 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c102:	2301      	movs	r3, #1
 800c104:	60fb      	str	r3, [r7, #12]
 800c106:	e001      	b.n	800c10c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c108:	2300      	movs	r3, #0
 800c10a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c10c:	f001 feb4 	bl	800de78 <vPortExitCritical>

	return xReturn;
 800c110:	68fb      	ldr	r3, [r7, #12]
}
 800c112:	4618      	mov	r0, r3
 800c114:	3710      	adds	r7, #16
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
	...

0800c11c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c11c:	b480      	push	{r7}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c126:	2300      	movs	r3, #0
 800c128:	60fb      	str	r3, [r7, #12]
 800c12a:	e014      	b.n	800c156 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c12c:	4a0e      	ldr	r2, [pc, #56]	; (800c168 <vQueueAddToRegistry+0x4c>)
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d10b      	bne.n	800c150 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c138:	490b      	ldr	r1, [pc, #44]	; (800c168 <vQueueAddToRegistry+0x4c>)
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	683a      	ldr	r2, [r7, #0]
 800c13e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c142:	4a09      	ldr	r2, [pc, #36]	; (800c168 <vQueueAddToRegistry+0x4c>)
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	00db      	lsls	r3, r3, #3
 800c148:	4413      	add	r3, r2
 800c14a:	687a      	ldr	r2, [r7, #4]
 800c14c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c14e:	e005      	b.n	800c15c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	3301      	adds	r3, #1
 800c154:	60fb      	str	r3, [r7, #12]
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2b07      	cmp	r3, #7
 800c15a:	d9e7      	bls.n	800c12c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c15c:	bf00      	nop
 800c15e:	3714      	adds	r7, #20
 800c160:	46bd      	mov	sp, r7
 800c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c166:	4770      	bx	lr
 800c168:	20009310 	.word	0x20009310

0800c16c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b086      	sub	sp, #24
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c17c:	f001 fe4e 	bl	800de1c <vPortEnterCritical>
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c186:	b25b      	sxtb	r3, r3
 800c188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c18c:	d103      	bne.n	800c196 <vQueueWaitForMessageRestricted+0x2a>
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	2200      	movs	r2, #0
 800c192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c19c:	b25b      	sxtb	r3, r3
 800c19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1a2:	d103      	bne.n	800c1ac <vQueueWaitForMessageRestricted+0x40>
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1ac:	f001 fe64 	bl	800de78 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d106      	bne.n	800c1c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	3324      	adds	r3, #36	; 0x24
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	68b9      	ldr	r1, [r7, #8]
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f000 fe6b 	bl	800ce9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c1c6:	6978      	ldr	r0, [r7, #20]
 800c1c8:	f7ff ff27 	bl	800c01a <prvUnlockQueue>
	}
 800c1cc:	bf00      	nop
 800c1ce:	3718      	adds	r7, #24
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b08e      	sub	sp, #56	; 0x38
 800c1d8:	af04      	add	r7, sp, #16
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	607a      	str	r2, [r7, #4]
 800c1e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c1e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d109      	bne.n	800c1fc <xTaskCreateStatic+0x28>
 800c1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ec:	f383 8811 	msr	BASEPRI, r3
 800c1f0:	f3bf 8f6f 	isb	sy
 800c1f4:	f3bf 8f4f 	dsb	sy
 800c1f8:	623b      	str	r3, [r7, #32]
 800c1fa:	e7fe      	b.n	800c1fa <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800c1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d109      	bne.n	800c216 <xTaskCreateStatic+0x42>
 800c202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c206:	f383 8811 	msr	BASEPRI, r3
 800c20a:	f3bf 8f6f 	isb	sy
 800c20e:	f3bf 8f4f 	dsb	sy
 800c212:	61fb      	str	r3, [r7, #28]
 800c214:	e7fe      	b.n	800c214 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c216:	2370      	movs	r3, #112	; 0x70
 800c218:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	2b70      	cmp	r3, #112	; 0x70
 800c21e:	d009      	beq.n	800c234 <xTaskCreateStatic+0x60>
 800c220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c224:	f383 8811 	msr	BASEPRI, r3
 800c228:	f3bf 8f6f 	isb	sy
 800c22c:	f3bf 8f4f 	dsb	sy
 800c230:	61bb      	str	r3, [r7, #24]
 800c232:	e7fe      	b.n	800c232 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c234:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d01e      	beq.n	800c27a <xTaskCreateStatic+0xa6>
 800c23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d01b      	beq.n	800c27a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c244:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c248:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c24a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24e:	2202      	movs	r2, #2
 800c250:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c254:	2300      	movs	r3, #0
 800c256:	9303      	str	r3, [sp, #12]
 800c258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25a:	9302      	str	r3, [sp, #8]
 800c25c:	f107 0314 	add.w	r3, r7, #20
 800c260:	9301      	str	r3, [sp, #4]
 800c262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c264:	9300      	str	r3, [sp, #0]
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	68b9      	ldr	r1, [r7, #8]
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f000 f850 	bl	800c312 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c272:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c274:	f000 f8de 	bl	800c434 <prvAddNewTaskToReadyList>
 800c278:	e001      	b.n	800c27e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800c27a:	2300      	movs	r3, #0
 800c27c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c27e:	697b      	ldr	r3, [r7, #20]
	}
 800c280:	4618      	mov	r0, r3
 800c282:	3728      	adds	r7, #40	; 0x28
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b08c      	sub	sp, #48	; 0x30
 800c28c:	af04      	add	r7, sp, #16
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	603b      	str	r3, [r7, #0]
 800c294:	4613      	mov	r3, r2
 800c296:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c298:	88fb      	ldrh	r3, [r7, #6]
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	4618      	mov	r0, r3
 800c29e:	f001 fed7 	bl	800e050 <pvPortMalloc>
 800c2a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d00e      	beq.n	800c2c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c2aa:	2070      	movs	r0, #112	; 0x70
 800c2ac:	f001 fed0 	bl	800e050 <pvPortMalloc>
 800c2b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c2b2:	69fb      	ldr	r3, [r7, #28]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d003      	beq.n	800c2c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c2b8:	69fb      	ldr	r3, [r7, #28]
 800c2ba:	697a      	ldr	r2, [r7, #20]
 800c2bc:	631a      	str	r2, [r3, #48]	; 0x30
 800c2be:	e005      	b.n	800c2cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c2c0:	6978      	ldr	r0, [r7, #20]
 800c2c2:	f001 ff87 	bl	800e1d4 <vPortFree>
 800c2c6:	e001      	b.n	800c2cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c2cc:	69fb      	ldr	r3, [r7, #28]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d017      	beq.n	800c302 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c2d2:	69fb      	ldr	r3, [r7, #28]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c2da:	88fa      	ldrh	r2, [r7, #6]
 800c2dc:	2300      	movs	r3, #0
 800c2de:	9303      	str	r3, [sp, #12]
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	9302      	str	r3, [sp, #8]
 800c2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e6:	9301      	str	r3, [sp, #4]
 800c2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ea:	9300      	str	r3, [sp, #0]
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	68b9      	ldr	r1, [r7, #8]
 800c2f0:	68f8      	ldr	r0, [r7, #12]
 800c2f2:	f000 f80e 	bl	800c312 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2f6:	69f8      	ldr	r0, [r7, #28]
 800c2f8:	f000 f89c 	bl	800c434 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	61bb      	str	r3, [r7, #24]
 800c300:	e002      	b.n	800c308 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c302:	f04f 33ff 	mov.w	r3, #4294967295
 800c306:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c308:	69bb      	ldr	r3, [r7, #24]
	}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3720      	adds	r7, #32
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c312:	b580      	push	{r7, lr}
 800c314:	b088      	sub	sp, #32
 800c316:	af00      	add	r7, sp, #0
 800c318:	60f8      	str	r0, [r7, #12]
 800c31a:	60b9      	str	r1, [r7, #8]
 800c31c:	607a      	str	r2, [r7, #4]
 800c31e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c322:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	009b      	lsls	r3, r3, #2
 800c328:	461a      	mov	r2, r3
 800c32a:	21a5      	movs	r1, #165	; 0xa5
 800c32c:	f002 fd85 	bl	800ee3a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c33a:	3b01      	subs	r3, #1
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	4413      	add	r3, r2
 800c340:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c342:	69bb      	ldr	r3, [r7, #24]
 800c344:	f023 0307 	bic.w	r3, r3, #7
 800c348:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	f003 0307 	and.w	r3, r3, #7
 800c350:	2b00      	cmp	r3, #0
 800c352:	d009      	beq.n	800c368 <prvInitialiseNewTask+0x56>
 800c354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c358:	f383 8811 	msr	BASEPRI, r3
 800c35c:	f3bf 8f6f 	isb	sy
 800c360:	f3bf 8f4f 	dsb	sy
 800c364:	617b      	str	r3, [r7, #20]
 800c366:	e7fe      	b.n	800c366 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800c368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36a:	69ba      	ldr	r2, [r7, #24]
 800c36c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d01f      	beq.n	800c3b4 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c374:	2300      	movs	r3, #0
 800c376:	61fb      	str	r3, [r7, #28]
 800c378:	e012      	b.n	800c3a0 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c37a:	68ba      	ldr	r2, [r7, #8]
 800c37c:	69fb      	ldr	r3, [r7, #28]
 800c37e:	4413      	add	r3, r2
 800c380:	7819      	ldrb	r1, [r3, #0]
 800c382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	4413      	add	r3, r2
 800c388:	3334      	adds	r3, #52	; 0x34
 800c38a:	460a      	mov	r2, r1
 800c38c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c38e:	68ba      	ldr	r2, [r7, #8]
 800c390:	69fb      	ldr	r3, [r7, #28]
 800c392:	4413      	add	r3, r2
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d006      	beq.n	800c3a8 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c39a:	69fb      	ldr	r3, [r7, #28]
 800c39c:	3301      	adds	r3, #1
 800c39e:	61fb      	str	r3, [r7, #28]
 800c3a0:	69fb      	ldr	r3, [r7, #28]
 800c3a2:	2b1f      	cmp	r3, #31
 800c3a4:	d9e9      	bls.n	800c37a <prvInitialiseNewTask+0x68>
 800c3a6:	e000      	b.n	800c3aa <prvInitialiseNewTask+0x98>
			{
				break;
 800c3a8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800c3b2:	e003      	b.n	800c3bc <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3be:	2b37      	cmp	r3, #55	; 0x37
 800c3c0:	d901      	bls.n	800c3c6 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c3c2:	2337      	movs	r3, #55	; 0x37
 800c3c4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3ca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3d0:	661a      	str	r2, [r3, #96]	; 0x60
		pxNewTCB->uxMutexesHeld = 0;
 800c3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	665a      	str	r2, [r3, #100]	; 0x64
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3da:	3304      	adds	r3, #4
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7ff f899 	bl	800b514 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e4:	3318      	adds	r3, #24
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7ff f894 	bl	800b514 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c400:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c404:	2200      	movs	r2, #0
 800c406:	669a      	str	r2, [r3, #104]	; 0x68
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40a:	2200      	movs	r2, #0
 800c40c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c410:	683a      	ldr	r2, [r7, #0]
 800c412:	68f9      	ldr	r1, [r7, #12]
 800c414:	69b8      	ldr	r0, [r7, #24]
 800c416:	f001 fbdd 	bl	800dbd4 <pxPortInitialiseStack>
 800c41a:	4602      	mov	r2, r0
 800c41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c422:	2b00      	cmp	r3, #0
 800c424:	d002      	beq.n	800c42c <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c42a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c42c:	bf00      	nop
 800c42e:	3720      	adds	r7, #32
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c43c:	f001 fcee 	bl	800de1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c440:	4b2d      	ldr	r3, [pc, #180]	; (800c4f8 <prvAddNewTaskToReadyList+0xc4>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	3301      	adds	r3, #1
 800c446:	4a2c      	ldr	r2, [pc, #176]	; (800c4f8 <prvAddNewTaskToReadyList+0xc4>)
 800c448:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c44a:	4b2c      	ldr	r3, [pc, #176]	; (800c4fc <prvAddNewTaskToReadyList+0xc8>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d109      	bne.n	800c466 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c452:	4a2a      	ldr	r2, [pc, #168]	; (800c4fc <prvAddNewTaskToReadyList+0xc8>)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c458:	4b27      	ldr	r3, [pc, #156]	; (800c4f8 <prvAddNewTaskToReadyList+0xc4>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	d110      	bne.n	800c482 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c460:	f000 fea2 	bl	800d1a8 <prvInitialiseTaskLists>
 800c464:	e00d      	b.n	800c482 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c466:	4b26      	ldr	r3, [pc, #152]	; (800c500 <prvAddNewTaskToReadyList+0xcc>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d109      	bne.n	800c482 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c46e:	4b23      	ldr	r3, [pc, #140]	; (800c4fc <prvAddNewTaskToReadyList+0xc8>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c478:	429a      	cmp	r2, r3
 800c47a:	d802      	bhi.n	800c482 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c47c:	4a1f      	ldr	r2, [pc, #124]	; (800c4fc <prvAddNewTaskToReadyList+0xc8>)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c482:	4b20      	ldr	r3, [pc, #128]	; (800c504 <prvAddNewTaskToReadyList+0xd0>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	3301      	adds	r3, #1
 800c488:	4a1e      	ldr	r2, [pc, #120]	; (800c504 <prvAddNewTaskToReadyList+0xd0>)
 800c48a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c48c:	4b1d      	ldr	r3, [pc, #116]	; (800c504 <prvAddNewTaskToReadyList+0xd0>)
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	659a      	str	r2, [r3, #88]	; 0x58
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c498:	4b1b      	ldr	r3, [pc, #108]	; (800c508 <prvAddNewTaskToReadyList+0xd4>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d903      	bls.n	800c4a8 <prvAddNewTaskToReadyList+0x74>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a4:	4a18      	ldr	r2, [pc, #96]	; (800c508 <prvAddNewTaskToReadyList+0xd4>)
 800c4a6:	6013      	str	r3, [r2, #0]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ac:	4613      	mov	r3, r2
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	4413      	add	r3, r2
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	4a15      	ldr	r2, [pc, #84]	; (800c50c <prvAddNewTaskToReadyList+0xd8>)
 800c4b6:	441a      	add	r2, r3
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	3304      	adds	r3, #4
 800c4bc:	4619      	mov	r1, r3
 800c4be:	4610      	mov	r0, r2
 800c4c0:	f7ff f835 	bl	800b52e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c4c4:	f001 fcd8 	bl	800de78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c4c8:	4b0d      	ldr	r3, [pc, #52]	; (800c500 <prvAddNewTaskToReadyList+0xcc>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d00e      	beq.n	800c4ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c4d0:	4b0a      	ldr	r3, [pc, #40]	; (800c4fc <prvAddNewTaskToReadyList+0xc8>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d207      	bcs.n	800c4ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c4de:	4b0c      	ldr	r3, [pc, #48]	; (800c510 <prvAddNewTaskToReadyList+0xdc>)
 800c4e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4e4:	601a      	str	r2, [r3, #0]
 800c4e6:	f3bf 8f4f 	dsb	sy
 800c4ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4ee:	bf00      	nop
 800c4f0:	3708      	adds	r7, #8
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	20000f74 	.word	0x20000f74
 800c4fc:	20000aa0 	.word	0x20000aa0
 800c500:	20000f80 	.word	0x20000f80
 800c504:	20000f90 	.word	0x20000f90
 800c508:	20000f7c 	.word	0x20000f7c
 800c50c:	20000aa4 	.word	0x20000aa4
 800c510:	e000ed04 	.word	0xe000ed04

0800c514 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c51c:	f001 fc7e 	bl	800de1c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d102      	bne.n	800c52c <vTaskDelete+0x18>
 800c526:	4b2c      	ldr	r3, [pc, #176]	; (800c5d8 <vTaskDelete+0xc4>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	e000      	b.n	800c52e <vTaskDelete+0x1a>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	3304      	adds	r3, #4
 800c534:	4618      	mov	r0, r3
 800c536:	f7ff f857 	bl	800b5e8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d004      	beq.n	800c54c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	3318      	adds	r3, #24
 800c546:	4618      	mov	r0, r3
 800c548:	f7ff f84e 	bl	800b5e8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c54c:	4b23      	ldr	r3, [pc, #140]	; (800c5dc <vTaskDelete+0xc8>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	3301      	adds	r3, #1
 800c552:	4a22      	ldr	r2, [pc, #136]	; (800c5dc <vTaskDelete+0xc8>)
 800c554:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c556:	4b20      	ldr	r3, [pc, #128]	; (800c5d8 <vTaskDelete+0xc4>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	68fa      	ldr	r2, [r7, #12]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d10b      	bne.n	800c578 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	3304      	adds	r3, #4
 800c564:	4619      	mov	r1, r3
 800c566:	481e      	ldr	r0, [pc, #120]	; (800c5e0 <vTaskDelete+0xcc>)
 800c568:	f7fe ffe1 	bl	800b52e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c56c:	4b1d      	ldr	r3, [pc, #116]	; (800c5e4 <vTaskDelete+0xd0>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	3301      	adds	r3, #1
 800c572:	4a1c      	ldr	r2, [pc, #112]	; (800c5e4 <vTaskDelete+0xd0>)
 800c574:	6013      	str	r3, [r2, #0]
 800c576:	e009      	b.n	800c58c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c578:	4b1b      	ldr	r3, [pc, #108]	; (800c5e8 <vTaskDelete+0xd4>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	3b01      	subs	r3, #1
 800c57e:	4a1a      	ldr	r2, [pc, #104]	; (800c5e8 <vTaskDelete+0xd4>)
 800c580:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800c582:	68f8      	ldr	r0, [r7, #12]
 800c584:	f000 fe7c 	bl	800d280 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c588:	f000 fea8 	bl	800d2dc <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800c58c:	f001 fc74 	bl	800de78 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c590:	4b16      	ldr	r3, [pc, #88]	; (800c5ec <vTaskDelete+0xd8>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d01a      	beq.n	800c5ce <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 800c598:	4b0f      	ldr	r3, [pc, #60]	; (800c5d8 <vTaskDelete+0xc4>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	68fa      	ldr	r2, [r7, #12]
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d115      	bne.n	800c5ce <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c5a2:	4b13      	ldr	r3, [pc, #76]	; (800c5f0 <vTaskDelete+0xdc>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d009      	beq.n	800c5be <vTaskDelete+0xaa>
 800c5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ae:	f383 8811 	msr	BASEPRI, r3
 800c5b2:	f3bf 8f6f 	isb	sy
 800c5b6:	f3bf 8f4f 	dsb	sy
 800c5ba:	60bb      	str	r3, [r7, #8]
 800c5bc:	e7fe      	b.n	800c5bc <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 800c5be:	4b0d      	ldr	r3, [pc, #52]	; (800c5f4 <vTaskDelete+0xe0>)
 800c5c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5c4:	601a      	str	r2, [r3, #0]
 800c5c6:	f3bf 8f4f 	dsb	sy
 800c5ca:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c5ce:	bf00      	nop
 800c5d0:	3710      	adds	r7, #16
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	20000aa0 	.word	0x20000aa0
 800c5dc:	20000f90 	.word	0x20000f90
 800c5e0:	20000f48 	.word	0x20000f48
 800c5e4:	20000f5c 	.word	0x20000f5c
 800c5e8:	20000f74 	.word	0x20000f74
 800c5ec:	20000f80 	.word	0x20000f80
 800c5f0:	20000f9c 	.word	0x20000f9c
 800c5f4:	e000ed04 	.word	0xe000ed04

0800c5f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c600:	2300      	movs	r3, #0
 800c602:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d016      	beq.n	800c638 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c60a:	4b13      	ldr	r3, [pc, #76]	; (800c658 <vTaskDelay+0x60>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d009      	beq.n	800c626 <vTaskDelay+0x2e>
 800c612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c616:	f383 8811 	msr	BASEPRI, r3
 800c61a:	f3bf 8f6f 	isb	sy
 800c61e:	f3bf 8f4f 	dsb	sy
 800c622:	60bb      	str	r3, [r7, #8]
 800c624:	e7fe      	b.n	800c624 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800c626:	f000 f9e7 	bl	800c9f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c62a:	2100      	movs	r1, #0
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f000 ff17 	bl	800d460 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c632:	f000 f9ef 	bl	800ca14 <xTaskResumeAll>
 800c636:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d107      	bne.n	800c64e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800c63e:	4b07      	ldr	r3, [pc, #28]	; (800c65c <vTaskDelay+0x64>)
 800c640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c644:	601a      	str	r2, [r3, #0]
 800c646:	f3bf 8f4f 	dsb	sy
 800c64a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c64e:	bf00      	nop
 800c650:	3710      	adds	r7, #16
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
 800c656:	bf00      	nop
 800c658:	20000f9c 	.word	0x20000f9c
 800c65c:	e000ed04 	.word	0xe000ed04

0800c660 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800c660:	b580      	push	{r7, lr}
 800c662:	b088      	sub	sp, #32
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800c66c:	69bb      	ldr	r3, [r7, #24]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d109      	bne.n	800c686 <eTaskGetState+0x26>
 800c672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c676:	f383 8811 	msr	BASEPRI, r3
 800c67a:	f3bf 8f6f 	isb	sy
 800c67e:	f3bf 8f4f 	dsb	sy
 800c682:	60bb      	str	r3, [r7, #8]
 800c684:	e7fe      	b.n	800c684 <eTaskGetState+0x24>

		if( pxTCB == pxCurrentTCB )
 800c686:	4b24      	ldr	r3, [pc, #144]	; (800c718 <eTaskGetState+0xb8>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	69ba      	ldr	r2, [r7, #24]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d102      	bne.n	800c696 <eTaskGetState+0x36>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800c690:	2300      	movs	r3, #0
 800c692:	77fb      	strb	r3, [r7, #31]
 800c694:	e03a      	b.n	800c70c <eTaskGetState+0xac>
		}
		else
		{
			taskENTER_CRITICAL();
 800c696:	f001 fbc1 	bl	800de1c <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800c69a:	69bb      	ldr	r3, [r7, #24]
 800c69c:	695b      	ldr	r3, [r3, #20]
 800c69e:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800c6a0:	4b1e      	ldr	r3, [pc, #120]	; (800c71c <eTaskGetState+0xbc>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800c6a6:	4b1e      	ldr	r3, [pc, #120]	; (800c720 <eTaskGetState+0xc0>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800c6ac:	f001 fbe4 	bl	800de78 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800c6b0:	697a      	ldr	r2, [r7, #20]
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d003      	beq.n	800c6c0 <eTaskGetState+0x60>
 800c6b8:	697a      	ldr	r2, [r7, #20]
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d102      	bne.n	800c6c6 <eTaskGetState+0x66>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800c6c0:	2302      	movs	r3, #2
 800c6c2:	77fb      	strb	r3, [r7, #31]
 800c6c4:	e022      	b.n	800c70c <eTaskGetState+0xac>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	4a16      	ldr	r2, [pc, #88]	; (800c724 <eTaskGetState+0xc4>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d112      	bne.n	800c6f4 <eTaskGetState+0x94>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800c6ce:	69bb      	ldr	r3, [r7, #24]
 800c6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d10b      	bne.n	800c6ee <eTaskGetState+0x8e>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c6d6:	69bb      	ldr	r3, [r7, #24]
 800c6d8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	2b01      	cmp	r3, #1
 800c6e0:	d102      	bne.n	800c6e8 <eTaskGetState+0x88>
							{
								eReturn = eBlocked;
 800c6e2:	2302      	movs	r3, #2
 800c6e4:	77fb      	strb	r3, [r7, #31]
 800c6e6:	e011      	b.n	800c70c <eTaskGetState+0xac>
							}
							else
							{
								eReturn = eSuspended;
 800c6e8:	2303      	movs	r3, #3
 800c6ea:	77fb      	strb	r3, [r7, #31]
 800c6ec:	e00e      	b.n	800c70c <eTaskGetState+0xac>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800c6ee:	2302      	movs	r3, #2
 800c6f0:	77fb      	strb	r3, [r7, #31]
 800c6f2:	e00b      	b.n	800c70c <eTaskGetState+0xac>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	4a0c      	ldr	r2, [pc, #48]	; (800c728 <eTaskGetState+0xc8>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d002      	beq.n	800c702 <eTaskGetState+0xa2>
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d102      	bne.n	800c708 <eTaskGetState+0xa8>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800c702:	2304      	movs	r3, #4
 800c704:	77fb      	strb	r3, [r7, #31]
 800c706:	e001      	b.n	800c70c <eTaskGetState+0xac>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800c708:	2301      	movs	r3, #1
 800c70a:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800c70c:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800c70e:	4618      	mov	r0, r3
 800c710:	3720      	adds	r7, #32
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	20000aa0 	.word	0x20000aa0
 800c71c:	20000f2c 	.word	0x20000f2c
 800c720:	20000f30 	.word	0x20000f30
 800c724:	20000f60 	.word	0x20000f60
 800c728:	20000f48 	.word	0x20000f48

0800c72c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b084      	sub	sp, #16
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c734:	f001 fb72 	bl	800de1c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d102      	bne.n	800c744 <vTaskSuspend+0x18>
 800c73e:	4b2f      	ldr	r3, [pc, #188]	; (800c7fc <vTaskSuspend+0xd0>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	e000      	b.n	800c746 <vTaskSuspend+0x1a>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	3304      	adds	r3, #4
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7fe ff4b 	bl	800b5e8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c756:	2b00      	cmp	r3, #0
 800c758:	d004      	beq.n	800c764 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	3318      	adds	r3, #24
 800c75e:	4618      	mov	r0, r3
 800c760:	f7fe ff42 	bl	800b5e8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	3304      	adds	r3, #4
 800c768:	4619      	mov	r1, r3
 800c76a:	4825      	ldr	r0, [pc, #148]	; (800c800 <vTaskSuspend+0xd4>)
 800c76c:	f7fe fedf 	bl	800b52e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800c776:	b2db      	uxtb	r3, r3
 800c778:	2b01      	cmp	r3, #1
 800c77a:	d103      	bne.n	800c784 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2200      	movs	r2, #0
 800c780:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800c784:	f001 fb78 	bl	800de78 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800c788:	4b1e      	ldr	r3, [pc, #120]	; (800c804 <vTaskSuspend+0xd8>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d005      	beq.n	800c79c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800c790:	f001 fb44 	bl	800de1c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800c794:	f000 fda2 	bl	800d2dc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800c798:	f001 fb6e 	bl	800de78 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800c79c:	4b17      	ldr	r3, [pc, #92]	; (800c7fc <vTaskSuspend+0xd0>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	68fa      	ldr	r2, [r7, #12]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d126      	bne.n	800c7f4 <vTaskSuspend+0xc8>
		{
			if( xSchedulerRunning != pdFALSE )
 800c7a6:	4b17      	ldr	r3, [pc, #92]	; (800c804 <vTaskSuspend+0xd8>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d016      	beq.n	800c7dc <vTaskSuspend+0xb0>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800c7ae:	4b16      	ldr	r3, [pc, #88]	; (800c808 <vTaskSuspend+0xdc>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d009      	beq.n	800c7ca <vTaskSuspend+0x9e>
 800c7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ba:	f383 8811 	msr	BASEPRI, r3
 800c7be:	f3bf 8f6f 	isb	sy
 800c7c2:	f3bf 8f4f 	dsb	sy
 800c7c6:	60bb      	str	r3, [r7, #8]
 800c7c8:	e7fe      	b.n	800c7c8 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 800c7ca:	4b10      	ldr	r3, [pc, #64]	; (800c80c <vTaskSuspend+0xe0>)
 800c7cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7d0:	601a      	str	r2, [r3, #0]
 800c7d2:	f3bf 8f4f 	dsb	sy
 800c7d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c7da:	e00b      	b.n	800c7f4 <vTaskSuspend+0xc8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800c7dc:	4b08      	ldr	r3, [pc, #32]	; (800c800 <vTaskSuspend+0xd4>)
 800c7de:	681a      	ldr	r2, [r3, #0]
 800c7e0:	4b0b      	ldr	r3, [pc, #44]	; (800c810 <vTaskSuspend+0xe4>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d103      	bne.n	800c7f0 <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 800c7e8:	4b04      	ldr	r3, [pc, #16]	; (800c7fc <vTaskSuspend+0xd0>)
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	601a      	str	r2, [r3, #0]
	}
 800c7ee:	e001      	b.n	800c7f4 <vTaskSuspend+0xc8>
					vTaskSwitchContext();
 800c7f0:	f000 fa74 	bl	800ccdc <vTaskSwitchContext>
	}
 800c7f4:	bf00      	nop
 800c7f6:	3710      	adds	r7, #16
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	20000aa0 	.word	0x20000aa0
 800c800:	20000f60 	.word	0x20000f60
 800c804:	20000f80 	.word	0x20000f80
 800c808:	20000f9c 	.word	0x20000f9c
 800c80c:	e000ed04 	.word	0xe000ed04
 800c810:	20000f74 	.word	0x20000f74

0800c814 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800c814:	b480      	push	{r7}
 800c816:	b087      	sub	sp, #28
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800c81c:	2300      	movs	r3, #0
 800c81e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d109      	bne.n	800c83e <prvTaskIsTaskSuspended+0x2a>
 800c82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82e:	f383 8811 	msr	BASEPRI, r3
 800c832:	f3bf 8f6f 	isb	sy
 800c836:	f3bf 8f4f 	dsb	sy
 800c83a:	60fb      	str	r3, [r7, #12]
 800c83c:	e7fe      	b.n	800c83c <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	695b      	ldr	r3, [r3, #20]
 800c842:	4a0a      	ldr	r2, [pc, #40]	; (800c86c <prvTaskIsTaskSuspended+0x58>)
 800c844:	4293      	cmp	r3, r2
 800c846:	d10a      	bne.n	800c85e <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c84c:	4a08      	ldr	r2, [pc, #32]	; (800c870 <prvTaskIsTaskSuspended+0x5c>)
 800c84e:	4293      	cmp	r3, r2
 800c850:	d005      	beq.n	800c85e <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c856:	2b00      	cmp	r3, #0
 800c858:	d101      	bne.n	800c85e <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 800c85a:	2301      	movs	r3, #1
 800c85c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c85e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800c860:	4618      	mov	r0, r3
 800c862:	371c      	adds	r7, #28
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr
 800c86c:	20000f60 	.word	0x20000f60
 800c870:	20000f34 	.word	0x20000f34

0800c874 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d109      	bne.n	800c89a <vTaskResume+0x26>
 800c886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88a:	f383 8811 	msr	BASEPRI, r3
 800c88e:	f3bf 8f6f 	isb	sy
 800c892:	f3bf 8f4f 	dsb	sy
 800c896:	60bb      	str	r3, [r7, #8]
 800c898:	e7fe      	b.n	800c898 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800c89a:	4b21      	ldr	r3, [pc, #132]	; (800c920 <vTaskResume+0xac>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	68fa      	ldr	r2, [r7, #12]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d038      	beq.n	800c916 <vTaskResume+0xa2>
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d035      	beq.n	800c916 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800c8aa:	f001 fab7 	bl	800de1c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800c8ae:	68f8      	ldr	r0, [r7, #12]
 800c8b0:	f7ff ffb0 	bl	800c814 <prvTaskIsTaskSuspended>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d02b      	beq.n	800c912 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	3304      	adds	r3, #4
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7fe fe92 	bl	800b5e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8c8:	4b16      	ldr	r3, [pc, #88]	; (800c924 <vTaskResume+0xb0>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d903      	bls.n	800c8d8 <vTaskResume+0x64>
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d4:	4a13      	ldr	r2, [pc, #76]	; (800c924 <vTaskResume+0xb0>)
 800c8d6:	6013      	str	r3, [r2, #0]
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8dc:	4613      	mov	r3, r2
 800c8de:	009b      	lsls	r3, r3, #2
 800c8e0:	4413      	add	r3, r2
 800c8e2:	009b      	lsls	r3, r3, #2
 800c8e4:	4a10      	ldr	r2, [pc, #64]	; (800c928 <vTaskResume+0xb4>)
 800c8e6:	441a      	add	r2, r3
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	3304      	adds	r3, #4
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	4610      	mov	r0, r2
 800c8f0:	f7fe fe1d 	bl	800b52e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8f8:	4b09      	ldr	r3, [pc, #36]	; (800c920 <vTaskResume+0xac>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d307      	bcc.n	800c912 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800c902:	4b0a      	ldr	r3, [pc, #40]	; (800c92c <vTaskResume+0xb8>)
 800c904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c908:	601a      	str	r2, [r3, #0]
 800c90a:	f3bf 8f4f 	dsb	sy
 800c90e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800c912:	f001 fab1 	bl	800de78 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c916:	bf00      	nop
 800c918:	3710      	adds	r7, #16
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
 800c91e:	bf00      	nop
 800c920:	20000aa0 	.word	0x20000aa0
 800c924:	20000f7c 	.word	0x20000f7c
 800c928:	20000aa4 	.word	0x20000aa4
 800c92c:	e000ed04 	.word	0xe000ed04

0800c930 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b08a      	sub	sp, #40	; 0x28
 800c934:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c936:	2300      	movs	r3, #0
 800c938:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c93a:	2300      	movs	r3, #0
 800c93c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c93e:	463a      	mov	r2, r7
 800c940:	1d39      	adds	r1, r7, #4
 800c942:	f107 0308 	add.w	r3, r7, #8
 800c946:	4618      	mov	r0, r3
 800c948:	f7fe fb30 	bl	800afac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c94c:	6839      	ldr	r1, [r7, #0]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	68ba      	ldr	r2, [r7, #8]
 800c952:	9202      	str	r2, [sp, #8]
 800c954:	9301      	str	r3, [sp, #4]
 800c956:	2300      	movs	r3, #0
 800c958:	9300      	str	r3, [sp, #0]
 800c95a:	2300      	movs	r3, #0
 800c95c:	460a      	mov	r2, r1
 800c95e:	4920      	ldr	r1, [pc, #128]	; (800c9e0 <vTaskStartScheduler+0xb0>)
 800c960:	4820      	ldr	r0, [pc, #128]	; (800c9e4 <vTaskStartScheduler+0xb4>)
 800c962:	f7ff fc37 	bl	800c1d4 <xTaskCreateStatic>
 800c966:	4602      	mov	r2, r0
 800c968:	4b1f      	ldr	r3, [pc, #124]	; (800c9e8 <vTaskStartScheduler+0xb8>)
 800c96a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c96c:	4b1e      	ldr	r3, [pc, #120]	; (800c9e8 <vTaskStartScheduler+0xb8>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d002      	beq.n	800c97a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c974:	2301      	movs	r3, #1
 800c976:	617b      	str	r3, [r7, #20]
 800c978:	e001      	b.n	800c97e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c97a:	2300      	movs	r3, #0
 800c97c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	2b01      	cmp	r3, #1
 800c982:	d102      	bne.n	800c98a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c984:	f000 fdc0 	bl	800d508 <xTimerCreateTimerTask>
 800c988:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	d115      	bne.n	800c9bc <vTaskStartScheduler+0x8c>
 800c990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c994:	f383 8811 	msr	BASEPRI, r3
 800c998:	f3bf 8f6f 	isb	sy
 800c99c:	f3bf 8f4f 	dsb	sy
 800c9a0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c9a2:	4b12      	ldr	r3, [pc, #72]	; (800c9ec <vTaskStartScheduler+0xbc>)
 800c9a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c9a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c9aa:	4b11      	ldr	r3, [pc, #68]	; (800c9f0 <vTaskStartScheduler+0xc0>)
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c9b0:	4b10      	ldr	r3, [pc, #64]	; (800c9f4 <vTaskStartScheduler+0xc4>)
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c9b6:	f001 f993 	bl	800dce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c9ba:	e00d      	b.n	800c9d8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9c2:	d109      	bne.n	800c9d8 <vTaskStartScheduler+0xa8>
 800c9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c8:	f383 8811 	msr	BASEPRI, r3
 800c9cc:	f3bf 8f6f 	isb	sy
 800c9d0:	f3bf 8f4f 	dsb	sy
 800c9d4:	60fb      	str	r3, [r7, #12]
 800c9d6:	e7fe      	b.n	800c9d6 <vTaskStartScheduler+0xa6>
}
 800c9d8:	bf00      	nop
 800c9da:	3718      	adds	r7, #24
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	0801098c 	.word	0x0801098c
 800c9e4:	0800d179 	.word	0x0800d179
 800c9e8:	20000f98 	.word	0x20000f98
 800c9ec:	20000f94 	.word	0x20000f94
 800c9f0:	20000f80 	.word	0x20000f80
 800c9f4:	20000f78 	.word	0x20000f78

0800c9f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c9fc:	4b04      	ldr	r3, [pc, #16]	; (800ca10 <vTaskSuspendAll+0x18>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	3301      	adds	r3, #1
 800ca02:	4a03      	ldr	r2, [pc, #12]	; (800ca10 <vTaskSuspendAll+0x18>)
 800ca04:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ca06:	bf00      	nop
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr
 800ca10:	20000f9c 	.word	0x20000f9c

0800ca14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b084      	sub	sp, #16
 800ca18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ca22:	4b41      	ldr	r3, [pc, #260]	; (800cb28 <xTaskResumeAll+0x114>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d109      	bne.n	800ca3e <xTaskResumeAll+0x2a>
 800ca2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2e:	f383 8811 	msr	BASEPRI, r3
 800ca32:	f3bf 8f6f 	isb	sy
 800ca36:	f3bf 8f4f 	dsb	sy
 800ca3a:	603b      	str	r3, [r7, #0]
 800ca3c:	e7fe      	b.n	800ca3c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ca3e:	f001 f9ed 	bl	800de1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ca42:	4b39      	ldr	r3, [pc, #228]	; (800cb28 <xTaskResumeAll+0x114>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	3b01      	subs	r3, #1
 800ca48:	4a37      	ldr	r2, [pc, #220]	; (800cb28 <xTaskResumeAll+0x114>)
 800ca4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca4c:	4b36      	ldr	r3, [pc, #216]	; (800cb28 <xTaskResumeAll+0x114>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d162      	bne.n	800cb1a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ca54:	4b35      	ldr	r3, [pc, #212]	; (800cb2c <xTaskResumeAll+0x118>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d05e      	beq.n	800cb1a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca5c:	e02f      	b.n	800cabe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca5e:	4b34      	ldr	r3, [pc, #208]	; (800cb30 <xTaskResumeAll+0x11c>)
 800ca60:	68db      	ldr	r3, [r3, #12]
 800ca62:	68db      	ldr	r3, [r3, #12]
 800ca64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	3318      	adds	r3, #24
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7fe fdbc 	bl	800b5e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	3304      	adds	r3, #4
 800ca74:	4618      	mov	r0, r3
 800ca76:	f7fe fdb7 	bl	800b5e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca7e:	4b2d      	ldr	r3, [pc, #180]	; (800cb34 <xTaskResumeAll+0x120>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d903      	bls.n	800ca8e <xTaskResumeAll+0x7a>
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca8a:	4a2a      	ldr	r2, [pc, #168]	; (800cb34 <xTaskResumeAll+0x120>)
 800ca8c:	6013      	str	r3, [r2, #0]
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca92:	4613      	mov	r3, r2
 800ca94:	009b      	lsls	r3, r3, #2
 800ca96:	4413      	add	r3, r2
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	4a27      	ldr	r2, [pc, #156]	; (800cb38 <xTaskResumeAll+0x124>)
 800ca9c:	441a      	add	r2, r3
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	3304      	adds	r3, #4
 800caa2:	4619      	mov	r1, r3
 800caa4:	4610      	mov	r0, r2
 800caa6:	f7fe fd42 	bl	800b52e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caae:	4b23      	ldr	r3, [pc, #140]	; (800cb3c <xTaskResumeAll+0x128>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d302      	bcc.n	800cabe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800cab8:	4b21      	ldr	r3, [pc, #132]	; (800cb40 <xTaskResumeAll+0x12c>)
 800caba:	2201      	movs	r2, #1
 800cabc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cabe:	4b1c      	ldr	r3, [pc, #112]	; (800cb30 <xTaskResumeAll+0x11c>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d1cb      	bne.n	800ca5e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d001      	beq.n	800cad0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cacc:	f000 fc06 	bl	800d2dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cad0:	4b1c      	ldr	r3, [pc, #112]	; (800cb44 <xTaskResumeAll+0x130>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d010      	beq.n	800cafe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cadc:	f000 f846 	bl	800cb6c <xTaskIncrementTick>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d002      	beq.n	800caec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800cae6:	4b16      	ldr	r3, [pc, #88]	; (800cb40 <xTaskResumeAll+0x12c>)
 800cae8:	2201      	movs	r2, #1
 800caea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	3b01      	subs	r3, #1
 800caf0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d1f1      	bne.n	800cadc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800caf8:	4b12      	ldr	r3, [pc, #72]	; (800cb44 <xTaskResumeAll+0x130>)
 800cafa:	2200      	movs	r2, #0
 800cafc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cafe:	4b10      	ldr	r3, [pc, #64]	; (800cb40 <xTaskResumeAll+0x12c>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d009      	beq.n	800cb1a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cb06:	2301      	movs	r3, #1
 800cb08:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cb0a:	4b0f      	ldr	r3, [pc, #60]	; (800cb48 <xTaskResumeAll+0x134>)
 800cb0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb10:	601a      	str	r2, [r3, #0]
 800cb12:	f3bf 8f4f 	dsb	sy
 800cb16:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb1a:	f001 f9ad 	bl	800de78 <vPortExitCritical>

	return xAlreadyYielded;
 800cb1e:	68bb      	ldr	r3, [r7, #8]
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3710      	adds	r7, #16
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}
 800cb28:	20000f9c 	.word	0x20000f9c
 800cb2c:	20000f74 	.word	0x20000f74
 800cb30:	20000f34 	.word	0x20000f34
 800cb34:	20000f7c 	.word	0x20000f7c
 800cb38:	20000aa4 	.word	0x20000aa4
 800cb3c:	20000aa0 	.word	0x20000aa0
 800cb40:	20000f88 	.word	0x20000f88
 800cb44:	20000f84 	.word	0x20000f84
 800cb48:	e000ed04 	.word	0xe000ed04

0800cb4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b083      	sub	sp, #12
 800cb50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cb52:	4b05      	ldr	r3, [pc, #20]	; (800cb68 <xTaskGetTickCount+0x1c>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cb58:	687b      	ldr	r3, [r7, #4]
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	370c      	adds	r7, #12
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr
 800cb66:	bf00      	nop
 800cb68:	20000f78 	.word	0x20000f78

0800cb6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b086      	sub	sp, #24
 800cb70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cb72:	2300      	movs	r3, #0
 800cb74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb76:	4b4e      	ldr	r3, [pc, #312]	; (800ccb0 <xTaskIncrementTick+0x144>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	f040 8088 	bne.w	800cc90 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cb80:	4b4c      	ldr	r3, [pc, #304]	; (800ccb4 <xTaskIncrementTick+0x148>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	3301      	adds	r3, #1
 800cb86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cb88:	4a4a      	ldr	r2, [pc, #296]	; (800ccb4 <xTaskIncrementTick+0x148>)
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d11f      	bne.n	800cbd4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800cb94:	4b48      	ldr	r3, [pc, #288]	; (800ccb8 <xTaskIncrementTick+0x14c>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d009      	beq.n	800cbb2 <xTaskIncrementTick+0x46>
 800cb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba2:	f383 8811 	msr	BASEPRI, r3
 800cba6:	f3bf 8f6f 	isb	sy
 800cbaa:	f3bf 8f4f 	dsb	sy
 800cbae:	603b      	str	r3, [r7, #0]
 800cbb0:	e7fe      	b.n	800cbb0 <xTaskIncrementTick+0x44>
 800cbb2:	4b41      	ldr	r3, [pc, #260]	; (800ccb8 <xTaskIncrementTick+0x14c>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	60fb      	str	r3, [r7, #12]
 800cbb8:	4b40      	ldr	r3, [pc, #256]	; (800ccbc <xTaskIncrementTick+0x150>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4a3e      	ldr	r2, [pc, #248]	; (800ccb8 <xTaskIncrementTick+0x14c>)
 800cbbe:	6013      	str	r3, [r2, #0]
 800cbc0:	4a3e      	ldr	r2, [pc, #248]	; (800ccbc <xTaskIncrementTick+0x150>)
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	6013      	str	r3, [r2, #0]
 800cbc6:	4b3e      	ldr	r3, [pc, #248]	; (800ccc0 <xTaskIncrementTick+0x154>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	4a3c      	ldr	r2, [pc, #240]	; (800ccc0 <xTaskIncrementTick+0x154>)
 800cbce:	6013      	str	r3, [r2, #0]
 800cbd0:	f000 fb84 	bl	800d2dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cbd4:	4b3b      	ldr	r3, [pc, #236]	; (800ccc4 <xTaskIncrementTick+0x158>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	693a      	ldr	r2, [r7, #16]
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d349      	bcc.n	800cc72 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cbde:	4b36      	ldr	r3, [pc, #216]	; (800ccb8 <xTaskIncrementTick+0x14c>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d104      	bne.n	800cbf2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbe8:	4b36      	ldr	r3, [pc, #216]	; (800ccc4 <xTaskIncrementTick+0x158>)
 800cbea:	f04f 32ff 	mov.w	r2, #4294967295
 800cbee:	601a      	str	r2, [r3, #0]
					break;
 800cbf0:	e03f      	b.n	800cc72 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbf2:	4b31      	ldr	r3, [pc, #196]	; (800ccb8 <xTaskIncrementTick+0x14c>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	68db      	ldr	r3, [r3, #12]
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	685b      	ldr	r3, [r3, #4]
 800cc00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cc02:	693a      	ldr	r2, [r7, #16]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d203      	bcs.n	800cc12 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cc0a:	4a2e      	ldr	r2, [pc, #184]	; (800ccc4 <xTaskIncrementTick+0x158>)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cc10:	e02f      	b.n	800cc72 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	3304      	adds	r3, #4
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7fe fce6 	bl	800b5e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d004      	beq.n	800cc2e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	3318      	adds	r3, #24
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f7fe fcdd 	bl	800b5e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc32:	4b25      	ldr	r3, [pc, #148]	; (800ccc8 <xTaskIncrementTick+0x15c>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d903      	bls.n	800cc42 <xTaskIncrementTick+0xd6>
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc3e:	4a22      	ldr	r2, [pc, #136]	; (800ccc8 <xTaskIncrementTick+0x15c>)
 800cc40:	6013      	str	r3, [r2, #0]
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc46:	4613      	mov	r3, r2
 800cc48:	009b      	lsls	r3, r3, #2
 800cc4a:	4413      	add	r3, r2
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	4a1f      	ldr	r2, [pc, #124]	; (800cccc <xTaskIncrementTick+0x160>)
 800cc50:	441a      	add	r2, r3
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	3304      	adds	r3, #4
 800cc56:	4619      	mov	r1, r3
 800cc58:	4610      	mov	r0, r2
 800cc5a:	f7fe fc68 	bl	800b52e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc62:	4b1b      	ldr	r3, [pc, #108]	; (800ccd0 <xTaskIncrementTick+0x164>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d3b8      	bcc.n	800cbde <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc70:	e7b5      	b.n	800cbde <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cc72:	4b17      	ldr	r3, [pc, #92]	; (800ccd0 <xTaskIncrementTick+0x164>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc78:	4914      	ldr	r1, [pc, #80]	; (800cccc <xTaskIncrementTick+0x160>)
 800cc7a:	4613      	mov	r3, r2
 800cc7c:	009b      	lsls	r3, r3, #2
 800cc7e:	4413      	add	r3, r2
 800cc80:	009b      	lsls	r3, r3, #2
 800cc82:	440b      	add	r3, r1
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	2b01      	cmp	r3, #1
 800cc88:	d907      	bls.n	800cc9a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	617b      	str	r3, [r7, #20]
 800cc8e:	e004      	b.n	800cc9a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cc90:	4b10      	ldr	r3, [pc, #64]	; (800ccd4 <xTaskIncrementTick+0x168>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	3301      	adds	r3, #1
 800cc96:	4a0f      	ldr	r2, [pc, #60]	; (800ccd4 <xTaskIncrementTick+0x168>)
 800cc98:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cc9a:	4b0f      	ldr	r3, [pc, #60]	; (800ccd8 <xTaskIncrementTick+0x16c>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d001      	beq.n	800cca6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800cca2:	2301      	movs	r3, #1
 800cca4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cca6:	697b      	ldr	r3, [r7, #20]
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3718      	adds	r7, #24
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	20000f9c 	.word	0x20000f9c
 800ccb4:	20000f78 	.word	0x20000f78
 800ccb8:	20000f2c 	.word	0x20000f2c
 800ccbc:	20000f30 	.word	0x20000f30
 800ccc0:	20000f8c 	.word	0x20000f8c
 800ccc4:	20000f94 	.word	0x20000f94
 800ccc8:	20000f7c 	.word	0x20000f7c
 800cccc:	20000aa4 	.word	0x20000aa4
 800ccd0:	20000aa0 	.word	0x20000aa0
 800ccd4:	20000f84 	.word	0x20000f84
 800ccd8:	20000f88 	.word	0x20000f88

0800ccdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b086      	sub	sp, #24
 800cce0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cce2:	4b3a      	ldr	r3, [pc, #232]	; (800cdcc <vTaskSwitchContext+0xf0>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d003      	beq.n	800ccf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ccea:	4b39      	ldr	r3, [pc, #228]	; (800cdd0 <vTaskSwitchContext+0xf4>)
 800ccec:	2201      	movs	r2, #1
 800ccee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ccf0:	e067      	b.n	800cdc2 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800ccf2:	4b37      	ldr	r3, [pc, #220]	; (800cdd0 <vTaskSwitchContext+0xf4>)
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800ccf8:	4b36      	ldr	r3, [pc, #216]	; (800cdd4 <vTaskSwitchContext+0xf8>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccfe:	613b      	str	r3, [r7, #16]
 800cd00:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800cd04:	60fb      	str	r3, [r7, #12]
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	68fa      	ldr	r2, [r7, #12]
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d111      	bne.n	800cd34 <vTaskSwitchContext+0x58>
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	3304      	adds	r3, #4
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	68fa      	ldr	r2, [r7, #12]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d10b      	bne.n	800cd34 <vTaskSwitchContext+0x58>
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	3308      	adds	r3, #8
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	68fa      	ldr	r2, [r7, #12]
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d105      	bne.n	800cd34 <vTaskSwitchContext+0x58>
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	330c      	adds	r3, #12
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	68fa      	ldr	r2, [r7, #12]
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d008      	beq.n	800cd46 <vTaskSwitchContext+0x6a>
 800cd34:	4b27      	ldr	r3, [pc, #156]	; (800cdd4 <vTaskSwitchContext+0xf8>)
 800cd36:	681a      	ldr	r2, [r3, #0]
 800cd38:	4b26      	ldr	r3, [pc, #152]	; (800cdd4 <vTaskSwitchContext+0xf8>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	3334      	adds	r3, #52	; 0x34
 800cd3e:	4619      	mov	r1, r3
 800cd40:	4610      	mov	r0, r2
 800cd42:	f7f5 fa93 	bl	800226c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd46:	4b24      	ldr	r3, [pc, #144]	; (800cdd8 <vTaskSwitchContext+0xfc>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	617b      	str	r3, [r7, #20]
 800cd4c:	e00f      	b.n	800cd6e <vTaskSwitchContext+0x92>
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d109      	bne.n	800cd68 <vTaskSwitchContext+0x8c>
 800cd54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd58:	f383 8811 	msr	BASEPRI, r3
 800cd5c:	f3bf 8f6f 	isb	sy
 800cd60:	f3bf 8f4f 	dsb	sy
 800cd64:	607b      	str	r3, [r7, #4]
 800cd66:	e7fe      	b.n	800cd66 <vTaskSwitchContext+0x8a>
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	3b01      	subs	r3, #1
 800cd6c:	617b      	str	r3, [r7, #20]
 800cd6e:	491b      	ldr	r1, [pc, #108]	; (800cddc <vTaskSwitchContext+0x100>)
 800cd70:	697a      	ldr	r2, [r7, #20]
 800cd72:	4613      	mov	r3, r2
 800cd74:	009b      	lsls	r3, r3, #2
 800cd76:	4413      	add	r3, r2
 800cd78:	009b      	lsls	r3, r3, #2
 800cd7a:	440b      	add	r3, r1
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d0e5      	beq.n	800cd4e <vTaskSwitchContext+0x72>
 800cd82:	697a      	ldr	r2, [r7, #20]
 800cd84:	4613      	mov	r3, r2
 800cd86:	009b      	lsls	r3, r3, #2
 800cd88:	4413      	add	r3, r2
 800cd8a:	009b      	lsls	r3, r3, #2
 800cd8c:	4a13      	ldr	r2, [pc, #76]	; (800cddc <vTaskSwitchContext+0x100>)
 800cd8e:	4413      	add	r3, r2
 800cd90:	60bb      	str	r3, [r7, #8]
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	685a      	ldr	r2, [r3, #4]
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	605a      	str	r2, [r3, #4]
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	685a      	ldr	r2, [r3, #4]
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	3308      	adds	r3, #8
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d104      	bne.n	800cdb2 <vTaskSwitchContext+0xd6>
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	685a      	ldr	r2, [r3, #4]
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	605a      	str	r2, [r3, #4]
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	68db      	ldr	r3, [r3, #12]
 800cdb8:	4a06      	ldr	r2, [pc, #24]	; (800cdd4 <vTaskSwitchContext+0xf8>)
 800cdba:	6013      	str	r3, [r2, #0]
 800cdbc:	4a06      	ldr	r2, [pc, #24]	; (800cdd8 <vTaskSwitchContext+0xfc>)
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	6013      	str	r3, [r2, #0]
}
 800cdc2:	bf00      	nop
 800cdc4:	3718      	adds	r7, #24
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	20000f9c 	.word	0x20000f9c
 800cdd0:	20000f88 	.word	0x20000f88
 800cdd4:	20000aa0 	.word	0x20000aa0
 800cdd8:	20000f7c 	.word	0x20000f7c
 800cddc:	20000aa4 	.word	0x20000aa4

0800cde0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b084      	sub	sp, #16
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d109      	bne.n	800ce04 <vTaskPlaceOnEventList+0x24>
 800cdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf4:	f383 8811 	msr	BASEPRI, r3
 800cdf8:	f3bf 8f6f 	isb	sy
 800cdfc:	f3bf 8f4f 	dsb	sy
 800ce00:	60fb      	str	r3, [r7, #12]
 800ce02:	e7fe      	b.n	800ce02 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce04:	4b07      	ldr	r3, [pc, #28]	; (800ce24 <vTaskPlaceOnEventList+0x44>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	3318      	adds	r3, #24
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f7fe fbb2 	bl	800b576 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ce12:	2101      	movs	r1, #1
 800ce14:	6838      	ldr	r0, [r7, #0]
 800ce16:	f000 fb23 	bl	800d460 <prvAddCurrentTaskToDelayedList>
}
 800ce1a:	bf00      	nop
 800ce1c:	3710      	adds	r7, #16
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}
 800ce22:	bf00      	nop
 800ce24:	20000aa0 	.word	0x20000aa0

0800ce28 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b086      	sub	sp, #24
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	60f8      	str	r0, [r7, #12]
 800ce30:	60b9      	str	r1, [r7, #8]
 800ce32:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d109      	bne.n	800ce4e <vTaskPlaceOnUnorderedEventList+0x26>
 800ce3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce3e:	f383 8811 	msr	BASEPRI, r3
 800ce42:	f3bf 8f6f 	isb	sy
 800ce46:	f3bf 8f4f 	dsb	sy
 800ce4a:	617b      	str	r3, [r7, #20]
 800ce4c:	e7fe      	b.n	800ce4c <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800ce4e:	4b11      	ldr	r3, [pc, #68]	; (800ce94 <vTaskPlaceOnUnorderedEventList+0x6c>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d109      	bne.n	800ce6a <vTaskPlaceOnUnorderedEventList+0x42>
 800ce56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce5a:	f383 8811 	msr	BASEPRI, r3
 800ce5e:	f3bf 8f6f 	isb	sy
 800ce62:	f3bf 8f4f 	dsb	sy
 800ce66:	613b      	str	r3, [r7, #16]
 800ce68:	e7fe      	b.n	800ce68 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800ce6a:	4b0b      	ldr	r3, [pc, #44]	; (800ce98 <vTaskPlaceOnUnorderedEventList+0x70>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	68ba      	ldr	r2, [r7, #8]
 800ce70:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800ce74:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce76:	4b08      	ldr	r3, [pc, #32]	; (800ce98 <vTaskPlaceOnUnorderedEventList+0x70>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	3318      	adds	r3, #24
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	68f8      	ldr	r0, [r7, #12]
 800ce80:	f7fe fb55 	bl	800b52e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ce84:	2101      	movs	r1, #1
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f000 faea 	bl	800d460 <prvAddCurrentTaskToDelayedList>
}
 800ce8c:	bf00      	nop
 800ce8e:	3718      	adds	r7, #24
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	20000f9c 	.word	0x20000f9c
 800ce98:	20000aa0 	.word	0x20000aa0

0800ce9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b086      	sub	sp, #24
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d109      	bne.n	800cec2 <vTaskPlaceOnEventListRestricted+0x26>
 800ceae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb2:	f383 8811 	msr	BASEPRI, r3
 800ceb6:	f3bf 8f6f 	isb	sy
 800ceba:	f3bf 8f4f 	dsb	sy
 800cebe:	617b      	str	r3, [r7, #20]
 800cec0:	e7fe      	b.n	800cec0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cec2:	4b0a      	ldr	r3, [pc, #40]	; (800ceec <vTaskPlaceOnEventListRestricted+0x50>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	3318      	adds	r3, #24
 800cec8:	4619      	mov	r1, r3
 800ceca:	68f8      	ldr	r0, [r7, #12]
 800cecc:	f7fe fb2f 	bl	800b52e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d002      	beq.n	800cedc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800ced6:	f04f 33ff 	mov.w	r3, #4294967295
 800ceda:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cedc:	6879      	ldr	r1, [r7, #4]
 800cede:	68b8      	ldr	r0, [r7, #8]
 800cee0:	f000 fabe 	bl	800d460 <prvAddCurrentTaskToDelayedList>
	}
 800cee4:	bf00      	nop
 800cee6:	3718      	adds	r7, #24
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	20000aa0 	.word	0x20000aa0

0800cef0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b086      	sub	sp, #24
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	68db      	ldr	r3, [r3, #12]
 800cefc:	68db      	ldr	r3, [r3, #12]
 800cefe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d109      	bne.n	800cf1a <xTaskRemoveFromEventList+0x2a>
 800cf06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0a:	f383 8811 	msr	BASEPRI, r3
 800cf0e:	f3bf 8f6f 	isb	sy
 800cf12:	f3bf 8f4f 	dsb	sy
 800cf16:	60fb      	str	r3, [r7, #12]
 800cf18:	e7fe      	b.n	800cf18 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	3318      	adds	r3, #24
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7fe fb62 	bl	800b5e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf24:	4b1d      	ldr	r3, [pc, #116]	; (800cf9c <xTaskRemoveFromEventList+0xac>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d11d      	bne.n	800cf68 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	3304      	adds	r3, #4
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7fe fb59 	bl	800b5e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf3a:	4b19      	ldr	r3, [pc, #100]	; (800cfa0 <xTaskRemoveFromEventList+0xb0>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d903      	bls.n	800cf4a <xTaskRemoveFromEventList+0x5a>
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf46:	4a16      	ldr	r2, [pc, #88]	; (800cfa0 <xTaskRemoveFromEventList+0xb0>)
 800cf48:	6013      	str	r3, [r2, #0]
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf4e:	4613      	mov	r3, r2
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	4413      	add	r3, r2
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	4a13      	ldr	r2, [pc, #76]	; (800cfa4 <xTaskRemoveFromEventList+0xb4>)
 800cf58:	441a      	add	r2, r3
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	3304      	adds	r3, #4
 800cf5e:	4619      	mov	r1, r3
 800cf60:	4610      	mov	r0, r2
 800cf62:	f7fe fae4 	bl	800b52e <vListInsertEnd>
 800cf66:	e005      	b.n	800cf74 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	3318      	adds	r3, #24
 800cf6c:	4619      	mov	r1, r3
 800cf6e:	480e      	ldr	r0, [pc, #56]	; (800cfa8 <xTaskRemoveFromEventList+0xb8>)
 800cf70:	f7fe fadd 	bl	800b52e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf78:	4b0c      	ldr	r3, [pc, #48]	; (800cfac <xTaskRemoveFromEventList+0xbc>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d905      	bls.n	800cf8e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cf82:	2301      	movs	r3, #1
 800cf84:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cf86:	4b0a      	ldr	r3, [pc, #40]	; (800cfb0 <xTaskRemoveFromEventList+0xc0>)
 800cf88:	2201      	movs	r2, #1
 800cf8a:	601a      	str	r2, [r3, #0]
 800cf8c:	e001      	b.n	800cf92 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cf92:	697b      	ldr	r3, [r7, #20]
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3718      	adds	r7, #24
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}
 800cf9c:	20000f9c 	.word	0x20000f9c
 800cfa0:	20000f7c 	.word	0x20000f7c
 800cfa4:	20000aa4 	.word	0x20000aa4
 800cfa8:	20000f34 	.word	0x20000f34
 800cfac:	20000aa0 	.word	0x20000aa0
 800cfb0:	20000f88 	.word	0x20000f88

0800cfb4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b086      	sub	sp, #24
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800cfbe:	4b28      	ldr	r3, [pc, #160]	; (800d060 <vTaskRemoveFromUnorderedEventList+0xac>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d109      	bne.n	800cfda <vTaskRemoveFromUnorderedEventList+0x26>
 800cfc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfca:	f383 8811 	msr	BASEPRI, r3
 800cfce:	f3bf 8f6f 	isb	sy
 800cfd2:	f3bf 8f4f 	dsb	sy
 800cfd6:	613b      	str	r3, [r7, #16]
 800cfd8:	e7fe      	b.n	800cfd8 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	68db      	ldr	r3, [r3, #12]
 800cfe8:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d109      	bne.n	800d004 <vTaskRemoveFromUnorderedEventList+0x50>
 800cff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff4:	f383 8811 	msr	BASEPRI, r3
 800cff8:	f3bf 8f6f 	isb	sy
 800cffc:	f3bf 8f4f 	dsb	sy
 800d000:	60fb      	str	r3, [r7, #12]
 800d002:	e7fe      	b.n	800d002 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f7fe faef 	bl	800b5e8 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	3304      	adds	r3, #4
 800d00e:	4618      	mov	r0, r3
 800d010:	f7fe faea 	bl	800b5e8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d018:	4b12      	ldr	r3, [pc, #72]	; (800d064 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d903      	bls.n	800d028 <vTaskRemoveFromUnorderedEventList+0x74>
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d024:	4a0f      	ldr	r2, [pc, #60]	; (800d064 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800d026:	6013      	str	r3, [r2, #0]
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d02c:	4613      	mov	r3, r2
 800d02e:	009b      	lsls	r3, r3, #2
 800d030:	4413      	add	r3, r2
 800d032:	009b      	lsls	r3, r3, #2
 800d034:	4a0c      	ldr	r2, [pc, #48]	; (800d068 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800d036:	441a      	add	r2, r3
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	3304      	adds	r3, #4
 800d03c:	4619      	mov	r1, r3
 800d03e:	4610      	mov	r0, r2
 800d040:	f7fe fa75 	bl	800b52e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d048:	4b08      	ldr	r3, [pc, #32]	; (800d06c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d04e:	429a      	cmp	r2, r3
 800d050:	d902      	bls.n	800d058 <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800d052:	4b07      	ldr	r3, [pc, #28]	; (800d070 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800d054:	2201      	movs	r2, #1
 800d056:	601a      	str	r2, [r3, #0]
	}
}
 800d058:	bf00      	nop
 800d05a:	3718      	adds	r7, #24
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}
 800d060:	20000f9c 	.word	0x20000f9c
 800d064:	20000f7c 	.word	0x20000f7c
 800d068:	20000aa4 	.word	0x20000aa4
 800d06c:	20000aa0 	.word	0x20000aa0
 800d070:	20000f88 	.word	0x20000f88

0800d074 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d074:	b480      	push	{r7}
 800d076:	b083      	sub	sp, #12
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d07c:	4b06      	ldr	r3, [pc, #24]	; (800d098 <vTaskInternalSetTimeOutState+0x24>)
 800d07e:	681a      	ldr	r2, [r3, #0]
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d084:	4b05      	ldr	r3, [pc, #20]	; (800d09c <vTaskInternalSetTimeOutState+0x28>)
 800d086:	681a      	ldr	r2, [r3, #0]
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	605a      	str	r2, [r3, #4]
}
 800d08c:	bf00      	nop
 800d08e:	370c      	adds	r7, #12
 800d090:	46bd      	mov	sp, r7
 800d092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d096:	4770      	bx	lr
 800d098:	20000f8c 	.word	0x20000f8c
 800d09c:	20000f78 	.word	0x20000f78

0800d0a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b088      	sub	sp, #32
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d109      	bne.n	800d0c4 <xTaskCheckForTimeOut+0x24>
 800d0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b4:	f383 8811 	msr	BASEPRI, r3
 800d0b8:	f3bf 8f6f 	isb	sy
 800d0bc:	f3bf 8f4f 	dsb	sy
 800d0c0:	613b      	str	r3, [r7, #16]
 800d0c2:	e7fe      	b.n	800d0c2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d109      	bne.n	800d0de <xTaskCheckForTimeOut+0x3e>
 800d0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ce:	f383 8811 	msr	BASEPRI, r3
 800d0d2:	f3bf 8f6f 	isb	sy
 800d0d6:	f3bf 8f4f 	dsb	sy
 800d0da:	60fb      	str	r3, [r7, #12]
 800d0dc:	e7fe      	b.n	800d0dc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800d0de:	f000 fe9d 	bl	800de1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d0e2:	4b1d      	ldr	r3, [pc, #116]	; (800d158 <xTaskCheckForTimeOut+0xb8>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	685b      	ldr	r3, [r3, #4]
 800d0ec:	69ba      	ldr	r2, [r7, #24]
 800d0ee:	1ad3      	subs	r3, r2, r3
 800d0f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0fa:	d102      	bne.n	800d102 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	61fb      	str	r3, [r7, #28]
 800d100:	e023      	b.n	800d14a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681a      	ldr	r2, [r3, #0]
 800d106:	4b15      	ldr	r3, [pc, #84]	; (800d15c <xTaskCheckForTimeOut+0xbc>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d007      	beq.n	800d11e <xTaskCheckForTimeOut+0x7e>
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	69ba      	ldr	r2, [r7, #24]
 800d114:	429a      	cmp	r2, r3
 800d116:	d302      	bcc.n	800d11e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d118:	2301      	movs	r3, #1
 800d11a:	61fb      	str	r3, [r7, #28]
 800d11c:	e015      	b.n	800d14a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	697a      	ldr	r2, [r7, #20]
 800d124:	429a      	cmp	r2, r3
 800d126:	d20b      	bcs.n	800d140 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	1ad2      	subs	r2, r2, r3
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f7ff ff9d 	bl	800d074 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d13a:	2300      	movs	r3, #0
 800d13c:	61fb      	str	r3, [r7, #28]
 800d13e:	e004      	b.n	800d14a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	2200      	movs	r2, #0
 800d144:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d146:	2301      	movs	r3, #1
 800d148:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d14a:	f000 fe95 	bl	800de78 <vPortExitCritical>

	return xReturn;
 800d14e:	69fb      	ldr	r3, [r7, #28]
}
 800d150:	4618      	mov	r0, r3
 800d152:	3720      	adds	r7, #32
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	20000f78 	.word	0x20000f78
 800d15c:	20000f8c 	.word	0x20000f8c

0800d160 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d160:	b480      	push	{r7}
 800d162:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d164:	4b03      	ldr	r3, [pc, #12]	; (800d174 <vTaskMissedYield+0x14>)
 800d166:	2201      	movs	r2, #1
 800d168:	601a      	str	r2, [r3, #0]
}
 800d16a:	bf00      	nop
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr
 800d174:	20000f88 	.word	0x20000f88

0800d178 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d180:	f000 f852 	bl	800d228 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d184:	4b06      	ldr	r3, [pc, #24]	; (800d1a0 <prvIdleTask+0x28>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2b01      	cmp	r3, #1
 800d18a:	d9f9      	bls.n	800d180 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d18c:	4b05      	ldr	r3, [pc, #20]	; (800d1a4 <prvIdleTask+0x2c>)
 800d18e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d192:	601a      	str	r2, [r3, #0]
 800d194:	f3bf 8f4f 	dsb	sy
 800d198:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d19c:	e7f0      	b.n	800d180 <prvIdleTask+0x8>
 800d19e:	bf00      	nop
 800d1a0:	20000aa4 	.word	0x20000aa4
 800d1a4:	e000ed04 	.word	0xe000ed04

0800d1a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b082      	sub	sp, #8
 800d1ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	607b      	str	r3, [r7, #4]
 800d1b2:	e00c      	b.n	800d1ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	4613      	mov	r3, r2
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	4413      	add	r3, r2
 800d1bc:	009b      	lsls	r3, r3, #2
 800d1be:	4a12      	ldr	r2, [pc, #72]	; (800d208 <prvInitialiseTaskLists+0x60>)
 800d1c0:	4413      	add	r3, r2
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7fe f986 	bl	800b4d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	607b      	str	r3, [r7, #4]
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2b37      	cmp	r3, #55	; 0x37
 800d1d2:	d9ef      	bls.n	800d1b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d1d4:	480d      	ldr	r0, [pc, #52]	; (800d20c <prvInitialiseTaskLists+0x64>)
 800d1d6:	f7fe f97d 	bl	800b4d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d1da:	480d      	ldr	r0, [pc, #52]	; (800d210 <prvInitialiseTaskLists+0x68>)
 800d1dc:	f7fe f97a 	bl	800b4d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d1e0:	480c      	ldr	r0, [pc, #48]	; (800d214 <prvInitialiseTaskLists+0x6c>)
 800d1e2:	f7fe f977 	bl	800b4d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d1e6:	480c      	ldr	r0, [pc, #48]	; (800d218 <prvInitialiseTaskLists+0x70>)
 800d1e8:	f7fe f974 	bl	800b4d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d1ec:	480b      	ldr	r0, [pc, #44]	; (800d21c <prvInitialiseTaskLists+0x74>)
 800d1ee:	f7fe f971 	bl	800b4d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d1f2:	4b0b      	ldr	r3, [pc, #44]	; (800d220 <prvInitialiseTaskLists+0x78>)
 800d1f4:	4a05      	ldr	r2, [pc, #20]	; (800d20c <prvInitialiseTaskLists+0x64>)
 800d1f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d1f8:	4b0a      	ldr	r3, [pc, #40]	; (800d224 <prvInitialiseTaskLists+0x7c>)
 800d1fa:	4a05      	ldr	r2, [pc, #20]	; (800d210 <prvInitialiseTaskLists+0x68>)
 800d1fc:	601a      	str	r2, [r3, #0]
}
 800d1fe:	bf00      	nop
 800d200:	3708      	adds	r7, #8
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop
 800d208:	20000aa4 	.word	0x20000aa4
 800d20c:	20000f04 	.word	0x20000f04
 800d210:	20000f18 	.word	0x20000f18
 800d214:	20000f34 	.word	0x20000f34
 800d218:	20000f48 	.word	0x20000f48
 800d21c:	20000f60 	.word	0x20000f60
 800d220:	20000f2c 	.word	0x20000f2c
 800d224:	20000f30 	.word	0x20000f30

0800d228 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b082      	sub	sp, #8
 800d22c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d22e:	e019      	b.n	800d264 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d230:	f000 fdf4 	bl	800de1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d234:	4b0f      	ldr	r3, [pc, #60]	; (800d274 <prvCheckTasksWaitingTermination+0x4c>)
 800d236:	68db      	ldr	r3, [r3, #12]
 800d238:	68db      	ldr	r3, [r3, #12]
 800d23a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	3304      	adds	r3, #4
 800d240:	4618      	mov	r0, r3
 800d242:	f7fe f9d1 	bl	800b5e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d246:	4b0c      	ldr	r3, [pc, #48]	; (800d278 <prvCheckTasksWaitingTermination+0x50>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	3b01      	subs	r3, #1
 800d24c:	4a0a      	ldr	r2, [pc, #40]	; (800d278 <prvCheckTasksWaitingTermination+0x50>)
 800d24e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d250:	4b0a      	ldr	r3, [pc, #40]	; (800d27c <prvCheckTasksWaitingTermination+0x54>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	3b01      	subs	r3, #1
 800d256:	4a09      	ldr	r2, [pc, #36]	; (800d27c <prvCheckTasksWaitingTermination+0x54>)
 800d258:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d25a:	f000 fe0d 	bl	800de78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f000 f80e 	bl	800d280 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d264:	4b05      	ldr	r3, [pc, #20]	; (800d27c <prvCheckTasksWaitingTermination+0x54>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d1e1      	bne.n	800d230 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d26c:	bf00      	nop
 800d26e:	3708      	adds	r7, #8
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}
 800d274:	20000f48 	.word	0x20000f48
 800d278:	20000f74 	.word	0x20000f74
 800d27c:	20000f5c 	.word	0x20000f5c

0800d280 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d280:	b580      	push	{r7, lr}
 800d282:	b084      	sub	sp, #16
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d108      	bne.n	800d2a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d296:	4618      	mov	r0, r3
 800d298:	f000 ff9c 	bl	800e1d4 <vPortFree>
				vPortFree( pxTCB );
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 ff99 	bl	800e1d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d2a2:	e017      	b.n	800d2d4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800d2aa:	2b01      	cmp	r3, #1
 800d2ac:	d103      	bne.n	800d2b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f000 ff90 	bl	800e1d4 <vPortFree>
	}
 800d2b4:	e00e      	b.n	800d2d4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800d2bc:	2b02      	cmp	r3, #2
 800d2be:	d009      	beq.n	800d2d4 <prvDeleteTCB+0x54>
 800d2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c4:	f383 8811 	msr	BASEPRI, r3
 800d2c8:	f3bf 8f6f 	isb	sy
 800d2cc:	f3bf 8f4f 	dsb	sy
 800d2d0:	60fb      	str	r3, [r7, #12]
 800d2d2:	e7fe      	b.n	800d2d2 <prvDeleteTCB+0x52>
	}
 800d2d4:	bf00      	nop
 800d2d6:	3710      	adds	r7, #16
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}

0800d2dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d2e2:	4b0c      	ldr	r3, [pc, #48]	; (800d314 <prvResetNextTaskUnblockTime+0x38>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d104      	bne.n	800d2f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d2ec:	4b0a      	ldr	r3, [pc, #40]	; (800d318 <prvResetNextTaskUnblockTime+0x3c>)
 800d2ee:	f04f 32ff 	mov.w	r2, #4294967295
 800d2f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d2f4:	e008      	b.n	800d308 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2f6:	4b07      	ldr	r3, [pc, #28]	; (800d314 <prvResetNextTaskUnblockTime+0x38>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	68db      	ldr	r3, [r3, #12]
 800d2fc:	68db      	ldr	r3, [r3, #12]
 800d2fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	685b      	ldr	r3, [r3, #4]
 800d304:	4a04      	ldr	r2, [pc, #16]	; (800d318 <prvResetNextTaskUnblockTime+0x3c>)
 800d306:	6013      	str	r3, [r2, #0]
}
 800d308:	bf00      	nop
 800d30a:	370c      	adds	r7, #12
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr
 800d314:	20000f2c 	.word	0x20000f2c
 800d318:	20000f94 	.word	0x20000f94

0800d31c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d31c:	b480      	push	{r7}
 800d31e:	b083      	sub	sp, #12
 800d320:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d322:	4b0b      	ldr	r3, [pc, #44]	; (800d350 <xTaskGetSchedulerState+0x34>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d102      	bne.n	800d330 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d32a:	2301      	movs	r3, #1
 800d32c:	607b      	str	r3, [r7, #4]
 800d32e:	e008      	b.n	800d342 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d330:	4b08      	ldr	r3, [pc, #32]	; (800d354 <xTaskGetSchedulerState+0x38>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d102      	bne.n	800d33e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d338:	2302      	movs	r3, #2
 800d33a:	607b      	str	r3, [r7, #4]
 800d33c:	e001      	b.n	800d342 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d33e:	2300      	movs	r3, #0
 800d340:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d342:	687b      	ldr	r3, [r7, #4]
	}
 800d344:	4618      	mov	r0, r3
 800d346:	370c      	adds	r7, #12
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr
 800d350:	20000f80 	.word	0x20000f80
 800d354:	20000f9c 	.word	0x20000f9c

0800d358 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b086      	sub	sp, #24
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d364:	2300      	movs	r3, #0
 800d366:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d054      	beq.n	800d418 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d36e:	4b2d      	ldr	r3, [pc, #180]	; (800d424 <xTaskPriorityDisinherit+0xcc>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	693a      	ldr	r2, [r7, #16]
 800d374:	429a      	cmp	r2, r3
 800d376:	d009      	beq.n	800d38c <xTaskPriorityDisinherit+0x34>
 800d378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37c:	f383 8811 	msr	BASEPRI, r3
 800d380:	f3bf 8f6f 	isb	sy
 800d384:	f3bf 8f4f 	dsb	sy
 800d388:	60fb      	str	r3, [r7, #12]
 800d38a:	e7fe      	b.n	800d38a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800d38c:	693b      	ldr	r3, [r7, #16]
 800d38e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d390:	2b00      	cmp	r3, #0
 800d392:	d109      	bne.n	800d3a8 <xTaskPriorityDisinherit+0x50>
 800d394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d398:	f383 8811 	msr	BASEPRI, r3
 800d39c:	f3bf 8f6f 	isb	sy
 800d3a0:	f3bf 8f4f 	dsb	sy
 800d3a4:	60bb      	str	r3, [r7, #8]
 800d3a6:	e7fe      	b.n	800d3a6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3ac:	1e5a      	subs	r2, r3, #1
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	665a      	str	r2, [r3, #100]	; 0x64

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d02c      	beq.n	800d418 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d128      	bne.n	800d418 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	3304      	adds	r3, #4
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7fe f90c 	bl	800b5e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3e8:	4b0f      	ldr	r3, [pc, #60]	; (800d428 <xTaskPriorityDisinherit+0xd0>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d903      	bls.n	800d3f8 <xTaskPriorityDisinherit+0xa0>
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f4:	4a0c      	ldr	r2, [pc, #48]	; (800d428 <xTaskPriorityDisinherit+0xd0>)
 800d3f6:	6013      	str	r3, [r2, #0]
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3fc:	4613      	mov	r3, r2
 800d3fe:	009b      	lsls	r3, r3, #2
 800d400:	4413      	add	r3, r2
 800d402:	009b      	lsls	r3, r3, #2
 800d404:	4a09      	ldr	r2, [pc, #36]	; (800d42c <xTaskPriorityDisinherit+0xd4>)
 800d406:	441a      	add	r2, r3
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	3304      	adds	r3, #4
 800d40c:	4619      	mov	r1, r3
 800d40e:	4610      	mov	r0, r2
 800d410:	f7fe f88d 	bl	800b52e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d414:	2301      	movs	r3, #1
 800d416:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d418:	697b      	ldr	r3, [r7, #20]
	}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3718      	adds	r7, #24
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}
 800d422:	bf00      	nop
 800d424:	20000aa0 	.word	0x20000aa0
 800d428:	20000f7c 	.word	0x20000f7c
 800d42c:	20000aa4 	.word	0x20000aa4

0800d430 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800d430:	b480      	push	{r7}
 800d432:	b083      	sub	sp, #12
 800d434:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800d436:	4b09      	ldr	r3, [pc, #36]	; (800d45c <uxTaskResetEventItemValue+0x2c>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	699b      	ldr	r3, [r3, #24]
 800d43c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d43e:	4b07      	ldr	r3, [pc, #28]	; (800d45c <uxTaskResetEventItemValue+0x2c>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d444:	4b05      	ldr	r3, [pc, #20]	; (800d45c <uxTaskResetEventItemValue+0x2c>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800d44c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800d44e:	687b      	ldr	r3, [r7, #4]
}
 800d450:	4618      	mov	r0, r3
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr
 800d45c:	20000aa0 	.word	0x20000aa0

0800d460 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d46a:	4b21      	ldr	r3, [pc, #132]	; (800d4f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d470:	4b20      	ldr	r3, [pc, #128]	; (800d4f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	3304      	adds	r3, #4
 800d476:	4618      	mov	r0, r3
 800d478:	f7fe f8b6 	bl	800b5e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d482:	d10a      	bne.n	800d49a <prvAddCurrentTaskToDelayedList+0x3a>
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d007      	beq.n	800d49a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d48a:	4b1a      	ldr	r3, [pc, #104]	; (800d4f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	3304      	adds	r3, #4
 800d490:	4619      	mov	r1, r3
 800d492:	4819      	ldr	r0, [pc, #100]	; (800d4f8 <prvAddCurrentTaskToDelayedList+0x98>)
 800d494:	f7fe f84b 	bl	800b52e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d498:	e026      	b.n	800d4e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d49a:	68fa      	ldr	r2, [r7, #12]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	4413      	add	r3, r2
 800d4a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d4a2:	4b14      	ldr	r3, [pc, #80]	; (800d4f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	68ba      	ldr	r2, [r7, #8]
 800d4a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d4aa:	68ba      	ldr	r2, [r7, #8]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d209      	bcs.n	800d4c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4b2:	4b12      	ldr	r3, [pc, #72]	; (800d4fc <prvAddCurrentTaskToDelayedList+0x9c>)
 800d4b4:	681a      	ldr	r2, [r3, #0]
 800d4b6:	4b0f      	ldr	r3, [pc, #60]	; (800d4f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	3304      	adds	r3, #4
 800d4bc:	4619      	mov	r1, r3
 800d4be:	4610      	mov	r0, r2
 800d4c0:	f7fe f859 	bl	800b576 <vListInsert>
}
 800d4c4:	e010      	b.n	800d4e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4c6:	4b0e      	ldr	r3, [pc, #56]	; (800d500 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d4c8:	681a      	ldr	r2, [r3, #0]
 800d4ca:	4b0a      	ldr	r3, [pc, #40]	; (800d4f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	3304      	adds	r3, #4
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	4610      	mov	r0, r2
 800d4d4:	f7fe f84f 	bl	800b576 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d4d8:	4b0a      	ldr	r3, [pc, #40]	; (800d504 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	68ba      	ldr	r2, [r7, #8]
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d202      	bcs.n	800d4e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d4e2:	4a08      	ldr	r2, [pc, #32]	; (800d504 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	6013      	str	r3, [r2, #0]
}
 800d4e8:	bf00      	nop
 800d4ea:	3710      	adds	r7, #16
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}
 800d4f0:	20000f78 	.word	0x20000f78
 800d4f4:	20000aa0 	.word	0x20000aa0
 800d4f8:	20000f60 	.word	0x20000f60
 800d4fc:	20000f30 	.word	0x20000f30
 800d500:	20000f2c 	.word	0x20000f2c
 800d504:	20000f94 	.word	0x20000f94

0800d508 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b08a      	sub	sp, #40	; 0x28
 800d50c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d50e:	2300      	movs	r3, #0
 800d510:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d512:	f000 faff 	bl	800db14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d516:	4b1c      	ldr	r3, [pc, #112]	; (800d588 <xTimerCreateTimerTask+0x80>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d021      	beq.n	800d562 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d51e:	2300      	movs	r3, #0
 800d520:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d522:	2300      	movs	r3, #0
 800d524:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d526:	1d3a      	adds	r2, r7, #4
 800d528:	f107 0108 	add.w	r1, r7, #8
 800d52c:	f107 030c 	add.w	r3, r7, #12
 800d530:	4618      	mov	r0, r3
 800d532:	f7fd fd55 	bl	800afe0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d536:	6879      	ldr	r1, [r7, #4]
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	68fa      	ldr	r2, [r7, #12]
 800d53c:	9202      	str	r2, [sp, #8]
 800d53e:	9301      	str	r3, [sp, #4]
 800d540:	2330      	movs	r3, #48	; 0x30
 800d542:	9300      	str	r3, [sp, #0]
 800d544:	2300      	movs	r3, #0
 800d546:	460a      	mov	r2, r1
 800d548:	4910      	ldr	r1, [pc, #64]	; (800d58c <xTimerCreateTimerTask+0x84>)
 800d54a:	4811      	ldr	r0, [pc, #68]	; (800d590 <xTimerCreateTimerTask+0x88>)
 800d54c:	f7fe fe42 	bl	800c1d4 <xTaskCreateStatic>
 800d550:	4602      	mov	r2, r0
 800d552:	4b10      	ldr	r3, [pc, #64]	; (800d594 <xTimerCreateTimerTask+0x8c>)
 800d554:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d556:	4b0f      	ldr	r3, [pc, #60]	; (800d594 <xTimerCreateTimerTask+0x8c>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d001      	beq.n	800d562 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d55e:	2301      	movs	r3, #1
 800d560:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d109      	bne.n	800d57c <xTimerCreateTimerTask+0x74>
 800d568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d56c:	f383 8811 	msr	BASEPRI, r3
 800d570:	f3bf 8f6f 	isb	sy
 800d574:	f3bf 8f4f 	dsb	sy
 800d578:	613b      	str	r3, [r7, #16]
 800d57a:	e7fe      	b.n	800d57a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800d57c:	697b      	ldr	r3, [r7, #20]
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3718      	adds	r7, #24
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
 800d586:	bf00      	nop
 800d588:	20000fd0 	.word	0x20000fd0
 800d58c:	08010994 	.word	0x08010994
 800d590:	0800d6c9 	.word	0x0800d6c9
 800d594:	20000fd4 	.word	0x20000fd4

0800d598 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b08a      	sub	sp, #40	; 0x28
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	60f8      	str	r0, [r7, #12]
 800d5a0:	60b9      	str	r1, [r7, #8]
 800d5a2:	607a      	str	r2, [r7, #4]
 800d5a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d109      	bne.n	800d5c4 <xTimerGenericCommand+0x2c>
 800d5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b4:	f383 8811 	msr	BASEPRI, r3
 800d5b8:	f3bf 8f6f 	isb	sy
 800d5bc:	f3bf 8f4f 	dsb	sy
 800d5c0:	623b      	str	r3, [r7, #32]
 800d5c2:	e7fe      	b.n	800d5c2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d5c4:	4b19      	ldr	r3, [pc, #100]	; (800d62c <xTimerGenericCommand+0x94>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d02a      	beq.n	800d622 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	2b05      	cmp	r3, #5
 800d5dc:	dc18      	bgt.n	800d610 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d5de:	f7ff fe9d 	bl	800d31c <xTaskGetSchedulerState>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	2b02      	cmp	r3, #2
 800d5e6:	d109      	bne.n	800d5fc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d5e8:	4b10      	ldr	r3, [pc, #64]	; (800d62c <xTimerGenericCommand+0x94>)
 800d5ea:	6818      	ldr	r0, [r3, #0]
 800d5ec:	f107 0110 	add.w	r1, r7, #16
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5f4:	f7fe f960 	bl	800b8b8 <xQueueGenericSend>
 800d5f8:	6278      	str	r0, [r7, #36]	; 0x24
 800d5fa:	e012      	b.n	800d622 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d5fc:	4b0b      	ldr	r3, [pc, #44]	; (800d62c <xTimerGenericCommand+0x94>)
 800d5fe:	6818      	ldr	r0, [r3, #0]
 800d600:	f107 0110 	add.w	r1, r7, #16
 800d604:	2300      	movs	r3, #0
 800d606:	2200      	movs	r2, #0
 800d608:	f7fe f956 	bl	800b8b8 <xQueueGenericSend>
 800d60c:	6278      	str	r0, [r7, #36]	; 0x24
 800d60e:	e008      	b.n	800d622 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d610:	4b06      	ldr	r3, [pc, #24]	; (800d62c <xTimerGenericCommand+0x94>)
 800d612:	6818      	ldr	r0, [r3, #0]
 800d614:	f107 0110 	add.w	r1, r7, #16
 800d618:	2300      	movs	r3, #0
 800d61a:	683a      	ldr	r2, [r7, #0]
 800d61c:	f7fe fa46 	bl	800baac <xQueueGenericSendFromISR>
 800d620:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d624:	4618      	mov	r0, r3
 800d626:	3728      	adds	r7, #40	; 0x28
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	20000fd0 	.word	0x20000fd0

0800d630 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b088      	sub	sp, #32
 800d634:	af02      	add	r7, sp, #8
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d63a:	4b22      	ldr	r3, [pc, #136]	; (800d6c4 <prvProcessExpiredTimer+0x94>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	68db      	ldr	r3, [r3, #12]
 800d640:	68db      	ldr	r3, [r3, #12]
 800d642:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	3304      	adds	r3, #4
 800d648:	4618      	mov	r0, r3
 800d64a:	f7fd ffcd 	bl	800b5e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d654:	f003 0304 	and.w	r3, r3, #4
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d021      	beq.n	800d6a0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	699a      	ldr	r2, [r3, #24]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	18d1      	adds	r1, r2, r3
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	683a      	ldr	r2, [r7, #0]
 800d668:	6978      	ldr	r0, [r7, #20]
 800d66a:	f000 f8d1 	bl	800d810 <prvInsertTimerInActiveList>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b00      	cmp	r3, #0
 800d672:	d01e      	beq.n	800d6b2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d674:	2300      	movs	r3, #0
 800d676:	9300      	str	r3, [sp, #0]
 800d678:	2300      	movs	r3, #0
 800d67a:	687a      	ldr	r2, [r7, #4]
 800d67c:	2100      	movs	r1, #0
 800d67e:	6978      	ldr	r0, [r7, #20]
 800d680:	f7ff ff8a 	bl	800d598 <xTimerGenericCommand>
 800d684:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d112      	bne.n	800d6b2 <prvProcessExpiredTimer+0x82>
 800d68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d690:	f383 8811 	msr	BASEPRI, r3
 800d694:	f3bf 8f6f 	isb	sy
 800d698:	f3bf 8f4f 	dsb	sy
 800d69c:	60fb      	str	r3, [r7, #12]
 800d69e:	e7fe      	b.n	800d69e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6a6:	f023 0301 	bic.w	r3, r3, #1
 800d6aa:	b2da      	uxtb	r2, r3
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	6a1b      	ldr	r3, [r3, #32]
 800d6b6:	6978      	ldr	r0, [r7, #20]
 800d6b8:	4798      	blx	r3
}
 800d6ba:	bf00      	nop
 800d6bc:	3718      	adds	r7, #24
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
 800d6c2:	bf00      	nop
 800d6c4:	20000fc8 	.word	0x20000fc8

0800d6c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b084      	sub	sp, #16
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d6d0:	f107 0308 	add.w	r3, r7, #8
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f000 f857 	bl	800d788 <prvGetNextExpireTime>
 800d6da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	4619      	mov	r1, r3
 800d6e0:	68f8      	ldr	r0, [r7, #12]
 800d6e2:	f000 f803 	bl	800d6ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d6e6:	f000 f8d5 	bl	800d894 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d6ea:	e7f1      	b.n	800d6d0 <prvTimerTask+0x8>

0800d6ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d6f6:	f7ff f97f 	bl	800c9f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d6fa:	f107 0308 	add.w	r3, r7, #8
 800d6fe:	4618      	mov	r0, r3
 800d700:	f000 f866 	bl	800d7d0 <prvSampleTimeNow>
 800d704:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d130      	bne.n	800d76e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d10a      	bne.n	800d728 <prvProcessTimerOrBlockTask+0x3c>
 800d712:	687a      	ldr	r2, [r7, #4]
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	429a      	cmp	r2, r3
 800d718:	d806      	bhi.n	800d728 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d71a:	f7ff f97b 	bl	800ca14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d71e:	68f9      	ldr	r1, [r7, #12]
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f7ff ff85 	bl	800d630 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d726:	e024      	b.n	800d772 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d008      	beq.n	800d740 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d72e:	4b13      	ldr	r3, [pc, #76]	; (800d77c <prvProcessTimerOrBlockTask+0x90>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d101      	bne.n	800d73c <prvProcessTimerOrBlockTask+0x50>
 800d738:	2301      	movs	r3, #1
 800d73a:	e000      	b.n	800d73e <prvProcessTimerOrBlockTask+0x52>
 800d73c:	2300      	movs	r3, #0
 800d73e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d740:	4b0f      	ldr	r3, [pc, #60]	; (800d780 <prvProcessTimerOrBlockTask+0x94>)
 800d742:	6818      	ldr	r0, [r3, #0]
 800d744:	687a      	ldr	r2, [r7, #4]
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	1ad3      	subs	r3, r2, r3
 800d74a:	683a      	ldr	r2, [r7, #0]
 800d74c:	4619      	mov	r1, r3
 800d74e:	f7fe fd0d 	bl	800c16c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d752:	f7ff f95f 	bl	800ca14 <xTaskResumeAll>
 800d756:	4603      	mov	r3, r0
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d10a      	bne.n	800d772 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d75c:	4b09      	ldr	r3, [pc, #36]	; (800d784 <prvProcessTimerOrBlockTask+0x98>)
 800d75e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d762:	601a      	str	r2, [r3, #0]
 800d764:	f3bf 8f4f 	dsb	sy
 800d768:	f3bf 8f6f 	isb	sy
}
 800d76c:	e001      	b.n	800d772 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d76e:	f7ff f951 	bl	800ca14 <xTaskResumeAll>
}
 800d772:	bf00      	nop
 800d774:	3710      	adds	r7, #16
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	20000fcc 	.word	0x20000fcc
 800d780:	20000fd0 	.word	0x20000fd0
 800d784:	e000ed04 	.word	0xe000ed04

0800d788 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d788:	b480      	push	{r7}
 800d78a:	b085      	sub	sp, #20
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d790:	4b0e      	ldr	r3, [pc, #56]	; (800d7cc <prvGetNextExpireTime+0x44>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d101      	bne.n	800d79e <prvGetNextExpireTime+0x16>
 800d79a:	2201      	movs	r2, #1
 800d79c:	e000      	b.n	800d7a0 <prvGetNextExpireTime+0x18>
 800d79e:	2200      	movs	r2, #0
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d105      	bne.n	800d7b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d7ac:	4b07      	ldr	r3, [pc, #28]	; (800d7cc <prvGetNextExpireTime+0x44>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	68db      	ldr	r3, [r3, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	60fb      	str	r3, [r7, #12]
 800d7b6:	e001      	b.n	800d7bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3714      	adds	r7, #20
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c8:	4770      	bx	lr
 800d7ca:	bf00      	nop
 800d7cc:	20000fc8 	.word	0x20000fc8

0800d7d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b084      	sub	sp, #16
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d7d8:	f7ff f9b8 	bl	800cb4c <xTaskGetTickCount>
 800d7dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d7de:	4b0b      	ldr	r3, [pc, #44]	; (800d80c <prvSampleTimeNow+0x3c>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	68fa      	ldr	r2, [r7, #12]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d205      	bcs.n	800d7f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d7e8:	f000 f930 	bl	800da4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	601a      	str	r2, [r3, #0]
 800d7f2:	e002      	b.n	800d7fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d7fa:	4a04      	ldr	r2, [pc, #16]	; (800d80c <prvSampleTimeNow+0x3c>)
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d800:	68fb      	ldr	r3, [r7, #12]
}
 800d802:	4618      	mov	r0, r3
 800d804:	3710      	adds	r7, #16
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	bf00      	nop
 800d80c:	20000fd8 	.word	0x20000fd8

0800d810 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b086      	sub	sp, #24
 800d814:	af00      	add	r7, sp, #0
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	607a      	str	r2, [r7, #4]
 800d81c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d81e:	2300      	movs	r3, #0
 800d820:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	68ba      	ldr	r2, [r7, #8]
 800d826:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	68fa      	ldr	r2, [r7, #12]
 800d82c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d82e:	68ba      	ldr	r2, [r7, #8]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	429a      	cmp	r2, r3
 800d834:	d812      	bhi.n	800d85c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	1ad2      	subs	r2, r2, r3
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	699b      	ldr	r3, [r3, #24]
 800d840:	429a      	cmp	r2, r3
 800d842:	d302      	bcc.n	800d84a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d844:	2301      	movs	r3, #1
 800d846:	617b      	str	r3, [r7, #20]
 800d848:	e01b      	b.n	800d882 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d84a:	4b10      	ldr	r3, [pc, #64]	; (800d88c <prvInsertTimerInActiveList+0x7c>)
 800d84c:	681a      	ldr	r2, [r3, #0]
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	3304      	adds	r3, #4
 800d852:	4619      	mov	r1, r3
 800d854:	4610      	mov	r0, r2
 800d856:	f7fd fe8e 	bl	800b576 <vListInsert>
 800d85a:	e012      	b.n	800d882 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d85c:	687a      	ldr	r2, [r7, #4]
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	429a      	cmp	r2, r3
 800d862:	d206      	bcs.n	800d872 <prvInsertTimerInActiveList+0x62>
 800d864:	68ba      	ldr	r2, [r7, #8]
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	429a      	cmp	r2, r3
 800d86a:	d302      	bcc.n	800d872 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d86c:	2301      	movs	r3, #1
 800d86e:	617b      	str	r3, [r7, #20]
 800d870:	e007      	b.n	800d882 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d872:	4b07      	ldr	r3, [pc, #28]	; (800d890 <prvInsertTimerInActiveList+0x80>)
 800d874:	681a      	ldr	r2, [r3, #0]
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	3304      	adds	r3, #4
 800d87a:	4619      	mov	r1, r3
 800d87c:	4610      	mov	r0, r2
 800d87e:	f7fd fe7a 	bl	800b576 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d882:	697b      	ldr	r3, [r7, #20]
}
 800d884:	4618      	mov	r0, r3
 800d886:	3718      	adds	r7, #24
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}
 800d88c:	20000fcc 	.word	0x20000fcc
 800d890:	20000fc8 	.word	0x20000fc8

0800d894 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b08e      	sub	sp, #56	; 0x38
 800d898:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d89a:	e0c6      	b.n	800da2a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	da17      	bge.n	800d8d2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d8a2:	1d3b      	adds	r3, r7, #4
 800d8a4:	3304      	adds	r3, #4
 800d8a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d109      	bne.n	800d8c2 <prvProcessReceivedCommands+0x2e>
 800d8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b2:	f383 8811 	msr	BASEPRI, r3
 800d8b6:	f3bf 8f6f 	isb	sy
 800d8ba:	f3bf 8f4f 	dsb	sy
 800d8be:	61fb      	str	r3, [r7, #28]
 800d8c0:	e7fe      	b.n	800d8c0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8c8:	6850      	ldr	r0, [r2, #4]
 800d8ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8cc:	6892      	ldr	r2, [r2, #8]
 800d8ce:	4611      	mov	r1, r2
 800d8d0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	f2c0 80a7 	blt.w	800da28 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e0:	695b      	ldr	r3, [r3, #20]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d004      	beq.n	800d8f0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e8:	3304      	adds	r3, #4
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7fd fe7c 	bl	800b5e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d8f0:	463b      	mov	r3, r7
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7ff ff6c 	bl	800d7d0 <prvSampleTimeNow>
 800d8f8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2b09      	cmp	r3, #9
 800d8fe:	f200 8094 	bhi.w	800da2a <prvProcessReceivedCommands+0x196>
 800d902:	a201      	add	r2, pc, #4	; (adr r2, 800d908 <prvProcessReceivedCommands+0x74>)
 800d904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d908:	0800d931 	.word	0x0800d931
 800d90c:	0800d931 	.word	0x0800d931
 800d910:	0800d931 	.word	0x0800d931
 800d914:	0800d9a3 	.word	0x0800d9a3
 800d918:	0800d9b7 	.word	0x0800d9b7
 800d91c:	0800d9ff 	.word	0x0800d9ff
 800d920:	0800d931 	.word	0x0800d931
 800d924:	0800d931 	.word	0x0800d931
 800d928:	0800d9a3 	.word	0x0800d9a3
 800d92c:	0800d9b7 	.word	0x0800d9b7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d932:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d936:	f043 0301 	orr.w	r3, r3, #1
 800d93a:	b2da      	uxtb	r2, r3
 800d93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d942:	68ba      	ldr	r2, [r7, #8]
 800d944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d946:	699b      	ldr	r3, [r3, #24]
 800d948:	18d1      	adds	r1, r2, r3
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d94e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d950:	f7ff ff5e 	bl	800d810 <prvInsertTimerInActiveList>
 800d954:	4603      	mov	r3, r0
 800d956:	2b00      	cmp	r3, #0
 800d958:	d067      	beq.n	800da2a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d95c:	6a1b      	ldr	r3, [r3, #32]
 800d95e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d960:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d964:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d968:	f003 0304 	and.w	r3, r3, #4
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d05c      	beq.n	800da2a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d970:	68ba      	ldr	r2, [r7, #8]
 800d972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d974:	699b      	ldr	r3, [r3, #24]
 800d976:	441a      	add	r2, r3
 800d978:	2300      	movs	r3, #0
 800d97a:	9300      	str	r3, [sp, #0]
 800d97c:	2300      	movs	r3, #0
 800d97e:	2100      	movs	r1, #0
 800d980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d982:	f7ff fe09 	bl	800d598 <xTimerGenericCommand>
 800d986:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d988:	6a3b      	ldr	r3, [r7, #32]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d14d      	bne.n	800da2a <prvProcessReceivedCommands+0x196>
 800d98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d992:	f383 8811 	msr	BASEPRI, r3
 800d996:	f3bf 8f6f 	isb	sy
 800d99a:	f3bf 8f4f 	dsb	sy
 800d99e:	61bb      	str	r3, [r7, #24]
 800d9a0:	e7fe      	b.n	800d9a0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9a8:	f023 0301 	bic.w	r3, r3, #1
 800d9ac:	b2da      	uxtb	r2, r3
 800d9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d9b4:	e039      	b.n	800da2a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9bc:	f043 0301 	orr.w	r3, r3, #1
 800d9c0:	b2da      	uxtb	r2, r3
 800d9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d9c8:	68ba      	ldr	r2, [r7, #8]
 800d9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d0:	699b      	ldr	r3, [r3, #24]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d109      	bne.n	800d9ea <prvProcessReceivedCommands+0x156>
 800d9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9da:	f383 8811 	msr	BASEPRI, r3
 800d9de:	f3bf 8f6f 	isb	sy
 800d9e2:	f3bf 8f4f 	dsb	sy
 800d9e6:	617b      	str	r3, [r7, #20]
 800d9e8:	e7fe      	b.n	800d9e8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ec:	699a      	ldr	r2, [r3, #24]
 800d9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f0:	18d1      	adds	r1, r2, r3
 800d9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9f8:	f7ff ff0a 	bl	800d810 <prvInsertTimerInActiveList>
					break;
 800d9fc:	e015      	b.n	800da2a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da04:	f003 0302 	and.w	r3, r3, #2
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d103      	bne.n	800da14 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800da0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da0e:	f000 fbe1 	bl	800e1d4 <vPortFree>
 800da12:	e00a      	b.n	800da2a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da1a:	f023 0301 	bic.w	r3, r3, #1
 800da1e:	b2da      	uxtb	r2, r3
 800da20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800da26:	e000      	b.n	800da2a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800da28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800da2a:	4b07      	ldr	r3, [pc, #28]	; (800da48 <prvProcessReceivedCommands+0x1b4>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	1d39      	adds	r1, r7, #4
 800da30:	2200      	movs	r2, #0
 800da32:	4618      	mov	r0, r3
 800da34:	f7fe f8ce 	bl	800bbd4 <xQueueReceive>
 800da38:	4603      	mov	r3, r0
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	f47f af2e 	bne.w	800d89c <prvProcessReceivedCommands+0x8>
	}
}
 800da40:	bf00      	nop
 800da42:	3730      	adds	r7, #48	; 0x30
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}
 800da48:	20000fd0 	.word	0x20000fd0

0800da4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b088      	sub	sp, #32
 800da50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800da52:	e047      	b.n	800dae4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800da54:	4b2d      	ldr	r3, [pc, #180]	; (800db0c <prvSwitchTimerLists+0xc0>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	68db      	ldr	r3, [r3, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da5e:	4b2b      	ldr	r3, [pc, #172]	; (800db0c <prvSwitchTimerLists+0xc0>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	68db      	ldr	r3, [r3, #12]
 800da64:	68db      	ldr	r3, [r3, #12]
 800da66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	3304      	adds	r3, #4
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7fd fdbb 	bl	800b5e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	6a1b      	ldr	r3, [r3, #32]
 800da76:	68f8      	ldr	r0, [r7, #12]
 800da78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da80:	f003 0304 	and.w	r3, r3, #4
 800da84:	2b00      	cmp	r3, #0
 800da86:	d02d      	beq.n	800dae4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	699b      	ldr	r3, [r3, #24]
 800da8c:	693a      	ldr	r2, [r7, #16]
 800da8e:	4413      	add	r3, r2
 800da90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800da92:	68ba      	ldr	r2, [r7, #8]
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	429a      	cmp	r2, r3
 800da98:	d90e      	bls.n	800dab8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	68ba      	ldr	r2, [r7, #8]
 800da9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	68fa      	ldr	r2, [r7, #12]
 800daa4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800daa6:	4b19      	ldr	r3, [pc, #100]	; (800db0c <prvSwitchTimerLists+0xc0>)
 800daa8:	681a      	ldr	r2, [r3, #0]
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	3304      	adds	r3, #4
 800daae:	4619      	mov	r1, r3
 800dab0:	4610      	mov	r0, r2
 800dab2:	f7fd fd60 	bl	800b576 <vListInsert>
 800dab6:	e015      	b.n	800dae4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dab8:	2300      	movs	r3, #0
 800daba:	9300      	str	r3, [sp, #0]
 800dabc:	2300      	movs	r3, #0
 800dabe:	693a      	ldr	r2, [r7, #16]
 800dac0:	2100      	movs	r1, #0
 800dac2:	68f8      	ldr	r0, [r7, #12]
 800dac4:	f7ff fd68 	bl	800d598 <xTimerGenericCommand>
 800dac8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d109      	bne.n	800dae4 <prvSwitchTimerLists+0x98>
 800dad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad4:	f383 8811 	msr	BASEPRI, r3
 800dad8:	f3bf 8f6f 	isb	sy
 800dadc:	f3bf 8f4f 	dsb	sy
 800dae0:	603b      	str	r3, [r7, #0]
 800dae2:	e7fe      	b.n	800dae2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dae4:	4b09      	ldr	r3, [pc, #36]	; (800db0c <prvSwitchTimerLists+0xc0>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d1b2      	bne.n	800da54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800daee:	4b07      	ldr	r3, [pc, #28]	; (800db0c <prvSwitchTimerLists+0xc0>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800daf4:	4b06      	ldr	r3, [pc, #24]	; (800db10 <prvSwitchTimerLists+0xc4>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4a04      	ldr	r2, [pc, #16]	; (800db0c <prvSwitchTimerLists+0xc0>)
 800dafa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dafc:	4a04      	ldr	r2, [pc, #16]	; (800db10 <prvSwitchTimerLists+0xc4>)
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	6013      	str	r3, [r2, #0]
}
 800db02:	bf00      	nop
 800db04:	3718      	adds	r7, #24
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
 800db0a:	bf00      	nop
 800db0c:	20000fc8 	.word	0x20000fc8
 800db10:	20000fcc 	.word	0x20000fcc

0800db14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800db1a:	f000 f97f 	bl	800de1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800db1e:	4b15      	ldr	r3, [pc, #84]	; (800db74 <prvCheckForValidListAndQueue+0x60>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d120      	bne.n	800db68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800db26:	4814      	ldr	r0, [pc, #80]	; (800db78 <prvCheckForValidListAndQueue+0x64>)
 800db28:	f7fd fcd4 	bl	800b4d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800db2c:	4813      	ldr	r0, [pc, #76]	; (800db7c <prvCheckForValidListAndQueue+0x68>)
 800db2e:	f7fd fcd1 	bl	800b4d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800db32:	4b13      	ldr	r3, [pc, #76]	; (800db80 <prvCheckForValidListAndQueue+0x6c>)
 800db34:	4a10      	ldr	r2, [pc, #64]	; (800db78 <prvCheckForValidListAndQueue+0x64>)
 800db36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800db38:	4b12      	ldr	r3, [pc, #72]	; (800db84 <prvCheckForValidListAndQueue+0x70>)
 800db3a:	4a10      	ldr	r2, [pc, #64]	; (800db7c <prvCheckForValidListAndQueue+0x68>)
 800db3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800db3e:	2300      	movs	r3, #0
 800db40:	9300      	str	r3, [sp, #0]
 800db42:	4b11      	ldr	r3, [pc, #68]	; (800db88 <prvCheckForValidListAndQueue+0x74>)
 800db44:	4a11      	ldr	r2, [pc, #68]	; (800db8c <prvCheckForValidListAndQueue+0x78>)
 800db46:	2110      	movs	r1, #16
 800db48:	200a      	movs	r0, #10
 800db4a:	f7fd fddf 	bl	800b70c <xQueueGenericCreateStatic>
 800db4e:	4602      	mov	r2, r0
 800db50:	4b08      	ldr	r3, [pc, #32]	; (800db74 <prvCheckForValidListAndQueue+0x60>)
 800db52:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800db54:	4b07      	ldr	r3, [pc, #28]	; (800db74 <prvCheckForValidListAndQueue+0x60>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d005      	beq.n	800db68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800db5c:	4b05      	ldr	r3, [pc, #20]	; (800db74 <prvCheckForValidListAndQueue+0x60>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	490b      	ldr	r1, [pc, #44]	; (800db90 <prvCheckForValidListAndQueue+0x7c>)
 800db62:	4618      	mov	r0, r3
 800db64:	f7fe fada 	bl	800c11c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800db68:	f000 f986 	bl	800de78 <vPortExitCritical>
}
 800db6c:	bf00      	nop
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}
 800db72:	bf00      	nop
 800db74:	20000fd0 	.word	0x20000fd0
 800db78:	20000fa0 	.word	0x20000fa0
 800db7c:	20000fb4 	.word	0x20000fb4
 800db80:	20000fc8 	.word	0x20000fc8
 800db84:	20000fcc 	.word	0x20000fcc
 800db88:	2000107c 	.word	0x2000107c
 800db8c:	20000fdc 	.word	0x20000fdc
 800db90:	0801099c 	.word	0x0801099c

0800db94 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800db94:	b580      	push	{r7, lr}
 800db96:	b08a      	sub	sp, #40	; 0x28
 800db98:	af00      	add	r7, sp, #0
 800db9a:	60f8      	str	r0, [r7, #12]
 800db9c:	60b9      	str	r1, [r7, #8]
 800db9e:	607a      	str	r2, [r7, #4]
 800dba0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800dba2:	f06f 0301 	mvn.w	r3, #1
 800dba6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dbb4:	4b06      	ldr	r3, [pc, #24]	; (800dbd0 <xTimerPendFunctionCallFromISR+0x3c>)
 800dbb6:	6818      	ldr	r0, [r3, #0]
 800dbb8:	f107 0114 	add.w	r1, r7, #20
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	683a      	ldr	r2, [r7, #0]
 800dbc0:	f7fd ff74 	bl	800baac <xQueueGenericSendFromISR>
 800dbc4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800dbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3728      	adds	r7, #40	; 0x28
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	20000fd0 	.word	0x20000fd0

0800dbd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b085      	sub	sp, #20
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	60f8      	str	r0, [r7, #12]
 800dbdc:	60b9      	str	r1, [r7, #8]
 800dbde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	3b04      	subs	r3, #4
 800dbe4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dbec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	3b04      	subs	r3, #4
 800dbf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	f023 0201 	bic.w	r2, r3, #1
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	3b04      	subs	r3, #4
 800dc02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dc04:	4a0c      	ldr	r2, [pc, #48]	; (800dc38 <pxPortInitialiseStack+0x64>)
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	3b14      	subs	r3, #20
 800dc0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dc10:	687a      	ldr	r2, [r7, #4]
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	3b04      	subs	r3, #4
 800dc1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	f06f 0202 	mvn.w	r2, #2
 800dc22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	3b20      	subs	r3, #32
 800dc28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3714      	adds	r7, #20
 800dc30:	46bd      	mov	sp, r7
 800dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc36:	4770      	bx	lr
 800dc38:	0800dc3d 	.word	0x0800dc3d

0800dc3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b085      	sub	sp, #20
 800dc40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dc42:	2300      	movs	r3, #0
 800dc44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dc46:	4b11      	ldr	r3, [pc, #68]	; (800dc8c <prvTaskExitError+0x50>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc4e:	d009      	beq.n	800dc64 <prvTaskExitError+0x28>
 800dc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc54:	f383 8811 	msr	BASEPRI, r3
 800dc58:	f3bf 8f6f 	isb	sy
 800dc5c:	f3bf 8f4f 	dsb	sy
 800dc60:	60fb      	str	r3, [r7, #12]
 800dc62:	e7fe      	b.n	800dc62 <prvTaskExitError+0x26>
 800dc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc68:	f383 8811 	msr	BASEPRI, r3
 800dc6c:	f3bf 8f6f 	isb	sy
 800dc70:	f3bf 8f4f 	dsb	sy
 800dc74:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dc76:	bf00      	nop
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d0fc      	beq.n	800dc78 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dc7e:	bf00      	nop
 800dc80:	3714      	adds	r7, #20
 800dc82:	46bd      	mov	sp, r7
 800dc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc88:	4770      	bx	lr
 800dc8a:	bf00      	nop
 800dc8c:	2000011c 	.word	0x2000011c

0800dc90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dc90:	4b07      	ldr	r3, [pc, #28]	; (800dcb0 <pxCurrentTCBConst2>)
 800dc92:	6819      	ldr	r1, [r3, #0]
 800dc94:	6808      	ldr	r0, [r1, #0]
 800dc96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc9a:	f380 8809 	msr	PSP, r0
 800dc9e:	f3bf 8f6f 	isb	sy
 800dca2:	f04f 0000 	mov.w	r0, #0
 800dca6:	f380 8811 	msr	BASEPRI, r0
 800dcaa:	4770      	bx	lr
 800dcac:	f3af 8000 	nop.w

0800dcb0 <pxCurrentTCBConst2>:
 800dcb0:	20000aa0 	.word	0x20000aa0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dcb4:	bf00      	nop
 800dcb6:	bf00      	nop

0800dcb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dcb8:	4808      	ldr	r0, [pc, #32]	; (800dcdc <prvPortStartFirstTask+0x24>)
 800dcba:	6800      	ldr	r0, [r0, #0]
 800dcbc:	6800      	ldr	r0, [r0, #0]
 800dcbe:	f380 8808 	msr	MSP, r0
 800dcc2:	f04f 0000 	mov.w	r0, #0
 800dcc6:	f380 8814 	msr	CONTROL, r0
 800dcca:	b662      	cpsie	i
 800dccc:	b661      	cpsie	f
 800dcce:	f3bf 8f4f 	dsb	sy
 800dcd2:	f3bf 8f6f 	isb	sy
 800dcd6:	df00      	svc	0
 800dcd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dcda:	bf00      	nop
 800dcdc:	e000ed08 	.word	0xe000ed08

0800dce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b086      	sub	sp, #24
 800dce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dce6:	4b44      	ldr	r3, [pc, #272]	; (800ddf8 <xPortStartScheduler+0x118>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	4a44      	ldr	r2, [pc, #272]	; (800ddfc <xPortStartScheduler+0x11c>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d109      	bne.n	800dd04 <xPortStartScheduler+0x24>
 800dcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf4:	f383 8811 	msr	BASEPRI, r3
 800dcf8:	f3bf 8f6f 	isb	sy
 800dcfc:	f3bf 8f4f 	dsb	sy
 800dd00:	613b      	str	r3, [r7, #16]
 800dd02:	e7fe      	b.n	800dd02 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dd04:	4b3c      	ldr	r3, [pc, #240]	; (800ddf8 <xPortStartScheduler+0x118>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4a3d      	ldr	r2, [pc, #244]	; (800de00 <xPortStartScheduler+0x120>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d109      	bne.n	800dd22 <xPortStartScheduler+0x42>
 800dd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd12:	f383 8811 	msr	BASEPRI, r3
 800dd16:	f3bf 8f6f 	isb	sy
 800dd1a:	f3bf 8f4f 	dsb	sy
 800dd1e:	60fb      	str	r3, [r7, #12]
 800dd20:	e7fe      	b.n	800dd20 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dd22:	4b38      	ldr	r3, [pc, #224]	; (800de04 <xPortStartScheduler+0x124>)
 800dd24:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	b2db      	uxtb	r3, r3
 800dd2c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	22ff      	movs	r2, #255	; 0xff
 800dd32:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	b2db      	uxtb	r3, r3
 800dd3a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dd3c:	78fb      	ldrb	r3, [r7, #3]
 800dd3e:	b2db      	uxtb	r3, r3
 800dd40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dd44:	b2da      	uxtb	r2, r3
 800dd46:	4b30      	ldr	r3, [pc, #192]	; (800de08 <xPortStartScheduler+0x128>)
 800dd48:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dd4a:	4b30      	ldr	r3, [pc, #192]	; (800de0c <xPortStartScheduler+0x12c>)
 800dd4c:	2207      	movs	r2, #7
 800dd4e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd50:	e009      	b.n	800dd66 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800dd52:	4b2e      	ldr	r3, [pc, #184]	; (800de0c <xPortStartScheduler+0x12c>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	3b01      	subs	r3, #1
 800dd58:	4a2c      	ldr	r2, [pc, #176]	; (800de0c <xPortStartScheduler+0x12c>)
 800dd5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dd5c:	78fb      	ldrb	r3, [r7, #3]
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	005b      	lsls	r3, r3, #1
 800dd62:	b2db      	uxtb	r3, r3
 800dd64:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd66:	78fb      	ldrb	r3, [r7, #3]
 800dd68:	b2db      	uxtb	r3, r3
 800dd6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd6e:	2b80      	cmp	r3, #128	; 0x80
 800dd70:	d0ef      	beq.n	800dd52 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dd72:	4b26      	ldr	r3, [pc, #152]	; (800de0c <xPortStartScheduler+0x12c>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	f1c3 0307 	rsb	r3, r3, #7
 800dd7a:	2b04      	cmp	r3, #4
 800dd7c:	d009      	beq.n	800dd92 <xPortStartScheduler+0xb2>
 800dd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd82:	f383 8811 	msr	BASEPRI, r3
 800dd86:	f3bf 8f6f 	isb	sy
 800dd8a:	f3bf 8f4f 	dsb	sy
 800dd8e:	60bb      	str	r3, [r7, #8]
 800dd90:	e7fe      	b.n	800dd90 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dd92:	4b1e      	ldr	r3, [pc, #120]	; (800de0c <xPortStartScheduler+0x12c>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	021b      	lsls	r3, r3, #8
 800dd98:	4a1c      	ldr	r2, [pc, #112]	; (800de0c <xPortStartScheduler+0x12c>)
 800dd9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dd9c:	4b1b      	ldr	r3, [pc, #108]	; (800de0c <xPortStartScheduler+0x12c>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dda4:	4a19      	ldr	r2, [pc, #100]	; (800de0c <xPortStartScheduler+0x12c>)
 800dda6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	b2da      	uxtb	r2, r3
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ddb0:	4b17      	ldr	r3, [pc, #92]	; (800de10 <xPortStartScheduler+0x130>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	4a16      	ldr	r2, [pc, #88]	; (800de10 <xPortStartScheduler+0x130>)
 800ddb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ddba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ddbc:	4b14      	ldr	r3, [pc, #80]	; (800de10 <xPortStartScheduler+0x130>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4a13      	ldr	r2, [pc, #76]	; (800de10 <xPortStartScheduler+0x130>)
 800ddc2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ddc6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ddc8:	f000 f8d6 	bl	800df78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ddcc:	4b11      	ldr	r3, [pc, #68]	; (800de14 <xPortStartScheduler+0x134>)
 800ddce:	2200      	movs	r2, #0
 800ddd0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ddd2:	f000 f8f5 	bl	800dfc0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ddd6:	4b10      	ldr	r3, [pc, #64]	; (800de18 <xPortStartScheduler+0x138>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	4a0f      	ldr	r2, [pc, #60]	; (800de18 <xPortStartScheduler+0x138>)
 800dddc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dde0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dde2:	f7ff ff69 	bl	800dcb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dde6:	f7fe ff79 	bl	800ccdc <vTaskSwitchContext>
	prvTaskExitError();
 800ddea:	f7ff ff27 	bl	800dc3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ddee:	2300      	movs	r3, #0
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3718      	adds	r7, #24
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}
 800ddf8:	e000ed00 	.word	0xe000ed00
 800ddfc:	410fc271 	.word	0x410fc271
 800de00:	410fc270 	.word	0x410fc270
 800de04:	e000e400 	.word	0xe000e400
 800de08:	200010cc 	.word	0x200010cc
 800de0c:	200010d0 	.word	0x200010d0
 800de10:	e000ed20 	.word	0xe000ed20
 800de14:	2000011c 	.word	0x2000011c
 800de18:	e000ef34 	.word	0xe000ef34

0800de1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800de1c:	b480      	push	{r7}
 800de1e:	b083      	sub	sp, #12
 800de20:	af00      	add	r7, sp, #0
 800de22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de26:	f383 8811 	msr	BASEPRI, r3
 800de2a:	f3bf 8f6f 	isb	sy
 800de2e:	f3bf 8f4f 	dsb	sy
 800de32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800de34:	4b0e      	ldr	r3, [pc, #56]	; (800de70 <vPortEnterCritical+0x54>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	3301      	adds	r3, #1
 800de3a:	4a0d      	ldr	r2, [pc, #52]	; (800de70 <vPortEnterCritical+0x54>)
 800de3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800de3e:	4b0c      	ldr	r3, [pc, #48]	; (800de70 <vPortEnterCritical+0x54>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	2b01      	cmp	r3, #1
 800de44:	d10e      	bne.n	800de64 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800de46:	4b0b      	ldr	r3, [pc, #44]	; (800de74 <vPortEnterCritical+0x58>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d009      	beq.n	800de64 <vPortEnterCritical+0x48>
 800de50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de54:	f383 8811 	msr	BASEPRI, r3
 800de58:	f3bf 8f6f 	isb	sy
 800de5c:	f3bf 8f4f 	dsb	sy
 800de60:	603b      	str	r3, [r7, #0]
 800de62:	e7fe      	b.n	800de62 <vPortEnterCritical+0x46>
	}
}
 800de64:	bf00      	nop
 800de66:	370c      	adds	r7, #12
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr
 800de70:	2000011c 	.word	0x2000011c
 800de74:	e000ed04 	.word	0xe000ed04

0800de78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800de78:	b480      	push	{r7}
 800de7a:	b083      	sub	sp, #12
 800de7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800de7e:	4b11      	ldr	r3, [pc, #68]	; (800dec4 <vPortExitCritical+0x4c>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d109      	bne.n	800de9a <vPortExitCritical+0x22>
 800de86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de8a:	f383 8811 	msr	BASEPRI, r3
 800de8e:	f3bf 8f6f 	isb	sy
 800de92:	f3bf 8f4f 	dsb	sy
 800de96:	607b      	str	r3, [r7, #4]
 800de98:	e7fe      	b.n	800de98 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800de9a:	4b0a      	ldr	r3, [pc, #40]	; (800dec4 <vPortExitCritical+0x4c>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	3b01      	subs	r3, #1
 800dea0:	4a08      	ldr	r2, [pc, #32]	; (800dec4 <vPortExitCritical+0x4c>)
 800dea2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dea4:	4b07      	ldr	r3, [pc, #28]	; (800dec4 <vPortExitCritical+0x4c>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d104      	bne.n	800deb6 <vPortExitCritical+0x3e>
 800deac:	2300      	movs	r3, #0
 800deae:	603b      	str	r3, [r7, #0]
	__asm volatile
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800deb6:	bf00      	nop
 800deb8:	370c      	adds	r7, #12
 800deba:	46bd      	mov	sp, r7
 800debc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec0:	4770      	bx	lr
 800dec2:	bf00      	nop
 800dec4:	2000011c 	.word	0x2000011c
	...

0800ded0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ded0:	f3ef 8009 	mrs	r0, PSP
 800ded4:	f3bf 8f6f 	isb	sy
 800ded8:	4b15      	ldr	r3, [pc, #84]	; (800df30 <pxCurrentTCBConst>)
 800deda:	681a      	ldr	r2, [r3, #0]
 800dedc:	f01e 0f10 	tst.w	lr, #16
 800dee0:	bf08      	it	eq
 800dee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deea:	6010      	str	r0, [r2, #0]
 800deec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800def0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800def4:	f380 8811 	msr	BASEPRI, r0
 800def8:	f3bf 8f4f 	dsb	sy
 800defc:	f3bf 8f6f 	isb	sy
 800df00:	f7fe feec 	bl	800ccdc <vTaskSwitchContext>
 800df04:	f04f 0000 	mov.w	r0, #0
 800df08:	f380 8811 	msr	BASEPRI, r0
 800df0c:	bc09      	pop	{r0, r3}
 800df0e:	6819      	ldr	r1, [r3, #0]
 800df10:	6808      	ldr	r0, [r1, #0]
 800df12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df16:	f01e 0f10 	tst.w	lr, #16
 800df1a:	bf08      	it	eq
 800df1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800df20:	f380 8809 	msr	PSP, r0
 800df24:	f3bf 8f6f 	isb	sy
 800df28:	4770      	bx	lr
 800df2a:	bf00      	nop
 800df2c:	f3af 8000 	nop.w

0800df30 <pxCurrentTCBConst>:
 800df30:	20000aa0 	.word	0x20000aa0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800df34:	bf00      	nop
 800df36:	bf00      	nop

0800df38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b082      	sub	sp, #8
 800df3c:	af00      	add	r7, sp, #0
	__asm volatile
 800df3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df42:	f383 8811 	msr	BASEPRI, r3
 800df46:	f3bf 8f6f 	isb	sy
 800df4a:	f3bf 8f4f 	dsb	sy
 800df4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800df50:	f7fe fe0c 	bl	800cb6c <xTaskIncrementTick>
 800df54:	4603      	mov	r3, r0
 800df56:	2b00      	cmp	r3, #0
 800df58:	d003      	beq.n	800df62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800df5a:	4b06      	ldr	r3, [pc, #24]	; (800df74 <SysTick_Handler+0x3c>)
 800df5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df60:	601a      	str	r2, [r3, #0]
 800df62:	2300      	movs	r3, #0
 800df64:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800df6c:	bf00      	nop
 800df6e:	3708      	adds	r7, #8
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}
 800df74:	e000ed04 	.word	0xe000ed04

0800df78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800df78:	b480      	push	{r7}
 800df7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800df7c:	4b0b      	ldr	r3, [pc, #44]	; (800dfac <vPortSetupTimerInterrupt+0x34>)
 800df7e:	2200      	movs	r2, #0
 800df80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800df82:	4b0b      	ldr	r3, [pc, #44]	; (800dfb0 <vPortSetupTimerInterrupt+0x38>)
 800df84:	2200      	movs	r2, #0
 800df86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800df88:	4b0a      	ldr	r3, [pc, #40]	; (800dfb4 <vPortSetupTimerInterrupt+0x3c>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	4a0a      	ldr	r2, [pc, #40]	; (800dfb8 <vPortSetupTimerInterrupt+0x40>)
 800df8e:	fba2 2303 	umull	r2, r3, r2, r3
 800df92:	099b      	lsrs	r3, r3, #6
 800df94:	4a09      	ldr	r2, [pc, #36]	; (800dfbc <vPortSetupTimerInterrupt+0x44>)
 800df96:	3b01      	subs	r3, #1
 800df98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800df9a:	4b04      	ldr	r3, [pc, #16]	; (800dfac <vPortSetupTimerInterrupt+0x34>)
 800df9c:	2207      	movs	r2, #7
 800df9e:	601a      	str	r2, [r3, #0]
}
 800dfa0:	bf00      	nop
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr
 800dfaa:	bf00      	nop
 800dfac:	e000e010 	.word	0xe000e010
 800dfb0:	e000e018 	.word	0xe000e018
 800dfb4:	20000000 	.word	0x20000000
 800dfb8:	10624dd3 	.word	0x10624dd3
 800dfbc:	e000e014 	.word	0xe000e014

0800dfc0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dfc0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dfd0 <vPortEnableVFP+0x10>
 800dfc4:	6801      	ldr	r1, [r0, #0]
 800dfc6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dfca:	6001      	str	r1, [r0, #0]
 800dfcc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dfce:	bf00      	nop
 800dfd0:	e000ed88 	.word	0xe000ed88

0800dfd4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dfd4:	b480      	push	{r7}
 800dfd6:	b085      	sub	sp, #20
 800dfd8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dfda:	f3ef 8305 	mrs	r3, IPSR
 800dfde:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	2b0f      	cmp	r3, #15
 800dfe4:	d913      	bls.n	800e00e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dfe6:	4a16      	ldr	r2, [pc, #88]	; (800e040 <vPortValidateInterruptPriority+0x6c>)
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	4413      	add	r3, r2
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dff0:	4b14      	ldr	r3, [pc, #80]	; (800e044 <vPortValidateInterruptPriority+0x70>)
 800dff2:	781b      	ldrb	r3, [r3, #0]
 800dff4:	7afa      	ldrb	r2, [r7, #11]
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d209      	bcs.n	800e00e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800dffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dffe:	f383 8811 	msr	BASEPRI, r3
 800e002:	f3bf 8f6f 	isb	sy
 800e006:	f3bf 8f4f 	dsb	sy
 800e00a:	607b      	str	r3, [r7, #4]
 800e00c:	e7fe      	b.n	800e00c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e00e:	4b0e      	ldr	r3, [pc, #56]	; (800e048 <vPortValidateInterruptPriority+0x74>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e016:	4b0d      	ldr	r3, [pc, #52]	; (800e04c <vPortValidateInterruptPriority+0x78>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d909      	bls.n	800e032 <vPortValidateInterruptPriority+0x5e>
 800e01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e022:	f383 8811 	msr	BASEPRI, r3
 800e026:	f3bf 8f6f 	isb	sy
 800e02a:	f3bf 8f4f 	dsb	sy
 800e02e:	603b      	str	r3, [r7, #0]
 800e030:	e7fe      	b.n	800e030 <vPortValidateInterruptPriority+0x5c>
	}
 800e032:	bf00      	nop
 800e034:	3714      	adds	r7, #20
 800e036:	46bd      	mov	sp, r7
 800e038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03c:	4770      	bx	lr
 800e03e:	bf00      	nop
 800e040:	e000e3f0 	.word	0xe000e3f0
 800e044:	200010cc 	.word	0x200010cc
 800e048:	e000ed0c 	.word	0xe000ed0c
 800e04c:	200010d0 	.word	0x200010d0

0800e050 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b08a      	sub	sp, #40	; 0x28
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e058:	2300      	movs	r3, #0
 800e05a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e05c:	f7fe fccc 	bl	800c9f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e060:	4b57      	ldr	r3, [pc, #348]	; (800e1c0 <pvPortMalloc+0x170>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d101      	bne.n	800e06c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e068:	f000 f90c 	bl	800e284 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e06c:	4b55      	ldr	r3, [pc, #340]	; (800e1c4 <pvPortMalloc+0x174>)
 800e06e:	681a      	ldr	r2, [r3, #0]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	4013      	ands	r3, r2
 800e074:	2b00      	cmp	r3, #0
 800e076:	f040 808c 	bne.w	800e192 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d01c      	beq.n	800e0ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800e080:	2208      	movs	r2, #8
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	4413      	add	r3, r2
 800e086:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f003 0307 	and.w	r3, r3, #7
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d013      	beq.n	800e0ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f023 0307 	bic.w	r3, r3, #7
 800e098:	3308      	adds	r3, #8
 800e09a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f003 0307 	and.w	r3, r3, #7
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d009      	beq.n	800e0ba <pvPortMalloc+0x6a>
 800e0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0aa:	f383 8811 	msr	BASEPRI, r3
 800e0ae:	f3bf 8f6f 	isb	sy
 800e0b2:	f3bf 8f4f 	dsb	sy
 800e0b6:	617b      	str	r3, [r7, #20]
 800e0b8:	e7fe      	b.n	800e0b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d068      	beq.n	800e192 <pvPortMalloc+0x142>
 800e0c0:	4b41      	ldr	r3, [pc, #260]	; (800e1c8 <pvPortMalloc+0x178>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	687a      	ldr	r2, [r7, #4]
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d863      	bhi.n	800e192 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e0ca:	4b40      	ldr	r3, [pc, #256]	; (800e1cc <pvPortMalloc+0x17c>)
 800e0cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e0ce:	4b3f      	ldr	r3, [pc, #252]	; (800e1cc <pvPortMalloc+0x17c>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e0d4:	e004      	b.n	800e0e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800e0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e2:	685b      	ldr	r3, [r3, #4]
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d903      	bls.n	800e0f2 <pvPortMalloc+0xa2>
 800e0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d1f1      	bne.n	800e0d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e0f2:	4b33      	ldr	r3, [pc, #204]	; (800e1c0 <pvPortMalloc+0x170>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	d04a      	beq.n	800e192 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e0fc:	6a3b      	ldr	r3, [r7, #32]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	2208      	movs	r2, #8
 800e102:	4413      	add	r3, r2
 800e104:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e108:	681a      	ldr	r2, [r3, #0]
 800e10a:	6a3b      	ldr	r3, [r7, #32]
 800e10c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e110:	685a      	ldr	r2, [r3, #4]
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	1ad2      	subs	r2, r2, r3
 800e116:	2308      	movs	r3, #8
 800e118:	005b      	lsls	r3, r3, #1
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d91e      	bls.n	800e15c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e11e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	4413      	add	r3, r2
 800e124:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e126:	69bb      	ldr	r3, [r7, #24]
 800e128:	f003 0307 	and.w	r3, r3, #7
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d009      	beq.n	800e144 <pvPortMalloc+0xf4>
 800e130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e134:	f383 8811 	msr	BASEPRI, r3
 800e138:	f3bf 8f6f 	isb	sy
 800e13c:	f3bf 8f4f 	dsb	sy
 800e140:	613b      	str	r3, [r7, #16]
 800e142:	e7fe      	b.n	800e142 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e146:	685a      	ldr	r2, [r3, #4]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	1ad2      	subs	r2, r2, r3
 800e14c:	69bb      	ldr	r3, [r7, #24]
 800e14e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e152:	687a      	ldr	r2, [r7, #4]
 800e154:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e156:	69b8      	ldr	r0, [r7, #24]
 800e158:	f000 f8f6 	bl	800e348 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e15c:	4b1a      	ldr	r3, [pc, #104]	; (800e1c8 <pvPortMalloc+0x178>)
 800e15e:	681a      	ldr	r2, [r3, #0]
 800e160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e162:	685b      	ldr	r3, [r3, #4]
 800e164:	1ad3      	subs	r3, r2, r3
 800e166:	4a18      	ldr	r2, [pc, #96]	; (800e1c8 <pvPortMalloc+0x178>)
 800e168:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e16a:	4b17      	ldr	r3, [pc, #92]	; (800e1c8 <pvPortMalloc+0x178>)
 800e16c:	681a      	ldr	r2, [r3, #0]
 800e16e:	4b18      	ldr	r3, [pc, #96]	; (800e1d0 <pvPortMalloc+0x180>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	429a      	cmp	r2, r3
 800e174:	d203      	bcs.n	800e17e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e176:	4b14      	ldr	r3, [pc, #80]	; (800e1c8 <pvPortMalloc+0x178>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	4a15      	ldr	r2, [pc, #84]	; (800e1d0 <pvPortMalloc+0x180>)
 800e17c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e180:	685a      	ldr	r2, [r3, #4]
 800e182:	4b10      	ldr	r3, [pc, #64]	; (800e1c4 <pvPortMalloc+0x174>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	431a      	orrs	r2, r3
 800e188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18e:	2200      	movs	r2, #0
 800e190:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e192:	f7fe fc3f 	bl	800ca14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e196:	69fb      	ldr	r3, [r7, #28]
 800e198:	f003 0307 	and.w	r3, r3, #7
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d009      	beq.n	800e1b4 <pvPortMalloc+0x164>
 800e1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a4:	f383 8811 	msr	BASEPRI, r3
 800e1a8:	f3bf 8f6f 	isb	sy
 800e1ac:	f3bf 8f4f 	dsb	sy
 800e1b0:	60fb      	str	r3, [r7, #12]
 800e1b2:	e7fe      	b.n	800e1b2 <pvPortMalloc+0x162>
	return pvReturn;
 800e1b4:	69fb      	ldr	r3, [r7, #28]
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3728      	adds	r7, #40	; 0x28
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}
 800e1be:	bf00      	nop
 800e1c0:	200090dc 	.word	0x200090dc
 800e1c4:	200090e8 	.word	0x200090e8
 800e1c8:	200090e0 	.word	0x200090e0
 800e1cc:	200090d4 	.word	0x200090d4
 800e1d0:	200090e4 	.word	0x200090e4

0800e1d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b086      	sub	sp, #24
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d046      	beq.n	800e274 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e1e6:	2308      	movs	r3, #8
 800e1e8:	425b      	negs	r3, r3
 800e1ea:	697a      	ldr	r2, [r7, #20]
 800e1ec:	4413      	add	r3, r2
 800e1ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	685a      	ldr	r2, [r3, #4]
 800e1f8:	4b20      	ldr	r3, [pc, #128]	; (800e27c <vPortFree+0xa8>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	4013      	ands	r3, r2
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d109      	bne.n	800e216 <vPortFree+0x42>
 800e202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e206:	f383 8811 	msr	BASEPRI, r3
 800e20a:	f3bf 8f6f 	isb	sy
 800e20e:	f3bf 8f4f 	dsb	sy
 800e212:	60fb      	str	r3, [r7, #12]
 800e214:	e7fe      	b.n	800e214 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d009      	beq.n	800e232 <vPortFree+0x5e>
 800e21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e222:	f383 8811 	msr	BASEPRI, r3
 800e226:	f3bf 8f6f 	isb	sy
 800e22a:	f3bf 8f4f 	dsb	sy
 800e22e:	60bb      	str	r3, [r7, #8]
 800e230:	e7fe      	b.n	800e230 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	685a      	ldr	r2, [r3, #4]
 800e236:	4b11      	ldr	r3, [pc, #68]	; (800e27c <vPortFree+0xa8>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	4013      	ands	r3, r2
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d019      	beq.n	800e274 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d115      	bne.n	800e274 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	685a      	ldr	r2, [r3, #4]
 800e24c:	4b0b      	ldr	r3, [pc, #44]	; (800e27c <vPortFree+0xa8>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	43db      	mvns	r3, r3
 800e252:	401a      	ands	r2, r3
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e258:	f7fe fbce 	bl	800c9f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	685a      	ldr	r2, [r3, #4]
 800e260:	4b07      	ldr	r3, [pc, #28]	; (800e280 <vPortFree+0xac>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	4413      	add	r3, r2
 800e266:	4a06      	ldr	r2, [pc, #24]	; (800e280 <vPortFree+0xac>)
 800e268:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e26a:	6938      	ldr	r0, [r7, #16]
 800e26c:	f000 f86c 	bl	800e348 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e270:	f7fe fbd0 	bl	800ca14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e274:	bf00      	nop
 800e276:	3718      	adds	r7, #24
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}
 800e27c:	200090e8 	.word	0x200090e8
 800e280:	200090e0 	.word	0x200090e0

0800e284 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e284:	b480      	push	{r7}
 800e286:	b085      	sub	sp, #20
 800e288:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e28a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e28e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e290:	4b27      	ldr	r3, [pc, #156]	; (800e330 <prvHeapInit+0xac>)
 800e292:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f003 0307 	and.w	r3, r3, #7
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d00c      	beq.n	800e2b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	3307      	adds	r3, #7
 800e2a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	f023 0307 	bic.w	r3, r3, #7
 800e2aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e2ac:	68ba      	ldr	r2, [r7, #8]
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	1ad3      	subs	r3, r2, r3
 800e2b2:	4a1f      	ldr	r2, [pc, #124]	; (800e330 <prvHeapInit+0xac>)
 800e2b4:	4413      	add	r3, r2
 800e2b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e2bc:	4a1d      	ldr	r2, [pc, #116]	; (800e334 <prvHeapInit+0xb0>)
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e2c2:	4b1c      	ldr	r3, [pc, #112]	; (800e334 <prvHeapInit+0xb0>)
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	68ba      	ldr	r2, [r7, #8]
 800e2cc:	4413      	add	r3, r2
 800e2ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e2d0:	2208      	movs	r2, #8
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	1a9b      	subs	r3, r3, r2
 800e2d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	f023 0307 	bic.w	r3, r3, #7
 800e2de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	4a15      	ldr	r2, [pc, #84]	; (800e338 <prvHeapInit+0xb4>)
 800e2e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e2e6:	4b14      	ldr	r3, [pc, #80]	; (800e338 <prvHeapInit+0xb4>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e2ee:	4b12      	ldr	r3, [pc, #72]	; (800e338 <prvHeapInit+0xb4>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	68fa      	ldr	r2, [r7, #12]
 800e2fe:	1ad2      	subs	r2, r2, r3
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e304:	4b0c      	ldr	r3, [pc, #48]	; (800e338 <prvHeapInit+0xb4>)
 800e306:	681a      	ldr	r2, [r3, #0]
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	4a0a      	ldr	r2, [pc, #40]	; (800e33c <prvHeapInit+0xb8>)
 800e312:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	685b      	ldr	r3, [r3, #4]
 800e318:	4a09      	ldr	r2, [pc, #36]	; (800e340 <prvHeapInit+0xbc>)
 800e31a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e31c:	4b09      	ldr	r3, [pc, #36]	; (800e344 <prvHeapInit+0xc0>)
 800e31e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e322:	601a      	str	r2, [r3, #0]
}
 800e324:	bf00      	nop
 800e326:	3714      	adds	r7, #20
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr
 800e330:	200010d4 	.word	0x200010d4
 800e334:	200090d4 	.word	0x200090d4
 800e338:	200090dc 	.word	0x200090dc
 800e33c:	200090e4 	.word	0x200090e4
 800e340:	200090e0 	.word	0x200090e0
 800e344:	200090e8 	.word	0x200090e8

0800e348 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e348:	b480      	push	{r7}
 800e34a:	b085      	sub	sp, #20
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e350:	4b28      	ldr	r3, [pc, #160]	; (800e3f4 <prvInsertBlockIntoFreeList+0xac>)
 800e352:	60fb      	str	r3, [r7, #12]
 800e354:	e002      	b.n	800e35c <prvInsertBlockIntoFreeList+0x14>
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	60fb      	str	r3, [r7, #12]
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	687a      	ldr	r2, [r7, #4]
 800e362:	429a      	cmp	r2, r3
 800e364:	d8f7      	bhi.n	800e356 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	68ba      	ldr	r2, [r7, #8]
 800e370:	4413      	add	r3, r2
 800e372:	687a      	ldr	r2, [r7, #4]
 800e374:	429a      	cmp	r2, r3
 800e376:	d108      	bne.n	800e38a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	685a      	ldr	r2, [r3, #4]
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	685b      	ldr	r3, [r3, #4]
 800e380:	441a      	add	r2, r3
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	68ba      	ldr	r2, [r7, #8]
 800e394:	441a      	add	r2, r3
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d118      	bne.n	800e3d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	4b15      	ldr	r3, [pc, #84]	; (800e3f8 <prvInsertBlockIntoFreeList+0xb0>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	d00d      	beq.n	800e3c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	685a      	ldr	r2, [r3, #4]
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	441a      	add	r2, r3
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	681a      	ldr	r2, [r3, #0]
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	601a      	str	r2, [r3, #0]
 800e3c4:	e008      	b.n	800e3d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e3c6:	4b0c      	ldr	r3, [pc, #48]	; (800e3f8 <prvInsertBlockIntoFreeList+0xb0>)
 800e3c8:	681a      	ldr	r2, [r3, #0]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	601a      	str	r2, [r3, #0]
 800e3ce:	e003      	b.n	800e3d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	681a      	ldr	r2, [r3, #0]
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e3d8:	68fa      	ldr	r2, [r7, #12]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d002      	beq.n	800e3e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	687a      	ldr	r2, [r7, #4]
 800e3e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e3e6:	bf00      	nop
 800e3e8:	3714      	adds	r7, #20
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f0:	4770      	bx	lr
 800e3f2:	bf00      	nop
 800e3f4:	200090d4 	.word	0x200090d4
 800e3f8:	200090dc 	.word	0x200090dc

0800e3fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e400:	2200      	movs	r2, #0
 800e402:	4912      	ldr	r1, [pc, #72]	; (800e44c <MX_USB_DEVICE_Init+0x50>)
 800e404:	4812      	ldr	r0, [pc, #72]	; (800e450 <MX_USB_DEVICE_Init+0x54>)
 800e406:	f7fa ff75 	bl	80092f4 <USBD_Init>
 800e40a:	4603      	mov	r3, r0
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d001      	beq.n	800e414 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e410:	f7f4 fb60 	bl	8002ad4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e414:	490f      	ldr	r1, [pc, #60]	; (800e454 <MX_USB_DEVICE_Init+0x58>)
 800e416:	480e      	ldr	r0, [pc, #56]	; (800e450 <MX_USB_DEVICE_Init+0x54>)
 800e418:	f7fa ffa2 	bl	8009360 <USBD_RegisterClass>
 800e41c:	4603      	mov	r3, r0
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d001      	beq.n	800e426 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e422:	f7f4 fb57 	bl	8002ad4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e426:	490c      	ldr	r1, [pc, #48]	; (800e458 <MX_USB_DEVICE_Init+0x5c>)
 800e428:	4809      	ldr	r0, [pc, #36]	; (800e450 <MX_USB_DEVICE_Init+0x54>)
 800e42a:	f7fa fef7 	bl	800921c <USBD_CDC_RegisterInterface>
 800e42e:	4603      	mov	r3, r0
 800e430:	2b00      	cmp	r3, #0
 800e432:	d001      	beq.n	800e438 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e434:	f7f4 fb4e 	bl	8002ad4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e438:	4805      	ldr	r0, [pc, #20]	; (800e450 <MX_USB_DEVICE_Init+0x54>)
 800e43a:	f7fa ffb2 	bl	80093a2 <USBD_Start>
 800e43e:	4603      	mov	r3, r0
 800e440:	2b00      	cmp	r3, #0
 800e442:	d001      	beq.n	800e448 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e444:	f7f4 fb46 	bl	8002ad4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e448:	bf00      	nop
 800e44a:	bd80      	pop	{r7, pc}
 800e44c:	20000134 	.word	0x20000134
 800e450:	20009350 	.word	0x20009350
 800e454:	20000018 	.word	0x20000018
 800e458:	20000120 	.word	0x20000120

0800e45c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e460:	2200      	movs	r2, #0
 800e462:	4905      	ldr	r1, [pc, #20]	; (800e478 <CDC_Init_FS+0x1c>)
 800e464:	4805      	ldr	r0, [pc, #20]	; (800e47c <CDC_Init_FS+0x20>)
 800e466:	f7fa feee 	bl	8009246 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e46a:	4905      	ldr	r1, [pc, #20]	; (800e480 <CDC_Init_FS+0x24>)
 800e46c:	4803      	ldr	r0, [pc, #12]	; (800e47c <CDC_Init_FS+0x20>)
 800e46e:	f7fa ff03 	bl	8009278 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e472:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e474:	4618      	mov	r0, r3
 800e476:	bd80      	pop	{r7, pc}
 800e478:	20009e20 	.word	0x20009e20
 800e47c:	20009350 	.word	0x20009350
 800e480:	20009620 	.word	0x20009620

0800e484 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e484:	b480      	push	{r7}
 800e486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e488:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	46bd      	mov	sp, r7
 800e48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e492:	4770      	bx	lr

0800e494 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e494:	b480      	push	{r7}
 800e496:	b083      	sub	sp, #12
 800e498:	af00      	add	r7, sp, #0
 800e49a:	4603      	mov	r3, r0
 800e49c:	6039      	str	r1, [r7, #0]
 800e49e:	71fb      	strb	r3, [r7, #7]
 800e4a0:	4613      	mov	r3, r2
 800e4a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e4a4:	79fb      	ldrb	r3, [r7, #7]
 800e4a6:	2b23      	cmp	r3, #35	; 0x23
 800e4a8:	d84a      	bhi.n	800e540 <CDC_Control_FS+0xac>
 800e4aa:	a201      	add	r2, pc, #4	; (adr r2, 800e4b0 <CDC_Control_FS+0x1c>)
 800e4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4b0:	0800e541 	.word	0x0800e541
 800e4b4:	0800e541 	.word	0x0800e541
 800e4b8:	0800e541 	.word	0x0800e541
 800e4bc:	0800e541 	.word	0x0800e541
 800e4c0:	0800e541 	.word	0x0800e541
 800e4c4:	0800e541 	.word	0x0800e541
 800e4c8:	0800e541 	.word	0x0800e541
 800e4cc:	0800e541 	.word	0x0800e541
 800e4d0:	0800e541 	.word	0x0800e541
 800e4d4:	0800e541 	.word	0x0800e541
 800e4d8:	0800e541 	.word	0x0800e541
 800e4dc:	0800e541 	.word	0x0800e541
 800e4e0:	0800e541 	.word	0x0800e541
 800e4e4:	0800e541 	.word	0x0800e541
 800e4e8:	0800e541 	.word	0x0800e541
 800e4ec:	0800e541 	.word	0x0800e541
 800e4f0:	0800e541 	.word	0x0800e541
 800e4f4:	0800e541 	.word	0x0800e541
 800e4f8:	0800e541 	.word	0x0800e541
 800e4fc:	0800e541 	.word	0x0800e541
 800e500:	0800e541 	.word	0x0800e541
 800e504:	0800e541 	.word	0x0800e541
 800e508:	0800e541 	.word	0x0800e541
 800e50c:	0800e541 	.word	0x0800e541
 800e510:	0800e541 	.word	0x0800e541
 800e514:	0800e541 	.word	0x0800e541
 800e518:	0800e541 	.word	0x0800e541
 800e51c:	0800e541 	.word	0x0800e541
 800e520:	0800e541 	.word	0x0800e541
 800e524:	0800e541 	.word	0x0800e541
 800e528:	0800e541 	.word	0x0800e541
 800e52c:	0800e541 	.word	0x0800e541
 800e530:	0800e541 	.word	0x0800e541
 800e534:	0800e541 	.word	0x0800e541
 800e538:	0800e541 	.word	0x0800e541
 800e53c:	0800e541 	.word	0x0800e541
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e540:	bf00      	nop
  }

  return (USBD_OK);
 800e542:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e544:	4618      	mov	r0, r3
 800e546:	370c      	adds	r7, #12
 800e548:	46bd      	mov	sp, r7
 800e54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54e:	4770      	bx	lr

0800e550 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e55a:	6879      	ldr	r1, [r7, #4]
 800e55c:	4805      	ldr	r0, [pc, #20]	; (800e574 <CDC_Receive_FS+0x24>)
 800e55e:	f7fa fe8b 	bl	8009278 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e562:	4804      	ldr	r0, [pc, #16]	; (800e574 <CDC_Receive_FS+0x24>)
 800e564:	f7fa fe9c 	bl	80092a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e568:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3708      	adds	r7, #8
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
 800e572:	bf00      	nop
 800e574:	20009350 	.word	0x20009350

0800e578 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e578:	b480      	push	{r7}
 800e57a:	b087      	sub	sp, #28
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	60f8      	str	r0, [r7, #12]
 800e580:	60b9      	str	r1, [r7, #8]
 800e582:	4613      	mov	r3, r2
 800e584:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e586:	2300      	movs	r3, #0
 800e588:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e58a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e58e:	4618      	mov	r0, r3
 800e590:	371c      	adds	r7, #28
 800e592:	46bd      	mov	sp, r7
 800e594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e598:	4770      	bx	lr
	...

0800e59c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e59c:	b480      	push	{r7}
 800e59e:	b083      	sub	sp, #12
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	6039      	str	r1, [r7, #0]
 800e5a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	2212      	movs	r2, #18
 800e5ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e5ae:	4b03      	ldr	r3, [pc, #12]	; (800e5bc <USBD_FS_DeviceDescriptor+0x20>)
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	370c      	adds	r7, #12
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ba:	4770      	bx	lr
 800e5bc:	20000150 	.word	0x20000150

0800e5c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b083      	sub	sp, #12
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	6039      	str	r1, [r7, #0]
 800e5ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	2204      	movs	r2, #4
 800e5d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e5d2:	4b03      	ldr	r3, [pc, #12]	; (800e5e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	370c      	adds	r7, #12
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5de:	4770      	bx	lr
 800e5e0:	20000164 	.word	0x20000164

0800e5e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	6039      	str	r1, [r7, #0]
 800e5ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e5f0:	79fb      	ldrb	r3, [r7, #7]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d105      	bne.n	800e602 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e5f6:	683a      	ldr	r2, [r7, #0]
 800e5f8:	4907      	ldr	r1, [pc, #28]	; (800e618 <USBD_FS_ProductStrDescriptor+0x34>)
 800e5fa:	4808      	ldr	r0, [pc, #32]	; (800e61c <USBD_FS_ProductStrDescriptor+0x38>)
 800e5fc:	f7fb fe9f 	bl	800a33e <USBD_GetString>
 800e600:	e004      	b.n	800e60c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e602:	683a      	ldr	r2, [r7, #0]
 800e604:	4904      	ldr	r1, [pc, #16]	; (800e618 <USBD_FS_ProductStrDescriptor+0x34>)
 800e606:	4805      	ldr	r0, [pc, #20]	; (800e61c <USBD_FS_ProductStrDescriptor+0x38>)
 800e608:	f7fb fe99 	bl	800a33e <USBD_GetString>
  }
  return USBD_StrDesc;
 800e60c:	4b02      	ldr	r3, [pc, #8]	; (800e618 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3708      	adds	r7, #8
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
 800e616:	bf00      	nop
 800e618:	2000a620 	.word	0x2000a620
 800e61c:	080109a4 	.word	0x080109a4

0800e620 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b082      	sub	sp, #8
 800e624:	af00      	add	r7, sp, #0
 800e626:	4603      	mov	r3, r0
 800e628:	6039      	str	r1, [r7, #0]
 800e62a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e62c:	683a      	ldr	r2, [r7, #0]
 800e62e:	4904      	ldr	r1, [pc, #16]	; (800e640 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e630:	4804      	ldr	r0, [pc, #16]	; (800e644 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e632:	f7fb fe84 	bl	800a33e <USBD_GetString>
  return USBD_StrDesc;
 800e636:	4b02      	ldr	r3, [pc, #8]	; (800e640 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e638:	4618      	mov	r0, r3
 800e63a:	3708      	adds	r7, #8
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}
 800e640:	2000a620 	.word	0x2000a620
 800e644:	080109b4 	.word	0x080109b4

0800e648 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	4603      	mov	r3, r0
 800e650:	6039      	str	r1, [r7, #0]
 800e652:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	221a      	movs	r2, #26
 800e658:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e65a:	f000 f843 	bl	800e6e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e65e:	4b02      	ldr	r3, [pc, #8]	; (800e668 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e660:	4618      	mov	r0, r3
 800e662:	3708      	adds	r7, #8
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}
 800e668:	20000168 	.word	0x20000168

0800e66c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af00      	add	r7, sp, #0
 800e672:	4603      	mov	r3, r0
 800e674:	6039      	str	r1, [r7, #0]
 800e676:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e678:	79fb      	ldrb	r3, [r7, #7]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d105      	bne.n	800e68a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e67e:	683a      	ldr	r2, [r7, #0]
 800e680:	4907      	ldr	r1, [pc, #28]	; (800e6a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e682:	4808      	ldr	r0, [pc, #32]	; (800e6a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e684:	f7fb fe5b 	bl	800a33e <USBD_GetString>
 800e688:	e004      	b.n	800e694 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e68a:	683a      	ldr	r2, [r7, #0]
 800e68c:	4904      	ldr	r1, [pc, #16]	; (800e6a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e68e:	4805      	ldr	r0, [pc, #20]	; (800e6a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e690:	f7fb fe55 	bl	800a33e <USBD_GetString>
  }
  return USBD_StrDesc;
 800e694:	4b02      	ldr	r3, [pc, #8]	; (800e6a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e696:	4618      	mov	r0, r3
 800e698:	3708      	adds	r7, #8
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	bf00      	nop
 800e6a0:	2000a620 	.word	0x2000a620
 800e6a4:	080109c8 	.word	0x080109c8

0800e6a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b082      	sub	sp, #8
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	6039      	str	r1, [r7, #0]
 800e6b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e6b4:	79fb      	ldrb	r3, [r7, #7]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d105      	bne.n	800e6c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e6ba:	683a      	ldr	r2, [r7, #0]
 800e6bc:	4907      	ldr	r1, [pc, #28]	; (800e6dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e6be:	4808      	ldr	r0, [pc, #32]	; (800e6e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e6c0:	f7fb fe3d 	bl	800a33e <USBD_GetString>
 800e6c4:	e004      	b.n	800e6d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e6c6:	683a      	ldr	r2, [r7, #0]
 800e6c8:	4904      	ldr	r1, [pc, #16]	; (800e6dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e6ca:	4805      	ldr	r0, [pc, #20]	; (800e6e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e6cc:	f7fb fe37 	bl	800a33e <USBD_GetString>
  }
  return USBD_StrDesc;
 800e6d0:	4b02      	ldr	r3, [pc, #8]	; (800e6dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3708      	adds	r7, #8
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	2000a620 	.word	0x2000a620
 800e6e0:	080109d4 	.word	0x080109d4

0800e6e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b084      	sub	sp, #16
 800e6e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e6ea:	4b0f      	ldr	r3, [pc, #60]	; (800e728 <Get_SerialNum+0x44>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e6f0:	4b0e      	ldr	r3, [pc, #56]	; (800e72c <Get_SerialNum+0x48>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e6f6:	4b0e      	ldr	r3, [pc, #56]	; (800e730 <Get_SerialNum+0x4c>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e6fc:	68fa      	ldr	r2, [r7, #12]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	4413      	add	r3, r2
 800e702:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d009      	beq.n	800e71e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e70a:	2208      	movs	r2, #8
 800e70c:	4909      	ldr	r1, [pc, #36]	; (800e734 <Get_SerialNum+0x50>)
 800e70e:	68f8      	ldr	r0, [r7, #12]
 800e710:	f000 f814 	bl	800e73c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e714:	2204      	movs	r2, #4
 800e716:	4908      	ldr	r1, [pc, #32]	; (800e738 <Get_SerialNum+0x54>)
 800e718:	68b8      	ldr	r0, [r7, #8]
 800e71a:	f000 f80f 	bl	800e73c <IntToUnicode>
  }
}
 800e71e:	bf00      	nop
 800e720:	3710      	adds	r7, #16
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
 800e726:	bf00      	nop
 800e728:	1fff7a10 	.word	0x1fff7a10
 800e72c:	1fff7a14 	.word	0x1fff7a14
 800e730:	1fff7a18 	.word	0x1fff7a18
 800e734:	2000016a 	.word	0x2000016a
 800e738:	2000017a 	.word	0x2000017a

0800e73c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e73c:	b480      	push	{r7}
 800e73e:	b087      	sub	sp, #28
 800e740:	af00      	add	r7, sp, #0
 800e742:	60f8      	str	r0, [r7, #12]
 800e744:	60b9      	str	r1, [r7, #8]
 800e746:	4613      	mov	r3, r2
 800e748:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e74a:	2300      	movs	r3, #0
 800e74c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e74e:	2300      	movs	r3, #0
 800e750:	75fb      	strb	r3, [r7, #23]
 800e752:	e027      	b.n	800e7a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	0f1b      	lsrs	r3, r3, #28
 800e758:	2b09      	cmp	r3, #9
 800e75a:	d80b      	bhi.n	800e774 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	0f1b      	lsrs	r3, r3, #28
 800e760:	b2da      	uxtb	r2, r3
 800e762:	7dfb      	ldrb	r3, [r7, #23]
 800e764:	005b      	lsls	r3, r3, #1
 800e766:	4619      	mov	r1, r3
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	440b      	add	r3, r1
 800e76c:	3230      	adds	r2, #48	; 0x30
 800e76e:	b2d2      	uxtb	r2, r2
 800e770:	701a      	strb	r2, [r3, #0]
 800e772:	e00a      	b.n	800e78a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	0f1b      	lsrs	r3, r3, #28
 800e778:	b2da      	uxtb	r2, r3
 800e77a:	7dfb      	ldrb	r3, [r7, #23]
 800e77c:	005b      	lsls	r3, r3, #1
 800e77e:	4619      	mov	r1, r3
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	440b      	add	r3, r1
 800e784:	3237      	adds	r2, #55	; 0x37
 800e786:	b2d2      	uxtb	r2, r2
 800e788:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	011b      	lsls	r3, r3, #4
 800e78e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e790:	7dfb      	ldrb	r3, [r7, #23]
 800e792:	005b      	lsls	r3, r3, #1
 800e794:	3301      	adds	r3, #1
 800e796:	68ba      	ldr	r2, [r7, #8]
 800e798:	4413      	add	r3, r2
 800e79a:	2200      	movs	r2, #0
 800e79c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e79e:	7dfb      	ldrb	r3, [r7, #23]
 800e7a0:	3301      	adds	r3, #1
 800e7a2:	75fb      	strb	r3, [r7, #23]
 800e7a4:	7dfa      	ldrb	r2, [r7, #23]
 800e7a6:	79fb      	ldrb	r3, [r7, #7]
 800e7a8:	429a      	cmp	r2, r3
 800e7aa:	d3d3      	bcc.n	800e754 <IntToUnicode+0x18>
  }
}
 800e7ac:	bf00      	nop
 800e7ae:	371c      	adds	r7, #28
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr

0800e7b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b08a      	sub	sp, #40	; 0x28
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e7c0:	f107 0314 	add.w	r3, r7, #20
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	601a      	str	r2, [r3, #0]
 800e7c8:	605a      	str	r2, [r3, #4]
 800e7ca:	609a      	str	r2, [r3, #8]
 800e7cc:	60da      	str	r2, [r3, #12]
 800e7ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e7d8:	d13a      	bne.n	800e850 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e7da:	2300      	movs	r3, #0
 800e7dc:	613b      	str	r3, [r7, #16]
 800e7de:	4b1e      	ldr	r3, [pc, #120]	; (800e858 <HAL_PCD_MspInit+0xa0>)
 800e7e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7e2:	4a1d      	ldr	r2, [pc, #116]	; (800e858 <HAL_PCD_MspInit+0xa0>)
 800e7e4:	f043 0301 	orr.w	r3, r3, #1
 800e7e8:	6313      	str	r3, [r2, #48]	; 0x30
 800e7ea:	4b1b      	ldr	r3, [pc, #108]	; (800e858 <HAL_PCD_MspInit+0xa0>)
 800e7ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7ee:	f003 0301 	and.w	r3, r3, #1
 800e7f2:	613b      	str	r3, [r7, #16]
 800e7f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e7f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e7fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7fc:	2302      	movs	r3, #2
 800e7fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e800:	2300      	movs	r3, #0
 800e802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e804:	2303      	movs	r3, #3
 800e806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e808:	230a      	movs	r3, #10
 800e80a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e80c:	f107 0314 	add.w	r3, r7, #20
 800e810:	4619      	mov	r1, r3
 800e812:	4812      	ldr	r0, [pc, #72]	; (800e85c <HAL_PCD_MspInit+0xa4>)
 800e814:	f7f5 fff4 	bl	8004800 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e818:	4b0f      	ldr	r3, [pc, #60]	; (800e858 <HAL_PCD_MspInit+0xa0>)
 800e81a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e81c:	4a0e      	ldr	r2, [pc, #56]	; (800e858 <HAL_PCD_MspInit+0xa0>)
 800e81e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e822:	6353      	str	r3, [r2, #52]	; 0x34
 800e824:	2300      	movs	r3, #0
 800e826:	60fb      	str	r3, [r7, #12]
 800e828:	4b0b      	ldr	r3, [pc, #44]	; (800e858 <HAL_PCD_MspInit+0xa0>)
 800e82a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e82c:	4a0a      	ldr	r2, [pc, #40]	; (800e858 <HAL_PCD_MspInit+0xa0>)
 800e82e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e832:	6453      	str	r3, [r2, #68]	; 0x44
 800e834:	4b08      	ldr	r3, [pc, #32]	; (800e858 <HAL_PCD_MspInit+0xa0>)
 800e836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e83c:	60fb      	str	r3, [r7, #12]
 800e83e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 800e840:	2200      	movs	r2, #0
 800e842:	2106      	movs	r1, #6
 800e844:	2043      	movs	r0, #67	; 0x43
 800e846:	f7f5 fbd3 	bl	8003ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e84a:	2043      	movs	r0, #67	; 0x43
 800e84c:	f7f5 fbec 	bl	8004028 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e850:	bf00      	nop
 800e852:	3728      	adds	r7, #40	; 0x28
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}
 800e858:	40023800 	.word	0x40023800
 800e85c:	40020000 	.word	0x40020000

0800e860 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b082      	sub	sp, #8
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e874:	4619      	mov	r1, r3
 800e876:	4610      	mov	r0, r2
 800e878:	f7fa fdde 	bl	8009438 <USBD_LL_SetupStage>
}
 800e87c:	bf00      	nop
 800e87e:	3708      	adds	r7, #8
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	460b      	mov	r3, r1
 800e88e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e896:	78fa      	ldrb	r2, [r7, #3]
 800e898:	6879      	ldr	r1, [r7, #4]
 800e89a:	4613      	mov	r3, r2
 800e89c:	00db      	lsls	r3, r3, #3
 800e89e:	1a9b      	subs	r3, r3, r2
 800e8a0:	009b      	lsls	r3, r3, #2
 800e8a2:	440b      	add	r3, r1
 800e8a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800e8a8:	681a      	ldr	r2, [r3, #0]
 800e8aa:	78fb      	ldrb	r3, [r7, #3]
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	f7fa fe16 	bl	80094de <USBD_LL_DataOutStage>
}
 800e8b2:	bf00      	nop
 800e8b4:	3708      	adds	r7, #8
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}

0800e8ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8ba:	b580      	push	{r7, lr}
 800e8bc:	b082      	sub	sp, #8
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	6078      	str	r0, [r7, #4]
 800e8c2:	460b      	mov	r3, r1
 800e8c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e8cc:	78fa      	ldrb	r2, [r7, #3]
 800e8ce:	6879      	ldr	r1, [r7, #4]
 800e8d0:	4613      	mov	r3, r2
 800e8d2:	00db      	lsls	r3, r3, #3
 800e8d4:	1a9b      	subs	r3, r3, r2
 800e8d6:	009b      	lsls	r3, r3, #2
 800e8d8:	440b      	add	r3, r1
 800e8da:	3348      	adds	r3, #72	; 0x48
 800e8dc:	681a      	ldr	r2, [r3, #0]
 800e8de:	78fb      	ldrb	r3, [r7, #3]
 800e8e0:	4619      	mov	r1, r3
 800e8e2:	f7fa fe5f 	bl	80095a4 <USBD_LL_DataInStage>
}
 800e8e6:	bf00      	nop
 800e8e8:	3708      	adds	r7, #8
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}

0800e8ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8ee:	b580      	push	{r7, lr}
 800e8f0:	b082      	sub	sp, #8
 800e8f2:	af00      	add	r7, sp, #0
 800e8f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f7fa ff63 	bl	80097c8 <USBD_LL_SOF>
}
 800e902:	bf00      	nop
 800e904:	3708      	adds	r7, #8
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}

0800e90a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e90a:	b580      	push	{r7, lr}
 800e90c:	b084      	sub	sp, #16
 800e90e:	af00      	add	r7, sp, #0
 800e910:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e912:	2301      	movs	r3, #1
 800e914:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	68db      	ldr	r3, [r3, #12]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d102      	bne.n	800e924 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e91e:	2300      	movs	r3, #0
 800e920:	73fb      	strb	r3, [r7, #15]
 800e922:	e008      	b.n	800e936 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	68db      	ldr	r3, [r3, #12]
 800e928:	2b02      	cmp	r3, #2
 800e92a:	d102      	bne.n	800e932 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e92c:	2301      	movs	r3, #1
 800e92e:	73fb      	strb	r3, [r7, #15]
 800e930:	e001      	b.n	800e936 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e932:	f7f4 f8cf 	bl	8002ad4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e93c:	7bfa      	ldrb	r2, [r7, #15]
 800e93e:	4611      	mov	r1, r2
 800e940:	4618      	mov	r0, r3
 800e942:	f7fa ff06 	bl	8009752 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7fa febf 	bl	80096d0 <USBD_LL_Reset>
}
 800e952:	bf00      	nop
 800e954:	3710      	adds	r7, #16
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
	...

0800e95c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b082      	sub	sp, #8
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e96a:	4618      	mov	r0, r3
 800e96c:	f7fa ff01 	bl	8009772 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	687a      	ldr	r2, [r7, #4]
 800e97c:	6812      	ldr	r2, [r2, #0]
 800e97e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e982:	f043 0301 	orr.w	r3, r3, #1
 800e986:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6a1b      	ldr	r3, [r3, #32]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d005      	beq.n	800e99c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e990:	4b04      	ldr	r3, [pc, #16]	; (800e9a4 <HAL_PCD_SuspendCallback+0x48>)
 800e992:	691b      	ldr	r3, [r3, #16]
 800e994:	4a03      	ldr	r2, [pc, #12]	; (800e9a4 <HAL_PCD_SuspendCallback+0x48>)
 800e996:	f043 0306 	orr.w	r3, r3, #6
 800e99a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e99c:	bf00      	nop
 800e99e:	3708      	adds	r7, #8
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	e000ed00 	.word	0xe000ed00

0800e9a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b082      	sub	sp, #8
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f7fa fef0 	bl	800979c <USBD_LL_Resume>
}
 800e9bc:	bf00      	nop
 800e9be:	3708      	adds	r7, #8
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}

0800e9c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b082      	sub	sp, #8
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
 800e9cc:	460b      	mov	r3, r1
 800e9ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e9d6:	78fa      	ldrb	r2, [r7, #3]
 800e9d8:	4611      	mov	r1, r2
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7fa ff1b 	bl	8009816 <USBD_LL_IsoOUTIncomplete>
}
 800e9e0:	bf00      	nop
 800e9e2:	3708      	adds	r7, #8
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e9fa:	78fa      	ldrb	r2, [r7, #3]
 800e9fc:	4611      	mov	r1, r2
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7fa fefc 	bl	80097fc <USBD_LL_IsoINIncomplete>
}
 800ea04:	bf00      	nop
 800ea06:	3708      	adds	r7, #8
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}

0800ea0c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b082      	sub	sp, #8
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7fa ff08 	bl	8009830 <USBD_LL_DevConnected>
}
 800ea20:	bf00      	nop
 800ea22:	3708      	adds	r7, #8
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}

0800ea28 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ea36:	4618      	mov	r0, r3
 800ea38:	f7fa ff05 	bl	8009846 <USBD_LL_DevDisconnected>
}
 800ea3c:	bf00      	nop
 800ea3e:	3708      	adds	r7, #8
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}

0800ea44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b082      	sub	sp, #8
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	781b      	ldrb	r3, [r3, #0]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d13c      	bne.n	800eace <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ea54:	4a20      	ldr	r2, [pc, #128]	; (800ead8 <USBD_LL_Init+0x94>)
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	4a1e      	ldr	r2, [pc, #120]	; (800ead8 <USBD_LL_Init+0x94>)
 800ea60:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ea64:	4b1c      	ldr	r3, [pc, #112]	; (800ead8 <USBD_LL_Init+0x94>)
 800ea66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ea6a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ea6c:	4b1a      	ldr	r3, [pc, #104]	; (800ead8 <USBD_LL_Init+0x94>)
 800ea6e:	2204      	movs	r2, #4
 800ea70:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ea72:	4b19      	ldr	r3, [pc, #100]	; (800ead8 <USBD_LL_Init+0x94>)
 800ea74:	2202      	movs	r2, #2
 800ea76:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ea78:	4b17      	ldr	r3, [pc, #92]	; (800ead8 <USBD_LL_Init+0x94>)
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ea7e:	4b16      	ldr	r3, [pc, #88]	; (800ead8 <USBD_LL_Init+0x94>)
 800ea80:	2202      	movs	r2, #2
 800ea82:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ea84:	4b14      	ldr	r3, [pc, #80]	; (800ead8 <USBD_LL_Init+0x94>)
 800ea86:	2200      	movs	r2, #0
 800ea88:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ea8a:	4b13      	ldr	r3, [pc, #76]	; (800ead8 <USBD_LL_Init+0x94>)
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ea90:	4b11      	ldr	r3, [pc, #68]	; (800ead8 <USBD_LL_Init+0x94>)
 800ea92:	2200      	movs	r2, #0
 800ea94:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ea96:	4b10      	ldr	r3, [pc, #64]	; (800ead8 <USBD_LL_Init+0x94>)
 800ea98:	2200      	movs	r2, #0
 800ea9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ea9c:	4b0e      	ldr	r3, [pc, #56]	; (800ead8 <USBD_LL_Init+0x94>)
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800eaa2:	480d      	ldr	r0, [pc, #52]	; (800ead8 <USBD_LL_Init+0x94>)
 800eaa4:	f7f6 f878 	bl	8004b98 <HAL_PCD_Init>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d001      	beq.n	800eab2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800eaae:	f7f4 f811 	bl	8002ad4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800eab2:	2180      	movs	r1, #128	; 0x80
 800eab4:	4808      	ldr	r0, [pc, #32]	; (800ead8 <USBD_LL_Init+0x94>)
 800eab6:	f7f7 f9d6 	bl	8005e66 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800eaba:	2240      	movs	r2, #64	; 0x40
 800eabc:	2100      	movs	r1, #0
 800eabe:	4806      	ldr	r0, [pc, #24]	; (800ead8 <USBD_LL_Init+0x94>)
 800eac0:	f7f7 f98a 	bl	8005dd8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800eac4:	2280      	movs	r2, #128	; 0x80
 800eac6:	2101      	movs	r1, #1
 800eac8:	4803      	ldr	r0, [pc, #12]	; (800ead8 <USBD_LL_Init+0x94>)
 800eaca:	f7f7 f985 	bl	8005dd8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800eace:	2300      	movs	r3, #0
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3708      	adds	r7, #8
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}
 800ead8:	2000a820 	.word	0x2000a820

0800eadc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b084      	sub	sp, #16
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eae4:	2300      	movs	r3, #0
 800eae6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eae8:	2300      	movs	r3, #0
 800eaea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7f6 f96d 	bl	8004dd2 <HAL_PCD_Start>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eafc:	7bfb      	ldrb	r3, [r7, #15]
 800eafe:	4618      	mov	r0, r3
 800eb00:	f000 f92a 	bl	800ed58 <USBD_Get_USB_Status>
 800eb04:	4603      	mov	r3, r0
 800eb06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb08:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3710      	adds	r7, #16
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}

0800eb12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800eb12:	b580      	push	{r7, lr}
 800eb14:	b084      	sub	sp, #16
 800eb16:	af00      	add	r7, sp, #0
 800eb18:	6078      	str	r0, [r7, #4]
 800eb1a:	4608      	mov	r0, r1
 800eb1c:	4611      	mov	r1, r2
 800eb1e:	461a      	mov	r2, r3
 800eb20:	4603      	mov	r3, r0
 800eb22:	70fb      	strb	r3, [r7, #3]
 800eb24:	460b      	mov	r3, r1
 800eb26:	70bb      	strb	r3, [r7, #2]
 800eb28:	4613      	mov	r3, r2
 800eb2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb30:	2300      	movs	r3, #0
 800eb32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eb3a:	78bb      	ldrb	r3, [r7, #2]
 800eb3c:	883a      	ldrh	r2, [r7, #0]
 800eb3e:	78f9      	ldrb	r1, [r7, #3]
 800eb40:	f7f6 fd51 	bl	80055e6 <HAL_PCD_EP_Open>
 800eb44:	4603      	mov	r3, r0
 800eb46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb48:	7bfb      	ldrb	r3, [r7, #15]
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f000 f904 	bl	800ed58 <USBD_Get_USB_Status>
 800eb50:	4603      	mov	r3, r0
 800eb52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb54:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3710      	adds	r7, #16
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}

0800eb5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb5e:	b580      	push	{r7, lr}
 800eb60:	b084      	sub	sp, #16
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	6078      	str	r0, [r7, #4]
 800eb66:	460b      	mov	r3, r1
 800eb68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eb78:	78fa      	ldrb	r2, [r7, #3]
 800eb7a:	4611      	mov	r1, r2
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f7f6 fd9a 	bl	80056b6 <HAL_PCD_EP_Close>
 800eb82:	4603      	mov	r3, r0
 800eb84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb86:	7bfb      	ldrb	r3, [r7, #15]
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f000 f8e5 	bl	800ed58 <USBD_Get_USB_Status>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb92:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	3710      	adds	r7, #16
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}

0800eb9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b084      	sub	sp, #16
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
 800eba4:	460b      	mov	r3, r1
 800eba6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebac:	2300      	movs	r3, #0
 800ebae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ebb6:	78fa      	ldrb	r2, [r7, #3]
 800ebb8:	4611      	mov	r1, r2
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f7f6 fe72 	bl	80058a4 <HAL_PCD_EP_SetStall>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebc4:	7bfb      	ldrb	r3, [r7, #15]
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f000 f8c6 	bl	800ed58 <USBD_Get_USB_Status>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3710      	adds	r7, #16
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}

0800ebda <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ebda:	b580      	push	{r7, lr}
 800ebdc:	b084      	sub	sp, #16
 800ebde:	af00      	add	r7, sp, #0
 800ebe0:	6078      	str	r0, [r7, #4]
 800ebe2:	460b      	mov	r3, r1
 800ebe4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebea:	2300      	movs	r3, #0
 800ebec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ebf4:	78fa      	ldrb	r2, [r7, #3]
 800ebf6:	4611      	mov	r1, r2
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7f6 feb7 	bl	800596c <HAL_PCD_EP_ClrStall>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec02:	7bfb      	ldrb	r3, [r7, #15]
 800ec04:	4618      	mov	r0, r3
 800ec06:	f000 f8a7 	bl	800ed58 <USBD_Get_USB_Status>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	3710      	adds	r7, #16
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}

0800ec18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec18:	b480      	push	{r7}
 800ec1a:	b085      	sub	sp, #20
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	460b      	mov	r3, r1
 800ec22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ec2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ec2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	da0b      	bge.n	800ec4c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ec34:	78fb      	ldrb	r3, [r7, #3]
 800ec36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec3a:	68f9      	ldr	r1, [r7, #12]
 800ec3c:	4613      	mov	r3, r2
 800ec3e:	00db      	lsls	r3, r3, #3
 800ec40:	1a9b      	subs	r3, r3, r2
 800ec42:	009b      	lsls	r3, r3, #2
 800ec44:	440b      	add	r3, r1
 800ec46:	333e      	adds	r3, #62	; 0x3e
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	e00b      	b.n	800ec64 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ec4c:	78fb      	ldrb	r3, [r7, #3]
 800ec4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec52:	68f9      	ldr	r1, [r7, #12]
 800ec54:	4613      	mov	r3, r2
 800ec56:	00db      	lsls	r3, r3, #3
 800ec58:	1a9b      	subs	r3, r3, r2
 800ec5a:	009b      	lsls	r3, r3, #2
 800ec5c:	440b      	add	r3, r1
 800ec5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ec62:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3714      	adds	r7, #20
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6e:	4770      	bx	lr

0800ec70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b084      	sub	sp, #16
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	460b      	mov	r3, r1
 800ec7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec80:	2300      	movs	r3, #0
 800ec82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ec8a:	78fa      	ldrb	r2, [r7, #3]
 800ec8c:	4611      	mov	r1, r2
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f7f6 fc84 	bl	800559c <HAL_PCD_SetAddress>
 800ec94:	4603      	mov	r3, r0
 800ec96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec98:	7bfb      	ldrb	r3, [r7, #15]
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f000 f85c 	bl	800ed58 <USBD_Get_USB_Status>
 800eca0:	4603      	mov	r3, r0
 800eca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eca4:	7bbb      	ldrb	r3, [r7, #14]
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	3710      	adds	r7, #16
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}

0800ecae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ecae:	b580      	push	{r7, lr}
 800ecb0:	b086      	sub	sp, #24
 800ecb2:	af00      	add	r7, sp, #0
 800ecb4:	60f8      	str	r0, [r7, #12]
 800ecb6:	607a      	str	r2, [r7, #4]
 800ecb8:	603b      	str	r3, [r7, #0]
 800ecba:	460b      	mov	r3, r1
 800ecbc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eccc:	7af9      	ldrb	r1, [r7, #11]
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	687a      	ldr	r2, [r7, #4]
 800ecd2:	f7f6 fd9d 	bl	8005810 <HAL_PCD_EP_Transmit>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecda:	7dfb      	ldrb	r3, [r7, #23]
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f000 f83b 	bl	800ed58 <USBD_Get_USB_Status>
 800ece2:	4603      	mov	r3, r0
 800ece4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ece6:	7dbb      	ldrb	r3, [r7, #22]
}
 800ece8:	4618      	mov	r0, r3
 800ecea:	3718      	adds	r7, #24
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}

0800ecf0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b086      	sub	sp, #24
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	60f8      	str	r0, [r7, #12]
 800ecf8:	607a      	str	r2, [r7, #4]
 800ecfa:	603b      	str	r3, [r7, #0]
 800ecfc:	460b      	mov	r3, r1
 800ecfe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed00:	2300      	movs	r3, #0
 800ed02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed04:	2300      	movs	r3, #0
 800ed06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ed0e:	7af9      	ldrb	r1, [r7, #11]
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	687a      	ldr	r2, [r7, #4]
 800ed14:	f7f6 fd19 	bl	800574a <HAL_PCD_EP_Receive>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed1c:	7dfb      	ldrb	r3, [r7, #23]
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f000 f81a 	bl	800ed58 <USBD_Get_USB_Status>
 800ed24:	4603      	mov	r3, r0
 800ed26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ed28:	7dbb      	ldrb	r3, [r7, #22]
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3718      	adds	r7, #24
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}

0800ed32 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed32:	b580      	push	{r7, lr}
 800ed34:	b082      	sub	sp, #8
 800ed36:	af00      	add	r7, sp, #0
 800ed38:	6078      	str	r0, [r7, #4]
 800ed3a:	460b      	mov	r3, r1
 800ed3c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ed44:	78fa      	ldrb	r2, [r7, #3]
 800ed46:	4611      	mov	r1, r2
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7f6 fd49 	bl	80057e0 <HAL_PCD_EP_GetRxCount>
 800ed4e:	4603      	mov	r3, r0
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	3708      	adds	r7, #8
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}

0800ed58 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ed58:	b480      	push	{r7}
 800ed5a:	b085      	sub	sp, #20
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	4603      	mov	r3, r0
 800ed60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed62:	2300      	movs	r3, #0
 800ed64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ed66:	79fb      	ldrb	r3, [r7, #7]
 800ed68:	2b03      	cmp	r3, #3
 800ed6a:	d817      	bhi.n	800ed9c <USBD_Get_USB_Status+0x44>
 800ed6c:	a201      	add	r2, pc, #4	; (adr r2, 800ed74 <USBD_Get_USB_Status+0x1c>)
 800ed6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed72:	bf00      	nop
 800ed74:	0800ed85 	.word	0x0800ed85
 800ed78:	0800ed8b 	.word	0x0800ed8b
 800ed7c:	0800ed91 	.word	0x0800ed91
 800ed80:	0800ed97 	.word	0x0800ed97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ed84:	2300      	movs	r3, #0
 800ed86:	73fb      	strb	r3, [r7, #15]
    break;
 800ed88:	e00b      	b.n	800eda2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ed8a:	2303      	movs	r3, #3
 800ed8c:	73fb      	strb	r3, [r7, #15]
    break;
 800ed8e:	e008      	b.n	800eda2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ed90:	2301      	movs	r3, #1
 800ed92:	73fb      	strb	r3, [r7, #15]
    break;
 800ed94:	e005      	b.n	800eda2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ed96:	2303      	movs	r3, #3
 800ed98:	73fb      	strb	r3, [r7, #15]
    break;
 800ed9a:	e002      	b.n	800eda2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ed9c:	2303      	movs	r3, #3
 800ed9e:	73fb      	strb	r3, [r7, #15]
    break;
 800eda0:	bf00      	nop
  }
  return usb_status;
 800eda2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3714      	adds	r7, #20
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr

0800edb0 <__errno>:
 800edb0:	4b01      	ldr	r3, [pc, #4]	; (800edb8 <__errno+0x8>)
 800edb2:	6818      	ldr	r0, [r3, #0]
 800edb4:	4770      	bx	lr
 800edb6:	bf00      	nop
 800edb8:	20000184 	.word	0x20000184

0800edbc <__libc_init_array>:
 800edbc:	b570      	push	{r4, r5, r6, lr}
 800edbe:	4e0d      	ldr	r6, [pc, #52]	; (800edf4 <__libc_init_array+0x38>)
 800edc0:	4c0d      	ldr	r4, [pc, #52]	; (800edf8 <__libc_init_array+0x3c>)
 800edc2:	1ba4      	subs	r4, r4, r6
 800edc4:	10a4      	asrs	r4, r4, #2
 800edc6:	2500      	movs	r5, #0
 800edc8:	42a5      	cmp	r5, r4
 800edca:	d109      	bne.n	800ede0 <__libc_init_array+0x24>
 800edcc:	4e0b      	ldr	r6, [pc, #44]	; (800edfc <__libc_init_array+0x40>)
 800edce:	4c0c      	ldr	r4, [pc, #48]	; (800ee00 <__libc_init_array+0x44>)
 800edd0:	f001 fd9c 	bl	801090c <_init>
 800edd4:	1ba4      	subs	r4, r4, r6
 800edd6:	10a4      	asrs	r4, r4, #2
 800edd8:	2500      	movs	r5, #0
 800edda:	42a5      	cmp	r5, r4
 800eddc:	d105      	bne.n	800edea <__libc_init_array+0x2e>
 800edde:	bd70      	pop	{r4, r5, r6, pc}
 800ede0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ede4:	4798      	blx	r3
 800ede6:	3501      	adds	r5, #1
 800ede8:	e7ee      	b.n	800edc8 <__libc_init_array+0xc>
 800edea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800edee:	4798      	blx	r3
 800edf0:	3501      	adds	r5, #1
 800edf2:	e7f2      	b.n	800edda <__libc_init_array+0x1e>
 800edf4:	08010c58 	.word	0x08010c58
 800edf8:	08010c58 	.word	0x08010c58
 800edfc:	08010c58 	.word	0x08010c58
 800ee00:	08010c5c 	.word	0x08010c5c

0800ee04 <malloc>:
 800ee04:	4b02      	ldr	r3, [pc, #8]	; (800ee10 <malloc+0xc>)
 800ee06:	4601      	mov	r1, r0
 800ee08:	6818      	ldr	r0, [r3, #0]
 800ee0a:	f000 b86d 	b.w	800eee8 <_malloc_r>
 800ee0e:	bf00      	nop
 800ee10:	20000184 	.word	0x20000184

0800ee14 <free>:
 800ee14:	4b02      	ldr	r3, [pc, #8]	; (800ee20 <free+0xc>)
 800ee16:	4601      	mov	r1, r0
 800ee18:	6818      	ldr	r0, [r3, #0]
 800ee1a:	f000 b817 	b.w	800ee4c <_free_r>
 800ee1e:	bf00      	nop
 800ee20:	20000184 	.word	0x20000184

0800ee24 <memcpy>:
 800ee24:	b510      	push	{r4, lr}
 800ee26:	1e43      	subs	r3, r0, #1
 800ee28:	440a      	add	r2, r1
 800ee2a:	4291      	cmp	r1, r2
 800ee2c:	d100      	bne.n	800ee30 <memcpy+0xc>
 800ee2e:	bd10      	pop	{r4, pc}
 800ee30:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee34:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee38:	e7f7      	b.n	800ee2a <memcpy+0x6>

0800ee3a <memset>:
 800ee3a:	4402      	add	r2, r0
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	4293      	cmp	r3, r2
 800ee40:	d100      	bne.n	800ee44 <memset+0xa>
 800ee42:	4770      	bx	lr
 800ee44:	f803 1b01 	strb.w	r1, [r3], #1
 800ee48:	e7f9      	b.n	800ee3e <memset+0x4>
	...

0800ee4c <_free_r>:
 800ee4c:	b538      	push	{r3, r4, r5, lr}
 800ee4e:	4605      	mov	r5, r0
 800ee50:	2900      	cmp	r1, #0
 800ee52:	d045      	beq.n	800eee0 <_free_r+0x94>
 800ee54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee58:	1f0c      	subs	r4, r1, #4
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	bfb8      	it	lt
 800ee5e:	18e4      	addlt	r4, r4, r3
 800ee60:	f001 fa48 	bl	80102f4 <__malloc_lock>
 800ee64:	4a1f      	ldr	r2, [pc, #124]	; (800eee4 <_free_r+0x98>)
 800ee66:	6813      	ldr	r3, [r2, #0]
 800ee68:	4610      	mov	r0, r2
 800ee6a:	b933      	cbnz	r3, 800ee7a <_free_r+0x2e>
 800ee6c:	6063      	str	r3, [r4, #4]
 800ee6e:	6014      	str	r4, [r2, #0]
 800ee70:	4628      	mov	r0, r5
 800ee72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee76:	f001 ba3e 	b.w	80102f6 <__malloc_unlock>
 800ee7a:	42a3      	cmp	r3, r4
 800ee7c:	d90c      	bls.n	800ee98 <_free_r+0x4c>
 800ee7e:	6821      	ldr	r1, [r4, #0]
 800ee80:	1862      	adds	r2, r4, r1
 800ee82:	4293      	cmp	r3, r2
 800ee84:	bf04      	itt	eq
 800ee86:	681a      	ldreq	r2, [r3, #0]
 800ee88:	685b      	ldreq	r3, [r3, #4]
 800ee8a:	6063      	str	r3, [r4, #4]
 800ee8c:	bf04      	itt	eq
 800ee8e:	1852      	addeq	r2, r2, r1
 800ee90:	6022      	streq	r2, [r4, #0]
 800ee92:	6004      	str	r4, [r0, #0]
 800ee94:	e7ec      	b.n	800ee70 <_free_r+0x24>
 800ee96:	4613      	mov	r3, r2
 800ee98:	685a      	ldr	r2, [r3, #4]
 800ee9a:	b10a      	cbz	r2, 800eea0 <_free_r+0x54>
 800ee9c:	42a2      	cmp	r2, r4
 800ee9e:	d9fa      	bls.n	800ee96 <_free_r+0x4a>
 800eea0:	6819      	ldr	r1, [r3, #0]
 800eea2:	1858      	adds	r0, r3, r1
 800eea4:	42a0      	cmp	r0, r4
 800eea6:	d10b      	bne.n	800eec0 <_free_r+0x74>
 800eea8:	6820      	ldr	r0, [r4, #0]
 800eeaa:	4401      	add	r1, r0
 800eeac:	1858      	adds	r0, r3, r1
 800eeae:	4282      	cmp	r2, r0
 800eeb0:	6019      	str	r1, [r3, #0]
 800eeb2:	d1dd      	bne.n	800ee70 <_free_r+0x24>
 800eeb4:	6810      	ldr	r0, [r2, #0]
 800eeb6:	6852      	ldr	r2, [r2, #4]
 800eeb8:	605a      	str	r2, [r3, #4]
 800eeba:	4401      	add	r1, r0
 800eebc:	6019      	str	r1, [r3, #0]
 800eebe:	e7d7      	b.n	800ee70 <_free_r+0x24>
 800eec0:	d902      	bls.n	800eec8 <_free_r+0x7c>
 800eec2:	230c      	movs	r3, #12
 800eec4:	602b      	str	r3, [r5, #0]
 800eec6:	e7d3      	b.n	800ee70 <_free_r+0x24>
 800eec8:	6820      	ldr	r0, [r4, #0]
 800eeca:	1821      	adds	r1, r4, r0
 800eecc:	428a      	cmp	r2, r1
 800eece:	bf04      	itt	eq
 800eed0:	6811      	ldreq	r1, [r2, #0]
 800eed2:	6852      	ldreq	r2, [r2, #4]
 800eed4:	6062      	str	r2, [r4, #4]
 800eed6:	bf04      	itt	eq
 800eed8:	1809      	addeq	r1, r1, r0
 800eeda:	6021      	streq	r1, [r4, #0]
 800eedc:	605c      	str	r4, [r3, #4]
 800eede:	e7c7      	b.n	800ee70 <_free_r+0x24>
 800eee0:	bd38      	pop	{r3, r4, r5, pc}
 800eee2:	bf00      	nop
 800eee4:	200090ec 	.word	0x200090ec

0800eee8 <_malloc_r>:
 800eee8:	b570      	push	{r4, r5, r6, lr}
 800eeea:	1ccd      	adds	r5, r1, #3
 800eeec:	f025 0503 	bic.w	r5, r5, #3
 800eef0:	3508      	adds	r5, #8
 800eef2:	2d0c      	cmp	r5, #12
 800eef4:	bf38      	it	cc
 800eef6:	250c      	movcc	r5, #12
 800eef8:	2d00      	cmp	r5, #0
 800eefa:	4606      	mov	r6, r0
 800eefc:	db01      	blt.n	800ef02 <_malloc_r+0x1a>
 800eefe:	42a9      	cmp	r1, r5
 800ef00:	d903      	bls.n	800ef0a <_malloc_r+0x22>
 800ef02:	230c      	movs	r3, #12
 800ef04:	6033      	str	r3, [r6, #0]
 800ef06:	2000      	movs	r0, #0
 800ef08:	bd70      	pop	{r4, r5, r6, pc}
 800ef0a:	f001 f9f3 	bl	80102f4 <__malloc_lock>
 800ef0e:	4a21      	ldr	r2, [pc, #132]	; (800ef94 <_malloc_r+0xac>)
 800ef10:	6814      	ldr	r4, [r2, #0]
 800ef12:	4621      	mov	r1, r4
 800ef14:	b991      	cbnz	r1, 800ef3c <_malloc_r+0x54>
 800ef16:	4c20      	ldr	r4, [pc, #128]	; (800ef98 <_malloc_r+0xb0>)
 800ef18:	6823      	ldr	r3, [r4, #0]
 800ef1a:	b91b      	cbnz	r3, 800ef24 <_malloc_r+0x3c>
 800ef1c:	4630      	mov	r0, r6
 800ef1e:	f000 fb87 	bl	800f630 <_sbrk_r>
 800ef22:	6020      	str	r0, [r4, #0]
 800ef24:	4629      	mov	r1, r5
 800ef26:	4630      	mov	r0, r6
 800ef28:	f000 fb82 	bl	800f630 <_sbrk_r>
 800ef2c:	1c43      	adds	r3, r0, #1
 800ef2e:	d124      	bne.n	800ef7a <_malloc_r+0x92>
 800ef30:	230c      	movs	r3, #12
 800ef32:	6033      	str	r3, [r6, #0]
 800ef34:	4630      	mov	r0, r6
 800ef36:	f001 f9de 	bl	80102f6 <__malloc_unlock>
 800ef3a:	e7e4      	b.n	800ef06 <_malloc_r+0x1e>
 800ef3c:	680b      	ldr	r3, [r1, #0]
 800ef3e:	1b5b      	subs	r3, r3, r5
 800ef40:	d418      	bmi.n	800ef74 <_malloc_r+0x8c>
 800ef42:	2b0b      	cmp	r3, #11
 800ef44:	d90f      	bls.n	800ef66 <_malloc_r+0x7e>
 800ef46:	600b      	str	r3, [r1, #0]
 800ef48:	50cd      	str	r5, [r1, r3]
 800ef4a:	18cc      	adds	r4, r1, r3
 800ef4c:	4630      	mov	r0, r6
 800ef4e:	f001 f9d2 	bl	80102f6 <__malloc_unlock>
 800ef52:	f104 000b 	add.w	r0, r4, #11
 800ef56:	1d23      	adds	r3, r4, #4
 800ef58:	f020 0007 	bic.w	r0, r0, #7
 800ef5c:	1ac3      	subs	r3, r0, r3
 800ef5e:	d0d3      	beq.n	800ef08 <_malloc_r+0x20>
 800ef60:	425a      	negs	r2, r3
 800ef62:	50e2      	str	r2, [r4, r3]
 800ef64:	e7d0      	b.n	800ef08 <_malloc_r+0x20>
 800ef66:	428c      	cmp	r4, r1
 800ef68:	684b      	ldr	r3, [r1, #4]
 800ef6a:	bf16      	itet	ne
 800ef6c:	6063      	strne	r3, [r4, #4]
 800ef6e:	6013      	streq	r3, [r2, #0]
 800ef70:	460c      	movne	r4, r1
 800ef72:	e7eb      	b.n	800ef4c <_malloc_r+0x64>
 800ef74:	460c      	mov	r4, r1
 800ef76:	6849      	ldr	r1, [r1, #4]
 800ef78:	e7cc      	b.n	800ef14 <_malloc_r+0x2c>
 800ef7a:	1cc4      	adds	r4, r0, #3
 800ef7c:	f024 0403 	bic.w	r4, r4, #3
 800ef80:	42a0      	cmp	r0, r4
 800ef82:	d005      	beq.n	800ef90 <_malloc_r+0xa8>
 800ef84:	1a21      	subs	r1, r4, r0
 800ef86:	4630      	mov	r0, r6
 800ef88:	f000 fb52 	bl	800f630 <_sbrk_r>
 800ef8c:	3001      	adds	r0, #1
 800ef8e:	d0cf      	beq.n	800ef30 <_malloc_r+0x48>
 800ef90:	6025      	str	r5, [r4, #0]
 800ef92:	e7db      	b.n	800ef4c <_malloc_r+0x64>
 800ef94:	200090ec 	.word	0x200090ec
 800ef98:	200090f0 	.word	0x200090f0

0800ef9c <__cvt>:
 800ef9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800efa0:	ec55 4b10 	vmov	r4, r5, d0
 800efa4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800efa6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800efaa:	2d00      	cmp	r5, #0
 800efac:	460e      	mov	r6, r1
 800efae:	4691      	mov	r9, r2
 800efb0:	4619      	mov	r1, r3
 800efb2:	bfb8      	it	lt
 800efb4:	4622      	movlt	r2, r4
 800efb6:	462b      	mov	r3, r5
 800efb8:	f027 0720 	bic.w	r7, r7, #32
 800efbc:	bfbb      	ittet	lt
 800efbe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800efc2:	461d      	movlt	r5, r3
 800efc4:	2300      	movge	r3, #0
 800efc6:	232d      	movlt	r3, #45	; 0x2d
 800efc8:	bfb8      	it	lt
 800efca:	4614      	movlt	r4, r2
 800efcc:	2f46      	cmp	r7, #70	; 0x46
 800efce:	700b      	strb	r3, [r1, #0]
 800efd0:	d004      	beq.n	800efdc <__cvt+0x40>
 800efd2:	2f45      	cmp	r7, #69	; 0x45
 800efd4:	d100      	bne.n	800efd8 <__cvt+0x3c>
 800efd6:	3601      	adds	r6, #1
 800efd8:	2102      	movs	r1, #2
 800efda:	e000      	b.n	800efde <__cvt+0x42>
 800efdc:	2103      	movs	r1, #3
 800efde:	ab03      	add	r3, sp, #12
 800efe0:	9301      	str	r3, [sp, #4]
 800efe2:	ab02      	add	r3, sp, #8
 800efe4:	9300      	str	r3, [sp, #0]
 800efe6:	4632      	mov	r2, r6
 800efe8:	4653      	mov	r3, sl
 800efea:	ec45 4b10 	vmov	d0, r4, r5
 800efee:	f000 fbbb 	bl	800f768 <_dtoa_r>
 800eff2:	2f47      	cmp	r7, #71	; 0x47
 800eff4:	4680      	mov	r8, r0
 800eff6:	d102      	bne.n	800effe <__cvt+0x62>
 800eff8:	f019 0f01 	tst.w	r9, #1
 800effc:	d026      	beq.n	800f04c <__cvt+0xb0>
 800effe:	2f46      	cmp	r7, #70	; 0x46
 800f000:	eb08 0906 	add.w	r9, r8, r6
 800f004:	d111      	bne.n	800f02a <__cvt+0x8e>
 800f006:	f898 3000 	ldrb.w	r3, [r8]
 800f00a:	2b30      	cmp	r3, #48	; 0x30
 800f00c:	d10a      	bne.n	800f024 <__cvt+0x88>
 800f00e:	2200      	movs	r2, #0
 800f010:	2300      	movs	r3, #0
 800f012:	4620      	mov	r0, r4
 800f014:	4629      	mov	r1, r5
 800f016:	f7f1 fd0f 	bl	8000a38 <__aeabi_dcmpeq>
 800f01a:	b918      	cbnz	r0, 800f024 <__cvt+0x88>
 800f01c:	f1c6 0601 	rsb	r6, r6, #1
 800f020:	f8ca 6000 	str.w	r6, [sl]
 800f024:	f8da 3000 	ldr.w	r3, [sl]
 800f028:	4499      	add	r9, r3
 800f02a:	2200      	movs	r2, #0
 800f02c:	2300      	movs	r3, #0
 800f02e:	4620      	mov	r0, r4
 800f030:	4629      	mov	r1, r5
 800f032:	f7f1 fd01 	bl	8000a38 <__aeabi_dcmpeq>
 800f036:	b938      	cbnz	r0, 800f048 <__cvt+0xac>
 800f038:	2230      	movs	r2, #48	; 0x30
 800f03a:	9b03      	ldr	r3, [sp, #12]
 800f03c:	454b      	cmp	r3, r9
 800f03e:	d205      	bcs.n	800f04c <__cvt+0xb0>
 800f040:	1c59      	adds	r1, r3, #1
 800f042:	9103      	str	r1, [sp, #12]
 800f044:	701a      	strb	r2, [r3, #0]
 800f046:	e7f8      	b.n	800f03a <__cvt+0x9e>
 800f048:	f8cd 900c 	str.w	r9, [sp, #12]
 800f04c:	9b03      	ldr	r3, [sp, #12]
 800f04e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f050:	eba3 0308 	sub.w	r3, r3, r8
 800f054:	4640      	mov	r0, r8
 800f056:	6013      	str	r3, [r2, #0]
 800f058:	b004      	add	sp, #16
 800f05a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f05e <__exponent>:
 800f05e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f060:	2900      	cmp	r1, #0
 800f062:	4604      	mov	r4, r0
 800f064:	bfba      	itte	lt
 800f066:	4249      	neglt	r1, r1
 800f068:	232d      	movlt	r3, #45	; 0x2d
 800f06a:	232b      	movge	r3, #43	; 0x2b
 800f06c:	2909      	cmp	r1, #9
 800f06e:	f804 2b02 	strb.w	r2, [r4], #2
 800f072:	7043      	strb	r3, [r0, #1]
 800f074:	dd20      	ble.n	800f0b8 <__exponent+0x5a>
 800f076:	f10d 0307 	add.w	r3, sp, #7
 800f07a:	461f      	mov	r7, r3
 800f07c:	260a      	movs	r6, #10
 800f07e:	fb91 f5f6 	sdiv	r5, r1, r6
 800f082:	fb06 1115 	mls	r1, r6, r5, r1
 800f086:	3130      	adds	r1, #48	; 0x30
 800f088:	2d09      	cmp	r5, #9
 800f08a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f08e:	f103 32ff 	add.w	r2, r3, #4294967295
 800f092:	4629      	mov	r1, r5
 800f094:	dc09      	bgt.n	800f0aa <__exponent+0x4c>
 800f096:	3130      	adds	r1, #48	; 0x30
 800f098:	3b02      	subs	r3, #2
 800f09a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f09e:	42bb      	cmp	r3, r7
 800f0a0:	4622      	mov	r2, r4
 800f0a2:	d304      	bcc.n	800f0ae <__exponent+0x50>
 800f0a4:	1a10      	subs	r0, r2, r0
 800f0a6:	b003      	add	sp, #12
 800f0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0aa:	4613      	mov	r3, r2
 800f0ac:	e7e7      	b.n	800f07e <__exponent+0x20>
 800f0ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0b2:	f804 2b01 	strb.w	r2, [r4], #1
 800f0b6:	e7f2      	b.n	800f09e <__exponent+0x40>
 800f0b8:	2330      	movs	r3, #48	; 0x30
 800f0ba:	4419      	add	r1, r3
 800f0bc:	7083      	strb	r3, [r0, #2]
 800f0be:	1d02      	adds	r2, r0, #4
 800f0c0:	70c1      	strb	r1, [r0, #3]
 800f0c2:	e7ef      	b.n	800f0a4 <__exponent+0x46>

0800f0c4 <_printf_float>:
 800f0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c8:	b08d      	sub	sp, #52	; 0x34
 800f0ca:	460c      	mov	r4, r1
 800f0cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800f0d0:	4616      	mov	r6, r2
 800f0d2:	461f      	mov	r7, r3
 800f0d4:	4605      	mov	r5, r0
 800f0d6:	f001 f8ff 	bl	80102d8 <_localeconv_r>
 800f0da:	6803      	ldr	r3, [r0, #0]
 800f0dc:	9304      	str	r3, [sp, #16]
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7f1 f87e 	bl	80001e0 <strlen>
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	930a      	str	r3, [sp, #40]	; 0x28
 800f0e8:	f8d8 3000 	ldr.w	r3, [r8]
 800f0ec:	9005      	str	r0, [sp, #20]
 800f0ee:	3307      	adds	r3, #7
 800f0f0:	f023 0307 	bic.w	r3, r3, #7
 800f0f4:	f103 0208 	add.w	r2, r3, #8
 800f0f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f0fc:	f8d4 b000 	ldr.w	fp, [r4]
 800f100:	f8c8 2000 	str.w	r2, [r8]
 800f104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f108:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f10c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f110:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f114:	9307      	str	r3, [sp, #28]
 800f116:	f8cd 8018 	str.w	r8, [sp, #24]
 800f11a:	f04f 32ff 	mov.w	r2, #4294967295
 800f11e:	4ba7      	ldr	r3, [pc, #668]	; (800f3bc <_printf_float+0x2f8>)
 800f120:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f124:	f7f1 fcba 	bl	8000a9c <__aeabi_dcmpun>
 800f128:	bb70      	cbnz	r0, 800f188 <_printf_float+0xc4>
 800f12a:	f04f 32ff 	mov.w	r2, #4294967295
 800f12e:	4ba3      	ldr	r3, [pc, #652]	; (800f3bc <_printf_float+0x2f8>)
 800f130:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f134:	f7f1 fc94 	bl	8000a60 <__aeabi_dcmple>
 800f138:	bb30      	cbnz	r0, 800f188 <_printf_float+0xc4>
 800f13a:	2200      	movs	r2, #0
 800f13c:	2300      	movs	r3, #0
 800f13e:	4640      	mov	r0, r8
 800f140:	4649      	mov	r1, r9
 800f142:	f7f1 fc83 	bl	8000a4c <__aeabi_dcmplt>
 800f146:	b110      	cbz	r0, 800f14e <_printf_float+0x8a>
 800f148:	232d      	movs	r3, #45	; 0x2d
 800f14a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f14e:	4a9c      	ldr	r2, [pc, #624]	; (800f3c0 <_printf_float+0x2fc>)
 800f150:	4b9c      	ldr	r3, [pc, #624]	; (800f3c4 <_printf_float+0x300>)
 800f152:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f156:	bf8c      	ite	hi
 800f158:	4690      	movhi	r8, r2
 800f15a:	4698      	movls	r8, r3
 800f15c:	2303      	movs	r3, #3
 800f15e:	f02b 0204 	bic.w	r2, fp, #4
 800f162:	6123      	str	r3, [r4, #16]
 800f164:	6022      	str	r2, [r4, #0]
 800f166:	f04f 0900 	mov.w	r9, #0
 800f16a:	9700      	str	r7, [sp, #0]
 800f16c:	4633      	mov	r3, r6
 800f16e:	aa0b      	add	r2, sp, #44	; 0x2c
 800f170:	4621      	mov	r1, r4
 800f172:	4628      	mov	r0, r5
 800f174:	f000 f9e6 	bl	800f544 <_printf_common>
 800f178:	3001      	adds	r0, #1
 800f17a:	f040 808d 	bne.w	800f298 <_printf_float+0x1d4>
 800f17e:	f04f 30ff 	mov.w	r0, #4294967295
 800f182:	b00d      	add	sp, #52	; 0x34
 800f184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f188:	4642      	mov	r2, r8
 800f18a:	464b      	mov	r3, r9
 800f18c:	4640      	mov	r0, r8
 800f18e:	4649      	mov	r1, r9
 800f190:	f7f1 fc84 	bl	8000a9c <__aeabi_dcmpun>
 800f194:	b110      	cbz	r0, 800f19c <_printf_float+0xd8>
 800f196:	4a8c      	ldr	r2, [pc, #560]	; (800f3c8 <_printf_float+0x304>)
 800f198:	4b8c      	ldr	r3, [pc, #560]	; (800f3cc <_printf_float+0x308>)
 800f19a:	e7da      	b.n	800f152 <_printf_float+0x8e>
 800f19c:	6861      	ldr	r1, [r4, #4]
 800f19e:	1c4b      	adds	r3, r1, #1
 800f1a0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800f1a4:	a80a      	add	r0, sp, #40	; 0x28
 800f1a6:	d13e      	bne.n	800f226 <_printf_float+0x162>
 800f1a8:	2306      	movs	r3, #6
 800f1aa:	6063      	str	r3, [r4, #4]
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f1b2:	ab09      	add	r3, sp, #36	; 0x24
 800f1b4:	9300      	str	r3, [sp, #0]
 800f1b6:	ec49 8b10 	vmov	d0, r8, r9
 800f1ba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f1be:	6022      	str	r2, [r4, #0]
 800f1c0:	f8cd a004 	str.w	sl, [sp, #4]
 800f1c4:	6861      	ldr	r1, [r4, #4]
 800f1c6:	4628      	mov	r0, r5
 800f1c8:	f7ff fee8 	bl	800ef9c <__cvt>
 800f1cc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800f1d0:	2b47      	cmp	r3, #71	; 0x47
 800f1d2:	4680      	mov	r8, r0
 800f1d4:	d109      	bne.n	800f1ea <_printf_float+0x126>
 800f1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1d8:	1cd8      	adds	r0, r3, #3
 800f1da:	db02      	blt.n	800f1e2 <_printf_float+0x11e>
 800f1dc:	6862      	ldr	r2, [r4, #4]
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	dd47      	ble.n	800f272 <_printf_float+0x1ae>
 800f1e2:	f1aa 0a02 	sub.w	sl, sl, #2
 800f1e6:	fa5f fa8a 	uxtb.w	sl, sl
 800f1ea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f1ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f1f0:	d824      	bhi.n	800f23c <_printf_float+0x178>
 800f1f2:	3901      	subs	r1, #1
 800f1f4:	4652      	mov	r2, sl
 800f1f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f1fa:	9109      	str	r1, [sp, #36]	; 0x24
 800f1fc:	f7ff ff2f 	bl	800f05e <__exponent>
 800f200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f202:	1813      	adds	r3, r2, r0
 800f204:	2a01      	cmp	r2, #1
 800f206:	4681      	mov	r9, r0
 800f208:	6123      	str	r3, [r4, #16]
 800f20a:	dc02      	bgt.n	800f212 <_printf_float+0x14e>
 800f20c:	6822      	ldr	r2, [r4, #0]
 800f20e:	07d1      	lsls	r1, r2, #31
 800f210:	d501      	bpl.n	800f216 <_printf_float+0x152>
 800f212:	3301      	adds	r3, #1
 800f214:	6123      	str	r3, [r4, #16]
 800f216:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d0a5      	beq.n	800f16a <_printf_float+0xa6>
 800f21e:	232d      	movs	r3, #45	; 0x2d
 800f220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f224:	e7a1      	b.n	800f16a <_printf_float+0xa6>
 800f226:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800f22a:	f000 8177 	beq.w	800f51c <_printf_float+0x458>
 800f22e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f232:	d1bb      	bne.n	800f1ac <_printf_float+0xe8>
 800f234:	2900      	cmp	r1, #0
 800f236:	d1b9      	bne.n	800f1ac <_printf_float+0xe8>
 800f238:	2301      	movs	r3, #1
 800f23a:	e7b6      	b.n	800f1aa <_printf_float+0xe6>
 800f23c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800f240:	d119      	bne.n	800f276 <_printf_float+0x1b2>
 800f242:	2900      	cmp	r1, #0
 800f244:	6863      	ldr	r3, [r4, #4]
 800f246:	dd0c      	ble.n	800f262 <_printf_float+0x19e>
 800f248:	6121      	str	r1, [r4, #16]
 800f24a:	b913      	cbnz	r3, 800f252 <_printf_float+0x18e>
 800f24c:	6822      	ldr	r2, [r4, #0]
 800f24e:	07d2      	lsls	r2, r2, #31
 800f250:	d502      	bpl.n	800f258 <_printf_float+0x194>
 800f252:	3301      	adds	r3, #1
 800f254:	440b      	add	r3, r1
 800f256:	6123      	str	r3, [r4, #16]
 800f258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f25a:	65a3      	str	r3, [r4, #88]	; 0x58
 800f25c:	f04f 0900 	mov.w	r9, #0
 800f260:	e7d9      	b.n	800f216 <_printf_float+0x152>
 800f262:	b913      	cbnz	r3, 800f26a <_printf_float+0x1a6>
 800f264:	6822      	ldr	r2, [r4, #0]
 800f266:	07d0      	lsls	r0, r2, #31
 800f268:	d501      	bpl.n	800f26e <_printf_float+0x1aa>
 800f26a:	3302      	adds	r3, #2
 800f26c:	e7f3      	b.n	800f256 <_printf_float+0x192>
 800f26e:	2301      	movs	r3, #1
 800f270:	e7f1      	b.n	800f256 <_printf_float+0x192>
 800f272:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800f276:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f27a:	4293      	cmp	r3, r2
 800f27c:	db05      	blt.n	800f28a <_printf_float+0x1c6>
 800f27e:	6822      	ldr	r2, [r4, #0]
 800f280:	6123      	str	r3, [r4, #16]
 800f282:	07d1      	lsls	r1, r2, #31
 800f284:	d5e8      	bpl.n	800f258 <_printf_float+0x194>
 800f286:	3301      	adds	r3, #1
 800f288:	e7e5      	b.n	800f256 <_printf_float+0x192>
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	bfd4      	ite	le
 800f28e:	f1c3 0302 	rsble	r3, r3, #2
 800f292:	2301      	movgt	r3, #1
 800f294:	4413      	add	r3, r2
 800f296:	e7de      	b.n	800f256 <_printf_float+0x192>
 800f298:	6823      	ldr	r3, [r4, #0]
 800f29a:	055a      	lsls	r2, r3, #21
 800f29c:	d407      	bmi.n	800f2ae <_printf_float+0x1ea>
 800f29e:	6923      	ldr	r3, [r4, #16]
 800f2a0:	4642      	mov	r2, r8
 800f2a2:	4631      	mov	r1, r6
 800f2a4:	4628      	mov	r0, r5
 800f2a6:	47b8      	blx	r7
 800f2a8:	3001      	adds	r0, #1
 800f2aa:	d12b      	bne.n	800f304 <_printf_float+0x240>
 800f2ac:	e767      	b.n	800f17e <_printf_float+0xba>
 800f2ae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f2b2:	f240 80dc 	bls.w	800f46e <_printf_float+0x3aa>
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f2be:	f7f1 fbbb 	bl	8000a38 <__aeabi_dcmpeq>
 800f2c2:	2800      	cmp	r0, #0
 800f2c4:	d033      	beq.n	800f32e <_printf_float+0x26a>
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	4a41      	ldr	r2, [pc, #260]	; (800f3d0 <_printf_float+0x30c>)
 800f2ca:	4631      	mov	r1, r6
 800f2cc:	4628      	mov	r0, r5
 800f2ce:	47b8      	blx	r7
 800f2d0:	3001      	adds	r0, #1
 800f2d2:	f43f af54 	beq.w	800f17e <_printf_float+0xba>
 800f2d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	db02      	blt.n	800f2e4 <_printf_float+0x220>
 800f2de:	6823      	ldr	r3, [r4, #0]
 800f2e0:	07d8      	lsls	r0, r3, #31
 800f2e2:	d50f      	bpl.n	800f304 <_printf_float+0x240>
 800f2e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f2e8:	4631      	mov	r1, r6
 800f2ea:	4628      	mov	r0, r5
 800f2ec:	47b8      	blx	r7
 800f2ee:	3001      	adds	r0, #1
 800f2f0:	f43f af45 	beq.w	800f17e <_printf_float+0xba>
 800f2f4:	f04f 0800 	mov.w	r8, #0
 800f2f8:	f104 091a 	add.w	r9, r4, #26
 800f2fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2fe:	3b01      	subs	r3, #1
 800f300:	4543      	cmp	r3, r8
 800f302:	dc09      	bgt.n	800f318 <_printf_float+0x254>
 800f304:	6823      	ldr	r3, [r4, #0]
 800f306:	079b      	lsls	r3, r3, #30
 800f308:	f100 8103 	bmi.w	800f512 <_printf_float+0x44e>
 800f30c:	68e0      	ldr	r0, [r4, #12]
 800f30e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f310:	4298      	cmp	r0, r3
 800f312:	bfb8      	it	lt
 800f314:	4618      	movlt	r0, r3
 800f316:	e734      	b.n	800f182 <_printf_float+0xbe>
 800f318:	2301      	movs	r3, #1
 800f31a:	464a      	mov	r2, r9
 800f31c:	4631      	mov	r1, r6
 800f31e:	4628      	mov	r0, r5
 800f320:	47b8      	blx	r7
 800f322:	3001      	adds	r0, #1
 800f324:	f43f af2b 	beq.w	800f17e <_printf_float+0xba>
 800f328:	f108 0801 	add.w	r8, r8, #1
 800f32c:	e7e6      	b.n	800f2fc <_printf_float+0x238>
 800f32e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f330:	2b00      	cmp	r3, #0
 800f332:	dc2b      	bgt.n	800f38c <_printf_float+0x2c8>
 800f334:	2301      	movs	r3, #1
 800f336:	4a26      	ldr	r2, [pc, #152]	; (800f3d0 <_printf_float+0x30c>)
 800f338:	4631      	mov	r1, r6
 800f33a:	4628      	mov	r0, r5
 800f33c:	47b8      	blx	r7
 800f33e:	3001      	adds	r0, #1
 800f340:	f43f af1d 	beq.w	800f17e <_printf_float+0xba>
 800f344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f346:	b923      	cbnz	r3, 800f352 <_printf_float+0x28e>
 800f348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f34a:	b913      	cbnz	r3, 800f352 <_printf_float+0x28e>
 800f34c:	6823      	ldr	r3, [r4, #0]
 800f34e:	07d9      	lsls	r1, r3, #31
 800f350:	d5d8      	bpl.n	800f304 <_printf_float+0x240>
 800f352:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f356:	4631      	mov	r1, r6
 800f358:	4628      	mov	r0, r5
 800f35a:	47b8      	blx	r7
 800f35c:	3001      	adds	r0, #1
 800f35e:	f43f af0e 	beq.w	800f17e <_printf_float+0xba>
 800f362:	f04f 0900 	mov.w	r9, #0
 800f366:	f104 0a1a 	add.w	sl, r4, #26
 800f36a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f36c:	425b      	negs	r3, r3
 800f36e:	454b      	cmp	r3, r9
 800f370:	dc01      	bgt.n	800f376 <_printf_float+0x2b2>
 800f372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f374:	e794      	b.n	800f2a0 <_printf_float+0x1dc>
 800f376:	2301      	movs	r3, #1
 800f378:	4652      	mov	r2, sl
 800f37a:	4631      	mov	r1, r6
 800f37c:	4628      	mov	r0, r5
 800f37e:	47b8      	blx	r7
 800f380:	3001      	adds	r0, #1
 800f382:	f43f aefc 	beq.w	800f17e <_printf_float+0xba>
 800f386:	f109 0901 	add.w	r9, r9, #1
 800f38a:	e7ee      	b.n	800f36a <_printf_float+0x2a6>
 800f38c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f38e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f390:	429a      	cmp	r2, r3
 800f392:	bfa8      	it	ge
 800f394:	461a      	movge	r2, r3
 800f396:	2a00      	cmp	r2, #0
 800f398:	4691      	mov	r9, r2
 800f39a:	dd07      	ble.n	800f3ac <_printf_float+0x2e8>
 800f39c:	4613      	mov	r3, r2
 800f39e:	4631      	mov	r1, r6
 800f3a0:	4642      	mov	r2, r8
 800f3a2:	4628      	mov	r0, r5
 800f3a4:	47b8      	blx	r7
 800f3a6:	3001      	adds	r0, #1
 800f3a8:	f43f aee9 	beq.w	800f17e <_printf_float+0xba>
 800f3ac:	f104 031a 	add.w	r3, r4, #26
 800f3b0:	f04f 0b00 	mov.w	fp, #0
 800f3b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f3b8:	9306      	str	r3, [sp, #24]
 800f3ba:	e015      	b.n	800f3e8 <_printf_float+0x324>
 800f3bc:	7fefffff 	.word	0x7fefffff
 800f3c0:	08010a2c 	.word	0x08010a2c
 800f3c4:	08010a28 	.word	0x08010a28
 800f3c8:	08010a34 	.word	0x08010a34
 800f3cc:	08010a30 	.word	0x08010a30
 800f3d0:	08010a38 	.word	0x08010a38
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	9a06      	ldr	r2, [sp, #24]
 800f3d8:	4631      	mov	r1, r6
 800f3da:	4628      	mov	r0, r5
 800f3dc:	47b8      	blx	r7
 800f3de:	3001      	adds	r0, #1
 800f3e0:	f43f aecd 	beq.w	800f17e <_printf_float+0xba>
 800f3e4:	f10b 0b01 	add.w	fp, fp, #1
 800f3e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f3ec:	ebaa 0309 	sub.w	r3, sl, r9
 800f3f0:	455b      	cmp	r3, fp
 800f3f2:	dcef      	bgt.n	800f3d4 <_printf_float+0x310>
 800f3f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	44d0      	add	r8, sl
 800f3fc:	db15      	blt.n	800f42a <_printf_float+0x366>
 800f3fe:	6823      	ldr	r3, [r4, #0]
 800f400:	07da      	lsls	r2, r3, #31
 800f402:	d412      	bmi.n	800f42a <_printf_float+0x366>
 800f404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f406:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f408:	eba3 020a 	sub.w	r2, r3, sl
 800f40c:	eba3 0a01 	sub.w	sl, r3, r1
 800f410:	4592      	cmp	sl, r2
 800f412:	bfa8      	it	ge
 800f414:	4692      	movge	sl, r2
 800f416:	f1ba 0f00 	cmp.w	sl, #0
 800f41a:	dc0e      	bgt.n	800f43a <_printf_float+0x376>
 800f41c:	f04f 0800 	mov.w	r8, #0
 800f420:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f424:	f104 091a 	add.w	r9, r4, #26
 800f428:	e019      	b.n	800f45e <_printf_float+0x39a>
 800f42a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f42e:	4631      	mov	r1, r6
 800f430:	4628      	mov	r0, r5
 800f432:	47b8      	blx	r7
 800f434:	3001      	adds	r0, #1
 800f436:	d1e5      	bne.n	800f404 <_printf_float+0x340>
 800f438:	e6a1      	b.n	800f17e <_printf_float+0xba>
 800f43a:	4653      	mov	r3, sl
 800f43c:	4642      	mov	r2, r8
 800f43e:	4631      	mov	r1, r6
 800f440:	4628      	mov	r0, r5
 800f442:	47b8      	blx	r7
 800f444:	3001      	adds	r0, #1
 800f446:	d1e9      	bne.n	800f41c <_printf_float+0x358>
 800f448:	e699      	b.n	800f17e <_printf_float+0xba>
 800f44a:	2301      	movs	r3, #1
 800f44c:	464a      	mov	r2, r9
 800f44e:	4631      	mov	r1, r6
 800f450:	4628      	mov	r0, r5
 800f452:	47b8      	blx	r7
 800f454:	3001      	adds	r0, #1
 800f456:	f43f ae92 	beq.w	800f17e <_printf_float+0xba>
 800f45a:	f108 0801 	add.w	r8, r8, #1
 800f45e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f462:	1a9b      	subs	r3, r3, r2
 800f464:	eba3 030a 	sub.w	r3, r3, sl
 800f468:	4543      	cmp	r3, r8
 800f46a:	dcee      	bgt.n	800f44a <_printf_float+0x386>
 800f46c:	e74a      	b.n	800f304 <_printf_float+0x240>
 800f46e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f470:	2a01      	cmp	r2, #1
 800f472:	dc01      	bgt.n	800f478 <_printf_float+0x3b4>
 800f474:	07db      	lsls	r3, r3, #31
 800f476:	d53a      	bpl.n	800f4ee <_printf_float+0x42a>
 800f478:	2301      	movs	r3, #1
 800f47a:	4642      	mov	r2, r8
 800f47c:	4631      	mov	r1, r6
 800f47e:	4628      	mov	r0, r5
 800f480:	47b8      	blx	r7
 800f482:	3001      	adds	r0, #1
 800f484:	f43f ae7b 	beq.w	800f17e <_printf_float+0xba>
 800f488:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f48c:	4631      	mov	r1, r6
 800f48e:	4628      	mov	r0, r5
 800f490:	47b8      	blx	r7
 800f492:	3001      	adds	r0, #1
 800f494:	f108 0801 	add.w	r8, r8, #1
 800f498:	f43f ae71 	beq.w	800f17e <_printf_float+0xba>
 800f49c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f49e:	2200      	movs	r2, #0
 800f4a0:	f103 3aff 	add.w	sl, r3, #4294967295
 800f4a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	f7f1 fac5 	bl	8000a38 <__aeabi_dcmpeq>
 800f4ae:	b9c8      	cbnz	r0, 800f4e4 <_printf_float+0x420>
 800f4b0:	4653      	mov	r3, sl
 800f4b2:	4642      	mov	r2, r8
 800f4b4:	4631      	mov	r1, r6
 800f4b6:	4628      	mov	r0, r5
 800f4b8:	47b8      	blx	r7
 800f4ba:	3001      	adds	r0, #1
 800f4bc:	d10e      	bne.n	800f4dc <_printf_float+0x418>
 800f4be:	e65e      	b.n	800f17e <_printf_float+0xba>
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	4652      	mov	r2, sl
 800f4c4:	4631      	mov	r1, r6
 800f4c6:	4628      	mov	r0, r5
 800f4c8:	47b8      	blx	r7
 800f4ca:	3001      	adds	r0, #1
 800f4cc:	f43f ae57 	beq.w	800f17e <_printf_float+0xba>
 800f4d0:	f108 0801 	add.w	r8, r8, #1
 800f4d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4d6:	3b01      	subs	r3, #1
 800f4d8:	4543      	cmp	r3, r8
 800f4da:	dcf1      	bgt.n	800f4c0 <_printf_float+0x3fc>
 800f4dc:	464b      	mov	r3, r9
 800f4de:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f4e2:	e6de      	b.n	800f2a2 <_printf_float+0x1de>
 800f4e4:	f04f 0800 	mov.w	r8, #0
 800f4e8:	f104 0a1a 	add.w	sl, r4, #26
 800f4ec:	e7f2      	b.n	800f4d4 <_printf_float+0x410>
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	e7df      	b.n	800f4b2 <_printf_float+0x3ee>
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	464a      	mov	r2, r9
 800f4f6:	4631      	mov	r1, r6
 800f4f8:	4628      	mov	r0, r5
 800f4fa:	47b8      	blx	r7
 800f4fc:	3001      	adds	r0, #1
 800f4fe:	f43f ae3e 	beq.w	800f17e <_printf_float+0xba>
 800f502:	f108 0801 	add.w	r8, r8, #1
 800f506:	68e3      	ldr	r3, [r4, #12]
 800f508:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f50a:	1a9b      	subs	r3, r3, r2
 800f50c:	4543      	cmp	r3, r8
 800f50e:	dcf0      	bgt.n	800f4f2 <_printf_float+0x42e>
 800f510:	e6fc      	b.n	800f30c <_printf_float+0x248>
 800f512:	f04f 0800 	mov.w	r8, #0
 800f516:	f104 0919 	add.w	r9, r4, #25
 800f51a:	e7f4      	b.n	800f506 <_printf_float+0x442>
 800f51c:	2900      	cmp	r1, #0
 800f51e:	f43f ae8b 	beq.w	800f238 <_printf_float+0x174>
 800f522:	2300      	movs	r3, #0
 800f524:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f528:	ab09      	add	r3, sp, #36	; 0x24
 800f52a:	9300      	str	r3, [sp, #0]
 800f52c:	ec49 8b10 	vmov	d0, r8, r9
 800f530:	6022      	str	r2, [r4, #0]
 800f532:	f8cd a004 	str.w	sl, [sp, #4]
 800f536:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f53a:	4628      	mov	r0, r5
 800f53c:	f7ff fd2e 	bl	800ef9c <__cvt>
 800f540:	4680      	mov	r8, r0
 800f542:	e648      	b.n	800f1d6 <_printf_float+0x112>

0800f544 <_printf_common>:
 800f544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f548:	4691      	mov	r9, r2
 800f54a:	461f      	mov	r7, r3
 800f54c:	688a      	ldr	r2, [r1, #8]
 800f54e:	690b      	ldr	r3, [r1, #16]
 800f550:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f554:	4293      	cmp	r3, r2
 800f556:	bfb8      	it	lt
 800f558:	4613      	movlt	r3, r2
 800f55a:	f8c9 3000 	str.w	r3, [r9]
 800f55e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f562:	4606      	mov	r6, r0
 800f564:	460c      	mov	r4, r1
 800f566:	b112      	cbz	r2, 800f56e <_printf_common+0x2a>
 800f568:	3301      	adds	r3, #1
 800f56a:	f8c9 3000 	str.w	r3, [r9]
 800f56e:	6823      	ldr	r3, [r4, #0]
 800f570:	0699      	lsls	r1, r3, #26
 800f572:	bf42      	ittt	mi
 800f574:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f578:	3302      	addmi	r3, #2
 800f57a:	f8c9 3000 	strmi.w	r3, [r9]
 800f57e:	6825      	ldr	r5, [r4, #0]
 800f580:	f015 0506 	ands.w	r5, r5, #6
 800f584:	d107      	bne.n	800f596 <_printf_common+0x52>
 800f586:	f104 0a19 	add.w	sl, r4, #25
 800f58a:	68e3      	ldr	r3, [r4, #12]
 800f58c:	f8d9 2000 	ldr.w	r2, [r9]
 800f590:	1a9b      	subs	r3, r3, r2
 800f592:	42ab      	cmp	r3, r5
 800f594:	dc28      	bgt.n	800f5e8 <_printf_common+0xa4>
 800f596:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f59a:	6822      	ldr	r2, [r4, #0]
 800f59c:	3300      	adds	r3, #0
 800f59e:	bf18      	it	ne
 800f5a0:	2301      	movne	r3, #1
 800f5a2:	0692      	lsls	r2, r2, #26
 800f5a4:	d42d      	bmi.n	800f602 <_printf_common+0xbe>
 800f5a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f5aa:	4639      	mov	r1, r7
 800f5ac:	4630      	mov	r0, r6
 800f5ae:	47c0      	blx	r8
 800f5b0:	3001      	adds	r0, #1
 800f5b2:	d020      	beq.n	800f5f6 <_printf_common+0xb2>
 800f5b4:	6823      	ldr	r3, [r4, #0]
 800f5b6:	68e5      	ldr	r5, [r4, #12]
 800f5b8:	f8d9 2000 	ldr.w	r2, [r9]
 800f5bc:	f003 0306 	and.w	r3, r3, #6
 800f5c0:	2b04      	cmp	r3, #4
 800f5c2:	bf08      	it	eq
 800f5c4:	1aad      	subeq	r5, r5, r2
 800f5c6:	68a3      	ldr	r3, [r4, #8]
 800f5c8:	6922      	ldr	r2, [r4, #16]
 800f5ca:	bf0c      	ite	eq
 800f5cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f5d0:	2500      	movne	r5, #0
 800f5d2:	4293      	cmp	r3, r2
 800f5d4:	bfc4      	itt	gt
 800f5d6:	1a9b      	subgt	r3, r3, r2
 800f5d8:	18ed      	addgt	r5, r5, r3
 800f5da:	f04f 0900 	mov.w	r9, #0
 800f5de:	341a      	adds	r4, #26
 800f5e0:	454d      	cmp	r5, r9
 800f5e2:	d11a      	bne.n	800f61a <_printf_common+0xd6>
 800f5e4:	2000      	movs	r0, #0
 800f5e6:	e008      	b.n	800f5fa <_printf_common+0xb6>
 800f5e8:	2301      	movs	r3, #1
 800f5ea:	4652      	mov	r2, sl
 800f5ec:	4639      	mov	r1, r7
 800f5ee:	4630      	mov	r0, r6
 800f5f0:	47c0      	blx	r8
 800f5f2:	3001      	adds	r0, #1
 800f5f4:	d103      	bne.n	800f5fe <_printf_common+0xba>
 800f5f6:	f04f 30ff 	mov.w	r0, #4294967295
 800f5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5fe:	3501      	adds	r5, #1
 800f600:	e7c3      	b.n	800f58a <_printf_common+0x46>
 800f602:	18e1      	adds	r1, r4, r3
 800f604:	1c5a      	adds	r2, r3, #1
 800f606:	2030      	movs	r0, #48	; 0x30
 800f608:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f60c:	4422      	add	r2, r4
 800f60e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f612:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f616:	3302      	adds	r3, #2
 800f618:	e7c5      	b.n	800f5a6 <_printf_common+0x62>
 800f61a:	2301      	movs	r3, #1
 800f61c:	4622      	mov	r2, r4
 800f61e:	4639      	mov	r1, r7
 800f620:	4630      	mov	r0, r6
 800f622:	47c0      	blx	r8
 800f624:	3001      	adds	r0, #1
 800f626:	d0e6      	beq.n	800f5f6 <_printf_common+0xb2>
 800f628:	f109 0901 	add.w	r9, r9, #1
 800f62c:	e7d8      	b.n	800f5e0 <_printf_common+0x9c>
	...

0800f630 <_sbrk_r>:
 800f630:	b538      	push	{r3, r4, r5, lr}
 800f632:	4c06      	ldr	r4, [pc, #24]	; (800f64c <_sbrk_r+0x1c>)
 800f634:	2300      	movs	r3, #0
 800f636:	4605      	mov	r5, r0
 800f638:	4608      	mov	r0, r1
 800f63a:	6023      	str	r3, [r4, #0]
 800f63c:	f7f3 fefc 	bl	8003438 <_sbrk>
 800f640:	1c43      	adds	r3, r0, #1
 800f642:	d102      	bne.n	800f64a <_sbrk_r+0x1a>
 800f644:	6823      	ldr	r3, [r4, #0]
 800f646:	b103      	cbz	r3, 800f64a <_sbrk_r+0x1a>
 800f648:	602b      	str	r3, [r5, #0]
 800f64a:	bd38      	pop	{r3, r4, r5, pc}
 800f64c:	2000ac28 	.word	0x2000ac28

0800f650 <quorem>:
 800f650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f654:	6903      	ldr	r3, [r0, #16]
 800f656:	690c      	ldr	r4, [r1, #16]
 800f658:	42a3      	cmp	r3, r4
 800f65a:	4680      	mov	r8, r0
 800f65c:	f2c0 8082 	blt.w	800f764 <quorem+0x114>
 800f660:	3c01      	subs	r4, #1
 800f662:	f101 0714 	add.w	r7, r1, #20
 800f666:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f66a:	f100 0614 	add.w	r6, r0, #20
 800f66e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f672:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f676:	eb06 030c 	add.w	r3, r6, ip
 800f67a:	3501      	adds	r5, #1
 800f67c:	eb07 090c 	add.w	r9, r7, ip
 800f680:	9301      	str	r3, [sp, #4]
 800f682:	fbb0 f5f5 	udiv	r5, r0, r5
 800f686:	b395      	cbz	r5, 800f6ee <quorem+0x9e>
 800f688:	f04f 0a00 	mov.w	sl, #0
 800f68c:	4638      	mov	r0, r7
 800f68e:	46b6      	mov	lr, r6
 800f690:	46d3      	mov	fp, sl
 800f692:	f850 2b04 	ldr.w	r2, [r0], #4
 800f696:	b293      	uxth	r3, r2
 800f698:	fb05 a303 	mla	r3, r5, r3, sl
 800f69c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f6a0:	b29b      	uxth	r3, r3
 800f6a2:	ebab 0303 	sub.w	r3, fp, r3
 800f6a6:	0c12      	lsrs	r2, r2, #16
 800f6a8:	f8de b000 	ldr.w	fp, [lr]
 800f6ac:	fb05 a202 	mla	r2, r5, r2, sl
 800f6b0:	fa13 f38b 	uxtah	r3, r3, fp
 800f6b4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f6b8:	fa1f fb82 	uxth.w	fp, r2
 800f6bc:	f8de 2000 	ldr.w	r2, [lr]
 800f6c0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f6c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f6c8:	b29b      	uxth	r3, r3
 800f6ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f6ce:	4581      	cmp	r9, r0
 800f6d0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f6d4:	f84e 3b04 	str.w	r3, [lr], #4
 800f6d8:	d2db      	bcs.n	800f692 <quorem+0x42>
 800f6da:	f856 300c 	ldr.w	r3, [r6, ip]
 800f6de:	b933      	cbnz	r3, 800f6ee <quorem+0x9e>
 800f6e0:	9b01      	ldr	r3, [sp, #4]
 800f6e2:	3b04      	subs	r3, #4
 800f6e4:	429e      	cmp	r6, r3
 800f6e6:	461a      	mov	r2, r3
 800f6e8:	d330      	bcc.n	800f74c <quorem+0xfc>
 800f6ea:	f8c8 4010 	str.w	r4, [r8, #16]
 800f6ee:	4640      	mov	r0, r8
 800f6f0:	f001 f818 	bl	8010724 <__mcmp>
 800f6f4:	2800      	cmp	r0, #0
 800f6f6:	db25      	blt.n	800f744 <quorem+0xf4>
 800f6f8:	3501      	adds	r5, #1
 800f6fa:	4630      	mov	r0, r6
 800f6fc:	f04f 0c00 	mov.w	ip, #0
 800f700:	f857 2b04 	ldr.w	r2, [r7], #4
 800f704:	f8d0 e000 	ldr.w	lr, [r0]
 800f708:	b293      	uxth	r3, r2
 800f70a:	ebac 0303 	sub.w	r3, ip, r3
 800f70e:	0c12      	lsrs	r2, r2, #16
 800f710:	fa13 f38e 	uxtah	r3, r3, lr
 800f714:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f718:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f71c:	b29b      	uxth	r3, r3
 800f71e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f722:	45b9      	cmp	r9, r7
 800f724:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f728:	f840 3b04 	str.w	r3, [r0], #4
 800f72c:	d2e8      	bcs.n	800f700 <quorem+0xb0>
 800f72e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f732:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f736:	b92a      	cbnz	r2, 800f744 <quorem+0xf4>
 800f738:	3b04      	subs	r3, #4
 800f73a:	429e      	cmp	r6, r3
 800f73c:	461a      	mov	r2, r3
 800f73e:	d30b      	bcc.n	800f758 <quorem+0x108>
 800f740:	f8c8 4010 	str.w	r4, [r8, #16]
 800f744:	4628      	mov	r0, r5
 800f746:	b003      	add	sp, #12
 800f748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f74c:	6812      	ldr	r2, [r2, #0]
 800f74e:	3b04      	subs	r3, #4
 800f750:	2a00      	cmp	r2, #0
 800f752:	d1ca      	bne.n	800f6ea <quorem+0x9a>
 800f754:	3c01      	subs	r4, #1
 800f756:	e7c5      	b.n	800f6e4 <quorem+0x94>
 800f758:	6812      	ldr	r2, [r2, #0]
 800f75a:	3b04      	subs	r3, #4
 800f75c:	2a00      	cmp	r2, #0
 800f75e:	d1ef      	bne.n	800f740 <quorem+0xf0>
 800f760:	3c01      	subs	r4, #1
 800f762:	e7ea      	b.n	800f73a <quorem+0xea>
 800f764:	2000      	movs	r0, #0
 800f766:	e7ee      	b.n	800f746 <quorem+0xf6>

0800f768 <_dtoa_r>:
 800f768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f76c:	ec57 6b10 	vmov	r6, r7, d0
 800f770:	b097      	sub	sp, #92	; 0x5c
 800f772:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f774:	9106      	str	r1, [sp, #24]
 800f776:	4604      	mov	r4, r0
 800f778:	920b      	str	r2, [sp, #44]	; 0x2c
 800f77a:	9312      	str	r3, [sp, #72]	; 0x48
 800f77c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f780:	e9cd 6700 	strd	r6, r7, [sp]
 800f784:	b93d      	cbnz	r5, 800f796 <_dtoa_r+0x2e>
 800f786:	2010      	movs	r0, #16
 800f788:	f7ff fb3c 	bl	800ee04 <malloc>
 800f78c:	6260      	str	r0, [r4, #36]	; 0x24
 800f78e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f792:	6005      	str	r5, [r0, #0]
 800f794:	60c5      	str	r5, [r0, #12]
 800f796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f798:	6819      	ldr	r1, [r3, #0]
 800f79a:	b151      	cbz	r1, 800f7b2 <_dtoa_r+0x4a>
 800f79c:	685a      	ldr	r2, [r3, #4]
 800f79e:	604a      	str	r2, [r1, #4]
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	4093      	lsls	r3, r2
 800f7a4:	608b      	str	r3, [r1, #8]
 800f7a6:	4620      	mov	r0, r4
 800f7a8:	f000 fdda 	bl	8010360 <_Bfree>
 800f7ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	601a      	str	r2, [r3, #0]
 800f7b2:	1e3b      	subs	r3, r7, #0
 800f7b4:	bfbb      	ittet	lt
 800f7b6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f7ba:	9301      	strlt	r3, [sp, #4]
 800f7bc:	2300      	movge	r3, #0
 800f7be:	2201      	movlt	r2, #1
 800f7c0:	bfac      	ite	ge
 800f7c2:	f8c8 3000 	strge.w	r3, [r8]
 800f7c6:	f8c8 2000 	strlt.w	r2, [r8]
 800f7ca:	4baf      	ldr	r3, [pc, #700]	; (800fa88 <_dtoa_r+0x320>)
 800f7cc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f7d0:	ea33 0308 	bics.w	r3, r3, r8
 800f7d4:	d114      	bne.n	800f800 <_dtoa_r+0x98>
 800f7d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f7d8:	f242 730f 	movw	r3, #9999	; 0x270f
 800f7dc:	6013      	str	r3, [r2, #0]
 800f7de:	9b00      	ldr	r3, [sp, #0]
 800f7e0:	b923      	cbnz	r3, 800f7ec <_dtoa_r+0x84>
 800f7e2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800f7e6:	2800      	cmp	r0, #0
 800f7e8:	f000 8542 	beq.w	8010270 <_dtoa_r+0xb08>
 800f7ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f7ee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800fa9c <_dtoa_r+0x334>
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	f000 8544 	beq.w	8010280 <_dtoa_r+0xb18>
 800f7f8:	f10b 0303 	add.w	r3, fp, #3
 800f7fc:	f000 bd3e 	b.w	801027c <_dtoa_r+0xb14>
 800f800:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f804:	2200      	movs	r2, #0
 800f806:	2300      	movs	r3, #0
 800f808:	4630      	mov	r0, r6
 800f80a:	4639      	mov	r1, r7
 800f80c:	f7f1 f914 	bl	8000a38 <__aeabi_dcmpeq>
 800f810:	4681      	mov	r9, r0
 800f812:	b168      	cbz	r0, 800f830 <_dtoa_r+0xc8>
 800f814:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f816:	2301      	movs	r3, #1
 800f818:	6013      	str	r3, [r2, #0]
 800f81a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	f000 8524 	beq.w	801026a <_dtoa_r+0xb02>
 800f822:	4b9a      	ldr	r3, [pc, #616]	; (800fa8c <_dtoa_r+0x324>)
 800f824:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f826:	f103 3bff 	add.w	fp, r3, #4294967295
 800f82a:	6013      	str	r3, [r2, #0]
 800f82c:	f000 bd28 	b.w	8010280 <_dtoa_r+0xb18>
 800f830:	aa14      	add	r2, sp, #80	; 0x50
 800f832:	a915      	add	r1, sp, #84	; 0x54
 800f834:	ec47 6b10 	vmov	d0, r6, r7
 800f838:	4620      	mov	r0, r4
 800f83a:	f000 ffea 	bl	8010812 <__d2b>
 800f83e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f842:	9004      	str	r0, [sp, #16]
 800f844:	2d00      	cmp	r5, #0
 800f846:	d07c      	beq.n	800f942 <_dtoa_r+0x1da>
 800f848:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f84c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800f850:	46b2      	mov	sl, r6
 800f852:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800f856:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f85a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800f85e:	2200      	movs	r2, #0
 800f860:	4b8b      	ldr	r3, [pc, #556]	; (800fa90 <_dtoa_r+0x328>)
 800f862:	4650      	mov	r0, sl
 800f864:	4659      	mov	r1, fp
 800f866:	f7f0 fcc7 	bl	80001f8 <__aeabi_dsub>
 800f86a:	a381      	add	r3, pc, #516	; (adr r3, 800fa70 <_dtoa_r+0x308>)
 800f86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f870:	f7f0 fe7a 	bl	8000568 <__aeabi_dmul>
 800f874:	a380      	add	r3, pc, #512	; (adr r3, 800fa78 <_dtoa_r+0x310>)
 800f876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f87a:	f7f0 fcbf 	bl	80001fc <__adddf3>
 800f87e:	4606      	mov	r6, r0
 800f880:	4628      	mov	r0, r5
 800f882:	460f      	mov	r7, r1
 800f884:	f7f0 fe06 	bl	8000494 <__aeabi_i2d>
 800f888:	a37d      	add	r3, pc, #500	; (adr r3, 800fa80 <_dtoa_r+0x318>)
 800f88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f88e:	f7f0 fe6b 	bl	8000568 <__aeabi_dmul>
 800f892:	4602      	mov	r2, r0
 800f894:	460b      	mov	r3, r1
 800f896:	4630      	mov	r0, r6
 800f898:	4639      	mov	r1, r7
 800f89a:	f7f0 fcaf 	bl	80001fc <__adddf3>
 800f89e:	4606      	mov	r6, r0
 800f8a0:	460f      	mov	r7, r1
 800f8a2:	f7f1 f911 	bl	8000ac8 <__aeabi_d2iz>
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	4682      	mov	sl, r0
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	4630      	mov	r0, r6
 800f8ae:	4639      	mov	r1, r7
 800f8b0:	f7f1 f8cc 	bl	8000a4c <__aeabi_dcmplt>
 800f8b4:	b148      	cbz	r0, 800f8ca <_dtoa_r+0x162>
 800f8b6:	4650      	mov	r0, sl
 800f8b8:	f7f0 fdec 	bl	8000494 <__aeabi_i2d>
 800f8bc:	4632      	mov	r2, r6
 800f8be:	463b      	mov	r3, r7
 800f8c0:	f7f1 f8ba 	bl	8000a38 <__aeabi_dcmpeq>
 800f8c4:	b908      	cbnz	r0, 800f8ca <_dtoa_r+0x162>
 800f8c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f8ca:	f1ba 0f16 	cmp.w	sl, #22
 800f8ce:	d859      	bhi.n	800f984 <_dtoa_r+0x21c>
 800f8d0:	4970      	ldr	r1, [pc, #448]	; (800fa94 <_dtoa_r+0x32c>)
 800f8d2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f8d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8de:	f7f1 f8d3 	bl	8000a88 <__aeabi_dcmpgt>
 800f8e2:	2800      	cmp	r0, #0
 800f8e4:	d050      	beq.n	800f988 <_dtoa_r+0x220>
 800f8e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800f8ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f8f0:	1b5d      	subs	r5, r3, r5
 800f8f2:	f1b5 0801 	subs.w	r8, r5, #1
 800f8f6:	bf49      	itett	mi
 800f8f8:	f1c5 0301 	rsbmi	r3, r5, #1
 800f8fc:	2300      	movpl	r3, #0
 800f8fe:	9305      	strmi	r3, [sp, #20]
 800f900:	f04f 0800 	movmi.w	r8, #0
 800f904:	bf58      	it	pl
 800f906:	9305      	strpl	r3, [sp, #20]
 800f908:	f1ba 0f00 	cmp.w	sl, #0
 800f90c:	db3e      	blt.n	800f98c <_dtoa_r+0x224>
 800f90e:	2300      	movs	r3, #0
 800f910:	44d0      	add	r8, sl
 800f912:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f916:	9307      	str	r3, [sp, #28]
 800f918:	9b06      	ldr	r3, [sp, #24]
 800f91a:	2b09      	cmp	r3, #9
 800f91c:	f200 8090 	bhi.w	800fa40 <_dtoa_r+0x2d8>
 800f920:	2b05      	cmp	r3, #5
 800f922:	bfc4      	itt	gt
 800f924:	3b04      	subgt	r3, #4
 800f926:	9306      	strgt	r3, [sp, #24]
 800f928:	9b06      	ldr	r3, [sp, #24]
 800f92a:	f1a3 0302 	sub.w	r3, r3, #2
 800f92e:	bfcc      	ite	gt
 800f930:	2500      	movgt	r5, #0
 800f932:	2501      	movle	r5, #1
 800f934:	2b03      	cmp	r3, #3
 800f936:	f200 808f 	bhi.w	800fa58 <_dtoa_r+0x2f0>
 800f93a:	e8df f003 	tbb	[pc, r3]
 800f93e:	7f7d      	.short	0x7f7d
 800f940:	7131      	.short	0x7131
 800f942:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800f946:	441d      	add	r5, r3
 800f948:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800f94c:	2820      	cmp	r0, #32
 800f94e:	dd13      	ble.n	800f978 <_dtoa_r+0x210>
 800f950:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800f954:	9b00      	ldr	r3, [sp, #0]
 800f956:	fa08 f800 	lsl.w	r8, r8, r0
 800f95a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f95e:	fa23 f000 	lsr.w	r0, r3, r0
 800f962:	ea48 0000 	orr.w	r0, r8, r0
 800f966:	f7f0 fd85 	bl	8000474 <__aeabi_ui2d>
 800f96a:	2301      	movs	r3, #1
 800f96c:	4682      	mov	sl, r0
 800f96e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800f972:	3d01      	subs	r5, #1
 800f974:	9313      	str	r3, [sp, #76]	; 0x4c
 800f976:	e772      	b.n	800f85e <_dtoa_r+0xf6>
 800f978:	9b00      	ldr	r3, [sp, #0]
 800f97a:	f1c0 0020 	rsb	r0, r0, #32
 800f97e:	fa03 f000 	lsl.w	r0, r3, r0
 800f982:	e7f0      	b.n	800f966 <_dtoa_r+0x1fe>
 800f984:	2301      	movs	r3, #1
 800f986:	e7b1      	b.n	800f8ec <_dtoa_r+0x184>
 800f988:	900f      	str	r0, [sp, #60]	; 0x3c
 800f98a:	e7b0      	b.n	800f8ee <_dtoa_r+0x186>
 800f98c:	9b05      	ldr	r3, [sp, #20]
 800f98e:	eba3 030a 	sub.w	r3, r3, sl
 800f992:	9305      	str	r3, [sp, #20]
 800f994:	f1ca 0300 	rsb	r3, sl, #0
 800f998:	9307      	str	r3, [sp, #28]
 800f99a:	2300      	movs	r3, #0
 800f99c:	930e      	str	r3, [sp, #56]	; 0x38
 800f99e:	e7bb      	b.n	800f918 <_dtoa_r+0x1b0>
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	930a      	str	r3, [sp, #40]	; 0x28
 800f9a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	dd59      	ble.n	800fa5e <_dtoa_r+0x2f6>
 800f9aa:	9302      	str	r3, [sp, #8]
 800f9ac:	4699      	mov	r9, r3
 800f9ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	6072      	str	r2, [r6, #4]
 800f9b4:	2204      	movs	r2, #4
 800f9b6:	f102 0014 	add.w	r0, r2, #20
 800f9ba:	4298      	cmp	r0, r3
 800f9bc:	6871      	ldr	r1, [r6, #4]
 800f9be:	d953      	bls.n	800fa68 <_dtoa_r+0x300>
 800f9c0:	4620      	mov	r0, r4
 800f9c2:	f000 fc99 	bl	80102f8 <_Balloc>
 800f9c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f9c8:	6030      	str	r0, [r6, #0]
 800f9ca:	f1b9 0f0e 	cmp.w	r9, #14
 800f9ce:	f8d3 b000 	ldr.w	fp, [r3]
 800f9d2:	f200 80e6 	bhi.w	800fba2 <_dtoa_r+0x43a>
 800f9d6:	2d00      	cmp	r5, #0
 800f9d8:	f000 80e3 	beq.w	800fba2 <_dtoa_r+0x43a>
 800f9dc:	ed9d 7b00 	vldr	d7, [sp]
 800f9e0:	f1ba 0f00 	cmp.w	sl, #0
 800f9e4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f9e8:	dd74      	ble.n	800fad4 <_dtoa_r+0x36c>
 800f9ea:	4a2a      	ldr	r2, [pc, #168]	; (800fa94 <_dtoa_r+0x32c>)
 800f9ec:	f00a 030f 	and.w	r3, sl, #15
 800f9f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f9f4:	ed93 7b00 	vldr	d7, [r3]
 800f9f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800f9fc:	06f0      	lsls	r0, r6, #27
 800f9fe:	ed8d 7b08 	vstr	d7, [sp, #32]
 800fa02:	d565      	bpl.n	800fad0 <_dtoa_r+0x368>
 800fa04:	4b24      	ldr	r3, [pc, #144]	; (800fa98 <_dtoa_r+0x330>)
 800fa06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fa0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fa0e:	f7f0 fed5 	bl	80007bc <__aeabi_ddiv>
 800fa12:	e9cd 0100 	strd	r0, r1, [sp]
 800fa16:	f006 060f 	and.w	r6, r6, #15
 800fa1a:	2503      	movs	r5, #3
 800fa1c:	4f1e      	ldr	r7, [pc, #120]	; (800fa98 <_dtoa_r+0x330>)
 800fa1e:	e04c      	b.n	800faba <_dtoa_r+0x352>
 800fa20:	2301      	movs	r3, #1
 800fa22:	930a      	str	r3, [sp, #40]	; 0x28
 800fa24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa26:	4453      	add	r3, sl
 800fa28:	f103 0901 	add.w	r9, r3, #1
 800fa2c:	9302      	str	r3, [sp, #8]
 800fa2e:	464b      	mov	r3, r9
 800fa30:	2b01      	cmp	r3, #1
 800fa32:	bfb8      	it	lt
 800fa34:	2301      	movlt	r3, #1
 800fa36:	e7ba      	b.n	800f9ae <_dtoa_r+0x246>
 800fa38:	2300      	movs	r3, #0
 800fa3a:	e7b2      	b.n	800f9a2 <_dtoa_r+0x23a>
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	e7f0      	b.n	800fa22 <_dtoa_r+0x2ba>
 800fa40:	2501      	movs	r5, #1
 800fa42:	2300      	movs	r3, #0
 800fa44:	9306      	str	r3, [sp, #24]
 800fa46:	950a      	str	r5, [sp, #40]	; 0x28
 800fa48:	f04f 33ff 	mov.w	r3, #4294967295
 800fa4c:	9302      	str	r3, [sp, #8]
 800fa4e:	4699      	mov	r9, r3
 800fa50:	2200      	movs	r2, #0
 800fa52:	2312      	movs	r3, #18
 800fa54:	920b      	str	r2, [sp, #44]	; 0x2c
 800fa56:	e7aa      	b.n	800f9ae <_dtoa_r+0x246>
 800fa58:	2301      	movs	r3, #1
 800fa5a:	930a      	str	r3, [sp, #40]	; 0x28
 800fa5c:	e7f4      	b.n	800fa48 <_dtoa_r+0x2e0>
 800fa5e:	2301      	movs	r3, #1
 800fa60:	9302      	str	r3, [sp, #8]
 800fa62:	4699      	mov	r9, r3
 800fa64:	461a      	mov	r2, r3
 800fa66:	e7f5      	b.n	800fa54 <_dtoa_r+0x2ec>
 800fa68:	3101      	adds	r1, #1
 800fa6a:	6071      	str	r1, [r6, #4]
 800fa6c:	0052      	lsls	r2, r2, #1
 800fa6e:	e7a2      	b.n	800f9b6 <_dtoa_r+0x24e>
 800fa70:	636f4361 	.word	0x636f4361
 800fa74:	3fd287a7 	.word	0x3fd287a7
 800fa78:	8b60c8b3 	.word	0x8b60c8b3
 800fa7c:	3fc68a28 	.word	0x3fc68a28
 800fa80:	509f79fb 	.word	0x509f79fb
 800fa84:	3fd34413 	.word	0x3fd34413
 800fa88:	7ff00000 	.word	0x7ff00000
 800fa8c:	08010a39 	.word	0x08010a39
 800fa90:	3ff80000 	.word	0x3ff80000
 800fa94:	08010a70 	.word	0x08010a70
 800fa98:	08010a48 	.word	0x08010a48
 800fa9c:	08010a43 	.word	0x08010a43
 800faa0:	07f1      	lsls	r1, r6, #31
 800faa2:	d508      	bpl.n	800fab6 <_dtoa_r+0x34e>
 800faa4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800faa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800faac:	f7f0 fd5c 	bl	8000568 <__aeabi_dmul>
 800fab0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fab4:	3501      	adds	r5, #1
 800fab6:	1076      	asrs	r6, r6, #1
 800fab8:	3708      	adds	r7, #8
 800faba:	2e00      	cmp	r6, #0
 800fabc:	d1f0      	bne.n	800faa0 <_dtoa_r+0x338>
 800fabe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fac2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fac6:	f7f0 fe79 	bl	80007bc <__aeabi_ddiv>
 800faca:	e9cd 0100 	strd	r0, r1, [sp]
 800face:	e01a      	b.n	800fb06 <_dtoa_r+0x39e>
 800fad0:	2502      	movs	r5, #2
 800fad2:	e7a3      	b.n	800fa1c <_dtoa_r+0x2b4>
 800fad4:	f000 80a0 	beq.w	800fc18 <_dtoa_r+0x4b0>
 800fad8:	f1ca 0600 	rsb	r6, sl, #0
 800fadc:	4b9f      	ldr	r3, [pc, #636]	; (800fd5c <_dtoa_r+0x5f4>)
 800fade:	4fa0      	ldr	r7, [pc, #640]	; (800fd60 <_dtoa_r+0x5f8>)
 800fae0:	f006 020f 	and.w	r2, r6, #15
 800fae4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800faf0:	f7f0 fd3a 	bl	8000568 <__aeabi_dmul>
 800faf4:	e9cd 0100 	strd	r0, r1, [sp]
 800faf8:	1136      	asrs	r6, r6, #4
 800fafa:	2300      	movs	r3, #0
 800fafc:	2502      	movs	r5, #2
 800fafe:	2e00      	cmp	r6, #0
 800fb00:	d17f      	bne.n	800fc02 <_dtoa_r+0x49a>
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d1e1      	bne.n	800faca <_dtoa_r+0x362>
 800fb06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	f000 8087 	beq.w	800fc1c <_dtoa_r+0x4b4>
 800fb0e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fb12:	2200      	movs	r2, #0
 800fb14:	4b93      	ldr	r3, [pc, #588]	; (800fd64 <_dtoa_r+0x5fc>)
 800fb16:	4630      	mov	r0, r6
 800fb18:	4639      	mov	r1, r7
 800fb1a:	f7f0 ff97 	bl	8000a4c <__aeabi_dcmplt>
 800fb1e:	2800      	cmp	r0, #0
 800fb20:	d07c      	beq.n	800fc1c <_dtoa_r+0x4b4>
 800fb22:	f1b9 0f00 	cmp.w	r9, #0
 800fb26:	d079      	beq.n	800fc1c <_dtoa_r+0x4b4>
 800fb28:	9b02      	ldr	r3, [sp, #8]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	dd35      	ble.n	800fb9a <_dtoa_r+0x432>
 800fb2e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800fb32:	9308      	str	r3, [sp, #32]
 800fb34:	4639      	mov	r1, r7
 800fb36:	2200      	movs	r2, #0
 800fb38:	4b8b      	ldr	r3, [pc, #556]	; (800fd68 <_dtoa_r+0x600>)
 800fb3a:	4630      	mov	r0, r6
 800fb3c:	f7f0 fd14 	bl	8000568 <__aeabi_dmul>
 800fb40:	e9cd 0100 	strd	r0, r1, [sp]
 800fb44:	9f02      	ldr	r7, [sp, #8]
 800fb46:	3501      	adds	r5, #1
 800fb48:	4628      	mov	r0, r5
 800fb4a:	f7f0 fca3 	bl	8000494 <__aeabi_i2d>
 800fb4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb52:	f7f0 fd09 	bl	8000568 <__aeabi_dmul>
 800fb56:	2200      	movs	r2, #0
 800fb58:	4b84      	ldr	r3, [pc, #528]	; (800fd6c <_dtoa_r+0x604>)
 800fb5a:	f7f0 fb4f 	bl	80001fc <__adddf3>
 800fb5e:	4605      	mov	r5, r0
 800fb60:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800fb64:	2f00      	cmp	r7, #0
 800fb66:	d15d      	bne.n	800fc24 <_dtoa_r+0x4bc>
 800fb68:	2200      	movs	r2, #0
 800fb6a:	4b81      	ldr	r3, [pc, #516]	; (800fd70 <_dtoa_r+0x608>)
 800fb6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb70:	f7f0 fb42 	bl	80001f8 <__aeabi_dsub>
 800fb74:	462a      	mov	r2, r5
 800fb76:	4633      	mov	r3, r6
 800fb78:	e9cd 0100 	strd	r0, r1, [sp]
 800fb7c:	f7f0 ff84 	bl	8000a88 <__aeabi_dcmpgt>
 800fb80:	2800      	cmp	r0, #0
 800fb82:	f040 8288 	bne.w	8010096 <_dtoa_r+0x92e>
 800fb86:	462a      	mov	r2, r5
 800fb88:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800fb8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb90:	f7f0 ff5c 	bl	8000a4c <__aeabi_dcmplt>
 800fb94:	2800      	cmp	r0, #0
 800fb96:	f040 827c 	bne.w	8010092 <_dtoa_r+0x92a>
 800fb9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fb9e:	e9cd 2300 	strd	r2, r3, [sp]
 800fba2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	f2c0 8150 	blt.w	800fe4a <_dtoa_r+0x6e2>
 800fbaa:	f1ba 0f0e 	cmp.w	sl, #14
 800fbae:	f300 814c 	bgt.w	800fe4a <_dtoa_r+0x6e2>
 800fbb2:	4b6a      	ldr	r3, [pc, #424]	; (800fd5c <_dtoa_r+0x5f4>)
 800fbb4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fbb8:	ed93 7b00 	vldr	d7, [r3]
 800fbbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fbc4:	f280 80d8 	bge.w	800fd78 <_dtoa_r+0x610>
 800fbc8:	f1b9 0f00 	cmp.w	r9, #0
 800fbcc:	f300 80d4 	bgt.w	800fd78 <_dtoa_r+0x610>
 800fbd0:	f040 825e 	bne.w	8010090 <_dtoa_r+0x928>
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	4b66      	ldr	r3, [pc, #408]	; (800fd70 <_dtoa_r+0x608>)
 800fbd8:	ec51 0b17 	vmov	r0, r1, d7
 800fbdc:	f7f0 fcc4 	bl	8000568 <__aeabi_dmul>
 800fbe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbe4:	f7f0 ff46 	bl	8000a74 <__aeabi_dcmpge>
 800fbe8:	464f      	mov	r7, r9
 800fbea:	464e      	mov	r6, r9
 800fbec:	2800      	cmp	r0, #0
 800fbee:	f040 8234 	bne.w	801005a <_dtoa_r+0x8f2>
 800fbf2:	2331      	movs	r3, #49	; 0x31
 800fbf4:	f10b 0501 	add.w	r5, fp, #1
 800fbf8:	f88b 3000 	strb.w	r3, [fp]
 800fbfc:	f10a 0a01 	add.w	sl, sl, #1
 800fc00:	e22f      	b.n	8010062 <_dtoa_r+0x8fa>
 800fc02:	07f2      	lsls	r2, r6, #31
 800fc04:	d505      	bpl.n	800fc12 <_dtoa_r+0x4aa>
 800fc06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc0a:	f7f0 fcad 	bl	8000568 <__aeabi_dmul>
 800fc0e:	3501      	adds	r5, #1
 800fc10:	2301      	movs	r3, #1
 800fc12:	1076      	asrs	r6, r6, #1
 800fc14:	3708      	adds	r7, #8
 800fc16:	e772      	b.n	800fafe <_dtoa_r+0x396>
 800fc18:	2502      	movs	r5, #2
 800fc1a:	e774      	b.n	800fb06 <_dtoa_r+0x39e>
 800fc1c:	f8cd a020 	str.w	sl, [sp, #32]
 800fc20:	464f      	mov	r7, r9
 800fc22:	e791      	b.n	800fb48 <_dtoa_r+0x3e0>
 800fc24:	4b4d      	ldr	r3, [pc, #308]	; (800fd5c <_dtoa_r+0x5f4>)
 800fc26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fc2a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800fc2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d047      	beq.n	800fcc4 <_dtoa_r+0x55c>
 800fc34:	4602      	mov	r2, r0
 800fc36:	460b      	mov	r3, r1
 800fc38:	2000      	movs	r0, #0
 800fc3a:	494e      	ldr	r1, [pc, #312]	; (800fd74 <_dtoa_r+0x60c>)
 800fc3c:	f7f0 fdbe 	bl	80007bc <__aeabi_ddiv>
 800fc40:	462a      	mov	r2, r5
 800fc42:	4633      	mov	r3, r6
 800fc44:	f7f0 fad8 	bl	80001f8 <__aeabi_dsub>
 800fc48:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fc4c:	465d      	mov	r5, fp
 800fc4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc52:	f7f0 ff39 	bl	8000ac8 <__aeabi_d2iz>
 800fc56:	4606      	mov	r6, r0
 800fc58:	f7f0 fc1c 	bl	8000494 <__aeabi_i2d>
 800fc5c:	4602      	mov	r2, r0
 800fc5e:	460b      	mov	r3, r1
 800fc60:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc64:	f7f0 fac8 	bl	80001f8 <__aeabi_dsub>
 800fc68:	3630      	adds	r6, #48	; 0x30
 800fc6a:	f805 6b01 	strb.w	r6, [r5], #1
 800fc6e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fc72:	e9cd 0100 	strd	r0, r1, [sp]
 800fc76:	f7f0 fee9 	bl	8000a4c <__aeabi_dcmplt>
 800fc7a:	2800      	cmp	r0, #0
 800fc7c:	d163      	bne.n	800fd46 <_dtoa_r+0x5de>
 800fc7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc82:	2000      	movs	r0, #0
 800fc84:	4937      	ldr	r1, [pc, #220]	; (800fd64 <_dtoa_r+0x5fc>)
 800fc86:	f7f0 fab7 	bl	80001f8 <__aeabi_dsub>
 800fc8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fc8e:	f7f0 fedd 	bl	8000a4c <__aeabi_dcmplt>
 800fc92:	2800      	cmp	r0, #0
 800fc94:	f040 80b7 	bne.w	800fe06 <_dtoa_r+0x69e>
 800fc98:	eba5 030b 	sub.w	r3, r5, fp
 800fc9c:	429f      	cmp	r7, r3
 800fc9e:	f77f af7c 	ble.w	800fb9a <_dtoa_r+0x432>
 800fca2:	2200      	movs	r2, #0
 800fca4:	4b30      	ldr	r3, [pc, #192]	; (800fd68 <_dtoa_r+0x600>)
 800fca6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fcaa:	f7f0 fc5d 	bl	8000568 <__aeabi_dmul>
 800fcae:	2200      	movs	r2, #0
 800fcb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fcb4:	4b2c      	ldr	r3, [pc, #176]	; (800fd68 <_dtoa_r+0x600>)
 800fcb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fcba:	f7f0 fc55 	bl	8000568 <__aeabi_dmul>
 800fcbe:	e9cd 0100 	strd	r0, r1, [sp]
 800fcc2:	e7c4      	b.n	800fc4e <_dtoa_r+0x4e6>
 800fcc4:	462a      	mov	r2, r5
 800fcc6:	4633      	mov	r3, r6
 800fcc8:	f7f0 fc4e 	bl	8000568 <__aeabi_dmul>
 800fccc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fcd0:	eb0b 0507 	add.w	r5, fp, r7
 800fcd4:	465e      	mov	r6, fp
 800fcd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fcda:	f7f0 fef5 	bl	8000ac8 <__aeabi_d2iz>
 800fcde:	4607      	mov	r7, r0
 800fce0:	f7f0 fbd8 	bl	8000494 <__aeabi_i2d>
 800fce4:	3730      	adds	r7, #48	; 0x30
 800fce6:	4602      	mov	r2, r0
 800fce8:	460b      	mov	r3, r1
 800fcea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fcee:	f7f0 fa83 	bl	80001f8 <__aeabi_dsub>
 800fcf2:	f806 7b01 	strb.w	r7, [r6], #1
 800fcf6:	42ae      	cmp	r6, r5
 800fcf8:	e9cd 0100 	strd	r0, r1, [sp]
 800fcfc:	f04f 0200 	mov.w	r2, #0
 800fd00:	d126      	bne.n	800fd50 <_dtoa_r+0x5e8>
 800fd02:	4b1c      	ldr	r3, [pc, #112]	; (800fd74 <_dtoa_r+0x60c>)
 800fd04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fd08:	f7f0 fa78 	bl	80001fc <__adddf3>
 800fd0c:	4602      	mov	r2, r0
 800fd0e:	460b      	mov	r3, r1
 800fd10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fd14:	f7f0 feb8 	bl	8000a88 <__aeabi_dcmpgt>
 800fd18:	2800      	cmp	r0, #0
 800fd1a:	d174      	bne.n	800fe06 <_dtoa_r+0x69e>
 800fd1c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fd20:	2000      	movs	r0, #0
 800fd22:	4914      	ldr	r1, [pc, #80]	; (800fd74 <_dtoa_r+0x60c>)
 800fd24:	f7f0 fa68 	bl	80001f8 <__aeabi_dsub>
 800fd28:	4602      	mov	r2, r0
 800fd2a:	460b      	mov	r3, r1
 800fd2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fd30:	f7f0 fe8c 	bl	8000a4c <__aeabi_dcmplt>
 800fd34:	2800      	cmp	r0, #0
 800fd36:	f43f af30 	beq.w	800fb9a <_dtoa_r+0x432>
 800fd3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fd3e:	2b30      	cmp	r3, #48	; 0x30
 800fd40:	f105 32ff 	add.w	r2, r5, #4294967295
 800fd44:	d002      	beq.n	800fd4c <_dtoa_r+0x5e4>
 800fd46:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fd4a:	e04a      	b.n	800fde2 <_dtoa_r+0x67a>
 800fd4c:	4615      	mov	r5, r2
 800fd4e:	e7f4      	b.n	800fd3a <_dtoa_r+0x5d2>
 800fd50:	4b05      	ldr	r3, [pc, #20]	; (800fd68 <_dtoa_r+0x600>)
 800fd52:	f7f0 fc09 	bl	8000568 <__aeabi_dmul>
 800fd56:	e9cd 0100 	strd	r0, r1, [sp]
 800fd5a:	e7bc      	b.n	800fcd6 <_dtoa_r+0x56e>
 800fd5c:	08010a70 	.word	0x08010a70
 800fd60:	08010a48 	.word	0x08010a48
 800fd64:	3ff00000 	.word	0x3ff00000
 800fd68:	40240000 	.word	0x40240000
 800fd6c:	401c0000 	.word	0x401c0000
 800fd70:	40140000 	.word	0x40140000
 800fd74:	3fe00000 	.word	0x3fe00000
 800fd78:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fd7c:	465d      	mov	r5, fp
 800fd7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fd82:	4630      	mov	r0, r6
 800fd84:	4639      	mov	r1, r7
 800fd86:	f7f0 fd19 	bl	80007bc <__aeabi_ddiv>
 800fd8a:	f7f0 fe9d 	bl	8000ac8 <__aeabi_d2iz>
 800fd8e:	4680      	mov	r8, r0
 800fd90:	f7f0 fb80 	bl	8000494 <__aeabi_i2d>
 800fd94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fd98:	f7f0 fbe6 	bl	8000568 <__aeabi_dmul>
 800fd9c:	4602      	mov	r2, r0
 800fd9e:	460b      	mov	r3, r1
 800fda0:	4630      	mov	r0, r6
 800fda2:	4639      	mov	r1, r7
 800fda4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800fda8:	f7f0 fa26 	bl	80001f8 <__aeabi_dsub>
 800fdac:	f805 6b01 	strb.w	r6, [r5], #1
 800fdb0:	eba5 060b 	sub.w	r6, r5, fp
 800fdb4:	45b1      	cmp	r9, r6
 800fdb6:	4602      	mov	r2, r0
 800fdb8:	460b      	mov	r3, r1
 800fdba:	d139      	bne.n	800fe30 <_dtoa_r+0x6c8>
 800fdbc:	f7f0 fa1e 	bl	80001fc <__adddf3>
 800fdc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fdc4:	4606      	mov	r6, r0
 800fdc6:	460f      	mov	r7, r1
 800fdc8:	f7f0 fe5e 	bl	8000a88 <__aeabi_dcmpgt>
 800fdcc:	b9c8      	cbnz	r0, 800fe02 <_dtoa_r+0x69a>
 800fdce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fdd2:	4630      	mov	r0, r6
 800fdd4:	4639      	mov	r1, r7
 800fdd6:	f7f0 fe2f 	bl	8000a38 <__aeabi_dcmpeq>
 800fdda:	b110      	cbz	r0, 800fde2 <_dtoa_r+0x67a>
 800fddc:	f018 0f01 	tst.w	r8, #1
 800fde0:	d10f      	bne.n	800fe02 <_dtoa_r+0x69a>
 800fde2:	9904      	ldr	r1, [sp, #16]
 800fde4:	4620      	mov	r0, r4
 800fde6:	f000 fabb 	bl	8010360 <_Bfree>
 800fdea:	2300      	movs	r3, #0
 800fdec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fdee:	702b      	strb	r3, [r5, #0]
 800fdf0:	f10a 0301 	add.w	r3, sl, #1
 800fdf4:	6013      	str	r3, [r2, #0]
 800fdf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	f000 8241 	beq.w	8010280 <_dtoa_r+0xb18>
 800fdfe:	601d      	str	r5, [r3, #0]
 800fe00:	e23e      	b.n	8010280 <_dtoa_r+0xb18>
 800fe02:	f8cd a020 	str.w	sl, [sp, #32]
 800fe06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fe0a:	2a39      	cmp	r2, #57	; 0x39
 800fe0c:	f105 33ff 	add.w	r3, r5, #4294967295
 800fe10:	d108      	bne.n	800fe24 <_dtoa_r+0x6bc>
 800fe12:	459b      	cmp	fp, r3
 800fe14:	d10a      	bne.n	800fe2c <_dtoa_r+0x6c4>
 800fe16:	9b08      	ldr	r3, [sp, #32]
 800fe18:	3301      	adds	r3, #1
 800fe1a:	9308      	str	r3, [sp, #32]
 800fe1c:	2330      	movs	r3, #48	; 0x30
 800fe1e:	f88b 3000 	strb.w	r3, [fp]
 800fe22:	465b      	mov	r3, fp
 800fe24:	781a      	ldrb	r2, [r3, #0]
 800fe26:	3201      	adds	r2, #1
 800fe28:	701a      	strb	r2, [r3, #0]
 800fe2a:	e78c      	b.n	800fd46 <_dtoa_r+0x5de>
 800fe2c:	461d      	mov	r5, r3
 800fe2e:	e7ea      	b.n	800fe06 <_dtoa_r+0x69e>
 800fe30:	2200      	movs	r2, #0
 800fe32:	4b9b      	ldr	r3, [pc, #620]	; (80100a0 <_dtoa_r+0x938>)
 800fe34:	f7f0 fb98 	bl	8000568 <__aeabi_dmul>
 800fe38:	2200      	movs	r2, #0
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	4606      	mov	r6, r0
 800fe3e:	460f      	mov	r7, r1
 800fe40:	f7f0 fdfa 	bl	8000a38 <__aeabi_dcmpeq>
 800fe44:	2800      	cmp	r0, #0
 800fe46:	d09a      	beq.n	800fd7e <_dtoa_r+0x616>
 800fe48:	e7cb      	b.n	800fde2 <_dtoa_r+0x67a>
 800fe4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe4c:	2a00      	cmp	r2, #0
 800fe4e:	f000 808b 	beq.w	800ff68 <_dtoa_r+0x800>
 800fe52:	9a06      	ldr	r2, [sp, #24]
 800fe54:	2a01      	cmp	r2, #1
 800fe56:	dc6e      	bgt.n	800ff36 <_dtoa_r+0x7ce>
 800fe58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fe5a:	2a00      	cmp	r2, #0
 800fe5c:	d067      	beq.n	800ff2e <_dtoa_r+0x7c6>
 800fe5e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fe62:	9f07      	ldr	r7, [sp, #28]
 800fe64:	9d05      	ldr	r5, [sp, #20]
 800fe66:	9a05      	ldr	r2, [sp, #20]
 800fe68:	2101      	movs	r1, #1
 800fe6a:	441a      	add	r2, r3
 800fe6c:	4620      	mov	r0, r4
 800fe6e:	9205      	str	r2, [sp, #20]
 800fe70:	4498      	add	r8, r3
 800fe72:	f000 fb15 	bl	80104a0 <__i2b>
 800fe76:	4606      	mov	r6, r0
 800fe78:	2d00      	cmp	r5, #0
 800fe7a:	dd0c      	ble.n	800fe96 <_dtoa_r+0x72e>
 800fe7c:	f1b8 0f00 	cmp.w	r8, #0
 800fe80:	dd09      	ble.n	800fe96 <_dtoa_r+0x72e>
 800fe82:	4545      	cmp	r5, r8
 800fe84:	9a05      	ldr	r2, [sp, #20]
 800fe86:	462b      	mov	r3, r5
 800fe88:	bfa8      	it	ge
 800fe8a:	4643      	movge	r3, r8
 800fe8c:	1ad2      	subs	r2, r2, r3
 800fe8e:	9205      	str	r2, [sp, #20]
 800fe90:	1aed      	subs	r5, r5, r3
 800fe92:	eba8 0803 	sub.w	r8, r8, r3
 800fe96:	9b07      	ldr	r3, [sp, #28]
 800fe98:	b1eb      	cbz	r3, 800fed6 <_dtoa_r+0x76e>
 800fe9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d067      	beq.n	800ff70 <_dtoa_r+0x808>
 800fea0:	b18f      	cbz	r7, 800fec6 <_dtoa_r+0x75e>
 800fea2:	4631      	mov	r1, r6
 800fea4:	463a      	mov	r2, r7
 800fea6:	4620      	mov	r0, r4
 800fea8:	f000 fb9a 	bl	80105e0 <__pow5mult>
 800feac:	9a04      	ldr	r2, [sp, #16]
 800feae:	4601      	mov	r1, r0
 800feb0:	4606      	mov	r6, r0
 800feb2:	4620      	mov	r0, r4
 800feb4:	f000 fafd 	bl	80104b2 <__multiply>
 800feb8:	9904      	ldr	r1, [sp, #16]
 800feba:	9008      	str	r0, [sp, #32]
 800febc:	4620      	mov	r0, r4
 800febe:	f000 fa4f 	bl	8010360 <_Bfree>
 800fec2:	9b08      	ldr	r3, [sp, #32]
 800fec4:	9304      	str	r3, [sp, #16]
 800fec6:	9b07      	ldr	r3, [sp, #28]
 800fec8:	1bda      	subs	r2, r3, r7
 800feca:	d004      	beq.n	800fed6 <_dtoa_r+0x76e>
 800fecc:	9904      	ldr	r1, [sp, #16]
 800fece:	4620      	mov	r0, r4
 800fed0:	f000 fb86 	bl	80105e0 <__pow5mult>
 800fed4:	9004      	str	r0, [sp, #16]
 800fed6:	2101      	movs	r1, #1
 800fed8:	4620      	mov	r0, r4
 800feda:	f000 fae1 	bl	80104a0 <__i2b>
 800fede:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fee0:	4607      	mov	r7, r0
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	f000 81d0 	beq.w	8010288 <_dtoa_r+0xb20>
 800fee8:	461a      	mov	r2, r3
 800feea:	4601      	mov	r1, r0
 800feec:	4620      	mov	r0, r4
 800feee:	f000 fb77 	bl	80105e0 <__pow5mult>
 800fef2:	9b06      	ldr	r3, [sp, #24]
 800fef4:	2b01      	cmp	r3, #1
 800fef6:	4607      	mov	r7, r0
 800fef8:	dc40      	bgt.n	800ff7c <_dtoa_r+0x814>
 800fefa:	9b00      	ldr	r3, [sp, #0]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d139      	bne.n	800ff74 <_dtoa_r+0x80c>
 800ff00:	9b01      	ldr	r3, [sp, #4]
 800ff02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d136      	bne.n	800ff78 <_dtoa_r+0x810>
 800ff0a:	9b01      	ldr	r3, [sp, #4]
 800ff0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ff10:	0d1b      	lsrs	r3, r3, #20
 800ff12:	051b      	lsls	r3, r3, #20
 800ff14:	b12b      	cbz	r3, 800ff22 <_dtoa_r+0x7ba>
 800ff16:	9b05      	ldr	r3, [sp, #20]
 800ff18:	3301      	adds	r3, #1
 800ff1a:	9305      	str	r3, [sp, #20]
 800ff1c:	f108 0801 	add.w	r8, r8, #1
 800ff20:	2301      	movs	r3, #1
 800ff22:	9307      	str	r3, [sp, #28]
 800ff24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d12a      	bne.n	800ff80 <_dtoa_r+0x818>
 800ff2a:	2001      	movs	r0, #1
 800ff2c:	e030      	b.n	800ff90 <_dtoa_r+0x828>
 800ff2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ff30:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ff34:	e795      	b.n	800fe62 <_dtoa_r+0x6fa>
 800ff36:	9b07      	ldr	r3, [sp, #28]
 800ff38:	f109 37ff 	add.w	r7, r9, #4294967295
 800ff3c:	42bb      	cmp	r3, r7
 800ff3e:	bfbf      	itttt	lt
 800ff40:	9b07      	ldrlt	r3, [sp, #28]
 800ff42:	9707      	strlt	r7, [sp, #28]
 800ff44:	1afa      	sublt	r2, r7, r3
 800ff46:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ff48:	bfbb      	ittet	lt
 800ff4a:	189b      	addlt	r3, r3, r2
 800ff4c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ff4e:	1bdf      	subge	r7, r3, r7
 800ff50:	2700      	movlt	r7, #0
 800ff52:	f1b9 0f00 	cmp.w	r9, #0
 800ff56:	bfb5      	itete	lt
 800ff58:	9b05      	ldrlt	r3, [sp, #20]
 800ff5a:	9d05      	ldrge	r5, [sp, #20]
 800ff5c:	eba3 0509 	sublt.w	r5, r3, r9
 800ff60:	464b      	movge	r3, r9
 800ff62:	bfb8      	it	lt
 800ff64:	2300      	movlt	r3, #0
 800ff66:	e77e      	b.n	800fe66 <_dtoa_r+0x6fe>
 800ff68:	9f07      	ldr	r7, [sp, #28]
 800ff6a:	9d05      	ldr	r5, [sp, #20]
 800ff6c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ff6e:	e783      	b.n	800fe78 <_dtoa_r+0x710>
 800ff70:	9a07      	ldr	r2, [sp, #28]
 800ff72:	e7ab      	b.n	800fecc <_dtoa_r+0x764>
 800ff74:	2300      	movs	r3, #0
 800ff76:	e7d4      	b.n	800ff22 <_dtoa_r+0x7ba>
 800ff78:	9b00      	ldr	r3, [sp, #0]
 800ff7a:	e7d2      	b.n	800ff22 <_dtoa_r+0x7ba>
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	9307      	str	r3, [sp, #28]
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ff86:	6918      	ldr	r0, [r3, #16]
 800ff88:	f000 fa3c 	bl	8010404 <__hi0bits>
 800ff8c:	f1c0 0020 	rsb	r0, r0, #32
 800ff90:	4440      	add	r0, r8
 800ff92:	f010 001f 	ands.w	r0, r0, #31
 800ff96:	d047      	beq.n	8010028 <_dtoa_r+0x8c0>
 800ff98:	f1c0 0320 	rsb	r3, r0, #32
 800ff9c:	2b04      	cmp	r3, #4
 800ff9e:	dd3b      	ble.n	8010018 <_dtoa_r+0x8b0>
 800ffa0:	9b05      	ldr	r3, [sp, #20]
 800ffa2:	f1c0 001c 	rsb	r0, r0, #28
 800ffa6:	4403      	add	r3, r0
 800ffa8:	9305      	str	r3, [sp, #20]
 800ffaa:	4405      	add	r5, r0
 800ffac:	4480      	add	r8, r0
 800ffae:	9b05      	ldr	r3, [sp, #20]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	dd05      	ble.n	800ffc0 <_dtoa_r+0x858>
 800ffb4:	461a      	mov	r2, r3
 800ffb6:	9904      	ldr	r1, [sp, #16]
 800ffb8:	4620      	mov	r0, r4
 800ffba:	f000 fb5f 	bl	801067c <__lshift>
 800ffbe:	9004      	str	r0, [sp, #16]
 800ffc0:	f1b8 0f00 	cmp.w	r8, #0
 800ffc4:	dd05      	ble.n	800ffd2 <_dtoa_r+0x86a>
 800ffc6:	4639      	mov	r1, r7
 800ffc8:	4642      	mov	r2, r8
 800ffca:	4620      	mov	r0, r4
 800ffcc:	f000 fb56 	bl	801067c <__lshift>
 800ffd0:	4607      	mov	r7, r0
 800ffd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ffd4:	b353      	cbz	r3, 801002c <_dtoa_r+0x8c4>
 800ffd6:	4639      	mov	r1, r7
 800ffd8:	9804      	ldr	r0, [sp, #16]
 800ffda:	f000 fba3 	bl	8010724 <__mcmp>
 800ffde:	2800      	cmp	r0, #0
 800ffe0:	da24      	bge.n	801002c <_dtoa_r+0x8c4>
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	220a      	movs	r2, #10
 800ffe6:	9904      	ldr	r1, [sp, #16]
 800ffe8:	4620      	mov	r0, r4
 800ffea:	f000 f9d0 	bl	801038e <__multadd>
 800ffee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fff0:	9004      	str	r0, [sp, #16]
 800fff2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	f000 814d 	beq.w	8010296 <_dtoa_r+0xb2e>
 800fffc:	2300      	movs	r3, #0
 800fffe:	4631      	mov	r1, r6
 8010000:	220a      	movs	r2, #10
 8010002:	4620      	mov	r0, r4
 8010004:	f000 f9c3 	bl	801038e <__multadd>
 8010008:	9b02      	ldr	r3, [sp, #8]
 801000a:	2b00      	cmp	r3, #0
 801000c:	4606      	mov	r6, r0
 801000e:	dc4f      	bgt.n	80100b0 <_dtoa_r+0x948>
 8010010:	9b06      	ldr	r3, [sp, #24]
 8010012:	2b02      	cmp	r3, #2
 8010014:	dd4c      	ble.n	80100b0 <_dtoa_r+0x948>
 8010016:	e011      	b.n	801003c <_dtoa_r+0x8d4>
 8010018:	d0c9      	beq.n	800ffae <_dtoa_r+0x846>
 801001a:	9a05      	ldr	r2, [sp, #20]
 801001c:	331c      	adds	r3, #28
 801001e:	441a      	add	r2, r3
 8010020:	9205      	str	r2, [sp, #20]
 8010022:	441d      	add	r5, r3
 8010024:	4498      	add	r8, r3
 8010026:	e7c2      	b.n	800ffae <_dtoa_r+0x846>
 8010028:	4603      	mov	r3, r0
 801002a:	e7f6      	b.n	801001a <_dtoa_r+0x8b2>
 801002c:	f1b9 0f00 	cmp.w	r9, #0
 8010030:	dc38      	bgt.n	80100a4 <_dtoa_r+0x93c>
 8010032:	9b06      	ldr	r3, [sp, #24]
 8010034:	2b02      	cmp	r3, #2
 8010036:	dd35      	ble.n	80100a4 <_dtoa_r+0x93c>
 8010038:	f8cd 9008 	str.w	r9, [sp, #8]
 801003c:	9b02      	ldr	r3, [sp, #8]
 801003e:	b963      	cbnz	r3, 801005a <_dtoa_r+0x8f2>
 8010040:	4639      	mov	r1, r7
 8010042:	2205      	movs	r2, #5
 8010044:	4620      	mov	r0, r4
 8010046:	f000 f9a2 	bl	801038e <__multadd>
 801004a:	4601      	mov	r1, r0
 801004c:	4607      	mov	r7, r0
 801004e:	9804      	ldr	r0, [sp, #16]
 8010050:	f000 fb68 	bl	8010724 <__mcmp>
 8010054:	2800      	cmp	r0, #0
 8010056:	f73f adcc 	bgt.w	800fbf2 <_dtoa_r+0x48a>
 801005a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801005c:	465d      	mov	r5, fp
 801005e:	ea6f 0a03 	mvn.w	sl, r3
 8010062:	f04f 0900 	mov.w	r9, #0
 8010066:	4639      	mov	r1, r7
 8010068:	4620      	mov	r0, r4
 801006a:	f000 f979 	bl	8010360 <_Bfree>
 801006e:	2e00      	cmp	r6, #0
 8010070:	f43f aeb7 	beq.w	800fde2 <_dtoa_r+0x67a>
 8010074:	f1b9 0f00 	cmp.w	r9, #0
 8010078:	d005      	beq.n	8010086 <_dtoa_r+0x91e>
 801007a:	45b1      	cmp	r9, r6
 801007c:	d003      	beq.n	8010086 <_dtoa_r+0x91e>
 801007e:	4649      	mov	r1, r9
 8010080:	4620      	mov	r0, r4
 8010082:	f000 f96d 	bl	8010360 <_Bfree>
 8010086:	4631      	mov	r1, r6
 8010088:	4620      	mov	r0, r4
 801008a:	f000 f969 	bl	8010360 <_Bfree>
 801008e:	e6a8      	b.n	800fde2 <_dtoa_r+0x67a>
 8010090:	2700      	movs	r7, #0
 8010092:	463e      	mov	r6, r7
 8010094:	e7e1      	b.n	801005a <_dtoa_r+0x8f2>
 8010096:	f8dd a020 	ldr.w	sl, [sp, #32]
 801009a:	463e      	mov	r6, r7
 801009c:	e5a9      	b.n	800fbf2 <_dtoa_r+0x48a>
 801009e:	bf00      	nop
 80100a0:	40240000 	.word	0x40240000
 80100a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100a6:	f8cd 9008 	str.w	r9, [sp, #8]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	f000 80fa 	beq.w	80102a4 <_dtoa_r+0xb3c>
 80100b0:	2d00      	cmp	r5, #0
 80100b2:	dd05      	ble.n	80100c0 <_dtoa_r+0x958>
 80100b4:	4631      	mov	r1, r6
 80100b6:	462a      	mov	r2, r5
 80100b8:	4620      	mov	r0, r4
 80100ba:	f000 fadf 	bl	801067c <__lshift>
 80100be:	4606      	mov	r6, r0
 80100c0:	9b07      	ldr	r3, [sp, #28]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d04c      	beq.n	8010160 <_dtoa_r+0x9f8>
 80100c6:	6871      	ldr	r1, [r6, #4]
 80100c8:	4620      	mov	r0, r4
 80100ca:	f000 f915 	bl	80102f8 <_Balloc>
 80100ce:	6932      	ldr	r2, [r6, #16]
 80100d0:	3202      	adds	r2, #2
 80100d2:	4605      	mov	r5, r0
 80100d4:	0092      	lsls	r2, r2, #2
 80100d6:	f106 010c 	add.w	r1, r6, #12
 80100da:	300c      	adds	r0, #12
 80100dc:	f7fe fea2 	bl	800ee24 <memcpy>
 80100e0:	2201      	movs	r2, #1
 80100e2:	4629      	mov	r1, r5
 80100e4:	4620      	mov	r0, r4
 80100e6:	f000 fac9 	bl	801067c <__lshift>
 80100ea:	9b00      	ldr	r3, [sp, #0]
 80100ec:	f8cd b014 	str.w	fp, [sp, #20]
 80100f0:	f003 0301 	and.w	r3, r3, #1
 80100f4:	46b1      	mov	r9, r6
 80100f6:	9307      	str	r3, [sp, #28]
 80100f8:	4606      	mov	r6, r0
 80100fa:	4639      	mov	r1, r7
 80100fc:	9804      	ldr	r0, [sp, #16]
 80100fe:	f7ff faa7 	bl	800f650 <quorem>
 8010102:	4649      	mov	r1, r9
 8010104:	4605      	mov	r5, r0
 8010106:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801010a:	9804      	ldr	r0, [sp, #16]
 801010c:	f000 fb0a 	bl	8010724 <__mcmp>
 8010110:	4632      	mov	r2, r6
 8010112:	9000      	str	r0, [sp, #0]
 8010114:	4639      	mov	r1, r7
 8010116:	4620      	mov	r0, r4
 8010118:	f000 fb1e 	bl	8010758 <__mdiff>
 801011c:	68c3      	ldr	r3, [r0, #12]
 801011e:	4602      	mov	r2, r0
 8010120:	bb03      	cbnz	r3, 8010164 <_dtoa_r+0x9fc>
 8010122:	4601      	mov	r1, r0
 8010124:	9008      	str	r0, [sp, #32]
 8010126:	9804      	ldr	r0, [sp, #16]
 8010128:	f000 fafc 	bl	8010724 <__mcmp>
 801012c:	9a08      	ldr	r2, [sp, #32]
 801012e:	4603      	mov	r3, r0
 8010130:	4611      	mov	r1, r2
 8010132:	4620      	mov	r0, r4
 8010134:	9308      	str	r3, [sp, #32]
 8010136:	f000 f913 	bl	8010360 <_Bfree>
 801013a:	9b08      	ldr	r3, [sp, #32]
 801013c:	b9a3      	cbnz	r3, 8010168 <_dtoa_r+0xa00>
 801013e:	9a06      	ldr	r2, [sp, #24]
 8010140:	b992      	cbnz	r2, 8010168 <_dtoa_r+0xa00>
 8010142:	9a07      	ldr	r2, [sp, #28]
 8010144:	b982      	cbnz	r2, 8010168 <_dtoa_r+0xa00>
 8010146:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801014a:	d029      	beq.n	80101a0 <_dtoa_r+0xa38>
 801014c:	9b00      	ldr	r3, [sp, #0]
 801014e:	2b00      	cmp	r3, #0
 8010150:	dd01      	ble.n	8010156 <_dtoa_r+0x9ee>
 8010152:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8010156:	9b05      	ldr	r3, [sp, #20]
 8010158:	1c5d      	adds	r5, r3, #1
 801015a:	f883 8000 	strb.w	r8, [r3]
 801015e:	e782      	b.n	8010066 <_dtoa_r+0x8fe>
 8010160:	4630      	mov	r0, r6
 8010162:	e7c2      	b.n	80100ea <_dtoa_r+0x982>
 8010164:	2301      	movs	r3, #1
 8010166:	e7e3      	b.n	8010130 <_dtoa_r+0x9c8>
 8010168:	9a00      	ldr	r2, [sp, #0]
 801016a:	2a00      	cmp	r2, #0
 801016c:	db04      	blt.n	8010178 <_dtoa_r+0xa10>
 801016e:	d125      	bne.n	80101bc <_dtoa_r+0xa54>
 8010170:	9a06      	ldr	r2, [sp, #24]
 8010172:	bb1a      	cbnz	r2, 80101bc <_dtoa_r+0xa54>
 8010174:	9a07      	ldr	r2, [sp, #28]
 8010176:	bb0a      	cbnz	r2, 80101bc <_dtoa_r+0xa54>
 8010178:	2b00      	cmp	r3, #0
 801017a:	ddec      	ble.n	8010156 <_dtoa_r+0x9ee>
 801017c:	2201      	movs	r2, #1
 801017e:	9904      	ldr	r1, [sp, #16]
 8010180:	4620      	mov	r0, r4
 8010182:	f000 fa7b 	bl	801067c <__lshift>
 8010186:	4639      	mov	r1, r7
 8010188:	9004      	str	r0, [sp, #16]
 801018a:	f000 facb 	bl	8010724 <__mcmp>
 801018e:	2800      	cmp	r0, #0
 8010190:	dc03      	bgt.n	801019a <_dtoa_r+0xa32>
 8010192:	d1e0      	bne.n	8010156 <_dtoa_r+0x9ee>
 8010194:	f018 0f01 	tst.w	r8, #1
 8010198:	d0dd      	beq.n	8010156 <_dtoa_r+0x9ee>
 801019a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801019e:	d1d8      	bne.n	8010152 <_dtoa_r+0x9ea>
 80101a0:	9b05      	ldr	r3, [sp, #20]
 80101a2:	9a05      	ldr	r2, [sp, #20]
 80101a4:	1c5d      	adds	r5, r3, #1
 80101a6:	2339      	movs	r3, #57	; 0x39
 80101a8:	7013      	strb	r3, [r2, #0]
 80101aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80101ae:	2b39      	cmp	r3, #57	; 0x39
 80101b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80101b4:	d04f      	beq.n	8010256 <_dtoa_r+0xaee>
 80101b6:	3301      	adds	r3, #1
 80101b8:	7013      	strb	r3, [r2, #0]
 80101ba:	e754      	b.n	8010066 <_dtoa_r+0x8fe>
 80101bc:	9a05      	ldr	r2, [sp, #20]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	f102 0501 	add.w	r5, r2, #1
 80101c4:	dd06      	ble.n	80101d4 <_dtoa_r+0xa6c>
 80101c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80101ca:	d0e9      	beq.n	80101a0 <_dtoa_r+0xa38>
 80101cc:	f108 0801 	add.w	r8, r8, #1
 80101d0:	9b05      	ldr	r3, [sp, #20]
 80101d2:	e7c2      	b.n	801015a <_dtoa_r+0x9f2>
 80101d4:	9a02      	ldr	r2, [sp, #8]
 80101d6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80101da:	eba5 030b 	sub.w	r3, r5, fp
 80101de:	4293      	cmp	r3, r2
 80101e0:	d021      	beq.n	8010226 <_dtoa_r+0xabe>
 80101e2:	2300      	movs	r3, #0
 80101e4:	220a      	movs	r2, #10
 80101e6:	9904      	ldr	r1, [sp, #16]
 80101e8:	4620      	mov	r0, r4
 80101ea:	f000 f8d0 	bl	801038e <__multadd>
 80101ee:	45b1      	cmp	r9, r6
 80101f0:	9004      	str	r0, [sp, #16]
 80101f2:	f04f 0300 	mov.w	r3, #0
 80101f6:	f04f 020a 	mov.w	r2, #10
 80101fa:	4649      	mov	r1, r9
 80101fc:	4620      	mov	r0, r4
 80101fe:	d105      	bne.n	801020c <_dtoa_r+0xaa4>
 8010200:	f000 f8c5 	bl	801038e <__multadd>
 8010204:	4681      	mov	r9, r0
 8010206:	4606      	mov	r6, r0
 8010208:	9505      	str	r5, [sp, #20]
 801020a:	e776      	b.n	80100fa <_dtoa_r+0x992>
 801020c:	f000 f8bf 	bl	801038e <__multadd>
 8010210:	4631      	mov	r1, r6
 8010212:	4681      	mov	r9, r0
 8010214:	2300      	movs	r3, #0
 8010216:	220a      	movs	r2, #10
 8010218:	4620      	mov	r0, r4
 801021a:	f000 f8b8 	bl	801038e <__multadd>
 801021e:	4606      	mov	r6, r0
 8010220:	e7f2      	b.n	8010208 <_dtoa_r+0xaa0>
 8010222:	f04f 0900 	mov.w	r9, #0
 8010226:	2201      	movs	r2, #1
 8010228:	9904      	ldr	r1, [sp, #16]
 801022a:	4620      	mov	r0, r4
 801022c:	f000 fa26 	bl	801067c <__lshift>
 8010230:	4639      	mov	r1, r7
 8010232:	9004      	str	r0, [sp, #16]
 8010234:	f000 fa76 	bl	8010724 <__mcmp>
 8010238:	2800      	cmp	r0, #0
 801023a:	dcb6      	bgt.n	80101aa <_dtoa_r+0xa42>
 801023c:	d102      	bne.n	8010244 <_dtoa_r+0xadc>
 801023e:	f018 0f01 	tst.w	r8, #1
 8010242:	d1b2      	bne.n	80101aa <_dtoa_r+0xa42>
 8010244:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010248:	2b30      	cmp	r3, #48	; 0x30
 801024a:	f105 32ff 	add.w	r2, r5, #4294967295
 801024e:	f47f af0a 	bne.w	8010066 <_dtoa_r+0x8fe>
 8010252:	4615      	mov	r5, r2
 8010254:	e7f6      	b.n	8010244 <_dtoa_r+0xadc>
 8010256:	4593      	cmp	fp, r2
 8010258:	d105      	bne.n	8010266 <_dtoa_r+0xafe>
 801025a:	2331      	movs	r3, #49	; 0x31
 801025c:	f10a 0a01 	add.w	sl, sl, #1
 8010260:	f88b 3000 	strb.w	r3, [fp]
 8010264:	e6ff      	b.n	8010066 <_dtoa_r+0x8fe>
 8010266:	4615      	mov	r5, r2
 8010268:	e79f      	b.n	80101aa <_dtoa_r+0xa42>
 801026a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80102d0 <_dtoa_r+0xb68>
 801026e:	e007      	b.n	8010280 <_dtoa_r+0xb18>
 8010270:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010272:	f8df b060 	ldr.w	fp, [pc, #96]	; 80102d4 <_dtoa_r+0xb6c>
 8010276:	b11b      	cbz	r3, 8010280 <_dtoa_r+0xb18>
 8010278:	f10b 0308 	add.w	r3, fp, #8
 801027c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801027e:	6013      	str	r3, [r2, #0]
 8010280:	4658      	mov	r0, fp
 8010282:	b017      	add	sp, #92	; 0x5c
 8010284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010288:	9b06      	ldr	r3, [sp, #24]
 801028a:	2b01      	cmp	r3, #1
 801028c:	f77f ae35 	ble.w	800fefa <_dtoa_r+0x792>
 8010290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010292:	9307      	str	r3, [sp, #28]
 8010294:	e649      	b.n	800ff2a <_dtoa_r+0x7c2>
 8010296:	9b02      	ldr	r3, [sp, #8]
 8010298:	2b00      	cmp	r3, #0
 801029a:	dc03      	bgt.n	80102a4 <_dtoa_r+0xb3c>
 801029c:	9b06      	ldr	r3, [sp, #24]
 801029e:	2b02      	cmp	r3, #2
 80102a0:	f73f aecc 	bgt.w	801003c <_dtoa_r+0x8d4>
 80102a4:	465d      	mov	r5, fp
 80102a6:	4639      	mov	r1, r7
 80102a8:	9804      	ldr	r0, [sp, #16]
 80102aa:	f7ff f9d1 	bl	800f650 <quorem>
 80102ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80102b2:	f805 8b01 	strb.w	r8, [r5], #1
 80102b6:	9a02      	ldr	r2, [sp, #8]
 80102b8:	eba5 030b 	sub.w	r3, r5, fp
 80102bc:	429a      	cmp	r2, r3
 80102be:	ddb0      	ble.n	8010222 <_dtoa_r+0xaba>
 80102c0:	2300      	movs	r3, #0
 80102c2:	220a      	movs	r2, #10
 80102c4:	9904      	ldr	r1, [sp, #16]
 80102c6:	4620      	mov	r0, r4
 80102c8:	f000 f861 	bl	801038e <__multadd>
 80102cc:	9004      	str	r0, [sp, #16]
 80102ce:	e7ea      	b.n	80102a6 <_dtoa_r+0xb3e>
 80102d0:	08010a38 	.word	0x08010a38
 80102d4:	08010a3a 	.word	0x08010a3a

080102d8 <_localeconv_r>:
 80102d8:	4b04      	ldr	r3, [pc, #16]	; (80102ec <_localeconv_r+0x14>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	6a18      	ldr	r0, [r3, #32]
 80102de:	4b04      	ldr	r3, [pc, #16]	; (80102f0 <_localeconv_r+0x18>)
 80102e0:	2800      	cmp	r0, #0
 80102e2:	bf08      	it	eq
 80102e4:	4618      	moveq	r0, r3
 80102e6:	30f0      	adds	r0, #240	; 0xf0
 80102e8:	4770      	bx	lr
 80102ea:	bf00      	nop
 80102ec:	20000184 	.word	0x20000184
 80102f0:	200001e8 	.word	0x200001e8

080102f4 <__malloc_lock>:
 80102f4:	4770      	bx	lr

080102f6 <__malloc_unlock>:
 80102f6:	4770      	bx	lr

080102f8 <_Balloc>:
 80102f8:	b570      	push	{r4, r5, r6, lr}
 80102fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80102fc:	4604      	mov	r4, r0
 80102fe:	460e      	mov	r6, r1
 8010300:	b93d      	cbnz	r5, 8010312 <_Balloc+0x1a>
 8010302:	2010      	movs	r0, #16
 8010304:	f7fe fd7e 	bl	800ee04 <malloc>
 8010308:	6260      	str	r0, [r4, #36]	; 0x24
 801030a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801030e:	6005      	str	r5, [r0, #0]
 8010310:	60c5      	str	r5, [r0, #12]
 8010312:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010314:	68eb      	ldr	r3, [r5, #12]
 8010316:	b183      	cbz	r3, 801033a <_Balloc+0x42>
 8010318:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801031a:	68db      	ldr	r3, [r3, #12]
 801031c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010320:	b9b8      	cbnz	r0, 8010352 <_Balloc+0x5a>
 8010322:	2101      	movs	r1, #1
 8010324:	fa01 f506 	lsl.w	r5, r1, r6
 8010328:	1d6a      	adds	r2, r5, #5
 801032a:	0092      	lsls	r2, r2, #2
 801032c:	4620      	mov	r0, r4
 801032e:	f000 fabf 	bl	80108b0 <_calloc_r>
 8010332:	b160      	cbz	r0, 801034e <_Balloc+0x56>
 8010334:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8010338:	e00e      	b.n	8010358 <_Balloc+0x60>
 801033a:	2221      	movs	r2, #33	; 0x21
 801033c:	2104      	movs	r1, #4
 801033e:	4620      	mov	r0, r4
 8010340:	f000 fab6 	bl	80108b0 <_calloc_r>
 8010344:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010346:	60e8      	str	r0, [r5, #12]
 8010348:	68db      	ldr	r3, [r3, #12]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d1e4      	bne.n	8010318 <_Balloc+0x20>
 801034e:	2000      	movs	r0, #0
 8010350:	bd70      	pop	{r4, r5, r6, pc}
 8010352:	6802      	ldr	r2, [r0, #0]
 8010354:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010358:	2300      	movs	r3, #0
 801035a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801035e:	e7f7      	b.n	8010350 <_Balloc+0x58>

08010360 <_Bfree>:
 8010360:	b570      	push	{r4, r5, r6, lr}
 8010362:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010364:	4606      	mov	r6, r0
 8010366:	460d      	mov	r5, r1
 8010368:	b93c      	cbnz	r4, 801037a <_Bfree+0x1a>
 801036a:	2010      	movs	r0, #16
 801036c:	f7fe fd4a 	bl	800ee04 <malloc>
 8010370:	6270      	str	r0, [r6, #36]	; 0x24
 8010372:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010376:	6004      	str	r4, [r0, #0]
 8010378:	60c4      	str	r4, [r0, #12]
 801037a:	b13d      	cbz	r5, 801038c <_Bfree+0x2c>
 801037c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801037e:	686a      	ldr	r2, [r5, #4]
 8010380:	68db      	ldr	r3, [r3, #12]
 8010382:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010386:	6029      	str	r1, [r5, #0]
 8010388:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801038c:	bd70      	pop	{r4, r5, r6, pc}

0801038e <__multadd>:
 801038e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010392:	690d      	ldr	r5, [r1, #16]
 8010394:	461f      	mov	r7, r3
 8010396:	4606      	mov	r6, r0
 8010398:	460c      	mov	r4, r1
 801039a:	f101 0c14 	add.w	ip, r1, #20
 801039e:	2300      	movs	r3, #0
 80103a0:	f8dc 0000 	ldr.w	r0, [ip]
 80103a4:	b281      	uxth	r1, r0
 80103a6:	fb02 7101 	mla	r1, r2, r1, r7
 80103aa:	0c0f      	lsrs	r7, r1, #16
 80103ac:	0c00      	lsrs	r0, r0, #16
 80103ae:	fb02 7000 	mla	r0, r2, r0, r7
 80103b2:	b289      	uxth	r1, r1
 80103b4:	3301      	adds	r3, #1
 80103b6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80103ba:	429d      	cmp	r5, r3
 80103bc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80103c0:	f84c 1b04 	str.w	r1, [ip], #4
 80103c4:	dcec      	bgt.n	80103a0 <__multadd+0x12>
 80103c6:	b1d7      	cbz	r7, 80103fe <__multadd+0x70>
 80103c8:	68a3      	ldr	r3, [r4, #8]
 80103ca:	42ab      	cmp	r3, r5
 80103cc:	dc12      	bgt.n	80103f4 <__multadd+0x66>
 80103ce:	6861      	ldr	r1, [r4, #4]
 80103d0:	4630      	mov	r0, r6
 80103d2:	3101      	adds	r1, #1
 80103d4:	f7ff ff90 	bl	80102f8 <_Balloc>
 80103d8:	6922      	ldr	r2, [r4, #16]
 80103da:	3202      	adds	r2, #2
 80103dc:	f104 010c 	add.w	r1, r4, #12
 80103e0:	4680      	mov	r8, r0
 80103e2:	0092      	lsls	r2, r2, #2
 80103e4:	300c      	adds	r0, #12
 80103e6:	f7fe fd1d 	bl	800ee24 <memcpy>
 80103ea:	4621      	mov	r1, r4
 80103ec:	4630      	mov	r0, r6
 80103ee:	f7ff ffb7 	bl	8010360 <_Bfree>
 80103f2:	4644      	mov	r4, r8
 80103f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80103f8:	3501      	adds	r5, #1
 80103fa:	615f      	str	r7, [r3, #20]
 80103fc:	6125      	str	r5, [r4, #16]
 80103fe:	4620      	mov	r0, r4
 8010400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010404 <__hi0bits>:
 8010404:	0c02      	lsrs	r2, r0, #16
 8010406:	0412      	lsls	r2, r2, #16
 8010408:	4603      	mov	r3, r0
 801040a:	b9b2      	cbnz	r2, 801043a <__hi0bits+0x36>
 801040c:	0403      	lsls	r3, r0, #16
 801040e:	2010      	movs	r0, #16
 8010410:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010414:	bf04      	itt	eq
 8010416:	021b      	lsleq	r3, r3, #8
 8010418:	3008      	addeq	r0, #8
 801041a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801041e:	bf04      	itt	eq
 8010420:	011b      	lsleq	r3, r3, #4
 8010422:	3004      	addeq	r0, #4
 8010424:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010428:	bf04      	itt	eq
 801042a:	009b      	lsleq	r3, r3, #2
 801042c:	3002      	addeq	r0, #2
 801042e:	2b00      	cmp	r3, #0
 8010430:	db06      	blt.n	8010440 <__hi0bits+0x3c>
 8010432:	005b      	lsls	r3, r3, #1
 8010434:	d503      	bpl.n	801043e <__hi0bits+0x3a>
 8010436:	3001      	adds	r0, #1
 8010438:	4770      	bx	lr
 801043a:	2000      	movs	r0, #0
 801043c:	e7e8      	b.n	8010410 <__hi0bits+0xc>
 801043e:	2020      	movs	r0, #32
 8010440:	4770      	bx	lr

08010442 <__lo0bits>:
 8010442:	6803      	ldr	r3, [r0, #0]
 8010444:	f013 0207 	ands.w	r2, r3, #7
 8010448:	4601      	mov	r1, r0
 801044a:	d00b      	beq.n	8010464 <__lo0bits+0x22>
 801044c:	07da      	lsls	r2, r3, #31
 801044e:	d423      	bmi.n	8010498 <__lo0bits+0x56>
 8010450:	0798      	lsls	r0, r3, #30
 8010452:	bf49      	itett	mi
 8010454:	085b      	lsrmi	r3, r3, #1
 8010456:	089b      	lsrpl	r3, r3, #2
 8010458:	2001      	movmi	r0, #1
 801045a:	600b      	strmi	r3, [r1, #0]
 801045c:	bf5c      	itt	pl
 801045e:	600b      	strpl	r3, [r1, #0]
 8010460:	2002      	movpl	r0, #2
 8010462:	4770      	bx	lr
 8010464:	b298      	uxth	r0, r3
 8010466:	b9a8      	cbnz	r0, 8010494 <__lo0bits+0x52>
 8010468:	0c1b      	lsrs	r3, r3, #16
 801046a:	2010      	movs	r0, #16
 801046c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010470:	bf04      	itt	eq
 8010472:	0a1b      	lsreq	r3, r3, #8
 8010474:	3008      	addeq	r0, #8
 8010476:	071a      	lsls	r2, r3, #28
 8010478:	bf04      	itt	eq
 801047a:	091b      	lsreq	r3, r3, #4
 801047c:	3004      	addeq	r0, #4
 801047e:	079a      	lsls	r2, r3, #30
 8010480:	bf04      	itt	eq
 8010482:	089b      	lsreq	r3, r3, #2
 8010484:	3002      	addeq	r0, #2
 8010486:	07da      	lsls	r2, r3, #31
 8010488:	d402      	bmi.n	8010490 <__lo0bits+0x4e>
 801048a:	085b      	lsrs	r3, r3, #1
 801048c:	d006      	beq.n	801049c <__lo0bits+0x5a>
 801048e:	3001      	adds	r0, #1
 8010490:	600b      	str	r3, [r1, #0]
 8010492:	4770      	bx	lr
 8010494:	4610      	mov	r0, r2
 8010496:	e7e9      	b.n	801046c <__lo0bits+0x2a>
 8010498:	2000      	movs	r0, #0
 801049a:	4770      	bx	lr
 801049c:	2020      	movs	r0, #32
 801049e:	4770      	bx	lr

080104a0 <__i2b>:
 80104a0:	b510      	push	{r4, lr}
 80104a2:	460c      	mov	r4, r1
 80104a4:	2101      	movs	r1, #1
 80104a6:	f7ff ff27 	bl	80102f8 <_Balloc>
 80104aa:	2201      	movs	r2, #1
 80104ac:	6144      	str	r4, [r0, #20]
 80104ae:	6102      	str	r2, [r0, #16]
 80104b0:	bd10      	pop	{r4, pc}

080104b2 <__multiply>:
 80104b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b6:	4614      	mov	r4, r2
 80104b8:	690a      	ldr	r2, [r1, #16]
 80104ba:	6923      	ldr	r3, [r4, #16]
 80104bc:	429a      	cmp	r2, r3
 80104be:	bfb8      	it	lt
 80104c0:	460b      	movlt	r3, r1
 80104c2:	4688      	mov	r8, r1
 80104c4:	bfbc      	itt	lt
 80104c6:	46a0      	movlt	r8, r4
 80104c8:	461c      	movlt	r4, r3
 80104ca:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80104ce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80104d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80104d6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80104da:	eb07 0609 	add.w	r6, r7, r9
 80104de:	42b3      	cmp	r3, r6
 80104e0:	bfb8      	it	lt
 80104e2:	3101      	addlt	r1, #1
 80104e4:	f7ff ff08 	bl	80102f8 <_Balloc>
 80104e8:	f100 0514 	add.w	r5, r0, #20
 80104ec:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80104f0:	462b      	mov	r3, r5
 80104f2:	2200      	movs	r2, #0
 80104f4:	4573      	cmp	r3, lr
 80104f6:	d316      	bcc.n	8010526 <__multiply+0x74>
 80104f8:	f104 0214 	add.w	r2, r4, #20
 80104fc:	f108 0114 	add.w	r1, r8, #20
 8010500:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8010504:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010508:	9300      	str	r3, [sp, #0]
 801050a:	9b00      	ldr	r3, [sp, #0]
 801050c:	9201      	str	r2, [sp, #4]
 801050e:	4293      	cmp	r3, r2
 8010510:	d80c      	bhi.n	801052c <__multiply+0x7a>
 8010512:	2e00      	cmp	r6, #0
 8010514:	dd03      	ble.n	801051e <__multiply+0x6c>
 8010516:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801051a:	2b00      	cmp	r3, #0
 801051c:	d05d      	beq.n	80105da <__multiply+0x128>
 801051e:	6106      	str	r6, [r0, #16]
 8010520:	b003      	add	sp, #12
 8010522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010526:	f843 2b04 	str.w	r2, [r3], #4
 801052a:	e7e3      	b.n	80104f4 <__multiply+0x42>
 801052c:	f8b2 b000 	ldrh.w	fp, [r2]
 8010530:	f1bb 0f00 	cmp.w	fp, #0
 8010534:	d023      	beq.n	801057e <__multiply+0xcc>
 8010536:	4689      	mov	r9, r1
 8010538:	46ac      	mov	ip, r5
 801053a:	f04f 0800 	mov.w	r8, #0
 801053e:	f859 4b04 	ldr.w	r4, [r9], #4
 8010542:	f8dc a000 	ldr.w	sl, [ip]
 8010546:	b2a3      	uxth	r3, r4
 8010548:	fa1f fa8a 	uxth.w	sl, sl
 801054c:	fb0b a303 	mla	r3, fp, r3, sl
 8010550:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010554:	f8dc 4000 	ldr.w	r4, [ip]
 8010558:	4443      	add	r3, r8
 801055a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801055e:	fb0b 840a 	mla	r4, fp, sl, r8
 8010562:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8010566:	46e2      	mov	sl, ip
 8010568:	b29b      	uxth	r3, r3
 801056a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801056e:	454f      	cmp	r7, r9
 8010570:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010574:	f84a 3b04 	str.w	r3, [sl], #4
 8010578:	d82b      	bhi.n	80105d2 <__multiply+0x120>
 801057a:	f8cc 8004 	str.w	r8, [ip, #4]
 801057e:	9b01      	ldr	r3, [sp, #4]
 8010580:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8010584:	3204      	adds	r2, #4
 8010586:	f1ba 0f00 	cmp.w	sl, #0
 801058a:	d020      	beq.n	80105ce <__multiply+0x11c>
 801058c:	682b      	ldr	r3, [r5, #0]
 801058e:	4689      	mov	r9, r1
 8010590:	46a8      	mov	r8, r5
 8010592:	f04f 0b00 	mov.w	fp, #0
 8010596:	f8b9 c000 	ldrh.w	ip, [r9]
 801059a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801059e:	fb0a 440c 	mla	r4, sl, ip, r4
 80105a2:	445c      	add	r4, fp
 80105a4:	46c4      	mov	ip, r8
 80105a6:	b29b      	uxth	r3, r3
 80105a8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80105ac:	f84c 3b04 	str.w	r3, [ip], #4
 80105b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80105b4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80105b8:	0c1b      	lsrs	r3, r3, #16
 80105ba:	fb0a b303 	mla	r3, sl, r3, fp
 80105be:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80105c2:	454f      	cmp	r7, r9
 80105c4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80105c8:	d805      	bhi.n	80105d6 <__multiply+0x124>
 80105ca:	f8c8 3004 	str.w	r3, [r8, #4]
 80105ce:	3504      	adds	r5, #4
 80105d0:	e79b      	b.n	801050a <__multiply+0x58>
 80105d2:	46d4      	mov	ip, sl
 80105d4:	e7b3      	b.n	801053e <__multiply+0x8c>
 80105d6:	46e0      	mov	r8, ip
 80105d8:	e7dd      	b.n	8010596 <__multiply+0xe4>
 80105da:	3e01      	subs	r6, #1
 80105dc:	e799      	b.n	8010512 <__multiply+0x60>
	...

080105e0 <__pow5mult>:
 80105e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105e4:	4615      	mov	r5, r2
 80105e6:	f012 0203 	ands.w	r2, r2, #3
 80105ea:	4606      	mov	r6, r0
 80105ec:	460f      	mov	r7, r1
 80105ee:	d007      	beq.n	8010600 <__pow5mult+0x20>
 80105f0:	3a01      	subs	r2, #1
 80105f2:	4c21      	ldr	r4, [pc, #132]	; (8010678 <__pow5mult+0x98>)
 80105f4:	2300      	movs	r3, #0
 80105f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80105fa:	f7ff fec8 	bl	801038e <__multadd>
 80105fe:	4607      	mov	r7, r0
 8010600:	10ad      	asrs	r5, r5, #2
 8010602:	d035      	beq.n	8010670 <__pow5mult+0x90>
 8010604:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010606:	b93c      	cbnz	r4, 8010618 <__pow5mult+0x38>
 8010608:	2010      	movs	r0, #16
 801060a:	f7fe fbfb 	bl	800ee04 <malloc>
 801060e:	6270      	str	r0, [r6, #36]	; 0x24
 8010610:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010614:	6004      	str	r4, [r0, #0]
 8010616:	60c4      	str	r4, [r0, #12]
 8010618:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801061c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010620:	b94c      	cbnz	r4, 8010636 <__pow5mult+0x56>
 8010622:	f240 2171 	movw	r1, #625	; 0x271
 8010626:	4630      	mov	r0, r6
 8010628:	f7ff ff3a 	bl	80104a0 <__i2b>
 801062c:	2300      	movs	r3, #0
 801062e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010632:	4604      	mov	r4, r0
 8010634:	6003      	str	r3, [r0, #0]
 8010636:	f04f 0800 	mov.w	r8, #0
 801063a:	07eb      	lsls	r3, r5, #31
 801063c:	d50a      	bpl.n	8010654 <__pow5mult+0x74>
 801063e:	4639      	mov	r1, r7
 8010640:	4622      	mov	r2, r4
 8010642:	4630      	mov	r0, r6
 8010644:	f7ff ff35 	bl	80104b2 <__multiply>
 8010648:	4639      	mov	r1, r7
 801064a:	4681      	mov	r9, r0
 801064c:	4630      	mov	r0, r6
 801064e:	f7ff fe87 	bl	8010360 <_Bfree>
 8010652:	464f      	mov	r7, r9
 8010654:	106d      	asrs	r5, r5, #1
 8010656:	d00b      	beq.n	8010670 <__pow5mult+0x90>
 8010658:	6820      	ldr	r0, [r4, #0]
 801065a:	b938      	cbnz	r0, 801066c <__pow5mult+0x8c>
 801065c:	4622      	mov	r2, r4
 801065e:	4621      	mov	r1, r4
 8010660:	4630      	mov	r0, r6
 8010662:	f7ff ff26 	bl	80104b2 <__multiply>
 8010666:	6020      	str	r0, [r4, #0]
 8010668:	f8c0 8000 	str.w	r8, [r0]
 801066c:	4604      	mov	r4, r0
 801066e:	e7e4      	b.n	801063a <__pow5mult+0x5a>
 8010670:	4638      	mov	r0, r7
 8010672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010676:	bf00      	nop
 8010678:	08010b38 	.word	0x08010b38

0801067c <__lshift>:
 801067c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010680:	460c      	mov	r4, r1
 8010682:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010686:	6923      	ldr	r3, [r4, #16]
 8010688:	6849      	ldr	r1, [r1, #4]
 801068a:	eb0a 0903 	add.w	r9, sl, r3
 801068e:	68a3      	ldr	r3, [r4, #8]
 8010690:	4607      	mov	r7, r0
 8010692:	4616      	mov	r6, r2
 8010694:	f109 0501 	add.w	r5, r9, #1
 8010698:	42ab      	cmp	r3, r5
 801069a:	db32      	blt.n	8010702 <__lshift+0x86>
 801069c:	4638      	mov	r0, r7
 801069e:	f7ff fe2b 	bl	80102f8 <_Balloc>
 80106a2:	2300      	movs	r3, #0
 80106a4:	4680      	mov	r8, r0
 80106a6:	f100 0114 	add.w	r1, r0, #20
 80106aa:	461a      	mov	r2, r3
 80106ac:	4553      	cmp	r3, sl
 80106ae:	db2b      	blt.n	8010708 <__lshift+0x8c>
 80106b0:	6920      	ldr	r0, [r4, #16]
 80106b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80106b6:	f104 0314 	add.w	r3, r4, #20
 80106ba:	f016 021f 	ands.w	r2, r6, #31
 80106be:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80106c2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80106c6:	d025      	beq.n	8010714 <__lshift+0x98>
 80106c8:	f1c2 0e20 	rsb	lr, r2, #32
 80106cc:	2000      	movs	r0, #0
 80106ce:	681e      	ldr	r6, [r3, #0]
 80106d0:	468a      	mov	sl, r1
 80106d2:	4096      	lsls	r6, r2
 80106d4:	4330      	orrs	r0, r6
 80106d6:	f84a 0b04 	str.w	r0, [sl], #4
 80106da:	f853 0b04 	ldr.w	r0, [r3], #4
 80106de:	459c      	cmp	ip, r3
 80106e0:	fa20 f00e 	lsr.w	r0, r0, lr
 80106e4:	d814      	bhi.n	8010710 <__lshift+0x94>
 80106e6:	6048      	str	r0, [r1, #4]
 80106e8:	b108      	cbz	r0, 80106ee <__lshift+0x72>
 80106ea:	f109 0502 	add.w	r5, r9, #2
 80106ee:	3d01      	subs	r5, #1
 80106f0:	4638      	mov	r0, r7
 80106f2:	f8c8 5010 	str.w	r5, [r8, #16]
 80106f6:	4621      	mov	r1, r4
 80106f8:	f7ff fe32 	bl	8010360 <_Bfree>
 80106fc:	4640      	mov	r0, r8
 80106fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010702:	3101      	adds	r1, #1
 8010704:	005b      	lsls	r3, r3, #1
 8010706:	e7c7      	b.n	8010698 <__lshift+0x1c>
 8010708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801070c:	3301      	adds	r3, #1
 801070e:	e7cd      	b.n	80106ac <__lshift+0x30>
 8010710:	4651      	mov	r1, sl
 8010712:	e7dc      	b.n	80106ce <__lshift+0x52>
 8010714:	3904      	subs	r1, #4
 8010716:	f853 2b04 	ldr.w	r2, [r3], #4
 801071a:	f841 2f04 	str.w	r2, [r1, #4]!
 801071e:	459c      	cmp	ip, r3
 8010720:	d8f9      	bhi.n	8010716 <__lshift+0x9a>
 8010722:	e7e4      	b.n	80106ee <__lshift+0x72>

08010724 <__mcmp>:
 8010724:	6903      	ldr	r3, [r0, #16]
 8010726:	690a      	ldr	r2, [r1, #16]
 8010728:	1a9b      	subs	r3, r3, r2
 801072a:	b530      	push	{r4, r5, lr}
 801072c:	d10c      	bne.n	8010748 <__mcmp+0x24>
 801072e:	0092      	lsls	r2, r2, #2
 8010730:	3014      	adds	r0, #20
 8010732:	3114      	adds	r1, #20
 8010734:	1884      	adds	r4, r0, r2
 8010736:	4411      	add	r1, r2
 8010738:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801073c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010740:	4295      	cmp	r5, r2
 8010742:	d003      	beq.n	801074c <__mcmp+0x28>
 8010744:	d305      	bcc.n	8010752 <__mcmp+0x2e>
 8010746:	2301      	movs	r3, #1
 8010748:	4618      	mov	r0, r3
 801074a:	bd30      	pop	{r4, r5, pc}
 801074c:	42a0      	cmp	r0, r4
 801074e:	d3f3      	bcc.n	8010738 <__mcmp+0x14>
 8010750:	e7fa      	b.n	8010748 <__mcmp+0x24>
 8010752:	f04f 33ff 	mov.w	r3, #4294967295
 8010756:	e7f7      	b.n	8010748 <__mcmp+0x24>

08010758 <__mdiff>:
 8010758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801075c:	460d      	mov	r5, r1
 801075e:	4607      	mov	r7, r0
 8010760:	4611      	mov	r1, r2
 8010762:	4628      	mov	r0, r5
 8010764:	4614      	mov	r4, r2
 8010766:	f7ff ffdd 	bl	8010724 <__mcmp>
 801076a:	1e06      	subs	r6, r0, #0
 801076c:	d108      	bne.n	8010780 <__mdiff+0x28>
 801076e:	4631      	mov	r1, r6
 8010770:	4638      	mov	r0, r7
 8010772:	f7ff fdc1 	bl	80102f8 <_Balloc>
 8010776:	2301      	movs	r3, #1
 8010778:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801077c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010780:	bfa4      	itt	ge
 8010782:	4623      	movge	r3, r4
 8010784:	462c      	movge	r4, r5
 8010786:	4638      	mov	r0, r7
 8010788:	6861      	ldr	r1, [r4, #4]
 801078a:	bfa6      	itte	ge
 801078c:	461d      	movge	r5, r3
 801078e:	2600      	movge	r6, #0
 8010790:	2601      	movlt	r6, #1
 8010792:	f7ff fdb1 	bl	80102f8 <_Balloc>
 8010796:	692b      	ldr	r3, [r5, #16]
 8010798:	60c6      	str	r6, [r0, #12]
 801079a:	6926      	ldr	r6, [r4, #16]
 801079c:	f105 0914 	add.w	r9, r5, #20
 80107a0:	f104 0214 	add.w	r2, r4, #20
 80107a4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80107a8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80107ac:	f100 0514 	add.w	r5, r0, #20
 80107b0:	f04f 0e00 	mov.w	lr, #0
 80107b4:	f852 ab04 	ldr.w	sl, [r2], #4
 80107b8:	f859 4b04 	ldr.w	r4, [r9], #4
 80107bc:	fa1e f18a 	uxtah	r1, lr, sl
 80107c0:	b2a3      	uxth	r3, r4
 80107c2:	1ac9      	subs	r1, r1, r3
 80107c4:	0c23      	lsrs	r3, r4, #16
 80107c6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80107ca:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80107ce:	b289      	uxth	r1, r1
 80107d0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80107d4:	45c8      	cmp	r8, r9
 80107d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80107da:	4694      	mov	ip, r2
 80107dc:	f845 3b04 	str.w	r3, [r5], #4
 80107e0:	d8e8      	bhi.n	80107b4 <__mdiff+0x5c>
 80107e2:	45bc      	cmp	ip, r7
 80107e4:	d304      	bcc.n	80107f0 <__mdiff+0x98>
 80107e6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80107ea:	b183      	cbz	r3, 801080e <__mdiff+0xb6>
 80107ec:	6106      	str	r6, [r0, #16]
 80107ee:	e7c5      	b.n	801077c <__mdiff+0x24>
 80107f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80107f4:	fa1e f381 	uxtah	r3, lr, r1
 80107f8:	141a      	asrs	r2, r3, #16
 80107fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80107fe:	b29b      	uxth	r3, r3
 8010800:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010804:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010808:	f845 3b04 	str.w	r3, [r5], #4
 801080c:	e7e9      	b.n	80107e2 <__mdiff+0x8a>
 801080e:	3e01      	subs	r6, #1
 8010810:	e7e9      	b.n	80107e6 <__mdiff+0x8e>

08010812 <__d2b>:
 8010812:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010816:	460e      	mov	r6, r1
 8010818:	2101      	movs	r1, #1
 801081a:	ec59 8b10 	vmov	r8, r9, d0
 801081e:	4615      	mov	r5, r2
 8010820:	f7ff fd6a 	bl	80102f8 <_Balloc>
 8010824:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010828:	4607      	mov	r7, r0
 801082a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801082e:	bb34      	cbnz	r4, 801087e <__d2b+0x6c>
 8010830:	9301      	str	r3, [sp, #4]
 8010832:	f1b8 0300 	subs.w	r3, r8, #0
 8010836:	d027      	beq.n	8010888 <__d2b+0x76>
 8010838:	a802      	add	r0, sp, #8
 801083a:	f840 3d08 	str.w	r3, [r0, #-8]!
 801083e:	f7ff fe00 	bl	8010442 <__lo0bits>
 8010842:	9900      	ldr	r1, [sp, #0]
 8010844:	b1f0      	cbz	r0, 8010884 <__d2b+0x72>
 8010846:	9a01      	ldr	r2, [sp, #4]
 8010848:	f1c0 0320 	rsb	r3, r0, #32
 801084c:	fa02 f303 	lsl.w	r3, r2, r3
 8010850:	430b      	orrs	r3, r1
 8010852:	40c2      	lsrs	r2, r0
 8010854:	617b      	str	r3, [r7, #20]
 8010856:	9201      	str	r2, [sp, #4]
 8010858:	9b01      	ldr	r3, [sp, #4]
 801085a:	61bb      	str	r3, [r7, #24]
 801085c:	2b00      	cmp	r3, #0
 801085e:	bf14      	ite	ne
 8010860:	2102      	movne	r1, #2
 8010862:	2101      	moveq	r1, #1
 8010864:	6139      	str	r1, [r7, #16]
 8010866:	b1c4      	cbz	r4, 801089a <__d2b+0x88>
 8010868:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801086c:	4404      	add	r4, r0
 801086e:	6034      	str	r4, [r6, #0]
 8010870:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010874:	6028      	str	r0, [r5, #0]
 8010876:	4638      	mov	r0, r7
 8010878:	b003      	add	sp, #12
 801087a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801087e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010882:	e7d5      	b.n	8010830 <__d2b+0x1e>
 8010884:	6179      	str	r1, [r7, #20]
 8010886:	e7e7      	b.n	8010858 <__d2b+0x46>
 8010888:	a801      	add	r0, sp, #4
 801088a:	f7ff fdda 	bl	8010442 <__lo0bits>
 801088e:	9b01      	ldr	r3, [sp, #4]
 8010890:	617b      	str	r3, [r7, #20]
 8010892:	2101      	movs	r1, #1
 8010894:	6139      	str	r1, [r7, #16]
 8010896:	3020      	adds	r0, #32
 8010898:	e7e5      	b.n	8010866 <__d2b+0x54>
 801089a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801089e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80108a2:	6030      	str	r0, [r6, #0]
 80108a4:	6918      	ldr	r0, [r3, #16]
 80108a6:	f7ff fdad 	bl	8010404 <__hi0bits>
 80108aa:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80108ae:	e7e1      	b.n	8010874 <__d2b+0x62>

080108b0 <_calloc_r>:
 80108b0:	b538      	push	{r3, r4, r5, lr}
 80108b2:	fb02 f401 	mul.w	r4, r2, r1
 80108b6:	4621      	mov	r1, r4
 80108b8:	f7fe fb16 	bl	800eee8 <_malloc_r>
 80108bc:	4605      	mov	r5, r0
 80108be:	b118      	cbz	r0, 80108c8 <_calloc_r+0x18>
 80108c0:	4622      	mov	r2, r4
 80108c2:	2100      	movs	r1, #0
 80108c4:	f7fe fab9 	bl	800ee3a <memset>
 80108c8:	4628      	mov	r0, r5
 80108ca:	bd38      	pop	{r3, r4, r5, pc}

080108cc <__ascii_mbtowc>:
 80108cc:	b082      	sub	sp, #8
 80108ce:	b901      	cbnz	r1, 80108d2 <__ascii_mbtowc+0x6>
 80108d0:	a901      	add	r1, sp, #4
 80108d2:	b142      	cbz	r2, 80108e6 <__ascii_mbtowc+0x1a>
 80108d4:	b14b      	cbz	r3, 80108ea <__ascii_mbtowc+0x1e>
 80108d6:	7813      	ldrb	r3, [r2, #0]
 80108d8:	600b      	str	r3, [r1, #0]
 80108da:	7812      	ldrb	r2, [r2, #0]
 80108dc:	1c10      	adds	r0, r2, #0
 80108de:	bf18      	it	ne
 80108e0:	2001      	movne	r0, #1
 80108e2:	b002      	add	sp, #8
 80108e4:	4770      	bx	lr
 80108e6:	4610      	mov	r0, r2
 80108e8:	e7fb      	b.n	80108e2 <__ascii_mbtowc+0x16>
 80108ea:	f06f 0001 	mvn.w	r0, #1
 80108ee:	e7f8      	b.n	80108e2 <__ascii_mbtowc+0x16>

080108f0 <__ascii_wctomb>:
 80108f0:	b149      	cbz	r1, 8010906 <__ascii_wctomb+0x16>
 80108f2:	2aff      	cmp	r2, #255	; 0xff
 80108f4:	bf85      	ittet	hi
 80108f6:	238a      	movhi	r3, #138	; 0x8a
 80108f8:	6003      	strhi	r3, [r0, #0]
 80108fa:	700a      	strbls	r2, [r1, #0]
 80108fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8010900:	bf98      	it	ls
 8010902:	2001      	movls	r0, #1
 8010904:	4770      	bx	lr
 8010906:	4608      	mov	r0, r1
 8010908:	4770      	bx	lr
	...

0801090c <_init>:
 801090c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801090e:	bf00      	nop
 8010910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010912:	bc08      	pop	{r3}
 8010914:	469e      	mov	lr, r3
 8010916:	4770      	bx	lr

08010918 <_fini>:
 8010918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801091a:	bf00      	nop
 801091c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801091e:	bc08      	pop	{r3}
 8010920:	469e      	mov	lr, r3
 8010922:	4770      	bx	lr
